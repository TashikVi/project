"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
/*! choices.js v9.0.1 | Â© 2019 Josh Johnson | https://github.com/jshjohnson/Choices#readme */
window.Choices = function (e) {
  var t = {};
  function i(n) {
    if (t[n]) return t[n].exports;
    var r = t[n] = {
      i: n,
      l: !1,
      exports: {}
    };
    return e[n].call(r.exports, r, r.exports, i), r.l = !0, r.exports;
  }
  return i.m = e, i.c = t, i.d = function (e, t, n) {
    i.o(e, t) || Object.defineProperty(e, t, {
      enumerable: !0,
      get: n
    });
  }, i.r = function (e) {
    "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
      value: "Module"
    }), Object.defineProperty(e, "__esModule", {
      value: !0
    });
  }, i.t = function (e, t) {
    if (1 & t && (e = i(e)), 8 & t) return e;
    if (4 & t && "object" == _typeof(e) && e && e.__esModule) return e;
    var n = Object.create(null);
    if (i.r(n), Object.defineProperty(n, "default", {
      enumerable: !0,
      value: e
    }), 2 & t && "string" != typeof e) for (var r in e) i.d(n, r, function (t) {
      return e[t];
    }.bind(null, r));
    return n;
  }, i.n = function (e) {
    var t = e && e.__esModule ? function () {
      return e["default"];
    } : function () {
      return e;
    };
    return i.d(t, "a", t), t;
  }, i.o = function (e, t) {
    return Object.prototype.hasOwnProperty.call(e, t);
  }, i.p = "/public/assets/scripts/", i(i.s = 7);
}([function (e, t, i) {
  "use strict";

  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var n = i(1);
  t.DEFAULT_CLASSNAMES = {
    containerOuter: "choices",
    containerInner: "choices__inner",
    input: "choices__input",
    inputCloned: "choices__input--cloned",
    list: "choices__list",
    listItems: "choices__list--multiple",
    listSingle: "choices__list--single",
    listDropdown: "choices__list--dropdown",
    item: "choices__item",
    itemSelectable: "choices__item--selectable",
    itemDisabled: "choices__item--disabled",
    itemChoice: "choices__item--choice",
    placeholder: "choices__placeholder",
    group: "choices__group",
    groupHeading: "choices__heading",
    button: "choices__button",
    activeState: "is-active",
    focusState: "is-focused",
    openState: "is-open",
    disabledState: "is-disabled",
    highlightedState: "is-highlighted",
    selectedState: "is-selected",
    flippedState: "is-flipped",
    loadingState: "is-loading",
    noResults: "has-no-results",
    noChoices: "has-no-choices"
  }, t.DEFAULT_CONFIG = {
    items: [],
    choices: [],
    silent: !1,
    renderChoiceLimit: -1,
    maxItemCount: -1,
    addItems: !0,
    addItemFilter: null,
    removeItems: !0,
    removeItemButton: !1,
    editItems: !1,
    duplicateItemsAllowed: !0,
    delimiter: ",",
    paste: !0,
    searchEnabled: !0,
    searchChoices: !0,
    searchFloor: 1,
    searchResultLimit: 4,
    searchFields: ["label", "value"],
    position: "auto",
    resetScrollPosition: !0,
    shouldSort: !0,
    shouldSortItems: !1,
    sorter: n.sortByAlpha,
    placeholder: !0,
    placeholderValue: null,
    searchPlaceholderValue: null,
    prependValue: null,
    appendValue: null,
    renderSelectedChoices: "auto",
    loadingText: "Loading...",
    noResultsText: "No results found",
    noChoicesText: "No choices to choose from",
    itemSelectText: "Press to select",
    uniqueItemText: "Only unique values can be added",
    customAddItemText: "Only values matching specific conditions can be added",
    addItemText: function addItemText(e) {
      return 'Press Enter to add <b>"' + n.sanitise(e) + '"</b>';
    },
    maxItemText: function maxItemText(e) {
      return "Only " + e + " values can be added";
    },
    valueComparer: function valueComparer(e, t) {
      return e === t;
    },
    fuseOptions: {
      includeScore: !0
    },
    callbackOnInit: null,
    callbackOnCreateTemplates: null,
    classNames: t.DEFAULT_CLASSNAMES
  }, t.EVENTS = {
    showDropdown: "showDropdown",
    hideDropdown: "hideDropdown",
    change: "change",
    choice: "choice",
    search: "search",
    addItem: "addItem",
    removeItem: "removeItem",
    highlightItem: "highlightItem",
    highlightChoice: "highlightChoice",
    unhighlightItem: "unhighlightItem"
  }, t.ACTION_TYPES = {
    ADD_CHOICE: "ADD_CHOICE",
    FILTER_CHOICES: "FILTER_CHOICES",
    ACTIVATE_CHOICES: "ACTIVATE_CHOICES",
    CLEAR_CHOICES: "CLEAR_CHOICES",
    ADD_GROUP: "ADD_GROUP",
    ADD_ITEM: "ADD_ITEM",
    REMOVE_ITEM: "REMOVE_ITEM",
    HIGHLIGHT_ITEM: "HIGHLIGHT_ITEM",
    CLEAR_ALL: "CLEAR_ALL",
    RESET_TO: "RESET_TO",
    SET_IS_LOADING: "SET_IS_LOADING"
  }, t.KEY_CODES = {
    BACK_KEY: 46,
    DELETE_KEY: 8,
    ENTER_KEY: 13,
    A_KEY: 65,
    ESC_KEY: 27,
    UP_KEY: 38,
    DOWN_KEY: 40,
    PAGE_UP_KEY: 33,
    PAGE_DOWN_KEY: 34
  }, t.TEXT_TYPE = "text", t.SELECT_ONE_TYPE = "select-one", t.SELECT_MULTIPLE_TYPE = "select-multiple", t.SCROLLING_SPEED = 4;
}, function (e, t, i) {
  "use strict";

  var n;
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.getRandomNumber = function (e, t) {
    return Math.floor(Math.random() * (t - e) + e);
  }, t.generateChars = function (e) {
    return Array.from({
      length: e
    }, function () {
      return t.getRandomNumber(0, 36).toString(36);
    }).join("");
  }, t.generateId = function (e, i) {
    var n = e.id || e.name && e.name + "-" + t.generateChars(2) || t.generateChars(4);
    return n = i + "-" + (n = n.replace(/(:|\.|\[|\]|,)/g, ""));
  }, t.getType = function (e) {
    return Object.prototype.toString.call(e).slice(8, -1);
  }, t.isType = function (e, i) {
    return null != i && t.getType(i) === e;
  }, t.wrap = function (e, t) {
    return void 0 === t && (t = document.createElement("div")), e.nextSibling ? e.parentNode && e.parentNode.insertBefore(t, e.nextSibling) : e.parentNode && e.parentNode.appendChild(t), t.appendChild(e);
  }, t.getAdjacentEl = function (e, t, i) {
    void 0 === i && (i = 1);
    for (var n = (i > 0 ? "next" : "previous") + "ElementSibling", r = e[n]; r;) {
      if (r.matches(t)) return r;
      r = r[n];
    }
    return r;
  }, t.isScrolledIntoView = function (e, t, i) {
    return void 0 === i && (i = 1), !!e && (i > 0 ? t.scrollTop + t.offsetHeight >= e.offsetTop + e.offsetHeight : e.offsetTop >= t.scrollTop);
  }, t.sanitise = function (e) {
    return "string" != typeof e ? e : e.replace(/&/g, "&amp;").replace(/>/g, "&rt;").replace(/</g, "&lt;").replace(/"/g, "&quot;");
  }, t.strToEl = (n = document.createElement("div"), function (e) {
    var t = e.trim();
    n.innerHTML = t;
    for (var i = n.children[0]; n.firstChild;) n.removeChild(n.firstChild);
    return i;
  }), t.sortByAlpha = function (e, t) {
    var i = e.value,
      n = e.label,
      r = void 0 === n ? i : n,
      o = t.value,
      s = t.label,
      a = void 0 === s ? o : s;
    return r.localeCompare(a, [], {
      sensitivity: "base",
      ignorePunctuation: !0,
      numeric: !0
    });
  }, t.sortByScore = function (e, t) {
    var i = e.score,
      n = void 0 === i ? 0 : i,
      r = t.score;
    return n - (void 0 === r ? 0 : r);
  }, t.dispatchEvent = function (e, t, i) {
    void 0 === i && (i = null);
    var n = new CustomEvent(t, {
      detail: i,
      bubbles: !0,
      cancelable: !0
    });
    return e.dispatchEvent(n);
  }, t.existsInArray = function (e, t, i) {
    return void 0 === i && (i = "value"), e.some(function (e) {
      return "string" == typeof t ? e[i] === t.trim() : e[i] === t;
    });
  }, t.cloneObject = function (e) {
    return JSON.parse(JSON.stringify(e));
  }, t.diff = function (e, t) {
    var i = Object.keys(e).sort(),
      n = Object.keys(t).sort();
    return i.filter(function (e) {
      return n.indexOf(e) < 0;
    });
  };
}, function (e, t, i) {
  "use strict";

  (function (e, n) {
    var r,
      o = i(6);
    r = "undefined" != typeof self ? self : "undefined" != typeof window ? window : void 0 !== e ? e : n;
    var s = Object(o.a)(r);
    t.a = s;
  }).call(this, i(12), i(13)(e));
}, function (e, t, i) {
  "use strict";

  i.r(t), i.d(t, "__DO_NOT_USE__ActionTypes", function () {
    return o;
  }), i.d(t, "applyMiddleware", function () {
    return v;
  }), i.d(t, "bindActionCreators", function () {
    return h;
  }), i.d(t, "combineReducers", function () {
    return l;
  }), i.d(t, "compose", function () {
    return m;
  }), i.d(t, "createStore", function () {
    return a;
  });
  var n = i(2),
    r = function r() {
      return Math.random().toString(36).substring(7).split("").join(".");
    },
    o = {
      INIT: "@@redux/INIT" + r(),
      REPLACE: "@@redux/REPLACE" + r(),
      PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
        return "@@redux/PROBE_UNKNOWN_ACTION" + r();
      }
    };
  function s(e) {
    if ("object" != _typeof(e) || null === e) return !1;
    for (var t = e; null !== Object.getPrototypeOf(t);) t = Object.getPrototypeOf(t);
    return Object.getPrototypeOf(e) === t;
  }
  function a(e, t, i) {
    var r;
    if ("function" == typeof t && "function" == typeof i || "function" == typeof i && "function" == typeof arguments[3]) throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");
    if ("function" == typeof t && void 0 === i && (i = t, t = void 0), void 0 !== i) {
      if ("function" != typeof i) throw new Error("Expected the enhancer to be a function.");
      return i(a)(e, t);
    }
    if ("function" != typeof e) throw new Error("Expected the reducer to be a function.");
    var c = e,
      l = t,
      u = [],
      h = u,
      d = !1;
    function p() {
      h === u && (h = u.slice());
    }
    function f() {
      if (d) throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
      return l;
    }
    function m(e) {
      if ("function" != typeof e) throw new Error("Expected the listener to be a function.");
      if (d) throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");
      var t = !0;
      return p(), h.push(e), function () {
        if (t) {
          if (d) throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");
          t = !1, p();
          var i = h.indexOf(e);
          h.splice(i, 1);
        }
      };
    }
    function v(e) {
      if (!s(e)) throw new Error("Actions must be plain objects. Use custom middleware for async actions.");
      if (void 0 === e.type) throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');
      if (d) throw new Error("Reducers may not dispatch actions.");
      try {
        d = !0, l = c(l, e);
      } finally {
        d = !1;
      }
      for (var t = u = h, i = 0; i < t.length; i++) {
        (0, t[i])();
      }
      return e;
    }
    return v({
      type: o.INIT
    }), (r = {
      dispatch: v,
      subscribe: m,
      getState: f,
      replaceReducer: function replaceReducer(e) {
        if ("function" != typeof e) throw new Error("Expected the nextReducer to be a function.");
        c = e, v({
          type: o.REPLACE
        });
      }
    })[n.a] = function () {
      var e,
        t = m;
      return (e = {
        subscribe: function subscribe(e) {
          if ("object" != _typeof(e) || null === e) throw new TypeError("Expected the observer to be an object.");
          function i() {
            e.next && e.next(f());
          }
          return i(), {
            unsubscribe: t(i)
          };
        }
      })[n.a] = function () {
        return this;
      }, e;
    }, r;
  }
  function c(e, t) {
    var i = t && t.type;
    return "Given " + (i && 'action "' + String(i) + '"' || "an action") + ', reducer "' + e + '" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.';
  }
  function l(e) {
    for (var t = Object.keys(e), i = {}, n = 0; n < t.length; n++) {
      var r = t[n];
      0, "function" == typeof e[r] && (i[r] = e[r]);
    }
    var s,
      a = Object.keys(i);
    try {
      !function (e) {
        Object.keys(e).forEach(function (t) {
          var i = e[t];
          if (void 0 === i(void 0, {
            type: o.INIT
          })) throw new Error('Reducer "' + t + "\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");
          if (void 0 === i(void 0, {
            type: o.PROBE_UNKNOWN_ACTION()
          })) throw new Error('Reducer "' + t + "\" returned undefined when probed with a random type. Don't try to handle " + o.INIT + ' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.');
        });
      }(i);
    } catch (e) {
      s = e;
    }
    return function (e, t) {
      if (void 0 === e && (e = {}), s) throw s;
      for (var n = !1, r = {}, o = 0; o < a.length; o++) {
        var l = a[o],
          u = i[l],
          h = e[l],
          d = u(h, t);
        if (void 0 === d) {
          var p = c(l, t);
          throw new Error(p);
        }
        r[l] = d, n = n || d !== h;
      }
      return n ? r : e;
    };
  }
  function u(e, t) {
    return function () {
      return t(e.apply(this, arguments));
    };
  }
  function h(e, t) {
    if ("function" == typeof e) return u(e, t);
    if ("object" != _typeof(e) || null === e) throw new Error("bindActionCreators expected an object or a function, instead received " + (null === e ? "null" : _typeof(e)) + '. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
    var i = {};
    for (var n in e) {
      var r = e[n];
      "function" == typeof r && (i[n] = u(r, t));
    }
    return i;
  }
  function d(e, t, i) {
    return t in e ? Object.defineProperty(e, t, {
      value: i,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[t] = i, e;
  }
  function p(e, t) {
    var i = Object.keys(e);
    return Object.getOwnPropertySymbols && i.push.apply(i, Object.getOwnPropertySymbols(e)), t && (i = i.filter(function (t) {
      return Object.getOwnPropertyDescriptor(e, t).enumerable;
    })), i;
  }
  function f(e) {
    for (var t = 1; t < arguments.length; t++) {
      var i = null != arguments[t] ? arguments[t] : {};
      t % 2 ? p(i, !0).forEach(function (t) {
        d(e, t, i[t]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(i)) : p(i).forEach(function (t) {
        Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(i, t));
      });
    }
    return e;
  }
  function m() {
    for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) t[i] = arguments[i];
    return 0 === t.length ? function (e) {
      return e;
    } : 1 === t.length ? t[0] : t.reduce(function (e, t) {
      return function () {
        return e(t.apply(void 0, arguments));
      };
    });
  }
  function v() {
    for (var e = arguments.length, t = new Array(e), i = 0; i < e; i++) t[i] = arguments[i];
    return function (e) {
      return function () {
        var i = e.apply(void 0, arguments),
          n = function n() {
            throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
          },
          r = {
            getState: i.getState,
            dispatch: function dispatch() {
              return n.apply(void 0, arguments);
            }
          },
          o = t.map(function (e) {
            return e(r);
          });
        return f({}, i, {
          dispatch: n = m.apply(void 0, o)(i.dispatch)
        });
      };
    };
  }
}, function (e, t, i) {
  "use strict";

  var n = this && this.__importDefault || function (e) {
    return e && e.__esModule ? e : {
      "default": e
    };
  };
  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var r = i(3),
    o = n(i(14)),
    s = n(i(15)),
    a = n(i(16)),
    c = n(i(17)),
    l = i(1);
  t.defaultState = {
    groups: [],
    items: [],
    choices: [],
    loading: !1
  };
  var u = r.combineReducers({
    items: o["default"],
    groups: s["default"],
    choices: a["default"],
    loading: c["default"]
  });
  t["default"] = function (e, i) {
    var n = e;
    if ("CLEAR_ALL" === i.type) n = t.defaultState;else if ("RESET_TO" === i.type) return l.cloneObject(i.state);
    return u(n, i);
  };
}, function (e, t, i) {
  "use strict";

  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var n = i(1),
    r = function () {
      function e(e) {
        var t = e.element,
          i = e.classNames;
        if (this.element = t, this.classNames = i, !(t instanceof HTMLInputElement || t instanceof HTMLSelectElement)) throw new TypeError("Invalid element passed");
        this.isDisabled = !1;
      }
      return Object.defineProperty(e.prototype, "isActive", {
        get: function get() {
          return "active" === this.element.dataset.choice;
        },
        enumerable: !0,
        configurable: !0
      }), Object.defineProperty(e.prototype, "dir", {
        get: function get() {
          return this.element.dir;
        },
        enumerable: !0,
        configurable: !0
      }), Object.defineProperty(e.prototype, "value", {
        get: function get() {
          return this.element.value;
        },
        set: function set(e) {
          this.element.value = e;
        },
        enumerable: !0,
        configurable: !0
      }), e.prototype.conceal = function () {
        this.element.classList.add(this.classNames.input), this.element.hidden = !0, this.element.tabIndex = -1;
        var e = this.element.getAttribute("style");
        e && this.element.setAttribute("data-choice-orig-style", e), this.element.setAttribute("data-choice", "active");
      }, e.prototype.reveal = function () {
        this.element.classList.remove(this.classNames.input), this.element.hidden = !1, this.element.removeAttribute("tabindex");
        var e = this.element.getAttribute("data-choice-orig-style");
        e ? (this.element.removeAttribute("data-choice-orig-style"), this.element.setAttribute("style", e)) : this.element.removeAttribute("style"), this.element.removeAttribute("data-choice"), this.element.value = this.element.value;
      }, e.prototype.enable = function () {
        this.element.removeAttribute("disabled"), this.element.disabled = !1, this.isDisabled = !1;
      }, e.prototype.disable = function () {
        this.element.setAttribute("disabled", ""), this.element.disabled = !0, this.isDisabled = !0;
      }, e.prototype.triggerEvent = function (e, t) {
        n.dispatchEvent(this.element, e, t);
      }, e;
    }();
  t["default"] = r;
}, function (e, t, i) {
  "use strict";

  function n(e) {
    var t,
      i = e.Symbol;
    return "function" == typeof i ? i.observable ? t = i.observable : (t = i("observable"), i.observable = t) : t = "@@observable", t;
  }
  i.d(t, "a", function () {
    return n;
  });
}, function (e, t, i) {
  e.exports = i(8);
}, function (e, t, i) {
  "use strict";

  var n = this && this.__spreadArrays || function () {
      for (var e = 0, t = 0, i = arguments.length; t < i; t++) e += arguments[t].length;
      var n = Array(e),
        r = 0;
      for (t = 0; t < i; t++) for (var o = arguments[t], s = 0, a = o.length; s < a; s++, r++) n[r] = o[s];
      return n;
    },
    r = this && this.__importDefault || function (e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    };
  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var o = r(i(9)),
    s = r(i(10)),
    a = r(i(11)),
    c = i(18),
    l = i(0),
    u = r(i(25)),
    h = i(26),
    d = i(27),
    p = i(28),
    f = i(29),
    m = i(1),
    v = i(4),
    _ = "-ms-scroll-limit" in document.documentElement.style && "-ms-ime-align" in document.documentElement.style,
    g = {},
    y = function () {
      function e(t, i) {
        var r = this;
        void 0 === t && (t = "[data-choice]"), void 0 === i && (i = {}), this.config = s["default"].all([l.DEFAULT_CONFIG, e.defaults.options, i], {
          arrayMerge: function arrayMerge(e, t) {
            return n(t);
          }
        });
        var o = m.diff(this.config, l.DEFAULT_CONFIG);
        o.length && console.warn("Unknown config option(s) passed", o.join(", "));
        var u = "string" == typeof t ? document.querySelector(t) : t;
        if (!(u instanceof HTMLInputElement || u instanceof HTMLSelectElement)) throw TypeError("Expected one of the following types text|select-one|select-multiple");
        if (this._isTextElement = u.type === l.TEXT_TYPE, this._isSelectOneElement = u.type === l.SELECT_ONE_TYPE, this._isSelectMultipleElement = u.type === l.SELECT_MULTIPLE_TYPE, this._isSelectElement = this._isSelectOneElement || this._isSelectMultipleElement, this.config.searchEnabled = this._isSelectMultipleElement || this.config.searchEnabled, ["auto", "always"].includes("" + this.config.renderSelectedChoices) || (this.config.renderSelectedChoices = "auto"), i.addItemFilter && "function" != typeof i.addItemFilter) {
          var h = i.addItemFilter instanceof RegExp ? i.addItemFilter : new RegExp(i.addItemFilter);
          this.config.addItemFilter = h.test.bind(h);
        }
        if (this._isTextElement ? this.passedElement = new c.WrappedInput({
          element: u,
          classNames: this.config.classNames,
          delimiter: this.config.delimiter
        }) : this.passedElement = new c.WrappedSelect({
          element: u,
          classNames: this.config.classNames,
          template: function template(e) {
            return r._templates.option(e);
          }
        }), this.initialised = !1, this._store = new a["default"](), this._initialState = v.defaultState, this._currentState = v.defaultState, this._prevState = v.defaultState, this._currentValue = "", this._canSearch = !!this.config.searchEnabled, this._isScrollingOnIe = !1, this._highlightPosition = 0, this._wasTap = !0, this._placeholderValue = this._generatePlaceholderValue(), this._baseId = m.generateId(this.passedElement.element, "choices-"), this._direction = this.passedElement.dir, !this._direction) {
          var d = window.getComputedStyle(this.passedElement.element).direction;
          d !== window.getComputedStyle(document.documentElement).direction && (this._direction = d);
        }
        if (this._idNames = {
          itemChoice: "item-choice"
        }, this._isSelectElement && (this._presetGroups = this.passedElement.optionGroups, this._presetOptions = this.passedElement.options), this._presetChoices = this.config.choices, this._presetItems = this.config.items, this.passedElement.value && this._isTextElement) {
          var p = this.passedElement.value.split(this.config.delimiter);
          this._presetItems = this._presetItems.concat(p);
        }
        if (this.passedElement.options && this.passedElement.options.forEach(function (e) {
          r._presetChoices.push({
            value: e.value,
            label: e.innerHTML,
            selected: !!e.selected,
            disabled: e.disabled || e.parentNode.disabled,
            placeholder: "" === e.value || e.hasAttribute("placeholder"),
            customProperties: e.dataset["custom-properties"]
          });
        }), this._render = this._render.bind(this), this._onFocus = this._onFocus.bind(this), this._onBlur = this._onBlur.bind(this), this._onKeyUp = this._onKeyUp.bind(this), this._onKeyDown = this._onKeyDown.bind(this), this._onClick = this._onClick.bind(this), this._onTouchMove = this._onTouchMove.bind(this), this._onTouchEnd = this._onTouchEnd.bind(this), this._onMouseDown = this._onMouseDown.bind(this), this._onMouseOver = this._onMouseOver.bind(this), this._onFormReset = this._onFormReset.bind(this), this._onSelectKey = this._onSelectKey.bind(this), this._onEnterKey = this._onEnterKey.bind(this), this._onEscapeKey = this._onEscapeKey.bind(this), this._onDirectionKey = this._onDirectionKey.bind(this), this._onDeleteKey = this._onDeleteKey.bind(this), this.passedElement.isActive) return this.config.silent || console.warn("Trying to initialise Choices on element already initialised", {
          element: t
        }), void (this.initialised = !0);
        this.init();
      }
      return Object.defineProperty(e, "defaults", {
        get: function get() {
          return Object.preventExtensions({
            get options() {
              return g;
            },
            get templates() {
              return u["default"];
            }
          });
        },
        enumerable: !0,
        configurable: !0
      }), e.prototype.init = function () {
        if (!this.initialised) {
          this._createTemplates(), this._createElements(), this._createStructure(), this._store.subscribe(this._render), this._render(), this._addEventListeners(), (!this.config.addItems || this.passedElement.element.hasAttribute("disabled")) && this.disable(), this.initialised = !0;
          var e = this.config.callbackOnInit;
          e && "function" == typeof e && e.call(this);
        }
      }, e.prototype.destroy = function () {
        this.initialised && (this._removeEventListeners(), this.passedElement.reveal(), this.containerOuter.unwrap(this.passedElement.element), this.clearStore(), this._isSelectElement && (this.passedElement.options = this._presetOptions), this._templates = u["default"], this.initialised = !1);
      }, e.prototype.enable = function () {
        return this.passedElement.isDisabled && this.passedElement.enable(), this.containerOuter.isDisabled && (this._addEventListeners(), this.input.enable(), this.containerOuter.enable()), this;
      }, e.prototype.disable = function () {
        return this.passedElement.isDisabled || this.passedElement.disable(), this.containerOuter.isDisabled || (this._removeEventListeners(), this.input.disable(), this.containerOuter.disable()), this;
      }, e.prototype.highlightItem = function (e, t) {
        if (void 0 === t && (t = !0), !e || !e.id) return this;
        var i = e.id,
          n = e.groupId,
          r = void 0 === n ? -1 : n,
          o = e.value,
          s = void 0 === o ? "" : o,
          a = e.label,
          c = void 0 === a ? "" : a,
          u = r >= 0 ? this._store.getGroupById(r) : null;
        return this._store.dispatch(d.highlightItem(i, !0)), t && this.passedElement.triggerEvent(l.EVENTS.highlightItem, {
          id: i,
          value: s,
          label: c,
          groupValue: u && u.value ? u.value : null
        }), this;
      }, e.prototype.unhighlightItem = function (e) {
        if (!e || !e.id) return this;
        var t = e.id,
          i = e.groupId,
          n = void 0 === i ? -1 : i,
          r = e.value,
          o = void 0 === r ? "" : r,
          s = e.label,
          a = void 0 === s ? "" : s,
          c = n >= 0 ? this._store.getGroupById(n) : null;
        return this._store.dispatch(d.highlightItem(t, !1)), this.passedElement.triggerEvent(l.EVENTS.highlightItem, {
          id: t,
          value: o,
          label: a,
          groupValue: c && c.value ? c.value : null
        }), this;
      }, e.prototype.highlightAll = function () {
        var e = this;
        return this._store.items.forEach(function (t) {
          return e.highlightItem(t);
        }), this;
      }, e.prototype.unhighlightAll = function () {
        var e = this;
        return this._store.items.forEach(function (t) {
          return e.unhighlightItem(t);
        }), this;
      }, e.prototype.removeActiveItemsByValue = function (e) {
        var t = this;
        return this._store.activeItems.filter(function (t) {
          return t.value === e;
        }).forEach(function (e) {
          return t._removeItem(e);
        }), this;
      }, e.prototype.removeActiveItems = function (e) {
        var t = this;
        return this._store.activeItems.filter(function (t) {
          return t.id !== e;
        }).forEach(function (e) {
          return t._removeItem(e);
        }), this;
      }, e.prototype.removeHighlightedItems = function (e) {
        var t = this;
        return void 0 === e && (e = !1), this._store.highlightedActiveItems.forEach(function (i) {
          t._removeItem(i), e && t._triggerChange(i.value);
        }), this;
      }, e.prototype.showDropdown = function (e) {
        var t = this;
        return this.dropdown.isActive ? this : (requestAnimationFrame(function () {
          t.dropdown.show(), t.containerOuter.open(t.dropdown.distanceFromTopWindow), !e && t._canSearch && t.input.focus(), t.passedElement.triggerEvent(l.EVENTS.showDropdown, {});
        }), this);
      }, e.prototype.hideDropdown = function (e) {
        var t = this;
        return this.dropdown.isActive ? (requestAnimationFrame(function () {
          t.dropdown.hide(), t.containerOuter.close(), !e && t._canSearch && (t.input.removeActiveDescendant(), t.input.blur()), t.passedElement.triggerEvent(l.EVENTS.hideDropdown, {});
        }), this) : this;
      }, e.prototype.getValue = function (e) {
        void 0 === e && (e = !1);
        var t = this._store.activeItems.reduce(function (t, i) {
          var n = e ? i.value : i;
          return t.push(n), t;
        }, []);
        return this._isSelectOneElement ? t[0] : t;
      }, e.prototype.setValue = function (e) {
        var t = this;
        return this.initialised ? (e.forEach(function (e) {
          return t._setChoiceOrItem(e);
        }), this) : this;
      }, e.prototype.setChoiceByValue = function (e) {
        var t = this;
        return !this.initialised || this._isTextElement ? this : ((Array.isArray(e) ? e : [e]).forEach(function (e) {
          return t._findAndSelectChoiceByValue(e);
        }), this);
      }, e.prototype.setChoices = function (e, t, i, n) {
        var r = this;
        if (void 0 === e && (e = []), void 0 === t && (t = "value"), void 0 === i && (i = "label"), void 0 === n && (n = !1), !this.initialised) throw new ReferenceError("setChoices was called on a non-initialized instance of Choices");
        if (!this._isSelectElement) throw new TypeError("setChoices can't be used with INPUT based Choices");
        if ("string" != typeof t || !t) throw new TypeError("value parameter must be a name of 'value' field in passed objects");
        if (n && this.clearChoices(), "function" == typeof e) {
          var o = e(this);
          if ("function" == typeof Promise && o instanceof Promise) return new Promise(function (e) {
            return requestAnimationFrame(e);
          }).then(function () {
            return r._handleLoadingState(!0);
          }).then(function () {
            return o;
          }).then(function (e) {
            return r.setChoices(e, t, i, n);
          })["catch"](function (e) {
            r.config.silent || console.error(e);
          }).then(function () {
            return r._handleLoadingState(!1);
          }).then(function () {
            return r;
          });
          if (!Array.isArray(o)) throw new TypeError(".setChoices first argument function must return either array of choices or Promise, got: " + _typeof(o));
          return this.setChoices(o, t, i, !1);
        }
        if (!Array.isArray(e)) throw new TypeError(".setChoices must be called either with array of choices with a function resulting into Promise of array of choices");
        return this.containerOuter.removeLoadingState(), this._startLoading(), e.forEach(function (e) {
          if (e.choices) r._addGroup({
            id: e.id ? parseInt("" + e.id, 10) : null,
            group: e,
            valueKey: t,
            labelKey: i
          });else {
            var n = e;
            r._addChoice({
              value: n[t],
              label: n[i],
              isSelected: !!n.selected,
              isDisabled: !!n.disabled,
              placeholder: !!n.placeholder,
              customProperties: n.customProperties
            });
          }
        }), this._stopLoading(), this;
      }, e.prototype.clearChoices = function () {
        return this._store.dispatch(h.clearChoices()), this;
      }, e.prototype.clearStore = function () {
        return this._store.dispatch(f.clearAll()), this;
      }, e.prototype.clearInput = function () {
        var e = !this._isSelectOneElement;
        return this.input.clear(e), !this._isTextElement && this._canSearch && (this._isSearching = !1, this._store.dispatch(h.activateChoices(!0))), this;
      }, e.prototype._render = function () {
        if (!this._store.isLoading()) {
          this._currentState = this._store.state;
          var e = this._currentState.choices !== this._prevState.choices || this._currentState.groups !== this._prevState.groups || this._currentState.items !== this._prevState.items,
            t = this._isSelectElement,
            i = this._currentState.items !== this._prevState.items;
          e && (t && this._renderChoices(), i && this._renderItems(), this._prevState = this._currentState);
        }
      }, e.prototype._renderChoices = function () {
        var e = this,
          t = this._store,
          i = t.activeGroups,
          n = t.activeChoices,
          r = document.createDocumentFragment();
        if (this.choiceList.clear(), this.config.resetScrollPosition && requestAnimationFrame(function () {
          return e.choiceList.scrollToTop();
        }), i.length >= 1 && !this._isSearching) {
          var o = n.filter(function (e) {
            return !0 === e.placeholder && -1 === e.groupId;
          });
          o.length >= 1 && (r = this._createChoicesFragment(o, r)), r = this._createGroupsFragment(i, n, r);
        } else n.length >= 1 && (r = this._createChoicesFragment(n, r));
        if (r.childNodes && r.childNodes.length > 0) {
          var s = this._store.activeItems,
            a = this._canAddItem(s, this.input.value);
          if (a.response) this.choiceList.append(r), this._highlightChoice();else {
            var c = this._getTemplate("notice", a.notice);
            this.choiceList.append(c);
          }
        } else {
          var l = void 0;
          c = void 0;
          this._isSearching ? (c = "function" == typeof this.config.noResultsText ? this.config.noResultsText() : this.config.noResultsText, l = this._getTemplate("notice", c, "no-results")) : (c = "function" == typeof this.config.noChoicesText ? this.config.noChoicesText() : this.config.noChoicesText, l = this._getTemplate("notice", c, "no-choices")), this.choiceList.append(l);
        }
      }, e.prototype._renderItems = function () {
        var e = this._store.activeItems || [];
        this.itemList.clear();
        var t = this._createItemsFragment(e);
        t.childNodes && this.itemList.append(t);
      }, e.prototype._createGroupsFragment = function (e, t, i) {
        var n = this;
        void 0 === i && (i = document.createDocumentFragment());
        return this.config.shouldSort && e.sort(this.config.sorter), e.forEach(function (e) {
          var r = function (e) {
            return t.filter(function (t) {
              return n._isSelectOneElement ? t.groupId === e.id : t.groupId === e.id && ("always" === n.config.renderSelectedChoices || !t.selected);
            });
          }(e);
          if (r.length >= 1) {
            var o = n._getTemplate("choiceGroup", e);
            i.appendChild(o), n._createChoicesFragment(r, i, !0);
          }
        }), i;
      }, e.prototype._createChoicesFragment = function (e, t, i) {
        var r = this;
        void 0 === t && (t = document.createDocumentFragment()), void 0 === i && (i = !1);
        var o = this.config,
          s = o.renderSelectedChoices,
          a = o.searchResultLimit,
          c = o.renderChoiceLimit,
          l = this._isSearching ? m.sortByScore : this.config.sorter,
          u = function u(e) {
            if ("auto" !== s || r._isSelectOneElement || !e.selected) {
              var i = r._getTemplate("choice", e, r.config.itemSelectText);
              t.appendChild(i);
            }
          },
          h = e;
        "auto" !== s || this._isSelectOneElement || (h = e.filter(function (e) {
          return !e.selected;
        }));
        var d = h.reduce(function (e, t) {
            return t.placeholder ? e.placeholderChoices.push(t) : e.normalChoices.push(t), e;
          }, {
            placeholderChoices: [],
            normalChoices: []
          }),
          p = d.placeholderChoices,
          f = d.normalChoices;
        (this.config.shouldSort || this._isSearching) && f.sort(l);
        var v = h.length,
          _ = this._isSelectOneElement ? n(p, f) : f;
        this._isSearching ? v = a : c && c > 0 && !i && (v = c);
        for (var g = 0; g < v; g += 1) _[g] && u(_[g]);
        return t;
      }, e.prototype._createItemsFragment = function (e, t) {
        var i = this;
        void 0 === t && (t = document.createDocumentFragment());
        var n = this.config,
          r = n.shouldSortItems,
          o = n.sorter,
          s = n.removeItemButton;
        r && !this._isSelectOneElement && e.sort(o), this._isTextElement ? this.passedElement.value = e.map(function (e) {
          return e.value;
        }).join(this.config.delimiter) : this.passedElement.options = e;
        return e.forEach(function (e) {
          var n = i._getTemplate("item", e, s);
          t.appendChild(n);
        }), t;
      }, e.prototype._triggerChange = function (e) {
        null != e && this.passedElement.triggerEvent(l.EVENTS.change, {
          value: e
        });
      }, e.prototype._selectPlaceholderChoice = function (e) {
        this._addItem({
          value: e.value,
          label: e.label,
          choiceId: e.id,
          groupId: e.groupId,
          placeholder: e.placeholder
        }), this._triggerChange(e.value);
      }, e.prototype._handleButtonAction = function (e, t) {
        if (e && t && this.config.removeItems && this.config.removeItemButton) {
          var i = t.parentNode && t.parentNode.dataset.id,
            n = i && e.find(function (e) {
              return e.id === parseInt(i, 10);
            });
          n && (this._removeItem(n), this._triggerChange(n.value), this._isSelectOneElement && this._store.placeholderChoice && this._selectPlaceholderChoice(this._store.placeholderChoice));
        }
      }, e.prototype._handleItemAction = function (e, t, i) {
        var n = this;
        if (void 0 === i && (i = !1), e && t && this.config.removeItems && !this._isSelectOneElement) {
          var r = t.dataset.id;
          e.forEach(function (e) {
            e.id !== parseInt("" + r, 10) || e.highlighted ? !i && e.highlighted && n.unhighlightItem(e) : n.highlightItem(e);
          }), this.input.focus();
        }
      }, e.prototype._handleChoiceAction = function (e, t) {
        if (e && t) {
          var i = t.dataset.id,
            n = i && this._store.getChoiceById(i);
          if (n) {
            var r = e[0] && e[0].keyCode ? e[0].keyCode : void 0,
              o = this.dropdown.isActive;
            if (n.keyCode = r, this.passedElement.triggerEvent(l.EVENTS.choice, {
              choice: n
            }), !n.selected && !n.disabled) this._canAddItem(e, n.value).response && (this._addItem({
              value: n.value,
              label: n.label,
              choiceId: n.id,
              groupId: n.groupId,
              customProperties: n.customProperties,
              placeholder: n.placeholder,
              keyCode: n.keyCode
            }), this._triggerChange(n.value));
            this.clearInput(), o && this._isSelectOneElement && (this.hideDropdown(!0), this.containerOuter.focus());
          }
        }
      }, e.prototype._handleBackspace = function (e) {
        if (this.config.removeItems && e) {
          var t = e[e.length - 1],
            i = e.some(function (e) {
              return e.highlighted;
            });
          this.config.editItems && !i && t ? (this.input.value = t.value, this.input.setWidth(), this._removeItem(t), this._triggerChange(t.value)) : (i || this.highlightItem(t, !1), this.removeHighlightedItems(!0));
        }
      }, e.prototype._startLoading = function () {
        this._store.dispatch(f.setIsLoading(!0));
      }, e.prototype._stopLoading = function () {
        this._store.dispatch(f.setIsLoading(!1));
      }, e.prototype._handleLoadingState = function (e) {
        void 0 === e && (e = !0);
        var t = this.itemList.getChild("." + this.config.classNames.placeholder);
        e ? (this.disable(), this.containerOuter.addLoadingState(), this._isSelectOneElement ? t ? t.innerHTML = this.config.loadingText : (t = this._getTemplate("placeholder", this.config.loadingText)) && this.itemList.append(t) : this.input.placeholder = this.config.loadingText) : (this.enable(), this.containerOuter.removeLoadingState(), this._isSelectOneElement ? t && (t.innerHTML = this._placeholderValue || "") : this.input.placeholder = this._placeholderValue || "");
      }, e.prototype._handleSearch = function (e) {
        if (e && this.input.isFocussed) {
          var t = this._store.choices,
            i = this.config,
            n = i.searchFloor,
            r = i.searchChoices,
            o = t.some(function (e) {
              return !e.active;
            });
          if (e && e.length >= n) {
            var s = r ? this._searchChoices(e) : 0;
            this.passedElement.triggerEvent(l.EVENTS.search, {
              value: e,
              resultCount: s
            });
          } else o && (this._isSearching = !1, this._store.dispatch(h.activateChoices(!0)));
        }
      }, e.prototype._canAddItem = function (e, t) {
        var i = !0,
          n = "function" == typeof this.config.addItemText ? this.config.addItemText(t) : this.config.addItemText;
        if (!this._isSelectOneElement) {
          var r = m.existsInArray(e, t);
          this.config.maxItemCount > 0 && this.config.maxItemCount <= e.length && (i = !1, n = "function" == typeof this.config.maxItemText ? this.config.maxItemText(this.config.maxItemCount) : this.config.maxItemText), !this.config.duplicateItemsAllowed && r && i && (i = !1, n = "function" == typeof this.config.uniqueItemText ? this.config.uniqueItemText(t) : this.config.uniqueItemText), this._isTextElement && this.config.addItems && i && "function" == typeof this.config.addItemFilter && !this.config.addItemFilter(t) && (i = !1, n = "function" == typeof this.config.customAddItemText ? this.config.customAddItemText(t) : this.config.customAddItemText);
        }
        return {
          response: i,
          notice: n
        };
      }, e.prototype._searchChoices = function (e) {
        var t = "string" == typeof e ? e.trim() : e,
          i = "string" == typeof this._currentValue ? this._currentValue.trim() : this._currentValue;
        if (t.length < 1 && t === i + " ") return 0;
        var r = this._store.searchableChoices,
          s = t,
          a = n(this.config.searchFields),
          c = Object.assign(this.config.fuseOptions, {
            keys: a,
            includeMatches: !0
          }),
          l = new o["default"](r, c).search(s);
        return this._currentValue = t, this._highlightPosition = 0, this._isSearching = !0, this._store.dispatch(h.filterChoices(l)), l.length;
      }, e.prototype._addEventListeners = function () {
        var e = document.documentElement;
        e.addEventListener("touchend", this._onTouchEnd, !0), this.containerOuter.element.addEventListener("keydown", this._onKeyDown, !0), this.containerOuter.element.addEventListener("mousedown", this._onMouseDown, !0), e.addEventListener("click", this._onClick, {
          passive: !0
        }), e.addEventListener("touchmove", this._onTouchMove, {
          passive: !0
        }), this.dropdown.element.addEventListener("mouseover", this._onMouseOver, {
          passive: !0
        }), this._isSelectOneElement && (this.containerOuter.element.addEventListener("focus", this._onFocus, {
          passive: !0
        }), this.containerOuter.element.addEventListener("blur", this._onBlur, {
          passive: !0
        })), this.input.element.addEventListener("keyup", this._onKeyUp, {
          passive: !0
        }), this.input.element.addEventListener("focus", this._onFocus, {
          passive: !0
        }), this.input.element.addEventListener("blur", this._onBlur, {
          passive: !0
        }), this.input.element.form && this.input.element.form.addEventListener("reset", this._onFormReset, {
          passive: !0
        }), this.input.addEventListeners();
      }, e.prototype._removeEventListeners = function () {
        var e = document.documentElement;
        e.removeEventListener("touchend", this._onTouchEnd, !0), this.containerOuter.element.removeEventListener("keydown", this._onKeyDown, !0), this.containerOuter.element.removeEventListener("mousedown", this._onMouseDown, !0), e.removeEventListener("click", this._onClick), e.removeEventListener("touchmove", this._onTouchMove), this.dropdown.element.removeEventListener("mouseover", this._onMouseOver), this._isSelectOneElement && (this.containerOuter.element.removeEventListener("focus", this._onFocus), this.containerOuter.element.removeEventListener("blur", this._onBlur)), this.input.element.removeEventListener("keyup", this._onKeyUp), this.input.element.removeEventListener("focus", this._onFocus), this.input.element.removeEventListener("blur", this._onBlur), this.input.element.form && this.input.element.form.removeEventListener("reset", this._onFormReset), this.input.removeEventListeners();
      }, e.prototype._onKeyDown = function (e) {
        var t = e.keyCode,
          i = this._store.activeItems,
          n = this.input.isFocussed,
          r = this.dropdown.isActive,
          o = this.itemList.hasChildren(),
          s = String.fromCharCode(t),
          a = /[a-zA-Z0-9-_ ]/.test(s),
          c = l.KEY_CODES.BACK_KEY,
          u = l.KEY_CODES.DELETE_KEY,
          h = l.KEY_CODES.ENTER_KEY,
          d = l.KEY_CODES.A_KEY,
          p = l.KEY_CODES.ESC_KEY,
          f = l.KEY_CODES.UP_KEY,
          m = l.KEY_CODES.DOWN_KEY,
          v = l.KEY_CODES.PAGE_UP_KEY,
          _ = l.KEY_CODES.PAGE_DOWN_KEY;
        switch (this._isTextElement || r || !a || (this.showDropdown(), this.input.isFocussed || (this.input.value += s.toLowerCase())), t) {
          case d:
            return this._onSelectKey(e, o);
          case h:
            return this._onEnterKey(e, i, r);
          case p:
            return this._onEscapeKey(r);
          case f:
          case v:
          case m:
          case _:
            return this._onDirectionKey(e, r);
          case u:
          case c:
            return this._onDeleteKey(e, i, n);
        }
      }, e.prototype._onKeyUp = function (e) {
        var t = e.target,
          i = e.keyCode,
          n = this.input.value,
          r = this._store.activeItems,
          o = this._canAddItem(r, n),
          s = l.KEY_CODES.BACK_KEY,
          a = l.KEY_CODES.DELETE_KEY;
        if (this._isTextElement) {
          if (o.notice && n) {
            var c = this._getTemplate("notice", o.notice);
            this.dropdown.element.innerHTML = c.outerHTML, this.showDropdown(!0);
          } else this.hideDropdown(!0);
        } else {
          var u = (i === s || i === a) && t && !t.value,
            d = !this._isTextElement && this._isSearching,
            p = this._canSearch && o.response;
          u && d ? (this._isSearching = !1, this._store.dispatch(h.activateChoices(!0))) : p && this._handleSearch(this.input.value);
        }
        this._canSearch = this.config.searchEnabled;
      }, e.prototype._onSelectKey = function (e, t) {
        var i = e.ctrlKey,
          n = e.metaKey;
        (i || n) && t && (this._canSearch = !1, this.config.removeItems && !this.input.value && this.input.element === document.activeElement && this.highlightAll());
      }, e.prototype._onEnterKey = function (e, t, i) {
        var n = e.target,
          r = l.KEY_CODES.ENTER_KEY,
          o = n && n.hasAttribute("data-button");
        if (this._isTextElement && n && n.value) {
          var s = this.input.value;
          this._canAddItem(t, s).response && (this.hideDropdown(!0), this._addItem({
            value: s
          }), this._triggerChange(s), this.clearInput());
        }
        if (o && (this._handleButtonAction(t, n), e.preventDefault()), i) {
          var a = this.dropdown.getChild("." + this.config.classNames.highlightedState);
          a && (t[0] && (t[0].keyCode = r), this._handleChoiceAction(t, a)), e.preventDefault();
        } else this._isSelectOneElement && (this.showDropdown(), e.preventDefault());
      }, e.prototype._onEscapeKey = function (e) {
        e && (this.hideDropdown(!0), this.containerOuter.focus());
      }, e.prototype._onDirectionKey = function (e, t) {
        var i = e.keyCode,
          n = e.metaKey,
          r = l.KEY_CODES.DOWN_KEY,
          o = l.KEY_CODES.PAGE_UP_KEY,
          s = l.KEY_CODES.PAGE_DOWN_KEY;
        if (t || this._isSelectOneElement) {
          this.showDropdown(), this._canSearch = !1;
          var a = i === r || i === s ? 1 : -1,
            c = void 0;
          if (n || i === s || i === o) c = a > 0 ? this.dropdown.element.querySelector("[data-choice-selectable]:last-of-type") : this.dropdown.element.querySelector("[data-choice-selectable]");else {
            var u = this.dropdown.element.querySelector("." + this.config.classNames.highlightedState);
            c = u ? m.getAdjacentEl(u, "[data-choice-selectable]", a) : this.dropdown.element.querySelector("[data-choice-selectable]");
          }
          c && (m.isScrolledIntoView(c, this.choiceList.element, a) || this.choiceList.scrollToChildElement(c, a), this._highlightChoice(c)), e.preventDefault();
        }
      }, e.prototype._onDeleteKey = function (e, t, i) {
        var n = e.target;
        this._isSelectOneElement || n.value || !i || (this._handleBackspace(t), e.preventDefault());
      }, e.prototype._onTouchMove = function () {
        this._wasTap && (this._wasTap = !1);
      }, e.prototype._onTouchEnd = function (e) {
        var t = (e || e.touches[0]).target;
        this._wasTap && this.containerOuter.element.contains(t) && ((t === this.containerOuter.element || t === this.containerInner.element) && (this._isTextElement ? this.input.focus() : this._isSelectMultipleElement && this.showDropdown()), e.stopPropagation());
        this._wasTap = !0;
      }, e.prototype._onMouseDown = function (e) {
        var t = e.target;
        if (t instanceof HTMLElement) {
          if (_ && this.choiceList.element.contains(t)) {
            var i = this.choiceList.element.firstElementChild,
              n = "ltr" === this._direction ? e.offsetX >= i.offsetWidth : e.offsetX < i.offsetLeft;
            this._isScrollingOnIe = n;
          }
          if (t !== this.input.element) {
            var r = t.closest("[data-button],[data-item],[data-choice]");
            if (r instanceof HTMLElement) {
              var o = e.shiftKey,
                s = this._store.activeItems,
                a = r.dataset;
              "button" in a ? this._handleButtonAction(s, r) : "item" in a ? this._handleItemAction(s, r, o) : "choice" in a && this._handleChoiceAction(s, r);
            }
            e.preventDefault();
          }
        }
      }, e.prototype._onMouseOver = function (e) {
        var t = e.target;
        t instanceof HTMLElement && "choice" in t.dataset && this._highlightChoice(t);
      }, e.prototype._onClick = function (e) {
        var t = e.target;
        this.containerOuter.element.contains(t) ? this.dropdown.isActive || this.containerOuter.isDisabled ? this._isSelectOneElement && t !== this.input.element && !this.dropdown.element.contains(t) && this.hideDropdown() : this._isTextElement ? document.activeElement !== this.input.element && this.input.focus() : (this.showDropdown(), this.containerOuter.focus()) : (this._store.highlightedActiveItems.length > 0 && this.unhighlightAll(), this.containerOuter.removeFocusState(), this.hideDropdown(!0));
      }, e.prototype._onFocus = function (e) {
        var t,
          i = this,
          n = e.target;
        n && this.containerOuter.element.contains(n) && ((t = {})[l.TEXT_TYPE] = function () {
          n === i.input.element && i.containerOuter.addFocusState();
        }, t[l.SELECT_ONE_TYPE] = function () {
          i.containerOuter.addFocusState(), n === i.input.element && i.showDropdown(!0);
        }, t[l.SELECT_MULTIPLE_TYPE] = function () {
          n === i.input.element && (i.showDropdown(!0), i.containerOuter.addFocusState());
        }, t)[this.passedElement.element.type]();
      }, e.prototype._onBlur = function (e) {
        var t,
          i = this,
          n = e.target;
        if (n && this.containerOuter.element.contains(n) && !this._isScrollingOnIe) {
          var r = this._store.activeItems.some(function (e) {
            return e.highlighted;
          });
          ((t = {})[l.TEXT_TYPE] = function () {
            n === i.input.element && (i.containerOuter.removeFocusState(), r && i.unhighlightAll(), i.hideDropdown(!0));
          }, t[l.SELECT_ONE_TYPE] = function () {
            i.containerOuter.removeFocusState(), (n === i.input.element || n === i.containerOuter.element && !i._canSearch) && i.hideDropdown(!0);
          }, t[l.SELECT_MULTIPLE_TYPE] = function () {
            n === i.input.element && (i.containerOuter.removeFocusState(), i.hideDropdown(!0), r && i.unhighlightAll());
          }, t)[this.passedElement.element.type]();
        } else this._isScrollingOnIe = !1, this.input.element.focus();
      }, e.prototype._onFormReset = function () {
        this._store.dispatch(f.resetTo(this._initialState));
      }, e.prototype._highlightChoice = function (e) {
        var t = this;
        void 0 === e && (e = null);
        var i = Array.from(this.dropdown.element.querySelectorAll("[data-choice-selectable]"));
        if (i.length) {
          var n = e;
          Array.from(this.dropdown.element.querySelectorAll("." + this.config.classNames.highlightedState)).forEach(function (e) {
            e.classList.remove(t.config.classNames.highlightedState), e.setAttribute("aria-selected", "false");
          }), n ? this._highlightPosition = i.indexOf(n) : (n = i.length > this._highlightPosition ? i[this._highlightPosition] : i[i.length - 1]) || (n = i[0]), n.classList.add(this.config.classNames.highlightedState), n.setAttribute("aria-selected", "true"), this.passedElement.triggerEvent(l.EVENTS.highlightChoice, {
            el: n
          }), this.dropdown.isActive && (this.input.setActiveDescendant(n.id), this.containerOuter.setActiveDescendant(n.id));
        }
      }, e.prototype._addItem = function (e) {
        var t = e.value,
          i = e.label,
          n = void 0 === i ? null : i,
          r = e.choiceId,
          o = void 0 === r ? -1 : r,
          s = e.groupId,
          a = void 0 === s ? -1 : s,
          c = e.customProperties,
          u = void 0 === c ? {} : c,
          h = e.placeholder,
          p = void 0 !== h && h,
          f = e.keyCode,
          m = void 0 === f ? -1 : f,
          v = "string" == typeof t ? t.trim() : t,
          _ = this._store.items,
          g = n || v,
          y = o || -1,
          b = a >= 0 ? this._store.getGroupById(a) : null,
          E = _ ? _.length + 1 : 1;
        this.config.prependValue && (v = this.config.prependValue + v.toString()), this.config.appendValue && (v += this.config.appendValue.toString()), this._store.dispatch(d.addItem({
          value: v,
          label: g,
          id: E,
          choiceId: y,
          groupId: a,
          customProperties: u,
          placeholder: p,
          keyCode: m
        })), this._isSelectOneElement && this.removeActiveItems(E), this.passedElement.triggerEvent(l.EVENTS.addItem, {
          id: E,
          value: v,
          label: g,
          customProperties: u,
          groupValue: b && b.value ? b.value : null,
          keyCode: m
        });
      }, e.prototype._removeItem = function (e) {
        var t = e.id,
          i = e.value,
          n = e.label,
          r = e.customProperties,
          o = e.choiceId,
          s = e.groupId,
          a = s && s >= 0 ? this._store.getGroupById(s) : null;
        t && o && (this._store.dispatch(d.removeItem(t, o)), this.passedElement.triggerEvent(l.EVENTS.removeItem, {
          id: t,
          value: i,
          label: n,
          customProperties: r,
          groupValue: a && a.value ? a.value : null
        }));
      }, e.prototype._addChoice = function (e) {
        var t = e.value,
          i = e.label,
          n = void 0 === i ? null : i,
          r = e.isSelected,
          o = void 0 !== r && r,
          s = e.isDisabled,
          a = void 0 !== s && s,
          c = e.groupId,
          l = void 0 === c ? -1 : c,
          u = e.customProperties,
          d = void 0 === u ? {} : u,
          p = e.placeholder,
          f = void 0 !== p && p,
          m = e.keyCode,
          v = void 0 === m ? -1 : m;
        if (null != t) {
          var _ = this._store.choices,
            g = n || t,
            y = _ ? _.length + 1 : 1,
            b = this._baseId + "-" + this._idNames.itemChoice + "-" + y;
          this._store.dispatch(h.addChoice({
            id: y,
            groupId: l,
            elementId: b,
            value: t,
            label: g,
            disabled: a,
            customProperties: d,
            placeholder: f,
            keyCode: v
          })), o && this._addItem({
            value: t,
            label: g,
            choiceId: y,
            customProperties: d,
            placeholder: f,
            keyCode: v
          });
        }
      }, e.prototype._addGroup = function (e) {
        var t = this,
          i = e.group,
          n = e.id,
          r = e.valueKey,
          o = void 0 === r ? "value" : r,
          s = e.labelKey,
          a = void 0 === s ? "label" : s,
          c = m.isType("Object", i) ? i.choices : Array.from(i.getElementsByTagName("OPTION")),
          l = n || Math.floor(new Date().valueOf() * Math.random()),
          u = !!i.disabled && i.disabled;
        if (c) {
          this._store.dispatch(p.addGroup({
            value: i.label,
            id: l,
            active: !0,
            disabled: u
          }));
          c.forEach(function (e) {
            var i = e.disabled || e.parentNode && e.parentNode.disabled;
            t._addChoice({
              value: e[o],
              label: m.isType("Object", e) ? e[a] : e.innerHTML,
              isSelected: e.selected,
              isDisabled: i,
              groupId: l,
              customProperties: e.customProperties,
              placeholder: e.placeholder
            });
          });
        } else this._store.dispatch(p.addGroup({
          value: i.label,
          id: i.id,
          active: !1,
          disabled: i.disabled
        }));
      }, e.prototype._getTemplate = function (e) {
        for (var t, i = [], r = 1; r < arguments.length; r++) i[r - 1] = arguments[r];
        var o = this.config.classNames;
        return (t = this._templates[e]).call.apply(t, n([this, o], i));
      }, e.prototype._createTemplates = function () {
        var e = this.config.callbackOnCreateTemplates,
          t = {};
        e && "function" == typeof e && (t = e.call(this, m.strToEl)), this._templates = s["default"](u["default"], t);
      }, e.prototype._createElements = function () {
        this.containerOuter = new c.Container({
          element: this._getTemplate("containerOuter", this._direction, this._isSelectElement, this._isSelectOneElement, this.config.searchEnabled, this.passedElement.element.type),
          classNames: this.config.classNames,
          type: this.passedElement.element.type,
          position: this.config.position
        }), this.containerInner = new c.Container({
          element: this._getTemplate("containerInner"),
          classNames: this.config.classNames,
          type: this.passedElement.element.type,
          position: this.config.position
        }), this.input = new c.Input({
          element: this._getTemplate("input", this._placeholderValue),
          classNames: this.config.classNames,
          type: this.passedElement.element.type,
          preventPaste: !this.config.paste
        }), this.choiceList = new c.List({
          element: this._getTemplate("choiceList", this._isSelectOneElement)
        }), this.itemList = new c.List({
          element: this._getTemplate("itemList", this._isSelectOneElement)
        }), this.dropdown = new c.Dropdown({
          element: this._getTemplate("dropdown"),
          classNames: this.config.classNames,
          type: this.passedElement.element.type
        });
      }, e.prototype._createStructure = function () {
        this.passedElement.conceal(), this.containerInner.wrap(this.passedElement.element), this.containerOuter.wrap(this.containerInner.element), this._isSelectOneElement ? this.input.placeholder = this.config.searchPlaceholderValue || "" : this._placeholderValue && (this.input.placeholder = this._placeholderValue, this.input.setWidth()), this.containerOuter.element.appendChild(this.containerInner.element), this.containerOuter.element.appendChild(this.dropdown.element), this.containerInner.element.appendChild(this.itemList.element), this._isTextElement || this.dropdown.element.appendChild(this.choiceList.element), this._isSelectOneElement ? this.config.searchEnabled && this.dropdown.element.insertBefore(this.input.element, this.dropdown.element.firstChild) : this.containerInner.element.appendChild(this.input.element), this._isSelectElement && (this._highlightPosition = 0, this._isSearching = !1, this._startLoading(), this._presetGroups.length ? this._addPredefinedGroups(this._presetGroups) : this._addPredefinedChoices(this._presetChoices), this._stopLoading()), this._isTextElement && this._addPredefinedItems(this._presetItems);
      }, e.prototype._addPredefinedGroups = function (e) {
        var t = this,
          i = this.passedElement.placeholderOption;
        i && i.parentNode && "SELECT" === i.parentNode.tagName && this._addChoice({
          value: i.value,
          label: i.innerHTML,
          isSelected: i.selected,
          isDisabled: i.disabled,
          placeholder: !0
        }), e.forEach(function (e) {
          return t._addGroup({
            group: e,
            id: e.id || null
          });
        });
      }, e.prototype._addPredefinedChoices = function (e) {
        var t = this;
        this.config.shouldSort && e.sort(this.config.sorter);
        var i = e.some(function (e) {
            return e.selected;
          }),
          n = e.findIndex(function (e) {
            return void 0 === e.disabled || !e.disabled;
          });
        e.forEach(function (e, r) {
          var o = e.value,
            s = void 0 === o ? "" : o,
            a = e.label,
            c = e.customProperties,
            l = e.placeholder;
          if (t._isSelectElement) {
            if (e.choices) t._addGroup({
              group: e,
              id: e.id || null
            });else {
              var u = !!(t._isSelectOneElement && !i && r === n) || e.selected,
                h = e.disabled;
              console.log(h, e), t._addChoice({
                value: s,
                label: a,
                isSelected: !!u,
                isDisabled: !!h,
                placeholder: !!l,
                customProperties: c
              });
            }
          } else t._addChoice({
            value: s,
            label: a,
            isSelected: !!e.selected,
            isDisabled: !!e.disabled,
            placeholder: !!e.placeholder,
            customProperties: c
          });
        });
      }, e.prototype._addPredefinedItems = function (e) {
        var t = this;
        e.forEach(function (e) {
          "object" == _typeof(e) && e.value && t._addItem({
            value: e.value,
            label: e.label,
            choiceId: e.id,
            customProperties: e.customProperties,
            placeholder: e.placeholder
          }), "string" == typeof e && t._addItem({
            value: e
          });
        });
      }, e.prototype._setChoiceOrItem = function (e) {
        var t = this;
        ({
          object: function object() {
            e.value && (t._isTextElement ? t._addItem({
              value: e.value,
              label: e.label,
              choiceId: e.id,
              customProperties: e.customProperties,
              placeholder: e.placeholder
            }) : t._addChoice({
              value: e.value,
              label: e.label,
              isSelected: !0,
              isDisabled: !1,
              customProperties: e.customProperties,
              placeholder: e.placeholder
            }));
          },
          string: function string() {
            t._isTextElement ? t._addItem({
              value: e
            }) : t._addChoice({
              value: e,
              label: e,
              isSelected: !0,
              isDisabled: !1
            });
          }
        })[m.getType(e).toLowerCase()]();
      }, e.prototype._findAndSelectChoiceByValue = function (e) {
        var t = this,
          i = this._store.choices.find(function (i) {
            return t.config.valueComparer(i.value, e);
          });
        i && !i.selected && this._addItem({
          value: i.value,
          label: i.label,
          choiceId: i.id,
          groupId: i.groupId,
          customProperties: i.customProperties,
          placeholder: i.placeholder,
          keyCode: i.keyCode
        });
      }, e.prototype._generatePlaceholderValue = function () {
        if (this._isSelectElement) {
          var e = this.passedElement.placeholderOption;
          return e ? e.text : null;
        }
        var t = this.config,
          i = t.placeholder,
          n = t.placeholderValue,
          r = this.passedElement.element.dataset;
        if (i) {
          if (n) return n;
          if (r.placeholder) return r.placeholder;
        }
        return null;
      }, e;
    }();
  t["default"] = y;
}, function (e, t, i) {
  /*!
   * Fuse.js v3.4.6 - Lightweight fuzzy-search (http://fusejs.io)
   * 
   * Copyright (c) 2012-2017 Kirollos Risk (http://kiro.me)
   * All Rights Reserved. Apache Software License 2.0
   * 
   * http://www.apache.org/licenses/LICENSE-2.0
   */
  e.exports = function (e) {
    var t = {};
    function i(n) {
      if (t[n]) return t[n].exports;
      var r = t[n] = {
        i: n,
        l: !1,
        exports: {}
      };
      return e[n].call(r.exports, r, r.exports, i), r.l = !0, r.exports;
    }
    return i.m = e, i.c = t, i.d = function (e, t, n) {
      i.o(e, t) || Object.defineProperty(e, t, {
        enumerable: !0,
        get: n
      });
    }, i.r = function (e) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
        value: "Module"
      }), Object.defineProperty(e, "__esModule", {
        value: !0
      });
    }, i.t = function (e, t) {
      if (1 & t && (e = i(e)), 8 & t) return e;
      if (4 & t && "object" == _typeof(e) && e && e.__esModule) return e;
      var n = Object.create(null);
      if (i.r(n), Object.defineProperty(n, "default", {
        enumerable: !0,
        value: e
      }), 2 & t && "string" != typeof e) for (var r in e) i.d(n, r, function (t) {
        return e[t];
      }.bind(null, r));
      return n;
    }, i.n = function (e) {
      var t = e && e.__esModule ? function () {
        return e["default"];
      } : function () {
        return e;
      };
      return i.d(t, "a", t), t;
    }, i.o = function (e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }, i.p = "", i(i.s = 1);
  }([function (e, t) {
    e.exports = function (e) {
      return Array.isArray ? Array.isArray(e) : "[object Array]" === Object.prototype.toString.call(e);
    };
  }, function (e, t, i) {
    function n(e) {
      return (n = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
        return _typeof(e);
      } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : _typeof(e);
      })(e);
    }
    function r(e, t) {
      for (var i = 0; i < t.length; i++) {
        var n = t[i];
        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
      }
    }
    var o = i(2),
      s = i(8),
      a = i(0),
      c = function () {
        function e(t, i) {
          var n = i.location,
            r = void 0 === n ? 0 : n,
            o = i.distance,
            a = void 0 === o ? 100 : o,
            c = i.threshold,
            l = void 0 === c ? .6 : c,
            u = i.maxPatternLength,
            h = void 0 === u ? 32 : u,
            d = i.caseSensitive,
            p = void 0 !== d && d,
            f = i.tokenSeparator,
            m = void 0 === f ? / +/g : f,
            v = i.findAllMatches,
            _ = void 0 !== v && v,
            g = i.minMatchCharLength,
            y = void 0 === g ? 1 : g,
            b = i.id,
            E = void 0 === b ? null : b,
            S = i.keys,
            I = void 0 === S ? [] : S,
            O = i.shouldSort,
            C = void 0 === O || O,
            T = i.getFn,
            w = void 0 === T ? s : T,
            A = i.sortFn,
            L = void 0 === A ? function (e, t) {
              return e.score - t.score;
            } : A,
            P = i.tokenize,
            D = void 0 !== P && P,
            x = i.matchAllTokens,
            N = void 0 !== x && x,
            M = i.includeMatches,
            j = void 0 !== M && M,
            k = i.includeScore,
            F = void 0 !== k && k,
            K = i.verbose,
            R = void 0 !== K && K;
          !function (e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
          }(this, e), this.options = {
            location: r,
            distance: a,
            threshold: l,
            maxPatternLength: h,
            isCaseSensitive: p,
            tokenSeparator: m,
            findAllMatches: _,
            minMatchCharLength: y,
            id: E,
            keys: I,
            includeMatches: j,
            includeScore: F,
            shouldSort: C,
            getFn: w,
            sortFn: L,
            verbose: R,
            tokenize: D,
            matchAllTokens: N
          }, this.setCollection(t);
        }
        var t, i;
        return t = e, (i = [{
          key: "setCollection",
          value: function value(e) {
            return this.list = e, e;
          }
        }, {
          key: "search",
          value: function value(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
              limit: !1
            };
            this._log('---------\nSearch pattern: "'.concat(e, '"'));
            var i = this._prepareSearchers(e),
              n = i.tokenSearchers,
              r = i.fullSearcher,
              o = this._search(n, r),
              s = o.weights,
              a = o.results;
            return this._computeScore(s, a), this.options.shouldSort && this._sort(a), t.limit && "number" == typeof t.limit && (a = a.slice(0, t.limit)), this._format(a);
          }
        }, {
          key: "_prepareSearchers",
          value: function value() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
              t = [];
            if (this.options.tokenize) for (var i = e.split(this.options.tokenSeparator), n = 0, r = i.length; n < r; n += 1) t.push(new o(i[n], this.options));
            return {
              tokenSearchers: t,
              fullSearcher: new o(e, this.options)
            };
          }
        }, {
          key: "_search",
          value: function value() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
              t = arguments.length > 1 ? arguments[1] : void 0,
              i = this.list,
              n = {},
              r = [];
            if ("string" == typeof i[0]) {
              for (var o = 0, s = i.length; o < s; o += 1) this._analyze({
                key: "",
                value: i[o],
                record: o,
                index: o
              }, {
                resultMap: n,
                results: r,
                tokenSearchers: e,
                fullSearcher: t
              });
              return {
                weights: null,
                results: r
              };
            }
            for (var a = {}, c = 0, l = i.length; c < l; c += 1) for (var u = i[c], h = 0, d = this.options.keys.length; h < d; h += 1) {
              var p = this.options.keys[h];
              if ("string" != typeof p) {
                if (a[p.name] = {
                  weight: 1 - p.weight || 1
                }, p.weight <= 0 || p.weight > 1) throw new Error("Key weight has to be > 0 and <= 1");
                p = p.name;
              } else a[p] = {
                weight: 1
              };
              this._analyze({
                key: p,
                value: this.options.getFn(u, p),
                record: u,
                index: c
              }, {
                resultMap: n,
                results: r,
                tokenSearchers: e,
                fullSearcher: t
              });
            }
            return {
              weights: a,
              results: r
            };
          }
        }, {
          key: "_analyze",
          value: function value(e, t) {
            var i = e.key,
              n = e.arrayIndex,
              r = void 0 === n ? -1 : n,
              o = e.value,
              s = e.record,
              c = e.index,
              l = t.tokenSearchers,
              u = void 0 === l ? [] : l,
              h = t.fullSearcher,
              d = void 0 === h ? [] : h,
              p = t.resultMap,
              f = void 0 === p ? {} : p,
              m = t.results,
              v = void 0 === m ? [] : m;
            if (null != o) {
              var _ = !1,
                g = -1,
                y = 0;
              if ("string" == typeof o) {
                this._log("\nKey: ".concat("" === i ? "-" : i));
                var b = d.search(o);
                if (this._log('Full text: "'.concat(o, '", score: ').concat(b.score)), this.options.tokenize) {
                  for (var E = o.split(this.options.tokenSeparator), S = [], I = 0; I < u.length; I += 1) {
                    var O = u[I];
                    this._log('\nPattern: "'.concat(O.pattern, '"'));
                    for (var C = !1, T = 0; T < E.length; T += 1) {
                      var w = E[T],
                        A = O.search(w),
                        L = {};
                      A.isMatch ? (L[w] = A.score, _ = !0, C = !0, S.push(A.score)) : (L[w] = 1, this.options.matchAllTokens || S.push(1)), this._log('Token: "'.concat(w, '", score: ').concat(L[w]));
                    }
                    C && (y += 1);
                  }
                  g = S[0];
                  for (var P = S.length, D = 1; D < P; D += 1) g += S[D];
                  g /= P, this._log("Token score average:", g);
                }
                var x = b.score;
                g > -1 && (x = (x + g) / 2), this._log("Score average:", x);
                var N = !this.options.tokenize || !this.options.matchAllTokens || y >= u.length;
                if (this._log("\nCheck Matches: ".concat(N)), (_ || b.isMatch) && N) {
                  var M = f[c];
                  M ? M.output.push({
                    key: i,
                    arrayIndex: r,
                    value: o,
                    score: x,
                    matchedIndices: b.matchedIndices
                  }) : (f[c] = {
                    item: s,
                    output: [{
                      key: i,
                      arrayIndex: r,
                      value: o,
                      score: x,
                      matchedIndices: b.matchedIndices
                    }]
                  }, v.push(f[c]));
                }
              } else if (a(o)) for (var j = 0, k = o.length; j < k; j += 1) this._analyze({
                key: i,
                arrayIndex: j,
                value: o[j],
                record: s,
                index: c
              }, {
                resultMap: f,
                results: v,
                tokenSearchers: u,
                fullSearcher: d
              });
            }
          }
        }, {
          key: "_computeScore",
          value: function value(e, t) {
            this._log("\n\nComputing score:\n");
            for (var i = 0, n = t.length; i < n; i += 1) {
              for (var r = t[i].output, o = r.length, s = 1, a = 1, c = 0; c < o; c += 1) {
                var l = e ? e[r[c].key].weight : 1,
                  u = (1 === l ? r[c].score : r[c].score || .001) * l;
                1 !== l ? a = Math.min(a, u) : (r[c].nScore = u, s *= u);
              }
              t[i].score = 1 === a ? s : a, this._log(t[i]);
            }
          }
        }, {
          key: "_sort",
          value: function value(e) {
            this._log("\n\nSorting...."), e.sort(this.options.sortFn);
          }
        }, {
          key: "_format",
          value: function value(e) {
            var t = [];
            if (this.options.verbose) {
              var i = [];
              this._log("\n\nOutput:\n\n", JSON.stringify(e, function (e, t) {
                if ("object" === n(t) && null !== t) {
                  if (-1 !== i.indexOf(t)) return;
                  i.push(t);
                }
                return t;
              })), i = null;
            }
            var r = [];
            this.options.includeMatches && r.push(function (e, t) {
              var i = e.output;
              t.matches = [];
              for (var n = 0, r = i.length; n < r; n += 1) {
                var o = i[n];
                if (0 !== o.matchedIndices.length) {
                  var s = {
                    indices: o.matchedIndices,
                    value: o.value
                  };
                  o.key && (s.key = o.key), o.hasOwnProperty("arrayIndex") && o.arrayIndex > -1 && (s.arrayIndex = o.arrayIndex), t.matches.push(s);
                }
              }
            }), this.options.includeScore && r.push(function (e, t) {
              t.score = e.score;
            });
            for (var o = 0, s = e.length; o < s; o += 1) {
              var a = e[o];
              if (this.options.id && (a.item = this.options.getFn(a.item, this.options.id)[0]), r.length) {
                for (var c = {
                    item: a.item
                  }, l = 0, u = r.length; l < u; l += 1) r[l](a, c);
                t.push(c);
              } else t.push(a.item);
            }
            return t;
          }
        }, {
          key: "_log",
          value: function value() {
            var e;
            this.options.verbose && (e = console).log.apply(e, arguments);
          }
        }]) && r(t.prototype, i), e;
      }();
    e.exports = c;
  }, function (e, t, i) {
    function n(e, t) {
      for (var i = 0; i < t.length; i++) {
        var n = t[i];
        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
      }
    }
    var r = i(3),
      o = i(4),
      s = i(7),
      a = function () {
        function e(t, i) {
          var n = i.location,
            r = void 0 === n ? 0 : n,
            o = i.distance,
            a = void 0 === o ? 100 : o,
            c = i.threshold,
            l = void 0 === c ? .6 : c,
            u = i.maxPatternLength,
            h = void 0 === u ? 32 : u,
            d = i.isCaseSensitive,
            p = void 0 !== d && d,
            f = i.tokenSeparator,
            m = void 0 === f ? / +/g : f,
            v = i.findAllMatches,
            _ = void 0 !== v && v,
            g = i.minMatchCharLength,
            y = void 0 === g ? 1 : g;
          !function (e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
          }(this, e), this.options = {
            location: r,
            distance: a,
            threshold: l,
            maxPatternLength: h,
            isCaseSensitive: p,
            tokenSeparator: m,
            findAllMatches: _,
            minMatchCharLength: y
          }, this.pattern = this.options.isCaseSensitive ? t : t.toLowerCase(), this.pattern.length <= h && (this.patternAlphabet = s(this.pattern));
        }
        var t, i;
        return t = e, (i = [{
          key: "search",
          value: function value(e) {
            if (this.options.isCaseSensitive || (e = e.toLowerCase()), this.pattern === e) return {
              isMatch: !0,
              score: 0,
              matchedIndices: [[0, e.length - 1]]
            };
            var t = this.options,
              i = t.maxPatternLength,
              n = t.tokenSeparator;
            if (this.pattern.length > i) return r(e, this.pattern, n);
            var s = this.options,
              a = s.location,
              c = s.distance,
              l = s.threshold,
              u = s.findAllMatches,
              h = s.minMatchCharLength;
            return o(e, this.pattern, this.patternAlphabet, {
              location: a,
              distance: c,
              threshold: l,
              findAllMatches: u,
              minMatchCharLength: h
            });
          }
        }]) && n(t.prototype, i), e;
      }();
    e.exports = a;
  }, function (e, t) {
    var i = /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g;
    e.exports = function (e, t) {
      var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : / +/g,
        r = new RegExp(t.replace(i, "\\$&").replace(n, "|")),
        o = e.match(r),
        s = !!o,
        a = [];
      if (s) for (var c = 0, l = o.length; c < l; c += 1) {
        var u = o[c];
        a.push([e.indexOf(u), u.length - 1]);
      }
      return {
        score: s ? .5 : 1,
        isMatch: s,
        matchedIndices: a
      };
    };
  }, function (e, t, i) {
    var n = i(5),
      r = i(6);
    e.exports = function (e, t, i, o) {
      for (var s = o.location, a = void 0 === s ? 0 : s, c = o.distance, l = void 0 === c ? 100 : c, u = o.threshold, h = void 0 === u ? .6 : u, d = o.findAllMatches, p = void 0 !== d && d, f = o.minMatchCharLength, m = void 0 === f ? 1 : f, v = a, _ = e.length, g = h, y = e.indexOf(t, v), b = t.length, E = [], S = 0; S < _; S += 1) E[S] = 0;
      if (-1 !== y) {
        var I = n(t, {
          errors: 0,
          currentLocation: y,
          expectedLocation: v,
          distance: l
        });
        if (g = Math.min(I, g), -1 !== (y = e.lastIndexOf(t, v + b))) {
          var O = n(t, {
            errors: 0,
            currentLocation: y,
            expectedLocation: v,
            distance: l
          });
          g = Math.min(O, g);
        }
      }
      y = -1;
      for (var C = [], T = 1, w = b + _, A = 1 << (b <= 31 ? b - 1 : 30), L = 0; L < b; L += 1) {
        for (var P = 0, D = w; P < D;) n(t, {
          errors: L,
          currentLocation: v + D,
          expectedLocation: v,
          distance: l
        }) <= g ? P = D : w = D, D = Math.floor((w - P) / 2 + P);
        w = D;
        var x = Math.max(1, v - D + 1),
          N = p ? _ : Math.min(v + D, _) + b,
          M = Array(N + 2);
        M[N + 1] = (1 << L) - 1;
        for (var j = N; j >= x; j -= 1) {
          var k = j - 1,
            F = i[e.charAt(k)];
          if (F && (E[k] = 1), M[j] = (M[j + 1] << 1 | 1) & F, 0 !== L && (M[j] |= (C[j + 1] | C[j]) << 1 | 1 | C[j + 1]), M[j] & A && (T = n(t, {
            errors: L,
            currentLocation: k,
            expectedLocation: v,
            distance: l
          })) <= g) {
            if (g = T, (y = k) <= v) break;
            x = Math.max(1, 2 * v - y);
          }
        }
        if (n(t, {
          errors: L + 1,
          currentLocation: v,
          expectedLocation: v,
          distance: l
        }) > g) break;
        C = M;
      }
      return {
        isMatch: y >= 0,
        score: 0 === T ? .001 : T,
        matchedIndices: r(E, m)
      };
    };
  }, function (e, t) {
    e.exports = function (e, t) {
      var i = t.errors,
        n = void 0 === i ? 0 : i,
        r = t.currentLocation,
        o = void 0 === r ? 0 : r,
        s = t.expectedLocation,
        a = void 0 === s ? 0 : s,
        c = t.distance,
        l = void 0 === c ? 100 : c,
        u = n / e.length,
        h = Math.abs(a - o);
      return l ? u + h / l : h ? 1 : u;
    };
  }, function (e, t) {
    e.exports = function () {
      for (var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1, i = [], n = -1, r = -1, o = 0, s = e.length; o < s; o += 1) {
        var a = e[o];
        a && -1 === n ? n = o : a || -1 === n || ((r = o - 1) - n + 1 >= t && i.push([n, r]), n = -1);
      }
      return e[o - 1] && o - n >= t && i.push([n, o - 1]), i;
    };
  }, function (e, t) {
    e.exports = function (e) {
      for (var t = {}, i = e.length, n = 0; n < i; n += 1) t[e.charAt(n)] = 0;
      for (var r = 0; r < i; r += 1) t[e.charAt(r)] |= 1 << i - r - 1;
      return t;
    };
  }, function (e, t, i) {
    var n = i(0);
    e.exports = function (e, t) {
      return function e(t, i, r) {
        if (i) {
          var o = i.indexOf("."),
            s = i,
            a = null;
          -1 !== o && (s = i.slice(0, o), a = i.slice(o + 1));
          var c = t[s];
          if (null != c) if (a || "string" != typeof c && "number" != typeof c) {
            if (n(c)) for (var l = 0, u = c.length; l < u; l += 1) e(c[l], a, r);else a && e(c, a, r);
          } else r.push(c.toString());
        } else r.push(t);
        return r;
      }(e, t, []);
    };
  }]);
}, function (e, t, i) {
  "use strict";

  var n = function n(e) {
    return function (e) {
      return !!e && "object" == _typeof(e);
    }(e) && !function (e) {
      var t = Object.prototype.toString.call(e);
      return "[object RegExp]" === t || "[object Date]" === t || function (e) {
        return e.$$typeof === r;
      }(e);
    }(e);
  };
  var r = "function" == typeof Symbol && Symbol["for"] ? Symbol["for"]("react.element") : 60103;
  function o(e, t) {
    return !1 !== t.clone && t.isMergeableObject(e) ? l((i = e, Array.isArray(i) ? [] : {}), e, t) : e;
    var i;
  }
  function s(e, t, i) {
    return e.concat(t).map(function (e) {
      return o(e, i);
    });
  }
  function a(e) {
    return Object.keys(e).concat(function (e) {
      return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(e).filter(function (t) {
        return e.propertyIsEnumerable(t);
      }) : [];
    }(e));
  }
  function c(e, t, i) {
    var n = {};
    return i.isMergeableObject(e) && a(e).forEach(function (t) {
      n[t] = o(e[t], i);
    }), a(t).forEach(function (r) {
      (function (e, t) {
        try {
          return t in e && !(Object.hasOwnProperty.call(e, t) && Object.propertyIsEnumerable.call(e, t));
        } catch (e) {
          return !1;
        }
      })(e, r) || (i.isMergeableObject(t[r]) && e[r] ? n[r] = function (e, t) {
        if (!t.customMerge) return l;
        var i = t.customMerge(e);
        return "function" == typeof i ? i : l;
      }(r, i)(e[r], t[r], i) : n[r] = o(t[r], i));
    }), n;
  }
  function l(e, t, i) {
    (i = i || {}).arrayMerge = i.arrayMerge || s, i.isMergeableObject = i.isMergeableObject || n, i.cloneUnlessOtherwiseSpecified = o;
    var r = Array.isArray(t);
    return r === Array.isArray(e) ? r ? i.arrayMerge(e, t, i) : c(e, t, i) : o(t, i);
  }
  l.all = function (e, t) {
    if (!Array.isArray(e)) throw new Error("first argument should be an array");
    return e.reduce(function (e, i) {
      return l(e, i, t);
    }, {});
  };
  var u = l;
  e.exports = u;
}, function (e, t, i) {
  "use strict";

  var n = this && this.__spreadArrays || function () {
      for (var e = 0, t = 0, i = arguments.length; t < i; t++) e += arguments[t].length;
      var n = Array(e),
        r = 0;
      for (t = 0; t < i; t++) for (var o = arguments[t], s = 0, a = o.length; s < a; s++, r++) n[r] = o[s];
      return n;
    },
    r = this && this.__importDefault || function (e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    };
  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var o = i(3),
    s = r(i(4)),
    a = function () {
      function e() {
        this._store = o.createStore(s["default"], window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());
      }
      return e.prototype.subscribe = function (e) {
        this._store.subscribe(e);
      }, e.prototype.dispatch = function (e) {
        this._store.dispatch(e);
      }, Object.defineProperty(e.prototype, "state", {
        get: function get() {
          return this._store.getState();
        },
        enumerable: !0,
        configurable: !0
      }), Object.defineProperty(e.prototype, "items", {
        get: function get() {
          return this.state.items;
        },
        enumerable: !0,
        configurable: !0
      }), Object.defineProperty(e.prototype, "activeItems", {
        get: function get() {
          return this.items.filter(function (e) {
            return !0 === e.active;
          });
        },
        enumerable: !0,
        configurable: !0
      }), Object.defineProperty(e.prototype, "highlightedActiveItems", {
        get: function get() {
          return this.items.filter(function (e) {
            return e.active && e.highlighted;
          });
        },
        enumerable: !0,
        configurable: !0
      }), Object.defineProperty(e.prototype, "choices", {
        get: function get() {
          return this.state.choices;
        },
        enumerable: !0,
        configurable: !0
      }), Object.defineProperty(e.prototype, "activeChoices", {
        get: function get() {
          return this.choices.filter(function (e) {
            return !0 === e.active;
          });
        },
        enumerable: !0,
        configurable: !0
      }), Object.defineProperty(e.prototype, "selectableChoices", {
        get: function get() {
          return this.choices.filter(function (e) {
            return !0 !== e.disabled;
          });
        },
        enumerable: !0,
        configurable: !0
      }), Object.defineProperty(e.prototype, "searchableChoices", {
        get: function get() {
          return this.selectableChoices.filter(function (e) {
            return !0 !== e.placeholder;
          });
        },
        enumerable: !0,
        configurable: !0
      }), Object.defineProperty(e.prototype, "placeholderChoice", {
        get: function get() {
          return n(this.choices).reverse().find(function (e) {
            return !0 === e.placeholder;
          });
        },
        enumerable: !0,
        configurable: !0
      }), Object.defineProperty(e.prototype, "groups", {
        get: function get() {
          return this.state.groups;
        },
        enumerable: !0,
        configurable: !0
      }), Object.defineProperty(e.prototype, "activeGroups", {
        get: function get() {
          var e = this.groups,
            t = this.choices;
          return e.filter(function (e) {
            var i = !0 === e.active && !1 === e.disabled,
              n = t.some(function (e) {
                return !0 === e.active && !1 === e.disabled;
              });
            return i && n;
          }, []);
        },
        enumerable: !0,
        configurable: !0
      }), e.prototype.isLoading = function () {
        return this.state.loading;
      }, e.prototype.getChoiceById = function (e) {
        return this.activeChoices.find(function (t) {
          return t.id === parseInt(e, 10);
        });
      }, e.prototype.getGroupById = function (e) {
        return this.groups.find(function (t) {
          return t.id === e;
        });
      }, e;
    }();
  t["default"] = a;
}, function (e, t) {
  var i;
  i = function () {
    return this;
  }();
  try {
    i = i || new Function("return this")();
  } catch (e) {
    "object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) && (i = window);
  }
  e.exports = i;
}, function (e, t) {
  e.exports = function (e) {
    if (!e.webpackPolyfill) {
      var t = Object.create(e);
      t.children || (t.children = []), Object.defineProperty(t, "loaded", {
        enumerable: !0,
        get: function get() {
          return t.l;
        }
      }), Object.defineProperty(t, "id", {
        enumerable: !0,
        get: function get() {
          return t.i;
        }
      }), Object.defineProperty(t, "exports", {
        enumerable: !0
      }), t.webpackPolyfill = 1;
    }
    return t;
  };
}, function (e, t, i) {
  "use strict";

  var n = this && this.__spreadArrays || function () {
    for (var e = 0, t = 0, i = arguments.length; t < i; t++) e += arguments[t].length;
    var n = Array(e),
      r = 0;
    for (t = 0; t < i; t++) for (var o = arguments[t], s = 0, a = o.length; s < a; s++, r++) n[r] = o[s];
    return n;
  };
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.defaultState = [], t["default"] = function (e, i) {
    switch (void 0 === e && (e = t.defaultState), i.type) {
      case "ADD_ITEM":
        var r = i;
        return n(e, [{
          id: r.id,
          choiceId: r.choiceId,
          groupId: r.groupId,
          value: r.value,
          label: r.label,
          active: !0,
          highlighted: !1,
          customProperties: r.customProperties,
          placeholder: r.placeholder || !1,
          keyCode: null
        }]).map(function (e) {
          var t = e;
          return t.highlighted = !1, t;
        });
      case "REMOVE_ITEM":
        return e.map(function (e) {
          var t = e;
          return t.id === i.id && (t.active = !1), t;
        });
      case "HIGHLIGHT_ITEM":
        var o = i;
        return e.map(function (e) {
          var t = e;
          return t.id === o.id && (t.highlighted = o.highlighted), t;
        });
      default:
        return e;
    }
  };
}, function (e, t, i) {
  "use strict";

  var n = this && this.__spreadArrays || function () {
    for (var e = 0, t = 0, i = arguments.length; t < i; t++) e += arguments[t].length;
    var n = Array(e),
      r = 0;
    for (t = 0; t < i; t++) for (var o = arguments[t], s = 0, a = o.length; s < a; s++, r++) n[r] = o[s];
    return n;
  };
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.defaultState = [], t["default"] = function (e, i) {
    switch (void 0 === e && (e = t.defaultState), i.type) {
      case "ADD_GROUP":
        var r = i;
        return n(e, [{
          id: r.id,
          value: r.value,
          active: r.active,
          disabled: r.disabled
        }]);
      case "CLEAR_CHOICES":
        return [];
      default:
        return e;
    }
  };
}, function (e, t, i) {
  "use strict";

  var n = this && this.__spreadArrays || function () {
    for (var e = 0, t = 0, i = arguments.length; t < i; t++) e += arguments[t].length;
    var n = Array(e),
      r = 0;
    for (t = 0; t < i; t++) for (var o = arguments[t], s = 0, a = o.length; s < a; s++, r++) n[r] = o[s];
    return n;
  };
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.defaultState = [], t["default"] = function (e, i) {
    switch (void 0 === e && (e = t.defaultState), i.type) {
      case "ADD_CHOICE":
        var r = i,
          o = {
            id: r.id,
            elementId: r.elementId,
            groupId: r.groupId,
            value: r.value,
            label: r.label || r.value,
            disabled: r.disabled || !1,
            selected: !1,
            active: !0,
            score: 9999,
            customProperties: r.customProperties,
            placeholder: r.placeholder || !1
          };
        return n(e, [o]);
      case "ADD_ITEM":
        var s = i;
        return s.choiceId > -1 ? e.map(function (e) {
          var t = e;
          return t.id === parseInt("" + s.choiceId, 10) && (t.selected = !0), t;
        }) : e;
      case "REMOVE_ITEM":
        var a = i;
        return a.choiceId && a.choiceId > -1 ? e.map(function (e) {
          var t = e;
          return t.id === parseInt("" + a.choiceId, 10) && (t.selected = !1), t;
        }) : e;
      case "FILTER_CHOICES":
        var c = i;
        return e.map(function (e) {
          var t = e;
          return t.active = c.results.some(function (e) {
            var i = e.item,
              n = e.score;
            return i.id === t.id && (t.score = n, !0);
          }), t;
        });
      case "ACTIVATE_CHOICES":
        var l = i;
        return e.map(function (e) {
          var t = e;
          return t.active = l.active, t;
        });
      case "CLEAR_CHOICES":
        return t.defaultState;
      default:
        return e;
    }
  };
}, function (e, t, i) {
  "use strict";

  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.defaultState = !1;
  t["default"] = function (e, i) {
    switch (void 0 === e && (e = t.defaultState), i.type) {
      case "SET_IS_LOADING":
        return i.isLoading;
      default:
        return e;
    }
  };
}, function (e, t, i) {
  "use strict";

  var n = this && this.__importDefault || function (e) {
    return e && e.__esModule ? e : {
      "default": e
    };
  };
  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var r = n(i(19));
  t.Dropdown = r["default"];
  var o = n(i(20));
  t.Container = o["default"];
  var s = n(i(21));
  t.Input = s["default"];
  var a = n(i(22));
  t.List = a["default"];
  var c = n(i(23));
  t.WrappedInput = c["default"];
  var l = n(i(24));
  t.WrappedSelect = l["default"];
}, function (e, t, i) {
  "use strict";

  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var n = function () {
    function e(e) {
      var t = e.element,
        i = e.type,
        n = e.classNames;
      this.element = t, this.classNames = n, this.type = i, this.isActive = !1;
    }
    return Object.defineProperty(e.prototype, "distanceFromTopWindow", {
      get: function get() {
        return this.element.getBoundingClientRect().bottom;
      },
      enumerable: !0,
      configurable: !0
    }), e.prototype.getChild = function (e) {
      return this.element.querySelector(e);
    }, e.prototype.show = function () {
      return this.element.classList.add(this.classNames.activeState), this.element.setAttribute("aria-expanded", "true"), this.isActive = !0, this;
    }, e.prototype.hide = function () {
      return this.element.classList.remove(this.classNames.activeState), this.element.setAttribute("aria-expanded", "false"), this.isActive = !1, this;
    }, e;
  }();
  t["default"] = n;
}, function (e, t, i) {
  "use strict";

  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var n = i(1),
    r = i(0),
    o = function () {
      function e(e) {
        var t = e.element,
          i = e.type,
          n = e.classNames,
          r = e.position;
        this.element = t, this.classNames = n, this.type = i, this.position = r, this.isOpen = !1, this.isFlipped = !1, this.isFocussed = !1, this.isDisabled = !1, this.isLoading = !1, this._onFocus = this._onFocus.bind(this), this._onBlur = this._onBlur.bind(this);
      }
      return e.prototype.addEventListeners = function () {
        this.element.addEventListener("focus", this._onFocus), this.element.addEventListener("blur", this._onBlur);
      }, e.prototype.removeEventListeners = function () {
        this.element.removeEventListener("focus", this._onFocus), this.element.removeEventListener("blur", this._onBlur);
      }, e.prototype.shouldFlip = function (e) {
        if ("number" != typeof e) return !1;
        var t = !1;
        return "auto" === this.position ? t = !window.matchMedia("(min-height: " + (e + 1) + "px)").matches : "top" === this.position && (t = !0), t;
      }, e.prototype.setActiveDescendant = function (e) {
        this.element.setAttribute("aria-activedescendant", e);
      }, e.prototype.removeActiveDescendant = function () {
        this.element.removeAttribute("aria-activedescendant");
      }, e.prototype.open = function (e) {
        this.element.classList.add(this.classNames.openState), this.element.setAttribute("aria-expanded", "true"), this.isOpen = !0, this.shouldFlip(e) && (this.element.classList.add(this.classNames.flippedState), this.isFlipped = !0);
      }, e.prototype.close = function () {
        this.element.classList.remove(this.classNames.openState), this.element.setAttribute("aria-expanded", "false"), this.removeActiveDescendant(), this.isOpen = !1, this.isFlipped && (this.element.classList.remove(this.classNames.flippedState), this.isFlipped = !1);
      }, e.prototype.focus = function () {
        this.isFocussed || this.element.focus();
      }, e.prototype.addFocusState = function () {
        this.element.classList.add(this.classNames.focusState);
      }, e.prototype.removeFocusState = function () {
        this.element.classList.remove(this.classNames.focusState);
      }, e.prototype.enable = function () {
        this.element.classList.remove(this.classNames.disabledState), this.element.removeAttribute("aria-disabled"), this.type === r.SELECT_ONE_TYPE && this.element.setAttribute("tabindex", "0"), this.isDisabled = !1;
      }, e.prototype.disable = function () {
        this.element.classList.add(this.classNames.disabledState), this.element.setAttribute("aria-disabled", "true"), this.type === r.SELECT_ONE_TYPE && this.element.setAttribute("tabindex", "-1"), this.isDisabled = !0;
      }, e.prototype.wrap = function (e) {
        n.wrap(e, this.element);
      }, e.prototype.unwrap = function (e) {
        this.element.parentNode && (this.element.parentNode.insertBefore(e, this.element), this.element.parentNode.removeChild(this.element));
      }, e.prototype.addLoadingState = function () {
        this.element.classList.add(this.classNames.loadingState), this.element.setAttribute("aria-busy", "true"), this.isLoading = !0;
      }, e.prototype.removeLoadingState = function () {
        this.element.classList.remove(this.classNames.loadingState), this.element.removeAttribute("aria-busy"), this.isLoading = !1;
      }, e.prototype._onFocus = function () {
        this.isFocussed = !0;
      }, e.prototype._onBlur = function () {
        this.isFocussed = !1;
      }, e;
    }();
  t["default"] = o;
}, function (e, t, i) {
  "use strict";

  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var n = i(1),
    r = i(0),
    o = function () {
      function e(e) {
        var t = e.element,
          i = e.type,
          n = e.classNames,
          r = e.preventPaste;
        this.element = t, this.type = i, this.classNames = n, this.preventPaste = r, this.isFocussed = this.element.isEqualNode(document.activeElement), this.isDisabled = t.disabled, this._onPaste = this._onPaste.bind(this), this._onInput = this._onInput.bind(this), this._onFocus = this._onFocus.bind(this), this._onBlur = this._onBlur.bind(this);
      }
      return Object.defineProperty(e.prototype, "placeholder", {
        set: function set(e) {
          this.element.placeholder = e;
        },
        enumerable: !0,
        configurable: !0
      }), Object.defineProperty(e.prototype, "value", {
        get: function get() {
          return n.sanitise(this.element.value);
        },
        set: function set(e) {
          this.element.value = e;
        },
        enumerable: !0,
        configurable: !0
      }), e.prototype.addEventListeners = function () {
        this.element.addEventListener("paste", this._onPaste), this.element.addEventListener("input", this._onInput, {
          passive: !0
        }), this.element.addEventListener("focus", this._onFocus, {
          passive: !0
        }), this.element.addEventListener("blur", this._onBlur, {
          passive: !0
        });
      }, e.prototype.removeEventListeners = function () {
        this.element.removeEventListener("input", this._onInput), this.element.removeEventListener("paste", this._onPaste), this.element.removeEventListener("focus", this._onFocus), this.element.removeEventListener("blur", this._onBlur);
      }, e.prototype.enable = function () {
        this.element.removeAttribute("disabled"), this.isDisabled = !1;
      }, e.prototype.disable = function () {
        this.element.setAttribute("disabled", ""), this.isDisabled = !0;
      }, e.prototype.focus = function () {
        this.isFocussed || this.element.focus();
      }, e.prototype.blur = function () {
        this.isFocussed && this.element.blur();
      }, e.prototype.clear = function (e) {
        return void 0 === e && (e = !0), this.element.value && (this.element.value = ""), e && this.setWidth(), this;
      }, e.prototype.setWidth = function () {
        var e = this.element,
          t = e.style,
          i = e.value,
          n = e.placeholder;
        t.minWidth = n.length + 1 + "ch", t.width = i.length + 1 + "ch";
      }, e.prototype.setActiveDescendant = function (e) {
        this.element.setAttribute("aria-activedescendant", e);
      }, e.prototype.removeActiveDescendant = function () {
        this.element.removeAttribute("aria-activedescendant");
      }, e.prototype._onInput = function () {
        this.type !== r.SELECT_ONE_TYPE && this.setWidth();
      }, e.prototype._onPaste = function (e) {
        this.preventPaste && e.preventDefault();
      }, e.prototype._onFocus = function () {
        this.isFocussed = !0;
      }, e.prototype._onBlur = function () {
        this.isFocussed = !1;
      }, e;
    }();
  t["default"] = o;
}, function (e, t, i) {
  "use strict";

  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var n = i(0),
    r = function () {
      function e(e) {
        var t = e.element;
        this.element = t, this.scrollPos = this.element.scrollTop, this.height = this.element.offsetHeight;
      }
      return e.prototype.clear = function () {
        this.element.innerHTML = "";
      }, e.prototype.append = function (e) {
        this.element.appendChild(e);
      }, e.prototype.getChild = function (e) {
        return this.element.querySelector(e);
      }, e.prototype.hasChildren = function () {
        return this.element.hasChildNodes();
      }, e.prototype.scrollToTop = function () {
        this.element.scrollTop = 0;
      }, e.prototype.scrollToChildElement = function (e, t) {
        var i = this;
        if (e) {
          var n = this.element.offsetHeight,
            r = this.element.scrollTop + n,
            o = e.offsetHeight,
            s = e.offsetTop + o,
            a = t > 0 ? this.element.scrollTop + s - r : e.offsetTop;
          requestAnimationFrame(function () {
            i._animateScroll(a, t);
          });
        }
      }, e.prototype._scrollDown = function (e, t, i) {
        var n = (i - e) / t,
          r = n > 1 ? n : 1;
        this.element.scrollTop = e + r;
      }, e.prototype._scrollUp = function (e, t, i) {
        var n = (e - i) / t,
          r = n > 1 ? n : 1;
        this.element.scrollTop = e - r;
      }, e.prototype._animateScroll = function (e, t) {
        var i = this,
          r = n.SCROLLING_SPEED,
          o = this.element.scrollTop,
          s = !1;
        t > 0 ? (this._scrollDown(o, r, e), o < e && (s = !0)) : (this._scrollUp(o, r, e), o > e && (s = !0)), s && requestAnimationFrame(function () {
          i._animateScroll(e, t);
        });
      }, e;
    }();
  t["default"] = r;
}, function (e, t, i) {
  "use strict";

  var _n,
    r = this && this.__extends || (_n = function n(e, t) {
      return (_n = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var i in t) t.hasOwnProperty(i) && (e[i] = t[i]);
      })(e, t);
    }, function (e, t) {
      function i() {
        this.constructor = e;
      }
      _n(e, t), e.prototype = null === t ? Object.create(t) : (i.prototype = t.prototype, new i());
    }),
    o = this && this.__importDefault || function (e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    };
  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var s = function (e) {
    function t(t) {
      var i = t.element,
        n = t.classNames,
        r = t.delimiter,
        o = e.call(this, {
          element: i,
          classNames: n
        }) || this;
      return o.delimiter = r, o;
    }
    return r(t, e), Object.defineProperty(t.prototype, "value", {
      get: function get() {
        return this.element.value;
      },
      set: function set(e) {
        this.element.setAttribute("value", e), this.element.value = e;
      },
      enumerable: !0,
      configurable: !0
    }), t;
  }(o(i(5))["default"]);
  t["default"] = s;
}, function (e, t, i) {
  "use strict";

  var _n2,
    r = this && this.__extends || (_n2 = function n(e, t) {
      return (_n2 = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, t) {
        e.__proto__ = t;
      } || function (e, t) {
        for (var i in t) t.hasOwnProperty(i) && (e[i] = t[i]);
      })(e, t);
    }, function (e, t) {
      function i() {
        this.constructor = e;
      }
      _n2(e, t), e.prototype = null === t ? Object.create(t) : (i.prototype = t.prototype, new i());
    }),
    o = this && this.__importDefault || function (e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    };
  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var s = function (e) {
    function t(t) {
      var i = t.element,
        n = t.classNames,
        r = t.template,
        o = e.call(this, {
          element: i,
          classNames: n
        }) || this;
      return o.template = r, o;
    }
    return r(t, e), Object.defineProperty(t.prototype, "placeholderOption", {
      get: function get() {
        return this.element.querySelector('option[value=""]') || this.element.querySelector("option[placeholder]");
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "optionGroups", {
      get: function get() {
        return Array.from(this.element.getElementsByTagName("OPTGROUP"));
      },
      enumerable: !0,
      configurable: !0
    }), Object.defineProperty(t.prototype, "options", {
      get: function get() {
        return Array.from(this.element.options);
      },
      set: function set(e) {
        var t = this,
          i = document.createDocumentFragment();
        e.forEach(function (e) {
          return n = e, r = t.template(n), void i.appendChild(r);
          var n, r;
        }), this.appendDocFragment(i);
      },
      enumerable: !0,
      configurable: !0
    }), t.prototype.appendDocFragment = function (e) {
      this.element.innerHTML = "", this.element.appendChild(e);
    }, t;
  }(o(i(5))["default"]);
  t["default"] = s;
}, function (e, t, i) {
  "use strict";

  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var n = {
    containerOuter: function containerOuter(e, t, i, n, r, o) {
      var s = e.containerOuter,
        a = Object.assign(document.createElement("div"), {
          className: s
        });
      return a.dataset.type = o, t && (a.dir = t), n && (a.tabIndex = 0), i && (a.setAttribute("role", r ? "combobox" : "listbox"), r && a.setAttribute("aria-autocomplete", "list")), a.setAttribute("aria-haspopup", "true"), a.setAttribute("aria-expanded", "false"), a;
    },
    containerInner: function containerInner(e) {
      var t = e.containerInner;
      return Object.assign(document.createElement("div"), {
        className: t
      });
    },
    itemList: function itemList(e, t) {
      var i = e.list,
        n = e.listSingle,
        r = e.listItems;
      return Object.assign(document.createElement("div"), {
        className: i + " " + (t ? n : r)
      });
    },
    placeholder: function placeholder(e, t) {
      var i = e.placeholder;
      return Object.assign(document.createElement("div"), {
        className: i,
        innerHTML: t
      });
    },
    item: function item(e, t, i) {
      var n = e.item,
        r = e.button,
        o = e.highlightedState,
        s = e.itemSelectable,
        a = e.placeholder,
        c = t.id,
        l = t.value,
        u = t.label,
        h = t.customProperties,
        d = t.active,
        p = t.disabled,
        f = t.highlighted,
        m = t.placeholder,
        v = Object.assign(document.createElement("div"), {
          className: n,
          innerHTML: u
        });
      if (Object.assign(v.dataset, {
        item: "",
        id: c,
        value: l,
        customProperties: h
      }), d && v.setAttribute("aria-selected", "true"), p && v.setAttribute("aria-disabled", "true"), m && v.classList.add(a), v.classList.add(f ? o : s), i) {
        p && v.classList.remove(s), v.dataset.deletable = "";
        var _ = Object.assign(document.createElement("button"), {
          type: "button",
          className: r,
          innerHTML: "Remove item"
        });
        _.setAttribute("aria-label", "Remove item: '" + l + "'"), _.dataset.button = "", v.appendChild(_);
      }
      return v;
    },
    choiceList: function choiceList(e, t) {
      var i = e.list,
        n = Object.assign(document.createElement("div"), {
          className: i
        });
      return t || n.setAttribute("aria-multiselectable", "true"), n.setAttribute("role", "listbox"), n;
    },
    choiceGroup: function choiceGroup(e, t) {
      var i = e.group,
        n = e.groupHeading,
        r = e.itemDisabled,
        o = t.id,
        s = t.value,
        a = t.disabled,
        c = Object.assign(document.createElement("div"), {
          className: i + " " + (a ? r : "")
        });
      return c.setAttribute("role", "group"), Object.assign(c.dataset, {
        group: "",
        id: o,
        value: s
      }), a && c.setAttribute("aria-disabled", "true"), c.appendChild(Object.assign(document.createElement("div"), {
        className: n,
        innerHTML: s
      })), c;
    },
    choice: function choice(e, t, i) {
      var n = e.item,
        r = e.itemChoice,
        o = e.itemSelectable,
        s = e.selectedState,
        a = e.itemDisabled,
        c = e.placeholder,
        l = t.id,
        u = t.value,
        h = t.label,
        d = t.groupId,
        p = t.elementId,
        f = t.disabled,
        m = t.selected,
        v = t.placeholder,
        _ = Object.assign(document.createElement("div"), {
          id: p,
          innerHTML: h,
          className: n + " " + r
        });
      return m && _.classList.add(s), v && _.classList.add(c), _.setAttribute("role", d && d > 0 ? "treeitem" : "option"), Object.assign(_.dataset, {
        choice: "",
        id: l,
        value: u,
        selectText: i
      }), f ? (_.classList.add(a), _.dataset.choiceDisabled = "", _.setAttribute("aria-disabled", "true")) : (_.classList.add(o), _.dataset.choiceSelectable = ""), _;
    },
    input: function input(e, t) {
      var i = e.input,
        n = e.inputCloned,
        r = Object.assign(document.createElement("input"), {
          type: "text",
          className: i + " " + n,
          autocomplete: "off",
          autocapitalize: "off",
          spellcheck: !1
        });
      return r.setAttribute("role", "textbox"), r.setAttribute("aria-autocomplete", "list"), r.setAttribute("aria-label", t), r;
    },
    dropdown: function dropdown(e) {
      var t = e.list,
        i = e.listDropdown,
        n = document.createElement("div");
      return n.classList.add(t, i), n.setAttribute("aria-expanded", "false"), n;
    },
    notice: function notice(e, t, i) {
      var n = e.item,
        r = e.itemChoice,
        o = e.noResults,
        s = e.noChoices;
      void 0 === i && (i = "");
      var a = [n, r];
      return "no-choices" === i ? a.push(s) : "no-results" === i && a.push(o), Object.assign(document.createElement("div"), {
        innerHTML: t,
        className: a.join(" ")
      });
    },
    option: function option(e) {
      var t = e.label,
        i = e.value,
        n = e.customProperties,
        r = e.active,
        o = e.disabled,
        s = new Option(t, i, !1, r);
      return n && (s.dataset.customProperties = "" + n), s.disabled = !!o, s;
    }
  };
  t["default"] = n;
}, function (e, t, i) {
  "use strict";

  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var n = i(0);
  t.addChoice = function (e) {
    var t = e.value,
      i = e.label,
      r = e.id,
      o = e.groupId,
      s = e.disabled,
      a = e.elementId,
      c = e.customProperties,
      l = e.placeholder,
      u = e.keyCode;
    return {
      type: n.ACTION_TYPES.ADD_CHOICE,
      value: t,
      label: i,
      id: r,
      groupId: o,
      disabled: s,
      elementId: a,
      customProperties: c,
      placeholder: l,
      keyCode: u
    };
  }, t.filterChoices = function (e) {
    return {
      type: n.ACTION_TYPES.FILTER_CHOICES,
      results: e
    };
  }, t.activateChoices = function (e) {
    return void 0 === e && (e = !0), {
      type: n.ACTION_TYPES.ACTIVATE_CHOICES,
      active: e
    };
  }, t.clearChoices = function () {
    return {
      type: n.ACTION_TYPES.CLEAR_CHOICES
    };
  };
}, function (e, t, i) {
  "use strict";

  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var n = i(0);
  t.addItem = function (e) {
    var t = e.value,
      i = e.label,
      r = e.id,
      o = e.choiceId,
      s = e.groupId,
      a = e.customProperties,
      c = e.placeholder,
      l = e.keyCode;
    return {
      type: n.ACTION_TYPES.ADD_ITEM,
      value: t,
      label: i,
      id: r,
      choiceId: o,
      groupId: s,
      customProperties: a,
      placeholder: c,
      keyCode: l
    };
  }, t.removeItem = function (e, t) {
    return {
      type: n.ACTION_TYPES.REMOVE_ITEM,
      id: e,
      choiceId: t
    };
  }, t.highlightItem = function (e, t) {
    return {
      type: n.ACTION_TYPES.HIGHLIGHT_ITEM,
      id: e,
      highlighted: t
    };
  };
}, function (e, t, i) {
  "use strict";

  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var n = i(0);
  t.addGroup = function (e) {
    var t = e.value,
      i = e.id,
      r = e.active,
      o = e.disabled;
    return {
      type: n.ACTION_TYPES.ADD_GROUP,
      value: t,
      id: i,
      active: r,
      disabled: o
    };
  };
}, function (e, t, i) {
  "use strict";

  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var n = i(0);
  t.clearAll = function () {
    return {
      type: n.ACTION_TYPES.CLEAR_ALL
    };
  }, t.resetTo = function (e) {
    return {
      type: n.ACTION_TYPES.RESET_TO,
      state: e
    };
  }, t.setIsLoading = function (e) {
    return {
      type: n.ACTION_TYPES.SET_IS_LOADING,
      isLoading: e
    };
  };
}])["default"];
"use strict";

// import inputmask from 'inputmask';
// import noUiSlider from 'nouislider';

//swipers
var usefulSwiper = new Swiper(".js-useful-swiper", {
  resizeObserver: true,
  updateOnWindowResize: true,
  direction: "horizontal",
  slidesPerColumn: 1,
  slidesPerView: "auto",
  spaceBetween: 32,
  navigation: {
    nextEl: ".js-useful-next",
    prevEl: ".js-useful-prev"
  },
  pagination: {
    el: '.swiper-pagination',
    type: 'bullets',
    clickable: true
  },
  breakpoints: {
    320: {
      slidesPerGroup: 1,
      spaceBetween: 16
    },
    570: {
      slidesPerGroup: 2,
      spaceBetween: 32
    },
    1023: {
      slidesPerGroup: 3
    }
  }
});
var swiper = new Swiper('.js-promo-swiper', {
  slidesPerView: 1,
  loop: true,
  navigation: {
    nextEl: '.swiper-button-next',
    prevEl: '.swiper-button-prev'
  },
  pagination: {
    el: '.swiper-pagination',
    type: 'bullets',
    clickable: true
  }
});
var offersSwiper = new Swiper(".js-special-offers-swiper", {
  resizeObserver: true,
  updateOnWindowResize: true,
  direction: "horizontal",
  slidesPerColumn: 1,
  slidesPerView: "auto",
  spaceBetween: 32,
  autoHeight: true,
  navigation: {
    nextEl: ".js-special-offers-next",
    prevEl: ".js-special-offers-prev"
  },
  breakpoints: {
    320: {
      slidesPerGroup: 1
    },
    570: {
      slidesPerGroup: 2
    },
    1023: {
      slidesPerGroup: 3
    }
  }
});

//new select 
var element = document.querySelector('#city-select');
var choices = new Choices(element, {
  allowHTML: true,
  searchEnabled: false,
  placeholder: true,
  itemSelectText: ''
});
//end new select

// const choices = new Choices("[data-trigger]", {
//  searchEnabled: false,
//  itemSelectText: "",
// });

var selectchoices = new Choices("#header-bottom__select", {
  searchEnabled: false,
  itemSelectText: ""
});

//burger
var burger = document.querySelector(".js-burger");
var headerNav = document.querySelector(".header__nav");
function closeMenu() {
  burger.classList.remove("active");
  headerNav.classList.remove("active");
}
function openMenu() {
  burger.classList.add("active");
  headerNav.classList.add("active");
}
if (burger) {
  document.body.addEventListener("click", function (e) {
    var target = e.target;
    if (!target.closest(".active")) {
      closeMenu();
    }
  });
  burger.addEventListener("click", function () {
    if (burger.classList.contains("active")) {
      closeMenu();
      return;
    }
    openMenu();
  });
  window.addEventListener("resize", function () {
    closeMenu();
  });
}

//validation

// const validation = new JustValidate('.js-form');
//         const selector = document.querySelector("input[type='tel']");
//         const im = new Inputmask("+7 (999)-999-99-99");
//         im.mask(selector);

//         validation
//           .addField('.name', [{
//               rule: 'minLength',
//               value: 2,
//               errorMessage: "ÐÑ Ð½Ðµ Ð²Ð²ÐµÐ»Ð¸ Ð¸Ð¼Ñ"
//             },
//             {
//               rule: 'maxLength',
//               value: 25,
//               errorMessage: "ÐÑ Ð½Ðµ Ð²Ð²ÐµÐ»Ð¸ Ð¸Ð¼Ñ"
//             }
//           ])
//           .addField('.mail', [{
//               rule: 'required',
//               errorMessage: 'ÐÑ Ð½Ðµ Ð²Ð²ÐµÐ»Ð¸ e-mail',
//             },
//             {
//               rule: 'email',
//               errorMessage: 'ÐÑ Ð½Ðµ Ð²Ð²ÐµÐ»Ð¸ e-mail',
//             }
//           ])
//           .addField('.tel', [{
//             rule: "function",
//             validator: function (name, value) {
//               const phone = selector.inputmask.unmaskedvalue();

//               return Number(phone) && phone.length === 10;
//             },
//             errorMessage: 'ÐÑ Ð½Ðµ Ð²Ð²ÐµÐ»Ð¸ ÑÐµÐ»ÐµÑÐ¾Ð½',
//           }]);

var phoneInput = document.getElementById("tel");
if (phoneInput) {
  var im = new Inputmask("+7 (999)-999-99-99");
  im.mask(phoneInput);
}
var form = document.querySelector(".js-form");
if (form) {
  var _popup = document.querySelector(".js-popup-call");
  new JustValidate(".js-form", {
    rules: {
      name: {
        required: true,
        minLength: 2,
        maxLength: 20
      },
      tel: {
        required: true,
        "function": function _function() {
          var phone = phoneInput.inputmask.unmaskedvalue();
          return Number(phone) && phone.length === 10;
        }
      },
      mail: {
        required: true,
        email: true
      },
      checkbox: {
        required: true
      }
    },
    focusWrongField: true,
    messages: {
      name: {
        required: '"ÐÐ¼Ñ" Ð¾Ð±ÑÐ·Ð°ÑÐµÐ»ÑÐ½Ð¾ Ð´Ð»Ñ Ð·Ð°Ð¿Ð¾Ð»Ð½ÐµÐ½Ð¸Ñ',
        minLength: '"ÐÐ¼Ñ" Ð²Ð²ÐµÐ´ÐµÐ½Ð¾ Ð½ÐµÐºÐ¾ÑÑÐµÐºÑÐ½Ð¾, Ð¼Ð¸Ð½Ð¸Ð¼ÑÐ¼ 2 Ð·Ð½Ð°ÐºÐ°',
        maxLength: '"ÐÐ¼Ñ" Ð²Ð²ÐµÐ´ÐµÐ½Ð¾ Ð½ÐµÐºÐ¾ÑÑÐµÐºÑÐ½Ð¾, Ð¼Ð°ÐºÑÐ¸Ð¼ÑÐ¼ 20 Ð·Ð½Ð°ÐºÐ¾Ð²'
      },
      tel: {
        required: '"Ð¢ÐµÐ»ÐµÑÐ¾Ð½" Ð¾Ð±ÑÐ·Ð°ÑÐµÐ»ÑÐ½Ð¾ Ð´Ð»Ñ Ð·Ð°Ð¿Ð¾Ð»Ð½ÐµÐ½Ð¸Ñ',
        "function": 'ÐÐ°Ð¿Ð¾Ð»Ð½Ð¸ÑÐµ "Ð¢ÐµÐ»ÐµÑÐ¾Ð½"'
      },
      email: {
        required: '"Email" Ð¾Ð±ÑÐ·Ð°ÑÐµÐ»ÑÐ½Ð¾ Ð´Ð»Ñ Ð·Ð°Ð¿Ð¾Ð»Ð½ÐµÐ½Ð¸Ñ',
        email: 'ÐÐµÐ´Ð¾Ð¿ÑÑÑÐ¸Ð¼ÑÐ¹ ÑÐ¾ÑÐ¼Ð°Ñ "Email"'
      },
      checkbox: {
        required: 'ÐÐµÐ¾Ð±ÑÐ¾Ð´Ð¸Ð¼Ð¾ Ð¿ÑÐ¸Ð½ÑÑÑ "ÐÐ¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»ÑÑÐºÐ¾Ðµ ÑÐ¾Ð³Ð»Ð°ÑÐµÐ½Ð¸Ðµ"'
      }
    },
    submitHandler: function submitHandler(form) {
      var formData = new FormData(form);
      var xhr = new XMLHttpRequest();
      var body = document.querySelector("body");
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
          if (xhr.status === 200) {
            body.style.overflow = "hidden";
            _popup.classList.add("active");
            form.reset();
            var _popupForm = document.querySelector(".js-popup-form");
            if (_popupForm) _popupForm.classList.remove("active");
          }
        }
      };
      xhr.open("POST", "https://", true);
      xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
      xhr.send(new URLSearchParams(formData).toString());
    }
  });
  var inputs = document.querySelectorAll(".feedback__input");
  var button = document.querySelector(".js-submit");
  button.addEventListener("click", function () {
    inputs.forEach(function (el) {
      if (!el.classList.contains("js-validate-error-field")) el.classList.add("js-validate-success-field");
    });
  });
}

//show-more
var fadeIn = function fadeIn(el, timeout, className) {
  el.style.opacity = 0;
  el.classList.add(className);
  //el.style.display = display || 'block';
  el.style.transition = "opacity ".concat(timeout, "ms");
  setTimeout(function () {
    el.style.opacity = 1;
  }, 10);
};
var fadeOut = function fadeOut(el, timeout, className) {
  el.style.opacity = 1;
  el.style.transition = "opacity ".concat(timeout, "ms");
  el.style.opacity = 0;
  setTimeout(function () {
    //el.style.display = 'none';
    el.classList.remove(className);
  }, timeout);
};

//show more index.html 
var showMoreBtn = document.querySelector(".js-show-more");
var allRatingCards = document.querySelectorAll(".rating__item");
if (showMoreBtn) {
  showMoreBtn.addEventListener("click", function () {
    if (showMoreBtn.classList.contains("js-active")) {
      allRatingCards.forEach(function (el) {
        el.classList.remove("show-card");
        //fadeOut(el, 1000, "show-card");
      });

      showMoreBtn.classList.remove("js-active");
      showMoreBtn.textContent = "Ð¡Ð¼Ð¾ÑÑÐµÑÑ Ð±Ð¾Ð»ÑÑÐµ ÑÐ¾Ð²Ð°ÑÐ¾Ð²";
    } else {
      allRatingCards.forEach(function (el) {
        //el.classList.add("show-card");
        fadeIn(el, 1000, "show-card");
      });
      showMoreBtn.classList.add("js-active");
      showMoreBtn.textContent = "Ð¡Ð²ÐµÑÐ½ÑÑÑ";
    }
  });
}
//end show more index.html

//show more catalog 

var limitShowItems = 9;
var showMore = function showMore(el) {
  var showMoreBtn = el.target;
  var container = showMoreBtn.closest(".js-items-container");
  var items = container.querySelectorAll(".catalog-filter__item");
  if (showMoreBtn.classList.contains("js-active")) {
    if (container) {
      items.forEach(function (el) {
        el.classList.remove("show-item");
      });
      showMoreBtn.classList.remove("js-active");
      showMoreBtn.textContent = "\u0435\u0449\u0435 +".concat(items.length - limitShowItems);
    }
  } else {
    items.forEach(function (el) {
      fadeIn(el, 1000, "show-item");
    });
    showMoreBtn.classList.add("js-active");
    showMoreBtn.textContent = "Ð¡ÐºÑÑÑÑ";
  }
};
var allItems = document.querySelectorAll(".js-catalog-more");
allItems.forEach(function (el) {
  el.addEventListener("click", function (el) {
    return showMore(el);
  });
});

//end show_more catalog

//sliders products
var productSliderNav = new Swiper(".slider-nav", {
  resizeObserver: true,
  updateOnWindowResize: true,
  slideClass: "slider-nav__item",
  direction: "horizontal",
  freeMode: true,
  breakpoints: {
    1025: {
      direction: "horizontal",
      slidesPerView: 4,
      spaceBetween: 20
    },
    890: {
      direction: "vertical",
      spaceBetween: 20,
      slidesPerView: 4
    },
    695: {
      slidesPerView: 4,
      direction: "vertical",
      spaceBetween: 20
    },
    320: {
      direction: "horizontal",
      slidesPerView: "auto",
      spaceBetween: 5
    }
  }
});
var productSlider = new Swiper(".product-slider", {
  resizeObserver: true,
  updateOnWindowResize: true,
  slideClass: "product-slider__item",
  slidesPerView: 1,
  initialSlide: 4,
  spaceBetween: 10,
  mousewheel: true,
  grabCursor: true,
  thumbs: {
    swiper: productSliderNav
  }
});
var sliderThumbs = new Swiper('.modal-thumbs__slider-container', {
  resizeObserver: true,
  updateOnWindowResize: true,
  slideClass: 'modal-thumbs__slide',
  spaceBetween: 10,
  direction: 'horizontal',
  freeMode: true,
  breakpoints: {
    1025: {
      slidesPerView: 4
    },
    769: {
      slidesPerView: 3
    },
    695: {
      slidesPerView: 2
    },
    320: {
      slidesPerView: 1
    }
  },
  navigation: {
    prevEl: ".js-slider-next",
    nextEl: ".js-slider-prev"
  }
});
var sliderImages = new Swiper('.modal-slider__container', {
  resizeObserver: true,
  updateOnWindowResize: true,
  slideClass: 'modal-slider__item',
  slidesPerView: 1,
  initialSlide: 4,
  spaceBetween: 10,
  mousewheel: true,
  navigation: {
    nextEl: '.modal-thumbs__btn-next',
    prevEl: '.modal-thumbs__btn-prev'
  },
  grabCursor: true,
  thumbs: {
    swiper: sliderThumbs
  }
});
var productSwiper = new Swiper(".js-product-swiper", {
  resizeObserver: true,
  updateOnWindowResize: true,
  direction: "horizontal",
  breakpoints: {
    300: {
      slidesPerGroup: 2,
      slidesPerColumn: 1,
      slidesPerView: "auto",
      spaceBetween: 16
    },
    767: {
      slidesPerGroup: 2,
      slidesPerColumn: 1,
      slidesPerView: "auto",
      spaceBetween: 32
    }
  },
  navigation: {
    nextEl: ".js-product-next",
    prevEl: ".js-product-prev"
  }
});

//swiper catalog

var catalogSwiper = new Swiper(".js-catalog-products-swiper", {
  // resizeObserver: true,
  // updateOnWindowResize: true,
  slidesPerView: 3,
  grid: {
    rows: 3
  },
  // direction: "horizontal",
  // slidesPerColumnFill: "row",

  breakpoints: {
    1: {
      // slidesPerGroup: 2,
      // slidesPerColumn: 3,
      spaceBetween: 16,
      slidesPerView: 2
    },
    768: {
      // slidesPerGroup: 3,
      // slidesPerColumn: 3,
      spaceBetween: 32,
      slidesPerView: 2
    },
    1030: {
      // slidesPerGroup: 3,
      // slidesPerColumn: 3,
      slidesPerView: 3,
      spaceBetween: 32
    },
    1080: {
      // slidesPerGroup: 3,
      // slidesPerColumn: 3,
      spaceBetween: 32,
      slidesPerView: 3,
      grid: {
        rows: 3
      }
    },
    1920: {
      // slidesPerGroup: 3,
      // slidesPerColumn: 3,
      slidesPerView: 3,
      spaceBetween: 32,
      grid: {
        rows: 3
      }
    }
  },
  pagination: {
    el: ".catalog-pagination.swiper-pagination",
    clickable: true,
    renderBullet: function renderBullet(index, className) {
      return '<span class="' + className + '">' + (index + 1) + "</span>";
    }
  }
});
//range-slider catalog page
// import {formatMoney} from "./utils/format.js";

var formatMoney = function formatMoney(money) {
  return new Intl.NumberFormat("ru-RU").format(money);
};
var createChoiceItem = function createChoiceItem(text, dataColor) {
  return "\n    <button style=\"background: ".concat(dataColor, "\" class=\"btn-reset catalog-choice__item\" data-choice-text=\"").concat(text, "\">").concat(text, "\n      <svg aria-hidden=\"true\">\n          <path d=\"M1 1L8.2 8.2\"  stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n          <path d=\"M8.2 1L1 8.2\"  stroke-linecap=\"round\" stroke-linejoin=\"round\"/>     \n      </svg>\n    </button>\n  ");
};
var rangeSlider = document.getElementById('range-slider');
if (rangeSlider) {
  var createRangeChoiceItem = function createRangeChoiceItem(item) {
    var choice = document.querySelector("[data-choice-text=\"".concat(oldValue, "\"]"));
    if (choice) {
      choice.remove();
    }
    var text = "ÐÐ¾ " + formatMoney(item.value);
    oldValue = text;
    var dataColor = item.getAttribute('data-color');
    document.querySelector('.catalog-choice__list').insertAdjacentHTML('beforeend', createChoiceItem(text, dataColor));
  };
  noUiSlider.create(rangeSlider, {
    start: [2000, 150000],
    connect: true,
    step: 1,
    range: {
      'min': [0],
      'max': [225000]
    }
  });
  var input0 = document.getElementById('input-0');
  var input1 = document.getElementById('input-1');
  var _inputs = [input0, input1];
  var connect = document.querySelector('.noUi-connect');
  rangeSlider.noUiSlider.on('update', function (values, handle) {
    _inputs[handle].value = Math.round(values[handle]);
  });
  rangeSlider.noUiSlider.on('slide', function () {
    connect.style.background = '#7033ac';
  });
  rangeSlider.noUiSlider.on('end', function () {
    connect.style.background = '#a65cf0';
  });
  var setRangeSlider = function setRangeSlider(i, value) {
    var arr = [null, null];
    arr[i] = value;
    rangeSlider.noUiSlider.set(arr);
  };
  _inputs.forEach(function (el, index) {
    el.addEventListener('change', function (e) {
      setRangeSlider(index, e.currentTarget.value);
    });
  });
  var oldValue = null;
  rangeSlider.noUiSlider.on('change', function () {
    createRangeChoiceItem(input1);
  });
  input1.addEventListener('change', function (el) {
    createRangeChoiceItem(input1);
  });
}

// range slider 2

var rangeSlider2 = document.querySelector(".filters__range");
var rangeInputs = document.querySelectorAll(".input-number");
if (rangeSlider2) {
  noUiSlider.create(rangeSlider2, {
    start: [2000, 250000],
    connect: true,
    step: 25000,
    keyboardSupport: true,
    range: {
      min: [2000],
      max: [250000]
    }
  });
  rangeSlider2.noUiSlider.on("update", function (values, handle) {
    rangeInputs[handle].value = Math.round(values[handle]);
  });
  var setrangeSlider2 = function setrangeSlider2(index, value) {
    var arr = [null, null];
    arr[index] = value;
    rangeSlider2.noUiSlider.set(arr);
  };
  rangeInputs.forEach(function (item, i) {
    item.addEventListener("change", function (e) {
      setrangeSlider2(i, e.currentTarget.value);
    });
  });
}
var handles = document.querySelectorAll(".noUi-handle");
var noUiLine = document.querySelector(".noUi-connect");
handles.forEach(function (el) {
  el.addEventListener("focus", function () {
    noUiLine.style.background = "#7033ac";
  });
});
handles.forEach(function (el) {
  el.addEventListener("blur", function () {
    noUiLine.style.background = "#a65cf0";
  });
});

//pop up

var popup = document.querySelector(".js-popup-call");
var closeBtn = document.querySelector(".js-close-btn");
var body = document.querySelector("body");
var hidePopup = function hidePopup(popup) {
  body.style.overflow = "auto";
  popup.classList.remove("active");
};
var showPopup = function showPopup(popup) {
  body.style.overflow = "hidden";
  popup.classList.add("active");
};
var handlerActive = function handlerActive(event, popup) {
  if (!event.target.closest(".js-content")) {
    hidePopup(popup);
  }
};
if (popup && closeBtn) {
  popup.addEventListener("click", function (e) {
    return handlerActive(e, popup);
  });
  closeBtn.addEventListener("click", function () {
    return hidePopup(popup);
  });
}

// Form popup
var popupForm = document.querySelector(".js-popup-form");
var closeBtnForm = document.querySelector(".js-close-btn-form");
var buyBtn = document.querySelector(".js-btn-buy");
if (buyBtn && popupForm && closeBtnForm) {
  buyBtn.addEventListener("click", function () {
    return showPopup(popupForm);
  });
  popupForm.addEventListener("click", function (e) {
    return handlerActive(e, popupForm);
  });
  closeBtnForm.addEventListener("click", function () {
    return hidePopup(popupForm);
  });
}

// Slider popup
var popupSlider = document.querySelector(".js-popup-slider");
var closeBtnSlider = document.querySelector(".js-close-btn-slider");
var initialSlider = document.querySelector(".product-slider");
if (initialSlider && popupSlider && closeBtnSlider) {
  initialSlider.addEventListener("click", function () {
    return showPopup(popupSlider);
  });
  popupSlider.addEventListener("click", function (e) {
    return handlerActive(e, popupSlider);
  });
  closeBtnSlider.addEventListener("click", function () {
    return hidePopup(popupSlider);
  });
}
"use strict";

function _typeof2(obj) { "@babel/helpers - typeof"; return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof2(obj); }
/*!
 * dist/inputmask.min
 * https://github.com/RobinHerbots/Inputmask
 * Copyright (c) 2010 - 2020 Robin Herbots
 * Licensed under the MIT license
 * Version: 5.0.6-beta.16
 */
!function webpackUniversalModuleDefinition(root, factory) {
  if ("object" == (typeof exports === "undefined" ? "undefined" : _typeof2(exports)) && "object" == (typeof module === "undefined" ? "undefined" : _typeof2(module))) module.exports = factory();else if ("function" == typeof define && define.amd) define([], factory);else {
    var a = factory();
    for (var i in a) ("object" == (typeof exports === "undefined" ? "undefined" : _typeof2(exports)) ? exports : root)[i] = a[i];
  }
}(window, function () {
  return modules = [function (module) {
    module.exports = JSON.parse('{"BACKSPACE":8,"BACKSPACE_SAFARI":127,"DELETE":46,"DOWN":40,"END":35,"ENTER":13,"ESCAPE":27,"HOME":36,"INSERT":45,"LEFT":37,"PAGE_DOWN":34,"PAGE_UP":33,"RIGHT":39,"SPACE":32,"TAB":9,"UP":38,"X":88,"CONTROL":17,"KEY_229":229}');
  }, function (module, exports, __webpack_require__) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: !0
    }), exports.caret = caret, exports.determineLastRequiredPosition = determineLastRequiredPosition, exports.determineNewCaretPosition = determineNewCaretPosition, exports.getBuffer = getBuffer, exports.getBufferTemplate = getBufferTemplate, exports.getLastValidPosition = getLastValidPosition, exports.isMask = isMask, exports.resetMaskSet = resetMaskSet, exports.seekNext = seekNext, exports.seekPrevious = seekPrevious, exports.translatePosition = translatePosition;
    var _validationTests = __webpack_require__(3),
      _validation = __webpack_require__(4),
      _mask = __webpack_require__(10);
    function caret(input, begin, end, notranslate, isDelete) {
      var inputmask = this,
        opts = this.opts,
        range;
      if (void 0 === begin) return "selectionStart" in input && "selectionEnd" in input ? (begin = input.selectionStart, end = input.selectionEnd) : window.getSelection ? (range = window.getSelection().getRangeAt(0), range.commonAncestorContainer.parentNode !== input && range.commonAncestorContainer !== input || (begin = range.startOffset, end = range.endOffset)) : document.selection && document.selection.createRange && (range = document.selection.createRange(), begin = 0 - range.duplicate().moveStart("character", -input.inputmask._valueGet().length), end = begin + range.text.length), {
        begin: notranslate ? begin : translatePosition.call(this, begin),
        end: notranslate ? end : translatePosition.call(this, end)
      };
      if (Array.isArray(begin) && (end = this.isRTL ? begin[0] : begin[1], begin = this.isRTL ? begin[1] : begin[0]), void 0 !== begin.begin && (end = this.isRTL ? begin.begin : begin.end, begin = this.isRTL ? begin.end : begin.begin), "number" == typeof begin) {
        begin = notranslate ? begin : translatePosition.call(this, begin), end = notranslate ? end : translatePosition.call(this, end), end = "number" == typeof end ? end : begin;
        var scrollCalc = parseInt(((input.ownerDocument.defaultView || window).getComputedStyle ? (input.ownerDocument.defaultView || window).getComputedStyle(input, null) : input.currentStyle).fontSize) * end;
        if (input.scrollLeft = scrollCalc > input.scrollWidth ? scrollCalc : 0, input.inputmask.caretPos = {
          begin: begin,
          end: end
        }, opts.insertModeVisual && !1 === opts.insertMode && begin === end && (isDelete || end++), input === (input.inputmask.shadowRoot || document).activeElement) if ("setSelectionRange" in input) input.setSelectionRange(begin, end);else if (window.getSelection) {
          if (range = document.createRange(), void 0 === input.firstChild || null === input.firstChild) {
            var textNode = document.createTextNode("");
            input.appendChild(textNode);
          }
          range.setStart(input.firstChild, begin < input.inputmask._valueGet().length ? begin : input.inputmask._valueGet().length), range.setEnd(input.firstChild, end < input.inputmask._valueGet().length ? end : input.inputmask._valueGet().length), range.collapse(!0);
          var sel = window.getSelection();
          sel.removeAllRanges(), sel.addRange(range);
        } else input.createTextRange && (range = input.createTextRange(), range.collapse(!0), range.moveEnd("character", end), range.moveStart("character", begin), range.select());
      }
    }
    function determineLastRequiredPosition(returnDefinition) {
      var inputmask = this,
        maskset = this.maskset,
        $ = this.dependencyLib,
        buffer = _validationTests.getMaskTemplate.call(this, !0, getLastValidPosition.call(this), !0, !0),
        bl = buffer.length,
        pos,
        lvp = getLastValidPosition.call(this),
        positions = {},
        lvTest = maskset.validPositions[lvp],
        ndxIntlzr = void 0 !== lvTest ? lvTest.locator.slice() : void 0,
        testPos;
      for (pos = lvp + 1; pos < buffer.length; pos++) testPos = _validationTests.getTestTemplate.call(this, pos, ndxIntlzr, pos - 1), ndxIntlzr = testPos.locator.slice(), positions[pos] = $.extend(!0, {}, testPos);
      var lvTestAlt = lvTest && void 0 !== lvTest.alternation ? lvTest.locator[lvTest.alternation] : void 0;
      for (pos = bl - 1; lvp < pos && (testPos = positions[pos], (testPos.match.optionality || testPos.match.optionalQuantifier && testPos.match.newBlockMarker || lvTestAlt && (lvTestAlt !== positions[pos].locator[lvTest.alternation] && 1 != testPos.match["static"] || !0 === testPos.match["static"] && testPos.locator[lvTest.alternation] && _validation.checkAlternationMatch.call(this, testPos.locator[lvTest.alternation].toString().split(","), lvTestAlt.toString().split(",")) && "" !== _validationTests.getTests.call(this, pos)[0].def)) && buffer[pos] === _validationTests.getPlaceholder.call(this, pos, testPos.match)); pos--) bl--;
      return returnDefinition ? {
        l: bl,
        def: positions[bl] ? positions[bl].match : void 0
      } : bl;
    }
    function determineNewCaretPosition(selectedCaret, tabbed) {
      var inputmask = this,
        maskset = this.maskset,
        opts = this.opts;
      function doRadixFocus(clickPos) {
        if ("" !== opts.radixPoint && 0 !== opts.digits) {
          var vps = maskset.validPositions;
          if (void 0 === vps[clickPos] || vps[clickPos].input === _validationTests.getPlaceholder.call(inputmask, clickPos)) {
            if (clickPos < seekNext.call(inputmask, -1)) return !0;
            var radixPos = getBuffer.call(inputmask).indexOf(opts.radixPoint);
            if (-1 !== radixPos) {
              for (var vp in vps) if (vps[vp] && radixPos < vp && vps[vp].input !== _validationTests.getPlaceholder.call(inputmask, vp)) return !1;
              return !0;
            }
          }
        }
        return !1;
      }
      if (tabbed && (inputmask.isRTL ? selectedCaret.end = selectedCaret.begin : selectedCaret.begin = selectedCaret.end), selectedCaret.begin === selectedCaret.end) {
        switch (opts.positionCaretOnClick) {
          case "none":
            break;
          case "select":
            selectedCaret = {
              begin: 0,
              end: getBuffer.call(inputmask).length
            };
            break;
          case "ignore":
            selectedCaret.end = selectedCaret.begin = seekNext.call(inputmask, getLastValidPosition.call(inputmask));
            break;
          case "radixFocus":
            if (doRadixFocus(selectedCaret.begin)) {
              var radixPos = getBuffer.call(inputmask).join("").indexOf(opts.radixPoint);
              selectedCaret.end = selectedCaret.begin = opts.numericInput ? seekNext.call(inputmask, radixPos) : radixPos;
              break;
            }
          default:
            var clickPosition = selectedCaret.begin,
              lvclickPosition = getLastValidPosition.call(inputmask, clickPosition, !0),
              lastPosition = seekNext.call(inputmask, -1 !== lvclickPosition || isMask.call(inputmask, 0) ? lvclickPosition : -1);
            if (clickPosition <= lastPosition) selectedCaret.end = selectedCaret.begin = isMask.call(inputmask, clickPosition, !1, !0) ? clickPosition : seekNext.call(inputmask, clickPosition);else {
              var lvp = maskset.validPositions[lvclickPosition],
                tt = _validationTests.getTestTemplate.call(inputmask, lastPosition, lvp ? lvp.match.locator : void 0, lvp),
                placeholder = _validationTests.getPlaceholder.call(inputmask, lastPosition, tt.match);
              if ("" !== placeholder && getBuffer.call(inputmask)[lastPosition] !== placeholder && !0 !== tt.match.optionalQuantifier && !0 !== tt.match.newBlockMarker || !isMask.call(inputmask, lastPosition, opts.keepStatic, !0) && tt.match.def === placeholder) {
                var newPos = seekNext.call(inputmask, lastPosition);
                (newPos <= clickPosition || clickPosition === lastPosition) && (lastPosition = newPos);
              }
              selectedCaret.end = selectedCaret.begin = lastPosition;
            }
        }
        return selectedCaret;
      }
    }
    function getBuffer(noCache) {
      var inputmask = this,
        maskset = this.maskset;
      return void 0 !== maskset.buffer && !0 !== noCache || (maskset.buffer = _validationTests.getMaskTemplate.call(this, !0, getLastValidPosition.call(this), !0), void 0 === maskset._buffer && (maskset._buffer = maskset.buffer.slice())), maskset.buffer;
    }
    function getBufferTemplate() {
      var inputmask = this,
        maskset = this.maskset;
      return void 0 === maskset._buffer && (maskset._buffer = _validationTests.getMaskTemplate.call(this, !1, 1), void 0 === maskset.buffer && (maskset.buffer = maskset._buffer.slice())), maskset._buffer;
    }
    function getLastValidPosition(closestTo, strict, validPositions) {
      var maskset = this.maskset,
        before = -1,
        after = -1,
        valids = validPositions || maskset.validPositions;
      for (var posNdx in void 0 === closestTo && (closestTo = -1), valids) {
        var psNdx = parseInt(posNdx);
        valids[psNdx] && (strict || !0 !== valids[psNdx].generatedInput) && (psNdx <= closestTo && (before = psNdx), closestTo <= psNdx && (after = psNdx));
      }
      return -1 === before || before == closestTo ? after : -1 == after ? before : closestTo - before < after - closestTo ? before : after;
    }
    function isMask(pos, strict, fuzzy) {
      var inputmask = this,
        maskset = this.maskset,
        test = _validationTests.getTestTemplate.call(this, pos).match;
      if ("" === test.def && (test = _validationTests.getTest.call(this, pos).match), !0 !== test["static"]) return test.fn;
      if (!0 === fuzzy && void 0 !== maskset.validPositions[pos] && !0 !== maskset.validPositions[pos].generatedInput) return !0;
      if (!0 !== strict && -1 < pos) {
        if (fuzzy) {
          var tests = _validationTests.getTests.call(this, pos);
          return tests.length > 1 + ("" === tests[tests.length - 1].match.def ? 1 : 0);
        }
        var testTemplate = _validationTests.determineTestTemplate.call(this, pos, _validationTests.getTests.call(this, pos)),
          testPlaceHolder = _validationTests.getPlaceholder.call(this, pos, testTemplate.match);
        return testTemplate.match.def !== testPlaceHolder;
      }
      return !1;
    }
    function resetMaskSet(soft) {
      var maskset = this.maskset;
      maskset.buffer = void 0, !0 !== soft && (maskset.validPositions = {}, maskset.p = 0);
    }
    function seekNext(pos, newBlock, fuzzy) {
      var inputmask = this;
      void 0 === fuzzy && (fuzzy = !0);
      for (var position = pos + 1; "" !== _validationTests.getTest.call(this, position).match.def && (!0 === newBlock && (!0 !== _validationTests.getTest.call(this, position).match.newBlockMarker || !isMask.call(this, position, void 0, !0)) || !0 !== newBlock && !isMask.call(this, position, void 0, fuzzy));) position++;
      return position;
    }
    function seekPrevious(pos, newBlock) {
      var inputmask = this,
        position = pos - 1;
      if (pos <= 0) return 0;
      for (; 0 < position && (!0 === newBlock && (!0 !== _validationTests.getTest.call(this, position).match.newBlockMarker || !isMask.call(this, position, void 0, !0)) || !0 !== newBlock && !isMask.call(this, position, void 0, !0));) position--;
      return position;
    }
    function translatePosition(pos) {
      var inputmask = this,
        opts = this.opts,
        el = this.el;
      return !this.isRTL || "number" != typeof pos || opts.greedy && "" === opts.placeholder || !el || (pos = Math.abs(this._valueGet().length - pos)), pos;
    }
  }, function (module, exports, __webpack_require__) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: !0
    }), exports["default"] = void 0, __webpack_require__(16), __webpack_require__(17);
    var _mask = __webpack_require__(10),
      _inputmask = _interopRequireDefault(__webpack_require__(9)),
      _window = _interopRequireDefault(__webpack_require__(6)),
      _maskLexer = __webpack_require__(20),
      _validationTests = __webpack_require__(3),
      _positioning = __webpack_require__(1),
      _validation = __webpack_require__(4),
      _inputHandling = __webpack_require__(5),
      _eventruler = __webpack_require__(11),
      _definitions = _interopRequireDefault(__webpack_require__(21)),
      _defaults = _interopRequireDefault(__webpack_require__(22));
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == _typeof2(Symbol.iterator) ? function _typeof(obj) {
        return _typeof2(obj);
      } : function _typeof(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
      }, _typeof(obj);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    var document = _window["default"].document,
      dataKey = "_inputmask_opts";
    function Inputmask(alias, options, internal) {
      if (!(this instanceof Inputmask)) return new Inputmask(alias, options, internal);
      this.dependencyLib = _inputmask["default"], this.el = void 0, this.events = {}, this.maskset = void 0, !0 !== internal && ("[object Object]" === Object.prototype.toString.call(alias) ? options = alias : (options = options || {}, alias && (options.alias = alias)), this.opts = _inputmask["default"].extend(!0, {}, this.defaults, options), this.noMasksCache = options && void 0 !== options.definitions, this.userOptions = options || {}, resolveAlias(this.opts.alias, options, this.opts)), this.refreshValue = !1, this.undoValue = void 0, this.$el = void 0, this.skipKeyPressEvent = !1, this.skipInputEvent = !1, this.validationEvent = !1, this.ignorable = !1, this.maxLength, this.mouseEnter = !1, this.originalPlaceholder = void 0, this.isComposing = !1;
    }
    function resolveAlias(aliasStr, options, opts) {
      var aliasDefinition = Inputmask.prototype.aliases[aliasStr];
      return aliasDefinition ? (aliasDefinition.alias && resolveAlias(aliasDefinition.alias, void 0, opts), _inputmask["default"].extend(!0, opts, aliasDefinition), _inputmask["default"].extend(!0, opts, options), !0) : (null === opts.mask && (opts.mask = aliasStr), !1);
    }
    function importAttributeOptions(npt, opts, userOptions, dataAttribute) {
      function importOption(option, optionData) {
        var attrOption = "" === dataAttribute ? option : dataAttribute + "-" + option;
        optionData = void 0 !== optionData ? optionData : npt.getAttribute(attrOption), null !== optionData && ("string" == typeof optionData && (0 === option.indexOf("on") ? optionData = _window["default"][optionData] : "false" === optionData ? optionData = !1 : "true" === optionData && (optionData = !0)), userOptions[option] = optionData);
      }
      if (!0 === opts.importDataAttributes) {
        var attrOptions = npt.getAttribute(dataAttribute),
          option,
          dataoptions,
          optionData,
          p;
        if (attrOptions && "" !== attrOptions && (attrOptions = attrOptions.replace(/'/g, '"'), dataoptions = JSON.parse("{" + attrOptions + "}")), dataoptions) for (p in optionData = void 0, dataoptions) if ("alias" === p.toLowerCase()) {
          optionData = dataoptions[p];
          break;
        }
        for (option in importOption("alias", optionData), userOptions.alias && resolveAlias(userOptions.alias, userOptions, opts), opts) {
          if (dataoptions) for (p in optionData = void 0, dataoptions) if (p.toLowerCase() === option.toLowerCase()) {
            optionData = dataoptions[p];
            break;
          }
          importOption(option, optionData);
        }
      }
      return _inputmask["default"].extend(!0, opts, userOptions), "rtl" !== npt.dir && !opts.rightAlign || (npt.style.textAlign = "right"), "rtl" !== npt.dir && !opts.numericInput || (npt.dir = "ltr", npt.removeAttribute("dir"), opts.isRTL = !0), Object.keys(userOptions).length;
    }
    Inputmask.prototype = {
      dataAttribute: "data-inputmask",
      defaults: _defaults["default"],
      definitions: _definitions["default"],
      aliases: {},
      masksCache: {},
      get isRTL() {
        return this.opts.isRTL || this.opts.numericInput;
      },
      mask: function mask(elems) {
        var that = this;
        return "string" == typeof elems && (elems = document.getElementById(elems) || document.querySelectorAll(elems)), elems = elems.nodeName ? [elems] : Array.isArray(elems) ? elems : Array.from(elems), elems.forEach(function (el, ndx) {
          var scopedOpts = _inputmask["default"].extend(!0, {}, that.opts);
          if (importAttributeOptions(el, scopedOpts, _inputmask["default"].extend(!0, {}, that.userOptions), that.dataAttribute)) {
            var maskset = (0, _maskLexer.generateMaskSet)(scopedOpts, that.noMasksCache);
            void 0 !== maskset && (void 0 !== el.inputmask && (el.inputmask.opts.autoUnmask = !0, el.inputmask.remove()), el.inputmask = new Inputmask(void 0, void 0, !0), el.inputmask.opts = scopedOpts, el.inputmask.noMasksCache = that.noMasksCache, el.inputmask.userOptions = _inputmask["default"].extend(!0, {}, that.userOptions), el.inputmask.el = el, el.inputmask.$el = (0, _inputmask["default"])(el), el.inputmask.maskset = maskset, _inputmask["default"].data(el, dataKey, that.userOptions), _mask.mask.call(el.inputmask));
          }
        }), elems && elems[0] && elems[0].inputmask || this;
      },
      option: function option(options, noremask) {
        return "string" == typeof options ? this.opts[options] : "object" === _typeof(options) ? (_inputmask["default"].extend(this.userOptions, options), this.el && !0 !== noremask && this.mask(this.el), this) : void 0;
      },
      unmaskedvalue: function unmaskedvalue(value) {
        if (this.maskset = this.maskset || (0, _maskLexer.generateMaskSet)(this.opts, this.noMasksCache), void 0 === this.el || void 0 !== value) {
          var valueBuffer = ("function" == typeof this.opts.onBeforeMask && this.opts.onBeforeMask.call(this, value, this.opts) || value).split("");
          _inputHandling.checkVal.call(this, void 0, !1, !1, valueBuffer), "function" == typeof this.opts.onBeforeWrite && this.opts.onBeforeWrite.call(this, void 0, _positioning.getBuffer.call(this), 0, this.opts);
        }
        return _inputHandling.unmaskedvalue.call(this, this.el);
      },
      remove: function remove() {
        if (this.el) {
          _inputmask["default"].data(this.el, dataKey, null);
          var cv = this.opts.autoUnmask ? (0, _inputHandling.unmaskedvalue)(this.el) : this._valueGet(this.opts.autoUnmask),
            valueProperty;
          cv !== _positioning.getBufferTemplate.call(this).join("") ? this._valueSet(cv, this.opts.autoUnmask) : this._valueSet(""), _eventruler.EventRuler.off(this.el), Object.getOwnPropertyDescriptor && Object.getPrototypeOf ? (valueProperty = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(this.el), "value"), valueProperty && this.__valueGet && Object.defineProperty(this.el, "value", {
            get: this.__valueGet,
            set: this.__valueSet,
            configurable: !0
          })) : document.__lookupGetter__ && this.el.__lookupGetter__("value") && this.__valueGet && (this.el.__defineGetter__("value", this.__valueGet), this.el.__defineSetter__("value", this.__valueSet)), this.el.inputmask = void 0;
        }
        return this.el;
      },
      getemptymask: function getemptymask() {
        return this.maskset = this.maskset || (0, _maskLexer.generateMaskSet)(this.opts, this.noMasksCache), _positioning.getBufferTemplate.call(this).join("");
      },
      hasMaskedValue: function hasMaskedValue() {
        return !this.opts.autoUnmask;
      },
      isComplete: function isComplete() {
        return this.maskset = this.maskset || (0, _maskLexer.generateMaskSet)(this.opts, this.noMasksCache), _validation.isComplete.call(this, _positioning.getBuffer.call(this));
      },
      getmetadata: function getmetadata() {
        if (this.maskset = this.maskset || (0, _maskLexer.generateMaskSet)(this.opts, this.noMasksCache), Array.isArray(this.maskset.metadata)) {
          var maskTarget = _validationTests.getMaskTemplate.call(this, !0, 0, !1).join("");
          return this.maskset.metadata.forEach(function (mtdt) {
            return mtdt.mask !== maskTarget || (maskTarget = mtdt, !1);
          }), maskTarget;
        }
        return this.maskset.metadata;
      },
      isValid: function isValid(value) {
        if (this.maskset = this.maskset || (0, _maskLexer.generateMaskSet)(this.opts, this.noMasksCache), value) {
          var valueBuffer = ("function" == typeof this.opts.onBeforeMask && this.opts.onBeforeMask.call(this, value, this.opts) || value).split("");
          _inputHandling.checkVal.call(this, void 0, !0, !1, valueBuffer);
        } else value = this.isRTL ? _positioning.getBuffer.call(this).slice().reverse().join("") : _positioning.getBuffer.call(this).join("");
        for (var buffer = _positioning.getBuffer.call(this), rl = _positioning.determineLastRequiredPosition.call(this), lmib = buffer.length - 1; rl < lmib && !_positioning.isMask.call(this, lmib); lmib--);
        return buffer.splice(rl, lmib + 1 - rl), _validation.isComplete.call(this, buffer) && value === (this.isRTL ? _positioning.getBuffer.call(this).slice().reverse().join("") : _positioning.getBuffer.call(this).join(""));
      },
      format: function format(value, metadata) {
        this.maskset = this.maskset || (0, _maskLexer.generateMaskSet)(this.opts, this.noMasksCache);
        var valueBuffer = ("function" == typeof this.opts.onBeforeMask && this.opts.onBeforeMask.call(this, value, this.opts) || value).split("");
        _inputHandling.checkVal.call(this, void 0, !0, !1, valueBuffer);
        var formattedValue = this.isRTL ? _positioning.getBuffer.call(this).slice().reverse().join("") : _positioning.getBuffer.call(this).join("");
        return metadata ? {
          value: formattedValue,
          metadata: this.getmetadata()
        } : formattedValue;
      },
      setValue: function setValue(value) {
        this.el && (0, _inputmask["default"])(this.el).trigger("setvalue", [value]);
      },
      analyseMask: _maskLexer.analyseMask
    }, Inputmask.extendDefaults = function (options) {
      _inputmask["default"].extend(!0, Inputmask.prototype.defaults, options);
    }, Inputmask.extendDefinitions = function (definition) {
      _inputmask["default"].extend(!0, Inputmask.prototype.definitions, definition);
    }, Inputmask.extendAliases = function (alias) {
      _inputmask["default"].extend(!0, Inputmask.prototype.aliases, alias);
    }, Inputmask.format = function (value, options, metadata) {
      return Inputmask(options).format(value, metadata);
    }, Inputmask.unmask = function (value, options) {
      return Inputmask(options).unmaskedvalue(value);
    }, Inputmask.isValid = function (value, options) {
      return Inputmask(options).isValid(value);
    }, Inputmask.remove = function (elems) {
      "string" == typeof elems && (elems = document.getElementById(elems) || document.querySelectorAll(elems)), elems = elems.nodeName ? [elems] : elems, elems.forEach(function (el) {
        el.inputmask && el.inputmask.remove();
      });
    }, Inputmask.setValue = function (elems, value) {
      "string" == typeof elems && (elems = document.getElementById(elems) || document.querySelectorAll(elems)), elems = elems.nodeName ? [elems] : elems, elems.forEach(function (el) {
        el.inputmask ? el.inputmask.setValue(value) : (0, _inputmask["default"])(el).trigger("setvalue", [value]);
      });
    }, Inputmask.dependencyLib = _inputmask["default"], _window["default"].Inputmask = Inputmask;
    var _default = Inputmask;
    exports["default"] = _default;
  }, function (module, exports, __webpack_require__) {
    "use strict";

    function getLocator(tst, align) {
      var locator = (null != tst.alternation ? tst.mloc[getDecisionTaker(tst)] : tst.locator).join("");
      if ("" !== locator) for (; locator.length < align;) locator += "0";
      return locator;
    }
    function getDecisionTaker(tst) {
      var decisionTaker = tst.locator[tst.alternation];
      return "string" == typeof decisionTaker && 0 < decisionTaker.length && (decisionTaker = decisionTaker.split(",")[0]), void 0 !== decisionTaker ? decisionTaker.toString() : "";
    }
    function getPlaceholder(pos, test, returnPL) {
      var inputmask = this,
        opts = this.opts,
        maskset = this.maskset;
      if (test = test || getTest.call(this, pos).match, void 0 !== test.placeholder || !0 === returnPL) return "function" == typeof test.placeholder ? test.placeholder(opts) : test.placeholder;
      if (!0 !== test["static"]) return opts.placeholder.charAt(pos % opts.placeholder.length);
      if (-1 < pos && void 0 === maskset.validPositions[pos]) {
        var tests = getTests.call(this, pos),
          staticAlternations = [],
          prevTest;
        if (tests.length > 1 + ("" === tests[tests.length - 1].match.def ? 1 : 0)) for (var i = 0; i < tests.length; i++) if ("" !== tests[i].match.def && !0 !== tests[i].match.optionality && !0 !== tests[i].match.optionalQuantifier && (!0 === tests[i].match["static"] || void 0 === prevTest || !1 !== tests[i].match.fn.test(prevTest.match.def, maskset, pos, !0, opts)) && (staticAlternations.push(tests[i]), !0 === tests[i].match["static"] && (prevTest = tests[i]), 1 < staticAlternations.length && /[0-9a-bA-Z]/.test(staticAlternations[0].match.def))) return opts.placeholder.charAt(pos % opts.placeholder.length);
      }
      return test.def;
    }
    function getMaskTemplate(baseOnInput, minimalPos, includeMode, noJit, clearOptionalTail) {
      var inputmask = this,
        opts = this.opts,
        maskset = this.maskset,
        greedy = opts.greedy;
      clearOptionalTail && (opts.greedy = !1), minimalPos = minimalPos || 0;
      var maskTemplate = [],
        ndxIntlzr,
        pos = 0,
        test,
        testPos,
        jitRenderStatic;
      do {
        if (!0 === baseOnInput && maskset.validPositions[pos]) testPos = clearOptionalTail && !0 === maskset.validPositions[pos].match.optionality && void 0 === maskset.validPositions[pos + 1] && (!0 === maskset.validPositions[pos].generatedInput || maskset.validPositions[pos].input == opts.skipOptionalPartCharacter && 0 < pos) ? determineTestTemplate.call(this, pos, getTests.call(this, pos, ndxIntlzr, pos - 1)) : maskset.validPositions[pos], test = testPos.match, ndxIntlzr = testPos.locator.slice(), maskTemplate.push(!0 === includeMode ? testPos.input : !1 === includeMode ? test.nativeDef : getPlaceholder.call(this, pos, test));else {
          testPos = getTestTemplate.call(this, pos, ndxIntlzr, pos - 1), test = testPos.match, ndxIntlzr = testPos.locator.slice();
          var jitMasking = !0 !== noJit && (!1 !== opts.jitMasking ? opts.jitMasking : test.jit);
          jitRenderStatic = jitRenderStatic && test["static"] && test.def !== opts.groupSeparator && null === test.fn || maskset.validPositions[pos - 1] && test["static"] && test.def !== opts.groupSeparator && null === test.fn, jitRenderStatic || !1 === jitMasking || void 0 === jitMasking || "number" == typeof jitMasking && isFinite(jitMasking) && pos < jitMasking ? maskTemplate.push(!1 === includeMode ? test.nativeDef : getPlaceholder.call(this, pos, test)) : jitRenderStatic = !1;
        }
        pos++;
      } while ((void 0 === this.maxLength || pos < this.maxLength) && (!0 !== test["static"] || "" !== test.def) || pos < minimalPos);
      return "" === maskTemplate[maskTemplate.length - 1] && maskTemplate.pop(), !1 === includeMode && void 0 !== maskset.maskLength || (maskset.maskLength = pos - 1), opts.greedy = greedy, maskTemplate;
    }
    function getTestTemplate(pos, ndxIntlzr, tstPs) {
      var inputmask = this,
        maskset = this.maskset;
      return maskset.validPositions[pos] || determineTestTemplate.call(this, pos, getTests.call(this, pos, ndxIntlzr ? ndxIntlzr.slice() : ndxIntlzr, tstPs));
    }
    function determineTestTemplate(pos, tests) {
      var inputmask = this,
        opts = this.opts;
      pos = 0 < pos ? pos - 1 : 0;
      for (var altTest = getTest.call(this, pos), targetLocator = getLocator(altTest), tstLocator, closest, bestMatch, ndx = 0; ndx < tests.length; ndx++) {
        var tst = tests[ndx];
        tstLocator = getLocator(tst, targetLocator.length);
        var distance = Math.abs(tstLocator - targetLocator);
        (void 0 === closest || "" !== tstLocator && distance < closest || bestMatch && !opts.greedy && bestMatch.match.optionality && "master" === bestMatch.match.newBlockMarker && (!tst.match.optionality || !tst.match.newBlockMarker) || bestMatch && bestMatch.match.optionalQuantifier && !tst.match.optionalQuantifier) && (closest = distance, bestMatch = tst);
      }
      return bestMatch;
    }
    function getTest(pos, tests) {
      var inputmask = this,
        maskset = this.maskset;
      return maskset.validPositions[pos] ? maskset.validPositions[pos] : (tests || getTests.call(this, pos))[0];
    }
    function getTests(pos, ndxIntlzr, tstPs) {
      var inputmask = this,
        $ = this.dependencyLib,
        maskset = this.maskset,
        opts = this.opts,
        el = this.el,
        maskTokens = maskset.maskToken,
        testPos = ndxIntlzr ? tstPs : 0,
        ndxInitializer = ndxIntlzr ? ndxIntlzr.slice() : [0],
        matches = [],
        insertStop = !1,
        latestMatch,
        cacheDependency = ndxIntlzr ? ndxIntlzr.join("") : "";
      function resolveTestFromToken(maskToken, ndxInitializer, loopNdx, quantifierRecurse) {
        function handleMatch(match, loopNdx, quantifierRecurse) {
          function isFirstMatch(latestMatch, tokenGroup) {
            var firstMatch = 0 === tokenGroup.matches.indexOf(latestMatch);
            return firstMatch || tokenGroup.matches.every(function (match, ndx) {
              return !0 === match.isQuantifier ? firstMatch = isFirstMatch(latestMatch, tokenGroup.matches[ndx - 1]) : Object.prototype.hasOwnProperty.call(match, "matches") && (firstMatch = isFirstMatch(latestMatch, match)), !firstMatch;
            }), firstMatch;
          }
          function resolveNdxInitializer(pos, alternateNdx, targetAlternation) {
            var bestMatch, indexPos;
            if ((maskset.tests[pos] || maskset.validPositions[pos]) && (maskset.tests[pos] || [maskset.validPositions[pos]]).every(function (lmnt, ndx) {
              if (lmnt.mloc[alternateNdx]) return bestMatch = lmnt, !1;
              var alternation = void 0 !== targetAlternation ? targetAlternation : lmnt.alternation,
                ndxPos = void 0 !== lmnt.locator[alternation] ? lmnt.locator[alternation].toString().indexOf(alternateNdx) : -1;
              return (void 0 === indexPos || ndxPos < indexPos) && -1 !== ndxPos && (bestMatch = lmnt, indexPos = ndxPos), !0;
            }), bestMatch) {
              var bestMatchAltIndex = bestMatch.locator[bestMatch.alternation],
                locator = bestMatch.mloc[alternateNdx] || bestMatch.mloc[bestMatchAltIndex] || bestMatch.locator;
              return locator.slice((void 0 !== targetAlternation ? targetAlternation : bestMatch.alternation) + 1);
            }
            return void 0 !== targetAlternation ? resolveNdxInitializer(pos, alternateNdx) : void 0;
          }
          function isSubsetOf(source, target) {
            function expand(pattern) {
              for (var expanded = [], start = -1, end, i = 0, l = pattern.length; i < l; i++) if ("-" === pattern.charAt(i)) for (end = pattern.charCodeAt(i + 1); ++start < end;) expanded.push(String.fromCharCode(start));else start = pattern.charCodeAt(i), expanded.push(pattern.charAt(i));
              return expanded.join("");
            }
            return source.match.def === target.match.nativeDef || !(!(opts.regex || source.match.fn instanceof RegExp && target.match.fn instanceof RegExp) || !0 === source.match["static"] || !0 === target.match["static"]) && -1 !== expand(target.match.fn.toString().replace(/[[\]/]/g, "")).indexOf(expand(source.match.fn.toString().replace(/[[\]/]/g, "")));
          }
          function staticCanMatchDefinition(source, target) {
            return !0 === source.match["static"] && !0 !== target.match["static"] && target.match.fn.test(source.match.def, maskset, pos, !1, opts, !1);
          }
          function setMergeLocators(targetMatch, altMatch) {
            var alternationNdx = targetMatch.alternation,
              shouldMerge = void 0 === altMatch || alternationNdx === altMatch.alternation && -1 === targetMatch.locator[alternationNdx].toString().indexOf(altMatch.locator[alternationNdx]);
            if (!shouldMerge && alternationNdx > altMatch.alternation) for (var i = altMatch.alternation; i < alternationNdx; i++) if (targetMatch.locator[i] !== altMatch.locator[i]) {
              alternationNdx = i, shouldMerge = !0;
              break;
            }
            if (shouldMerge) {
              targetMatch.mloc = targetMatch.mloc || {};
              var locNdx = targetMatch.locator[alternationNdx];
              if (void 0 !== locNdx) {
                if ("string" == typeof locNdx && (locNdx = locNdx.split(",")[0]), void 0 === targetMatch.mloc[locNdx] && (targetMatch.mloc[locNdx] = targetMatch.locator.slice()), void 0 !== altMatch) {
                  for (var ndx in altMatch.mloc) "string" == typeof ndx && (ndx = ndx.split(",")[0]), void 0 === targetMatch.mloc[ndx] && (targetMatch.mloc[ndx] = altMatch.mloc[ndx]);
                  targetMatch.locator[alternationNdx] = Object.keys(targetMatch.mloc).join(",");
                }
                return !0;
              }
              targetMatch.alternation = void 0;
            }
            return !1;
          }
          function isSameLevel(targetMatch, altMatch) {
            if (targetMatch.locator.length !== altMatch.locator.length) return !1;
            for (var locNdx = targetMatch.alternation + 1; locNdx < targetMatch.locator.length; locNdx++) if (targetMatch.locator[locNdx] !== altMatch.locator[locNdx]) return !1;
            return !0;
          }
          if (testPos > pos + opts._maxTestPos) throw "Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. " + maskset.mask;
          if (testPos === pos && void 0 === match.matches) return matches.push({
            match: match,
            locator: loopNdx.reverse(),
            cd: cacheDependency,
            mloc: {}
          }), !0;
          if (void 0 !== match.matches) {
            if (match.isGroup && quantifierRecurse !== match) {
              if (match = handleMatch(maskToken.matches[maskToken.matches.indexOf(match) + 1], loopNdx, quantifierRecurse), match) return !0;
            } else if (match.isOptional) {
              var optionalToken = match,
                mtchsNdx = matches.length;
              if (match = resolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse), match) {
                if (matches.forEach(function (mtch, ndx) {
                  mtchsNdx <= ndx && (mtch.match.optionality = !0);
                }), latestMatch = matches[matches.length - 1].match, void 0 !== quantifierRecurse || !isFirstMatch(latestMatch, optionalToken)) return !0;
                insertStop = !0, testPos = pos;
              }
            } else if (match.isAlternator) {
              var alternateToken = match,
                malternateMatches = [],
                maltMatches,
                currentMatches = matches.slice(),
                loopNdxCnt = loopNdx.length,
                altIndex = 0 < ndxInitializer.length ? ndxInitializer.shift() : -1;
              if (-1 === altIndex || "string" == typeof altIndex) {
                var currentPos = testPos,
                  ndxInitializerClone = ndxInitializer.slice(),
                  altIndexArr = [],
                  amndx;
                if ("string" == typeof altIndex) altIndexArr = altIndex.split(",");else for (amndx = 0; amndx < alternateToken.matches.length; amndx++) altIndexArr.push(amndx.toString());
                if (void 0 !== maskset.excludes[pos]) {
                  for (var altIndexArrClone = altIndexArr.slice(), i = 0, exl = maskset.excludes[pos].length; i < exl; i++) {
                    var excludeSet = maskset.excludes[pos][i].toString().split(":");
                    loopNdx.length == excludeSet[1] && altIndexArr.splice(altIndexArr.indexOf(excludeSet[0]), 1);
                  }
                  0 === altIndexArr.length && (delete maskset.excludes[pos], altIndexArr = altIndexArrClone);
                }
                (!0 === opts.keepStatic || isFinite(parseInt(opts.keepStatic)) && currentPos >= opts.keepStatic) && (altIndexArr = altIndexArr.slice(0, 1));
                for (var unMatchedAlternation = !1, ndx = 0; ndx < altIndexArr.length; ndx++) {
                  amndx = parseInt(altIndexArr[ndx]), matches = [], ndxInitializer = "string" == typeof altIndex && resolveNdxInitializer(testPos, amndx, loopNdxCnt) || ndxInitializerClone.slice(), alternateToken.matches[amndx] && handleMatch(alternateToken.matches[amndx], [amndx].concat(loopNdx), quantifierRecurse) ? match = !0 : 0 === ndx && (unMatchedAlternation = !0), maltMatches = matches.slice(), testPos = currentPos, matches = [];
                  for (var ndx1 = 0; ndx1 < maltMatches.length; ndx1++) {
                    var altMatch = maltMatches[ndx1],
                      dropMatch = !1;
                    altMatch.match.jit = altMatch.match.jit || unMatchedAlternation, altMatch.alternation = altMatch.alternation || loopNdxCnt, setMergeLocators(altMatch);
                    for (var ndx2 = 0; ndx2 < malternateMatches.length; ndx2++) {
                      var altMatch2 = malternateMatches[ndx2];
                      if ("string" != typeof altIndex || void 0 !== altMatch.alternation && altIndexArr.includes(altMatch.locator[altMatch.alternation].toString())) {
                        if (altMatch.match.nativeDef === altMatch2.match.nativeDef) {
                          dropMatch = !0, setMergeLocators(altMatch2, altMatch);
                          break;
                        }
                        if (isSubsetOf(altMatch, altMatch2)) {
                          setMergeLocators(altMatch, altMatch2) && (dropMatch = !0, malternateMatches.splice(malternateMatches.indexOf(altMatch2), 0, altMatch));
                          break;
                        }
                        if (isSubsetOf(altMatch2, altMatch)) {
                          setMergeLocators(altMatch2, altMatch);
                          break;
                        }
                        if (staticCanMatchDefinition(altMatch, altMatch2)) {
                          isSameLevel(altMatch, altMatch2) || void 0 !== el.inputmask.userOptions.keepStatic ? setMergeLocators(altMatch, altMatch2) && (dropMatch = !0, malternateMatches.splice(malternateMatches.indexOf(altMatch2), 0, altMatch)) : opts.keepStatic = !0;
                          break;
                        }
                      }
                    }
                    dropMatch || malternateMatches.push(altMatch);
                  }
                }
                matches = currentMatches.concat(malternateMatches), testPos = pos, insertStop = 0 < matches.length, match = 0 < malternateMatches.length, ndxInitializer = ndxInitializerClone.slice();
              } else match = handleMatch(alternateToken.matches[altIndex] || maskToken.matches[altIndex], [altIndex].concat(loopNdx), quantifierRecurse);
              if (match) return !0;
            } else if (match.isQuantifier && quantifierRecurse !== maskToken.matches[maskToken.matches.indexOf(match) - 1]) for (var qt = match, qndx = 0 < ndxInitializer.length ? ndxInitializer.shift() : 0; qndx < (isNaN(qt.quantifier.max) ? qndx + 1 : qt.quantifier.max) && testPos <= pos; qndx++) {
              var tokenGroup = maskToken.matches[maskToken.matches.indexOf(qt) - 1];
              if (match = handleMatch(tokenGroup, [qndx].concat(loopNdx), tokenGroup), match) {
                if (latestMatch = matches[matches.length - 1].match, latestMatch.optionalQuantifier = qndx >= qt.quantifier.min, latestMatch.jit = (qndx || 1) * tokenGroup.matches.indexOf(latestMatch) >= qt.quantifier.jit, latestMatch.optionalQuantifier && isFirstMatch(latestMatch, tokenGroup)) {
                  insertStop = !0, testPos = pos;
                  break;
                }
                return latestMatch.jit && (maskset.jitOffset[pos] = tokenGroup.matches.length - tokenGroup.matches.indexOf(latestMatch)), !0;
              }
            } else if (match = resolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse), match) return !0;
          } else testPos++;
        }
        for (var tndx = 0 < ndxInitializer.length ? ndxInitializer.shift() : 0; tndx < maskToken.matches.length; tndx++) if (!0 !== maskToken.matches[tndx].isQuantifier) {
          var match = handleMatch(maskToken.matches[tndx], [tndx].concat(loopNdx), quantifierRecurse);
          if (match && testPos === pos) return match;
          if (pos < testPos) break;
        }
      }
      function mergeLocators(pos, tests) {
        var locator = [],
          alternation;
        return Array.isArray(tests) || (tests = [tests]), 0 < tests.length && (void 0 === tests[0].alternation || !0 === opts.keepStatic ? (locator = determineTestTemplate.call(inputmask, pos, tests.slice()).locator.slice(), 0 === locator.length && (locator = tests[0].locator.slice())) : tests.forEach(function (tst) {
          "" !== tst.def && (0 === locator.length ? (alternation = tst.alternation, locator = tst.locator.slice()) : tst.locator[alternation] && -1 === locator[alternation].toString().indexOf(tst.locator[alternation]) && (locator[alternation] += "," + tst.locator[alternation]));
        })), locator;
      }
      if (-1 < pos && (void 0 === inputmask.maxLength || pos < inputmask.maxLength)) {
        if (void 0 === ndxIntlzr) {
          for (var previousPos = pos - 1, test; void 0 === (test = maskset.validPositions[previousPos] || maskset.tests[previousPos]) && -1 < previousPos;) previousPos--;
          void 0 !== test && -1 < previousPos && (ndxInitializer = mergeLocators(previousPos, test), cacheDependency = ndxInitializer.join(""), testPos = previousPos);
        }
        if (maskset.tests[pos] && maskset.tests[pos][0].cd === cacheDependency) return maskset.tests[pos];
        for (var mtndx = ndxInitializer.shift(); mtndx < maskTokens.length; mtndx++) {
          var match = resolveTestFromToken(maskTokens[mtndx], ndxInitializer, [mtndx]);
          if (match && testPos === pos || pos < testPos) break;
        }
      }
      return 0 !== matches.length && !insertStop || matches.push({
        match: {
          fn: null,
          "static": !0,
          optionality: !1,
          casing: null,
          def: "",
          placeholder: ""
        },
        locator: [],
        mloc: {},
        cd: cacheDependency
      }), void 0 !== ndxIntlzr && maskset.tests[pos] ? $.extend(!0, [], matches) : (maskset.tests[pos] = $.extend(!0, [], matches), maskset.tests[pos]);
    }
    Object.defineProperty(exports, "__esModule", {
      value: !0
    }), exports.determineTestTemplate = determineTestTemplate, exports.getDecisionTaker = getDecisionTaker, exports.getMaskTemplate = getMaskTemplate, exports.getPlaceholder = getPlaceholder, exports.getTest = getTest, exports.getTests = getTests, exports.getTestTemplate = getTestTemplate;
  }, function (module, exports, __webpack_require__) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: !0
    }), exports.alternate = alternate, exports.checkAlternationMatch = checkAlternationMatch, exports.isComplete = isComplete, exports.isValid = isValid, exports.refreshFromBuffer = refreshFromBuffer, exports.revalidateMask = revalidateMask, exports.handleRemove = handleRemove;
    var _validationTests = __webpack_require__(3),
      _keycode = _interopRequireDefault(__webpack_require__(0)),
      _positioning = __webpack_require__(1),
      _eventhandlers = __webpack_require__(7);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    function alternate(maskPos, c, strict, fromIsValid, rAltPos, selection) {
      var inputmask = this,
        $ = this.dependencyLib,
        opts = this.opts,
        maskset = this.maskset,
        validPsClone = $.extend(!0, {}, maskset.validPositions),
        tstClone = $.extend(!0, {}, maskset.tests),
        lastAlt,
        alternation,
        isValidRslt = !1,
        returnRslt = !1,
        altPos,
        prevAltPos,
        i,
        validPos,
        decisionPos,
        lAltPos = void 0 !== rAltPos ? rAltPos : _positioning.getLastValidPosition.call(this),
        nextPos,
        input,
        begin,
        end;
      if (selection && (begin = selection.begin, end = selection.end, selection.begin > selection.end && (begin = selection.end, end = selection.begin)), -1 === lAltPos && void 0 === rAltPos) lastAlt = 0, prevAltPos = _validationTests.getTest.call(this, lastAlt), alternation = prevAltPos.alternation;else for (; 0 <= lAltPos; lAltPos--) if (altPos = maskset.validPositions[lAltPos], altPos && void 0 !== altPos.alternation) {
        if (prevAltPos && prevAltPos.locator[altPos.alternation] !== altPos.locator[altPos.alternation]) break;
        lastAlt = lAltPos, alternation = maskset.validPositions[lastAlt].alternation, prevAltPos = altPos;
      }
      if (void 0 !== alternation) {
        decisionPos = parseInt(lastAlt), maskset.excludes[decisionPos] = maskset.excludes[decisionPos] || [], !0 !== maskPos && maskset.excludes[decisionPos].push((0, _validationTests.getDecisionTaker)(prevAltPos) + ":" + prevAltPos.alternation);
        var validInputs = [],
          resultPos = -1;
        for (i = decisionPos; i < _positioning.getLastValidPosition.call(this, void 0, !0) + 1; i++) -1 === resultPos && maskPos <= i && void 0 !== c && (validInputs.push(c), resultPos = validInputs.length - 1), validPos = maskset.validPositions[i], validPos && !0 !== validPos.generatedInput && (void 0 === selection || i < begin || end <= i) && validInputs.push(validPos.input), delete maskset.validPositions[i];
        for (-1 === resultPos && void 0 !== c && (validInputs.push(c), resultPos = validInputs.length - 1); void 0 !== maskset.excludes[decisionPos] && maskset.excludes[decisionPos].length < 10;) {
          for (maskset.tests = {}, _positioning.resetMaskSet.call(this, !0), isValidRslt = !0, i = 0; i < validInputs.length && (nextPos = isValidRslt.caret || _positioning.getLastValidPosition.call(this, void 0, !0) + 1, input = validInputs[i], isValidRslt = isValid.call(this, nextPos, input, !1, fromIsValid, !0)); i++) i === resultPos && (returnRslt = isValidRslt), 1 == maskPos && isValidRslt && (returnRslt = {
            caretPos: i
          });
          if (isValidRslt) break;
          if (_positioning.resetMaskSet.call(this), prevAltPos = _validationTests.getTest.call(this, decisionPos), maskset.validPositions = $.extend(!0, {}, validPsClone), maskset.tests = $.extend(!0, {}, tstClone), !maskset.excludes[decisionPos]) {
            returnRslt = alternate.call(this, maskPos, c, strict, fromIsValid, decisionPos - 1, selection);
            break;
          }
          var decisionTaker = (0, _validationTests.getDecisionTaker)(prevAltPos);
          if (-1 !== maskset.excludes[decisionPos].indexOf(decisionTaker + ":" + prevAltPos.alternation)) {
            returnRslt = alternate.call(this, maskPos, c, strict, fromIsValid, decisionPos - 1, selection);
            break;
          }
          for (maskset.excludes[decisionPos].push(decisionTaker + ":" + prevAltPos.alternation), i = decisionPos; i < _positioning.getLastValidPosition.call(this, void 0, !0) + 1; i++) delete maskset.validPositions[i];
        }
      }
      return returnRslt && !1 === opts.keepStatic || delete maskset.excludes[decisionPos], returnRslt;
    }
    function casing(elem, test, pos) {
      var opts = this.opts,
        maskset = this.maskset;
      switch (opts.casing || test.casing) {
        case "upper":
          elem = elem.toUpperCase();
          break;
        case "lower":
          elem = elem.toLowerCase();
          break;
        case "title":
          var posBefore = maskset.validPositions[pos - 1];
          elem = 0 === pos || posBefore && posBefore.input === String.fromCharCode(_keycode["default"].SPACE) ? elem.toUpperCase() : elem.toLowerCase();
          break;
        default:
          if ("function" == typeof opts.casing) {
            var args = Array.prototype.slice.call(arguments);
            args.push(maskset.validPositions), elem = opts.casing.apply(this, args);
          }
      }
      return elem;
    }
    function checkAlternationMatch(altArr1, altArr2, na) {
      for (var opts = this.opts, altArrC = opts.greedy ? altArr2 : altArr2.slice(0, 1), isMatch = !1, naArr = void 0 !== na ? na.split(",") : [], naNdx, i = 0; i < naArr.length; i++) -1 !== (naNdx = altArr1.indexOf(naArr[i])) && altArr1.splice(naNdx, 1);
      for (var alndx = 0; alndx < altArr1.length; alndx++) if (altArrC.includes(altArr1[alndx])) {
        isMatch = !0;
        break;
      }
      return isMatch;
    }
    function handleRemove(input, k, pos, strict, fromIsValid) {
      var inputmask = this,
        maskset = this.maskset,
        opts = this.opts;
      if ((opts.numericInput || this.isRTL) && (k === _keycode["default"].BACKSPACE ? k = _keycode["default"].DELETE : k === _keycode["default"].DELETE && (k = _keycode["default"].BACKSPACE), this.isRTL)) {
        var pend = pos.end;
        pos.end = pos.begin, pos.begin = pend;
      }
      var lvp = _positioning.getLastValidPosition.call(this, void 0, !0),
        offset;
      if (pos.end >= _positioning.getBuffer.call(this).length && lvp >= pos.end && (pos.end = lvp + 1), k === _keycode["default"].BACKSPACE ? pos.end - pos.begin < 1 && (pos.begin = _positioning.seekPrevious.call(this, pos.begin)) : k === _keycode["default"].DELETE && pos.begin === pos.end && (pos.end = _positioning.isMask.call(this, pos.end, !0, !0) ? pos.end + 1 : _positioning.seekNext.call(this, pos.end) + 1), !1 !== (offset = revalidateMask.call(this, pos))) {
        if (!0 !== strict && !1 !== opts.keepStatic || null !== opts.regex && -1 !== _validationTests.getTest.call(this, pos.begin).match.def.indexOf("|")) {
          var result = alternate.call(this, !0);
          if (result) {
            var newPos = void 0 !== result.caret ? result.caret : result.pos ? _positioning.seekNext.call(this, result.pos.begin ? result.pos.begin : result.pos) : _positioning.getLastValidPosition.call(this, -1, !0);
            (k !== _keycode["default"].DELETE || pos.begin > newPos) && pos.begin;
          }
        }
        !0 !== strict && (maskset.p = k === _keycode["default"].DELETE ? pos.begin + offset : pos.begin);
      }
    }
    function isComplete(buffer) {
      var inputmask = this,
        opts = this.opts,
        maskset = this.maskset;
      if ("function" == typeof opts.isComplete) return opts.isComplete(buffer, opts);
      if ("*" !== opts.repeat) {
        var complete = !1,
          lrp = _positioning.determineLastRequiredPosition.call(this, !0),
          aml = _positioning.seekPrevious.call(this, lrp.l);
        if (void 0 === lrp.def || lrp.def.newBlockMarker || lrp.def.optionality || lrp.def.optionalQuantifier) {
          complete = !0;
          for (var i = 0; i <= aml; i++) {
            var test = _validationTests.getTestTemplate.call(this, i).match;
            if (!0 !== test["static"] && void 0 === maskset.validPositions[i] && !0 !== test.optionality && !0 !== test.optionalQuantifier || !0 === test["static"] && buffer[i] !== _validationTests.getPlaceholder.call(this, i, test)) {
              complete = !1;
              break;
            }
          }
        }
        return complete;
      }
    }
    function isValid(pos, c, strict, fromIsValid, fromAlternate, validateOnly, fromCheckval) {
      var inputmask = this,
        $ = this.dependencyLib,
        opts = this.opts,
        el = inputmask.el,
        maskset = inputmask.maskset;
      function isSelection(posObj) {
        return inputmask.isRTL ? 1 < posObj.begin - posObj.end || posObj.begin - posObj.end == 1 : 1 < posObj.end - posObj.begin || posObj.end - posObj.begin == 1;
      }
      strict = !0 === strict;
      var maskPos = pos;
      function processCommandObject(commandObj) {
        if (void 0 !== commandObj) {
          if (void 0 !== commandObj.remove && (Array.isArray(commandObj.remove) || (commandObj.remove = [commandObj.remove]), commandObj.remove.sort(function (a, b) {
            return b.pos - a.pos;
          }).forEach(function (lmnt) {
            revalidateMask.call(inputmask, {
              begin: lmnt,
              end: lmnt + 1
            });
          }), commandObj.remove = void 0), void 0 !== commandObj.insert && (Array.isArray(commandObj.insert) || (commandObj.insert = [commandObj.insert]), commandObj.insert.sort(function (a, b) {
            return a.pos - b.pos;
          }).forEach(function (lmnt) {
            "" !== lmnt.c && isValid.call(inputmask, lmnt.pos, lmnt.c, void 0 === lmnt.strict || lmnt.strict, void 0 !== lmnt.fromIsValid ? lmnt.fromIsValid : fromIsValid);
          }), commandObj.insert = void 0), commandObj.refreshFromBuffer && commandObj.buffer) {
            var refresh = commandObj.refreshFromBuffer;
            refreshFromBuffer.call(inputmask, !0 === refresh ? refresh : refresh.start, refresh.end, commandObj.buffer), commandObj.refreshFromBuffer = void 0;
          }
          void 0 !== commandObj.rewritePosition && (maskPos = commandObj.rewritePosition, commandObj = !0);
        }
        return commandObj;
      }
      function _isValid(position, c, strict) {
        var rslt = !1;
        return _validationTests.getTests.call(inputmask, position).every(function (tst, ndx) {
          var test = tst.match;
          if (_positioning.getBuffer.call(inputmask, !0), rslt = null != test.fn ? test.fn.test(c, maskset, position, strict, opts, isSelection(pos)) : (c === test.def || c === opts.skipOptionalPartCharacter) && "" !== test.def && {
            c: _validationTests.getPlaceholder.call(inputmask, position, test, !0) || test.def,
            pos: position
          }, !1 === rslt) return !0;
          var elem = void 0 !== rslt.c ? rslt.c : c,
            validatedPos = position;
          return elem = elem === opts.skipOptionalPartCharacter && !0 === test["static"] ? _validationTests.getPlaceholder.call(inputmask, position, test, !0) || test.def : elem, rslt = processCommandObject(rslt), !0 !== rslt && void 0 !== rslt.pos && rslt.pos !== position && (validatedPos = rslt.pos), !0 !== rslt && void 0 === rslt.pos && void 0 === rslt.c || !1 === revalidateMask.call(inputmask, pos, $.extend({}, tst, {
            input: casing.call(inputmask, elem, test, validatedPos)
          }), fromIsValid, validatedPos) && (rslt = !1), !1;
        }), rslt;
      }
      void 0 !== pos.begin && (maskPos = inputmask.isRTL ? pos.end : pos.begin);
      var result = !0,
        positionsClone = $.extend(!0, {}, maskset.validPositions);
      if (!1 === opts.keepStatic && void 0 !== maskset.excludes[maskPos] && !0 !== fromAlternate && !0 !== fromIsValid) for (var i = maskPos; i < (inputmask.isRTL ? pos.begin : pos.end); i++) void 0 !== maskset.excludes[i] && (maskset.excludes[i] = void 0, delete maskset.tests[i]);
      if ("function" == typeof opts.preValidation && !0 !== fromIsValid && !0 !== validateOnly && (result = opts.preValidation.call(inputmask, _positioning.getBuffer.call(inputmask), maskPos, c, isSelection(pos), opts, maskset, pos, strict || fromAlternate), result = processCommandObject(result)), !0 === result) {
        if (void 0 === inputmask.maxLength || maskPos < _positioning.translatePosition.call(inputmask, inputmask.maxLength)) {
          if (result = _isValid(maskPos, c, strict), (!strict || !0 === fromIsValid) && !1 === result && !0 !== validateOnly) {
            var currentPosValid = maskset.validPositions[maskPos];
            if (!currentPosValid || !0 !== currentPosValid.match["static"] || currentPosValid.match.def !== c && c !== opts.skipOptionalPartCharacter) {
              if (opts.insertMode || void 0 === maskset.validPositions[_positioning.seekNext.call(inputmask, maskPos)] || pos.end > maskPos) {
                var skip = !1;
                if (maskset.jitOffset[maskPos] && void 0 === maskset.validPositions[_positioning.seekNext.call(inputmask, maskPos)] && (result = isValid.call(inputmask, maskPos + maskset.jitOffset[maskPos], c, !0), !1 !== result && (!0 !== fromAlternate && (result.caret = maskPos), skip = !0)), pos.end > maskPos && (maskset.validPositions[maskPos] = void 0), !skip && !_positioning.isMask.call(inputmask, maskPos, opts.keepStatic && 0 === maskPos)) for (var nPos = maskPos + 1, snPos = _positioning.seekNext.call(inputmask, maskPos, !1, 0 !== maskPos); nPos <= snPos; nPos++) if (result = _isValid(nPos, c, strict), !1 !== result) {
                  result = trackbackPositions.call(inputmask, maskPos, void 0 !== result.pos ? result.pos : nPos) || result, maskPos = nPos;
                  break;
                }
              }
            } else result = {
              caret: _positioning.seekNext.call(inputmask, maskPos)
            };
          }
        } else result = !1;
        !1 !== result || !opts.keepStatic || !isComplete.call(inputmask, _positioning.getBuffer.call(inputmask)) && 0 !== maskPos || strict || !0 === fromAlternate ? isSelection(pos) && maskset.tests[maskPos] && 1 < maskset.tests[maskPos].length && opts.keepStatic && !strict && !0 !== fromAlternate && (result = alternate.call(inputmask, !0)) : result = alternate.call(inputmask, maskPos, c, strict, fromIsValid, void 0, pos), !0 === result && (result = {
          pos: maskPos
        });
      }
      if ("function" == typeof opts.postValidation && !0 !== fromIsValid && !0 !== validateOnly) {
        var postResult = opts.postValidation.call(inputmask, _positioning.getBuffer.call(inputmask, !0), void 0 !== pos.begin ? inputmask.isRTL ? pos.end : pos.begin : pos, c, result, opts, maskset, strict, fromCheckval);
        void 0 !== postResult && (result = !0 === postResult ? result : postResult);
      }
      result && void 0 === result.pos && (result.pos = maskPos), !1 === result || !0 === validateOnly ? (_positioning.resetMaskSet.call(inputmask, !0), maskset.validPositions = $.extend(!0, {}, positionsClone)) : trackbackPositions.call(inputmask, void 0, maskPos, !0);
      var endResult = processCommandObject(result);
      return endResult;
    }
    function positionCanMatchDefinition(pos, testDefinition, opts) {
      for (var inputmask = this, maskset = this.maskset, valid = !1, tests = _validationTests.getTests.call(this, pos), tndx = 0; tndx < tests.length; tndx++) {
        if (tests[tndx].match && (!(tests[tndx].match.nativeDef !== testDefinition.match[opts.shiftPositions ? "def" : "nativeDef"] || opts.shiftPositions && testDefinition.match["static"]) || tests[tndx].match.nativeDef === testDefinition.match.nativeDef)) {
          valid = !0;
          break;
        }
        if (tests[tndx].match && tests[tndx].match.def === testDefinition.match.nativeDef) {
          valid = void 0;
          break;
        }
      }
      return !1 === valid && void 0 !== maskset.jitOffset[pos] && (valid = positionCanMatchDefinition.call(this, pos + maskset.jitOffset[pos], testDefinition, opts)), valid;
    }
    function refreshFromBuffer(start, end, buffer) {
      var inputmask = this,
        maskset = this.maskset,
        opts = this.opts,
        $ = this.dependencyLib,
        el = this.el,
        i,
        p,
        skipOptionalPartCharacter = opts.skipOptionalPartCharacter,
        bffr = this.isRTL ? buffer.slice().reverse() : buffer;
      if (opts.skipOptionalPartCharacter = "", !0 === start) _positioning.resetMaskSet.call(this), maskset.tests = {}, start = 0, end = buffer.length, p = _positioning.determineNewCaretPosition.call(this, {
        begin: 0,
        end: 0
      }, !1).begin;else {
        for (i = start; i < end; i++) delete maskset.validPositions[i];
        p = start;
      }
      var keypress = new $.Event("keypress");
      for (i = start; i < end; i++) {
        keypress.which = bffr[i].toString().charCodeAt(0), this.ignorable = !1;
        var valResult = _eventhandlers.EventHandlers.keypressEvent.call(el, keypress, !0, !1, !1, p);
        !1 !== valResult && (p = valResult.forwardPosition);
      }
      opts.skipOptionalPartCharacter = skipOptionalPartCharacter;
    }
    function trackbackPositions(originalPos, newPos, fillOnly) {
      var inputmask = this,
        maskset = this.maskset,
        $ = this.dependencyLib;
      if (void 0 === originalPos) for (originalPos = newPos - 1; 0 < originalPos && !maskset.validPositions[originalPos]; originalPos--);
      for (var ps = originalPos; ps < newPos; ps++) if (void 0 === maskset.validPositions[ps] && !_positioning.isMask.call(this, ps, !0)) {
        var vp = 0 == ps ? _validationTests.getTest.call(this, ps) : maskset.validPositions[ps - 1];
        if (vp) {
          var tests = _validationTests.getTests.call(this, ps).slice();
          "" === tests[tests.length - 1].match.def && tests.pop();
          var bestMatch = _validationTests.determineTestTemplate.call(this, ps, tests),
            np;
          if (bestMatch && (!0 !== bestMatch.match.jit || "master" === bestMatch.match.newBlockMarker && (np = maskset.validPositions[ps + 1]) && !0 === np.match.optionalQuantifier) && (bestMatch = $.extend({}, bestMatch, {
            input: _validationTests.getPlaceholder.call(this, ps, bestMatch.match, !0) || bestMatch.match.def
          }), bestMatch.generatedInput = !0, revalidateMask.call(this, ps, bestMatch, !0), !0 !== fillOnly)) {
            var cvpInput = maskset.validPositions[newPos].input;
            return maskset.validPositions[newPos] = void 0, isValid.call(this, newPos, cvpInput, !0, !0);
          }
        }
      }
    }
    function revalidateMask(pos, validTest, fromIsValid, validatedPos) {
      var inputmask = this,
        maskset = this.maskset,
        opts = this.opts,
        $ = this.dependencyLib;
      function IsEnclosedStatic(pos, valids, selection) {
        var posMatch = valids[pos];
        if (void 0 === posMatch || !0 !== posMatch.match["static"] || !0 === posMatch.match.optionality || void 0 !== valids[0] && void 0 !== valids[0].alternation) return !1;
        var prevMatch = selection.begin <= pos - 1 ? valids[pos - 1] && !0 === valids[pos - 1].match["static"] && valids[pos - 1] : valids[pos - 1],
          nextMatch = selection.end > pos + 1 ? valids[pos + 1] && !0 === valids[pos + 1].match["static"] && valids[pos + 1] : valids[pos + 1];
        return prevMatch && nextMatch;
      }
      var offset = 0,
        begin = void 0 !== pos.begin ? pos.begin : pos,
        end = void 0 !== pos.end ? pos.end : pos;
      if (pos.begin > pos.end && (begin = pos.end, end = pos.begin), validatedPos = void 0 !== validatedPos ? validatedPos : begin, begin !== end || opts.insertMode && void 0 !== maskset.validPositions[validatedPos] && void 0 === fromIsValid || void 0 === validTest) {
        var positionsClone = $.extend(!0, {}, maskset.validPositions),
          lvp = _positioning.getLastValidPosition.call(this, void 0, !0),
          i;
        for (maskset.p = begin, i = lvp; begin <= i; i--) delete maskset.validPositions[i], void 0 === validTest && delete maskset.tests[i + 1];
        var valid = !0,
          j = validatedPos,
          posMatch = j,
          t,
          canMatch;
        for (validTest && (maskset.validPositions[validatedPos] = $.extend(!0, {}, validTest), posMatch++, j++), i = validTest ? end : end - 1; i <= lvp; i++) {
          if (void 0 !== (t = positionsClone[i]) && !0 !== t.generatedInput && (end <= i || begin <= i && IsEnclosedStatic(i, positionsClone, {
            begin: begin,
            end: end
          }))) {
            for (; "" !== _validationTests.getTest.call(this, posMatch).match.def;) {
              if (!1 !== (canMatch = positionCanMatchDefinition.call(this, posMatch, t, opts)) || "+" === t.match.def) {
                "+" === t.match.def && _positioning.getBuffer.call(this, !0);
                var result = isValid.call(this, posMatch, t.input, "+" !== t.match.def, "+" !== t.match.def);
                if (valid = !1 !== result, j = (result.pos || posMatch) + 1, !valid && canMatch) break;
              } else valid = !1;
              if (valid) {
                void 0 === validTest && t.match["static"] && i === pos.begin && offset++;
                break;
              }
              if (!valid && posMatch > maskset.maskLength) break;
              posMatch++;
            }
            "" == _validationTests.getTest.call(this, posMatch).match.def && (valid = !1), posMatch = j;
          }
          if (!valid) break;
        }
        if (!valid) return maskset.validPositions = $.extend(!0, {}, positionsClone), _positioning.resetMaskSet.call(this, !0), !1;
      } else validTest && _validationTests.getTest.call(this, validatedPos).match.cd === validTest.match.cd && (maskset.validPositions[validatedPos] = $.extend(!0, {}, validTest));
      return _positioning.resetMaskSet.call(this, !0), offset;
    }
  }, function (module, exports, __webpack_require__) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: !0
    }), exports.applyInputValue = applyInputValue, exports.clearOptionalTail = clearOptionalTail, exports.checkVal = checkVal, exports.HandleNativePlaceholder = HandleNativePlaceholder, exports.unmaskedvalue = unmaskedvalue, exports.writeBuffer = writeBuffer;
    var _keycode = _interopRequireDefault(__webpack_require__(0)),
      _validationTests = __webpack_require__(3),
      _positioning = __webpack_require__(1),
      _validation = __webpack_require__(4),
      _environment = __webpack_require__(8),
      _eventhandlers = __webpack_require__(7);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    function applyInputValue(input, value) {
      var inputmask = input ? input.inputmask : this,
        opts = inputmask.opts;
      input.inputmask.refreshValue = !1, "function" == typeof opts.onBeforeMask && (value = opts.onBeforeMask.call(inputmask, value, opts) || value), value = value.toString().split(""), checkVal(input, !0, !1, value), inputmask.undoValue = _positioning.getBuffer.call(inputmask).join(""), (opts.clearMaskOnLostFocus || opts.clearIncomplete) && input.inputmask._valueGet() === _positioning.getBufferTemplate.call(inputmask).join("") && -1 === _positioning.getLastValidPosition.call(inputmask) && input.inputmask._valueSet("");
    }
    function clearOptionalTail(buffer) {
      var inputmask = this;
      buffer.length = 0;
      for (var template = _validationTests.getMaskTemplate.call(this, !0, 0, !0, void 0, !0), lmnt; void 0 !== (lmnt = template.shift());) buffer.push(lmnt);
      return buffer;
    }
    function checkVal(input, writeOut, strict, nptvl, initiatingEvent) {
      var inputmask = input ? input.inputmask : this,
        maskset = inputmask.maskset,
        opts = inputmask.opts,
        $ = inputmask.dependencyLib,
        inputValue = nptvl.slice(),
        charCodes = "",
        initialNdx = -1,
        result = void 0,
        skipOptionalPartCharacter = opts.skipOptionalPartCharacter;
      function isTemplateMatch(ndx, charCodes) {
        for (var targetTemplate = _validationTests.getMaskTemplate.call(inputmask, !0, 0).slice(ndx, _positioning.seekNext.call(inputmask, ndx, !1, !1)).join("").replace(/'/g, ""), charCodeNdx = targetTemplate.indexOf(charCodes); 0 < charCodeNdx && " " === targetTemplate[charCodeNdx - 1];) charCodeNdx--;
        var match = 0 === charCodeNdx && !_positioning.isMask.call(inputmask, ndx) && (_validationTests.getTest.call(inputmask, ndx).match.nativeDef === charCodes.charAt(0) || !0 === _validationTests.getTest.call(inputmask, ndx).match["static"] && _validationTests.getTest.call(inputmask, ndx).match.nativeDef === "'" + charCodes.charAt(0) || " " === _validationTests.getTest.call(inputmask, ndx).match.nativeDef && (_validationTests.getTest.call(inputmask, ndx + 1).match.nativeDef === charCodes.charAt(0) || !0 === _validationTests.getTest.call(inputmask, ndx + 1).match["static"] && _validationTests.getTest.call(inputmask, ndx + 1).match.nativeDef === "'" + charCodes.charAt(0)));
        if (!match && 0 < charCodeNdx && !_positioning.isMask.call(inputmask, ndx, !1, !0)) {
          var nextPos = _positioning.seekNext.call(inputmask, ndx);
          inputmask.caretPos.begin < nextPos && (inputmask.caretPos = {
            begin: nextPos
          });
        }
        return match;
      }
      opts.skipOptionalPartCharacter = "", _positioning.resetMaskSet.call(inputmask), maskset.tests = {}, initialNdx = opts.radixPoint ? _positioning.determineNewCaretPosition.call(inputmask, {
        begin: 0,
        end: 0
      }).begin : 0, maskset.p = initialNdx, inputmask.caretPos = {
        begin: initialNdx
      };
      var staticMatches = [],
        prevCaretPos = inputmask.caretPos;
      if (inputValue.forEach(function (charCode, ndx) {
        if (void 0 !== charCode) if (void 0 === maskset.validPositions[ndx] && inputValue[ndx] === _validationTests.getPlaceholder.call(inputmask, ndx) && _positioning.isMask.call(inputmask, ndx, !0) && !1 === _validation.isValid.call(inputmask, ndx, inputValue[ndx], !0, void 0, void 0, !0)) maskset.p++;else {
          var keypress = new $.Event("_checkval");
          keypress.which = charCode.toString().charCodeAt(0), charCodes += charCode;
          var lvp = _positioning.getLastValidPosition.call(inputmask, void 0, !0);
          isTemplateMatch(initialNdx, charCodes) ? result = _eventhandlers.EventHandlers.keypressEvent.call(inputmask, keypress, !0, !1, strict, lvp + 1) : (result = _eventhandlers.EventHandlers.keypressEvent.call(inputmask, keypress, !0, !1, strict, inputmask.caretPos.begin), result && (initialNdx = inputmask.caretPos.begin + 1, charCodes = "")), result ? (void 0 !== result.pos && maskset.validPositions[result.pos] && !0 === maskset.validPositions[result.pos].match["static"] && void 0 === maskset.validPositions[result.pos].alternation && (staticMatches.push(result.pos), inputmask.isRTL || (result.forwardPosition = result.pos + 1)), writeBuffer.call(inputmask, void 0, _positioning.getBuffer.call(inputmask), result.forwardPosition, keypress, !1), inputmask.caretPos = {
            begin: result.forwardPosition,
            end: result.forwardPosition
          }, prevCaretPos = inputmask.caretPos) : inputmask.caretPos = prevCaretPos;
        }
      }), 0 < staticMatches.length) {
        var sndx,
          validPos,
          nextValid = _positioning.seekNext.call(inputmask, -1, void 0, !1);
        if (!_validation.isComplete.call(inputmask, _positioning.getBuffer.call(inputmask)) && staticMatches.length <= nextValid || _validation.isComplete.call(inputmask, _positioning.getBuffer.call(inputmask)) && 0 < staticMatches.length && staticMatches.length !== nextValid && 0 === staticMatches[0]) for (var nextSndx = nextValid; void 0 !== (sndx = staticMatches.shift());) {
          var keypress = new $.Event("_checkval");
          if (validPos = maskset.validPositions[sndx], validPos.generatedInput = !0, keypress.which = validPos.input.charCodeAt(0), result = _eventhandlers.EventHandlers.keypressEvent.call(inputmask, keypress, !0, !1, strict, nextSndx), result && void 0 !== result.pos && result.pos !== sndx && maskset.validPositions[result.pos] && !0 === maskset.validPositions[result.pos].match["static"]) staticMatches.push(result.pos);else if (!result) break;
          nextSndx++;
        }
      }
      writeOut && writeBuffer.call(inputmask, input, _positioning.getBuffer.call(inputmask), result ? result.forwardPosition : inputmask.caretPos.begin, initiatingEvent || new $.Event("checkval"), initiatingEvent && "input" === initiatingEvent.type && inputmask.undoValue !== _positioning.getBuffer.call(inputmask).join("")), opts.skipOptionalPartCharacter = skipOptionalPartCharacter;
    }
    function HandleNativePlaceholder(npt, value) {
      var inputmask = npt ? npt.inputmask : this;
      if (_environment.ie) {
        if (npt.inputmask._valueGet() !== value && (npt.placeholder !== value || "" === npt.placeholder)) {
          var buffer = _positioning.getBuffer.call(inputmask).slice(),
            nptValue = npt.inputmask._valueGet();
          if (nptValue !== value) {
            var lvp = _positioning.getLastValidPosition.call(inputmask);
            -1 === lvp && nptValue === _positioning.getBufferTemplate.call(inputmask).join("") ? buffer = [] : -1 !== lvp && clearOptionalTail.call(inputmask, buffer), writeBuffer(npt, buffer);
          }
        }
      } else npt.placeholder !== value && (npt.placeholder = value, "" === npt.placeholder && npt.removeAttribute("placeholder"));
    }
    function unmaskedvalue(input) {
      var inputmask = input ? input.inputmask : this,
        opts = inputmask.opts,
        maskset = inputmask.maskset;
      if (input) {
        if (void 0 === input.inputmask) return input.value;
        input.inputmask && input.inputmask.refreshValue && applyInputValue(input, input.inputmask._valueGet(!0));
      }
      var umValue = [],
        vps = maskset.validPositions;
      for (var pndx in vps) vps[pndx] && vps[pndx].match && (1 != vps[pndx].match["static"] || Array.isArray(maskset.metadata) && !0 !== vps[pndx].generatedInput) && umValue.push(vps[pndx].input);
      var unmaskedValue = 0 === umValue.length ? "" : (inputmask.isRTL ? umValue.reverse() : umValue).join("");
      if ("function" == typeof opts.onUnMask) {
        var bufferValue = (inputmask.isRTL ? _positioning.getBuffer.call(inputmask).slice().reverse() : _positioning.getBuffer.call(inputmask)).join("");
        unmaskedValue = opts.onUnMask.call(inputmask, bufferValue, unmaskedValue, opts);
      }
      return unmaskedValue;
    }
    function writeBuffer(input, buffer, caretPos, event, triggerEvents) {
      var inputmask = input ? input.inputmask : this,
        opts = inputmask.opts,
        $ = inputmask.dependencyLib;
      if (event && "function" == typeof opts.onBeforeWrite) {
        var result = opts.onBeforeWrite.call(inputmask, event, buffer, caretPos, opts);
        if (result) {
          if (result.refreshFromBuffer) {
            var refresh = result.refreshFromBuffer;
            _validation.refreshFromBuffer.call(inputmask, !0 === refresh ? refresh : refresh.start, refresh.end, result.buffer || buffer), buffer = _positioning.getBuffer.call(inputmask, !0);
          }
          void 0 !== caretPos && (caretPos = void 0 !== result.caret ? result.caret : caretPos);
        }
      }
      if (void 0 !== input && (input.inputmask._valueSet(buffer.join("")), void 0 === caretPos || void 0 !== event && "blur" === event.type || _positioning.caret.call(inputmask, input, caretPos, void 0, void 0, void 0 !== event && "keydown" === event.type && (event.keyCode === _keycode["default"].DELETE || event.keyCode === _keycode["default"].BACKSPACE)), !0 === triggerEvents)) {
        var $input = $(input),
          nptVal = input.inputmask._valueGet();
        input.inputmask.skipInputEvent = !0, $input.trigger("input"), setTimeout(function () {
          nptVal === _positioning.getBufferTemplate.call(inputmask).join("") ? $input.trigger("cleared") : !0 === _validation.isComplete.call(inputmask, buffer) && $input.trigger("complete");
        }, 0);
      }
    }
  }, function (module, exports, __webpack_require__) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: !0
    }), exports["default"] = void 0;
    var _default = "undefined" != typeof window ? window : new (eval("require('jsdom').JSDOM"))("").window;
    exports["default"] = _default;
  }, function (module, exports, __webpack_require__) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: !0
    }), exports.EventHandlers = void 0;
    var _positioning = __webpack_require__(1),
      _keycode = _interopRequireDefault(__webpack_require__(0)),
      _environment = __webpack_require__(8),
      _validation = __webpack_require__(4),
      _inputHandling = __webpack_require__(5),
      _validationTests = __webpack_require__(3);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    var EventHandlers = {
      keydownEvent: function keydownEvent(e) {
        var inputmask = this.inputmask,
          opts = inputmask.opts,
          $ = inputmask.dependencyLib,
          maskset = inputmask.maskset,
          input = this,
          $input = $(input),
          k = e.keyCode,
          pos = _positioning.caret.call(inputmask, input),
          kdResult = opts.onKeyDown.call(this, e, _positioning.getBuffer.call(inputmask), pos, opts);
        if (void 0 !== kdResult) return kdResult;
        if (k === _keycode["default"].BACKSPACE || k === _keycode["default"].DELETE || _environment.iphone && k === _keycode["default"].BACKSPACE_SAFARI || e.ctrlKey && k === _keycode["default"].X && !("oncut" in input)) e.preventDefault(), _validation.handleRemove.call(inputmask, input, k, pos), (0, _inputHandling.writeBuffer)(input, _positioning.getBuffer.call(inputmask, !0), maskset.p, e, input.inputmask._valueGet() !== _positioning.getBuffer.call(inputmask).join(""));else if (k === _keycode["default"].END || k === _keycode["default"].PAGE_DOWN) {
          e.preventDefault();
          var caretPos = _positioning.seekNext.call(inputmask, _positioning.getLastValidPosition.call(inputmask));
          _positioning.caret.call(inputmask, input, e.shiftKey ? pos.begin : caretPos, caretPos, !0);
        } else k === _keycode["default"].HOME && !e.shiftKey || k === _keycode["default"].PAGE_UP ? (e.preventDefault(), _positioning.caret.call(inputmask, input, 0, e.shiftKey ? pos.begin : 0, !0)) : (opts.undoOnEscape && k === _keycode["default"].ESCAPE || 90 === k && e.ctrlKey) && !0 !== e.altKey ? ((0, _inputHandling.checkVal)(input, !0, !1, inputmask.undoValue.split("")), $input.trigger("click")) : !0 === opts.tabThrough && k === _keycode["default"].TAB ? !0 === e.shiftKey ? (pos.end = _positioning.seekPrevious.call(inputmask, pos.end, !0), !0 === _validationTests.getTest.call(inputmask, pos.end - 1).match["static"] && pos.end--, pos.begin = _positioning.seekPrevious.call(inputmask, pos.end, !0), 0 <= pos.begin && 0 < pos.end && (e.preventDefault(), _positioning.caret.call(inputmask, input, pos.begin, pos.end))) : (pos.begin = _positioning.seekNext.call(inputmask, pos.begin, !0), pos.end = _positioning.seekNext.call(inputmask, pos.begin, !0), pos.end < maskset.maskLength && pos.end--, pos.begin <= maskset.maskLength && (e.preventDefault(), _positioning.caret.call(inputmask, input, pos.begin, pos.end))) : e.shiftKey || opts.insertModeVisual && !1 === opts.insertMode && (k === _keycode["default"].RIGHT ? setTimeout(function () {
          var caretPos = _positioning.caret.call(inputmask, input);
          _positioning.caret.call(inputmask, input, caretPos.begin);
        }, 0) : k === _keycode["default"].LEFT && setTimeout(function () {
          var caretPos_begin = _positioning.translatePosition.call(inputmask, input.inputmask.caretPos.begin),
            caretPos_end = _positioning.translatePosition.call(inputmask, input.inputmask.caretPos.end);
          inputmask.isRTL ? _positioning.caret.call(inputmask, input, caretPos_begin + (caretPos_begin === maskset.maskLength ? 0 : 1)) : _positioning.caret.call(inputmask, input, caretPos_begin - (0 === caretPos_begin ? 0 : 1));
        }, 0));
        inputmask.ignorable = opts.ignorables.includes(k);
      },
      keypressEvent: function keypressEvent(e, checkval, writeOut, strict, ndx) {
        var inputmask = this.inputmask || this,
          opts = inputmask.opts,
          $ = inputmask.dependencyLib,
          maskset = inputmask.maskset,
          input = inputmask.el,
          $input = $(input),
          k = e.which || e.charCode || e.keyCode;
        if (!(!0 === checkval || e.ctrlKey && e.altKey) && (e.ctrlKey || e.metaKey || inputmask.ignorable)) return k === _keycode["default"].ENTER && inputmask.undoValue !== _positioning.getBuffer.call(inputmask).join("") && (inputmask.undoValue = _positioning.getBuffer.call(inputmask).join(""), setTimeout(function () {
          $input.trigger("change");
        }, 0)), inputmask.skipInputEvent = !0, !0;
        if (k) {
          44 !== k && 46 !== k || 3 !== e.location || "" === opts.radixPoint || (k = opts.radixPoint.charCodeAt(0));
          var pos = checkval ? {
              begin: ndx,
              end: ndx
            } : _positioning.caret.call(inputmask, input),
            forwardPosition,
            c = String.fromCharCode(k);
          maskset.writeOutBuffer = !0;
          var valResult = _validation.isValid.call(inputmask, pos, c, strict, void 0, void 0, void 0, checkval);
          if (!1 !== valResult && (_positioning.resetMaskSet.call(inputmask, !0), forwardPosition = void 0 !== valResult.caret ? valResult.caret : _positioning.seekNext.call(inputmask, valResult.pos.begin ? valResult.pos.begin : valResult.pos), maskset.p = forwardPosition), forwardPosition = opts.numericInput && void 0 === valResult.caret ? _positioning.seekPrevious.call(inputmask, forwardPosition) : forwardPosition, !1 !== writeOut && (setTimeout(function () {
            opts.onKeyValidation.call(input, k, valResult);
          }, 0), maskset.writeOutBuffer && !1 !== valResult)) {
            var buffer = _positioning.getBuffer.call(inputmask);
            (0, _inputHandling.writeBuffer)(input, buffer, forwardPosition, e, !0 !== checkval);
          }
          if (e.preventDefault(), checkval) return !1 !== valResult && (valResult.forwardPosition = forwardPosition), valResult;
        }
      },
      keyupEvent: function keyupEvent(e) {
        var inputmask = this.inputmask;
        !inputmask.isComposing || e.keyCode !== _keycode["default"].KEY_229 && e.keyCode !== _keycode["default"].ENTER || inputmask.$el.trigger("input");
      },
      pasteEvent: function pasteEvent(e) {
        var inputmask = this.inputmask,
          opts = inputmask.opts,
          input = this,
          inputValue = inputmask._valueGet(!0),
          caretPos = _positioning.caret.call(inputmask, this),
          tempValue;
        inputmask.isRTL && (tempValue = caretPos.end, caretPos.end = caretPos.begin, caretPos.begin = tempValue);
        var valueBeforeCaret = inputValue.substr(0, caretPos.begin),
          valueAfterCaret = inputValue.substr(caretPos.end, inputValue.length);
        if (valueBeforeCaret == (inputmask.isRTL ? _positioning.getBufferTemplate.call(inputmask).slice().reverse() : _positioning.getBufferTemplate.call(inputmask)).slice(0, caretPos.begin).join("") && (valueBeforeCaret = ""), valueAfterCaret == (inputmask.isRTL ? _positioning.getBufferTemplate.call(inputmask).slice().reverse() : _positioning.getBufferTemplate.call(inputmask)).slice(caretPos.end).join("") && (valueAfterCaret = ""), window.clipboardData && window.clipboardData.getData) inputValue = valueBeforeCaret + window.clipboardData.getData("Text") + valueAfterCaret;else {
          if (!e.clipboardData || !e.clipboardData.getData) return !0;
          inputValue = valueBeforeCaret + e.clipboardData.getData("text/plain") + valueAfterCaret;
        }
        var pasteValue = inputValue;
        if ("function" == typeof opts.onBeforePaste) {
          if (pasteValue = opts.onBeforePaste.call(inputmask, inputValue, opts), !1 === pasteValue) return e.preventDefault();
          pasteValue = pasteValue || inputValue;
        }
        return (0, _inputHandling.checkVal)(this, !0, !1, pasteValue.toString().split(""), e), e.preventDefault();
      },
      inputFallBackEvent: function inputFallBackEvent(e) {
        var inputmask = this.inputmask,
          opts = inputmask.opts,
          $ = inputmask.dependencyLib;
        function ieMobileHandler(input, inputValue, caretPos) {
          if (_environment.iemobile) {
            var inputChar = inputValue.replace(_positioning.getBuffer.call(inputmask).join(""), "");
            if (1 === inputChar.length) {
              var iv = inputValue.split("");
              iv.splice(caretPos.begin, 0, inputChar), inputValue = iv.join("");
            }
          }
          return inputValue;
        }
        function analyseChanges(inputValue, buffer, caretPos) {
          for (var frontPart = inputValue.substr(0, caretPos.begin).split(""), backPart = inputValue.substr(caretPos.begin).split(""), frontBufferPart = buffer.substr(0, caretPos.begin).split(""), backBufferPart = buffer.substr(caretPos.begin).split(""), fpl = frontPart.length >= frontBufferPart.length ? frontPart.length : frontBufferPart.length, bpl = backPart.length >= backBufferPart.length ? backPart.length : backBufferPart.length, bl, i, action = "", data = [], marker = "~", placeholder; frontPart.length < fpl;) frontPart.push("~");
          for (; frontBufferPart.length < fpl;) frontBufferPart.push("~");
          for (; backPart.length < bpl;) backPart.unshift("~");
          for (; backBufferPart.length < bpl;) backBufferPart.unshift("~");
          var newBuffer = frontPart.concat(backPart),
            oldBuffer = frontBufferPart.concat(backBufferPart);
          for (i = 0, bl = newBuffer.length; i < bl; i++) switch (placeholder = _validationTests.getPlaceholder.call(inputmask, _positioning.translatePosition.call(inputmask, i)), action) {
            case "insertText":
              oldBuffer[i - 1] === newBuffer[i] && caretPos.begin == newBuffer.length - 1 && data.push(newBuffer[i]), i = bl;
              break;
            case "insertReplacementText":
              "~" === newBuffer[i] ? caretPos.end++ : i = bl;
              break;
            case "deleteContentBackward":
              "~" === newBuffer[i] ? caretPos.end++ : i = bl;
              break;
            default:
              newBuffer[i] !== oldBuffer[i] && ("~" !== newBuffer[i + 1] && newBuffer[i + 1] !== placeholder && void 0 !== newBuffer[i + 1] || (oldBuffer[i] !== placeholder || "~" !== oldBuffer[i + 1]) && "~" !== oldBuffer[i] ? "~" === oldBuffer[i + 1] && oldBuffer[i] === newBuffer[i + 1] ? (action = "insertText", data.push(newBuffer[i]), caretPos.begin--, caretPos.end--) : newBuffer[i] !== placeholder && "~" !== newBuffer[i] && ("~" === newBuffer[i + 1] || oldBuffer[i] !== newBuffer[i] && oldBuffer[i + 1] === newBuffer[i + 1]) ? (action = "insertReplacementText", data.push(newBuffer[i]), caretPos.begin--) : "~" === newBuffer[i] ? (action = "deleteContentBackward", !_positioning.isMask.call(inputmask, _positioning.translatePosition.call(inputmask, i), !0) && oldBuffer[i] !== opts.radixPoint || caretPos.end++) : i = bl : (action = "insertText", data.push(newBuffer[i]), caretPos.begin--, caretPos.end--));
              break;
          }
          return {
            action: action,
            data: data,
            caret: caretPos
          };
        }
        var input = this,
          inputValue = input.inputmask._valueGet(!0),
          buffer = (inputmask.isRTL ? _positioning.getBuffer.call(inputmask).slice().reverse() : _positioning.getBuffer.call(inputmask)).join(""),
          caretPos = _positioning.caret.call(inputmask, input, void 0, void 0, !0);
        if (buffer !== inputValue) {
          inputValue = ieMobileHandler(input, inputValue, caretPos);
          var changes = analyseChanges(inputValue, buffer, caretPos);
          switch ((input.inputmask.shadowRoot || document).activeElement !== input && input.focus(), (0, _inputHandling.writeBuffer)(input, _positioning.getBuffer.call(inputmask)), _positioning.caret.call(inputmask, input, caretPos.begin, caretPos.end, !0), changes.action) {
            case "insertText":
            case "insertReplacementText":
              changes.data.forEach(function (entry, ndx) {
                var keypress = new $.Event("keypress");
                keypress.which = entry.charCodeAt(0), inputmask.ignorable = !1, EventHandlers.keypressEvent.call(input, keypress);
              }), setTimeout(function () {
                inputmask.$el.trigger("keyup");
              }, 0);
              break;
            case "deleteContentBackward":
              var keydown = new $.Event("keydown");
              keydown.keyCode = _keycode["default"].BACKSPACE, EventHandlers.keydownEvent.call(input, keydown);
              break;
            default:
              (0, _inputHandling.applyInputValue)(input, inputValue);
              break;
          }
          e.preventDefault();
        }
      },
      compositionendEvent: function compositionendEvent(e) {
        var inputmask = this.inputmask;
        inputmask.isComposing = !1, inputmask.$el.trigger("input");
      },
      setValueEvent: function setValueEvent(e, argument_1, argument_2) {
        var inputmask = this.inputmask,
          input = this,
          value = e && e.detail ? e.detail[0] : argument_1;
        void 0 === value && (value = this.inputmask._valueGet(!0)), (0, _inputHandling.applyInputValue)(this, value), (e.detail && void 0 !== e.detail[1] || void 0 !== argument_2) && _positioning.caret.call(inputmask, this, e.detail ? e.detail[1] : argument_2);
      },
      focusEvent: function focusEvent(e) {
        var inputmask = this.inputmask,
          opts = inputmask.opts,
          input = this,
          nptValue = this.inputmask._valueGet();
        opts.showMaskOnFocus && nptValue !== _positioning.getBuffer.call(inputmask).join("") && (0, _inputHandling.writeBuffer)(this, _positioning.getBuffer.call(inputmask), _positioning.seekNext.call(inputmask, _positioning.getLastValidPosition.call(inputmask))), !0 !== opts.positionCaretOnTab || !1 !== inputmask.mouseEnter || _validation.isComplete.call(inputmask, _positioning.getBuffer.call(inputmask)) && -1 !== _positioning.getLastValidPosition.call(inputmask) || EventHandlers.clickEvent.apply(this, [e, !0]), inputmask.undoValue = _positioning.getBuffer.call(inputmask).join("");
      },
      invalidEvent: function invalidEvent(e) {
        this.inputmask.validationEvent = !0;
      },
      mouseleaveEvent: function mouseleaveEvent() {
        var inputmask = this.inputmask,
          opts = inputmask.opts,
          input = this;
        inputmask.mouseEnter = !1, opts.clearMaskOnLostFocus && (this.inputmask.shadowRoot || document).activeElement !== this && (0, _inputHandling.HandleNativePlaceholder)(this, inputmask.originalPlaceholder);
      },
      clickEvent: function clickEvent(e, tabbed) {
        var inputmask = this.inputmask,
          input = this;
        if ((this.inputmask.shadowRoot || document).activeElement === this) {
          var newCaretPosition = _positioning.determineNewCaretPosition.call(inputmask, _positioning.caret.call(inputmask, this), tabbed);
          void 0 !== newCaretPosition && _positioning.caret.call(inputmask, this, newCaretPosition);
        }
      },
      cutEvent: function cutEvent(e) {
        var inputmask = this.inputmask,
          maskset = inputmask.maskset,
          input = this,
          pos = _positioning.caret.call(inputmask, this),
          clipboardData = window.clipboardData || e.clipboardData,
          clipData = inputmask.isRTL ? _positioning.getBuffer.call(inputmask).slice(pos.end, pos.begin) : _positioning.getBuffer.call(inputmask).slice(pos.begin, pos.end);
        clipboardData.setData("text", inputmask.isRTL ? clipData.reverse().join("") : clipData.join("")), document.execCommand && document.execCommand("copy"), _validation.handleRemove.call(inputmask, this, _keycode["default"].DELETE, pos), (0, _inputHandling.writeBuffer)(this, _positioning.getBuffer.call(inputmask), maskset.p, e, inputmask.undoValue !== _positioning.getBuffer.call(inputmask).join(""));
      },
      blurEvent: function blurEvent(e) {
        var inputmask = this.inputmask,
          opts = inputmask.opts,
          $ = inputmask.dependencyLib,
          $input = $(this),
          input = this;
        if (this.inputmask) {
          (0, _inputHandling.HandleNativePlaceholder)(this, inputmask.originalPlaceholder);
          var nptValue = this.inputmask._valueGet(),
            buffer = _positioning.getBuffer.call(inputmask).slice();
          "" !== nptValue && (opts.clearMaskOnLostFocus && (-1 === _positioning.getLastValidPosition.call(inputmask) && nptValue === _positioning.getBufferTemplate.call(inputmask).join("") ? buffer = [] : _inputHandling.clearOptionalTail.call(inputmask, buffer)), !1 === _validation.isComplete.call(inputmask, buffer) && (setTimeout(function () {
            $input.trigger("incomplete");
          }, 0), opts.clearIncomplete && (_positioning.resetMaskSet.call(inputmask), buffer = opts.clearMaskOnLostFocus ? [] : _positioning.getBufferTemplate.call(inputmask).slice())), (0, _inputHandling.writeBuffer)(this, buffer, void 0, e)), inputmask.undoValue !== _positioning.getBuffer.call(inputmask).join("") && (inputmask.undoValue = _positioning.getBuffer.call(inputmask).join(""), $input.trigger("change"));
        }
      },
      mouseenterEvent: function mouseenterEvent() {
        var inputmask = this.inputmask,
          opts = inputmask.opts,
          input = this;
        inputmask.mouseEnter = !0, (this.inputmask.shadowRoot || document).activeElement !== this && (null == inputmask.originalPlaceholder && this.placeholder !== inputmask.originalPlaceholder && (inputmask.originalPlaceholder = this.placeholder), opts.showMaskOnHover && (0, _inputHandling.HandleNativePlaceholder)(this, (inputmask.isRTL ? _positioning.getBufferTemplate.call(inputmask).slice().reverse() : _positioning.getBufferTemplate.call(inputmask)).join("")));
      },
      submitEvent: function submitEvent() {
        var inputmask = this.inputmask,
          opts = inputmask.opts;
        inputmask.undoValue !== _positioning.getBuffer.call(inputmask).join("") && inputmask.$el.trigger("change"), opts.clearMaskOnLostFocus && -1 === _positioning.getLastValidPosition.call(inputmask) && inputmask._valueGet && inputmask._valueGet() === _positioning.getBufferTemplate.call(inputmask).join("") && inputmask._valueSet(""), opts.clearIncomplete && !1 === _validation.isComplete.call(inputmask, _positioning.getBuffer.call(inputmask)) && inputmask._valueSet(""), opts.removeMaskOnSubmit && (inputmask._valueSet(inputmask.unmaskedvalue(), !0), setTimeout(function () {
          (0, _inputHandling.writeBuffer)(inputmask.el, _positioning.getBuffer.call(inputmask));
        }, 0));
      },
      resetEvent: function resetEvent() {
        var inputmask = this.inputmask;
        inputmask.refreshValue = !0, setTimeout(function () {
          (0, _inputHandling.applyInputValue)(inputmask.el, inputmask._valueGet(!0));
        }, 0);
      }
    };
    exports.EventHandlers = EventHandlers;
  }, function (module, exports, __webpack_require__) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: !0
    }), exports.iphone = exports.iemobile = exports.mobile = exports.ie = exports.ua = void 0;
    var ua = window.navigator && window.navigator.userAgent || "",
      ie = 0 < ua.indexOf("MSIE ") || 0 < ua.indexOf("Trident/"),
      mobile = ("ontouchstart" in window),
      iemobile = /iemobile/i.test(ua),
      iphone = /iphone/i.test(ua) && !iemobile;
    exports.iphone = iphone, exports.iemobile = iemobile, exports.mobile = mobile, exports.ie = ie, exports.ua = ua;
  }, function (module, exports, __webpack_require__) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: !0
    }), exports["default"] = void 0;
    var _extend = _interopRequireDefault(__webpack_require__(12)),
      _window = _interopRequireDefault(__webpack_require__(6)),
      _data = _interopRequireDefault(__webpack_require__(18)),
      _events = __webpack_require__(19);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    var document = _window["default"].document;
    function DependencyLib(elem) {
      return elem instanceof DependencyLib ? elem : this instanceof DependencyLib ? void (null != elem && elem !== _window["default"] && (this[0] = elem.nodeName ? elem : void 0 !== elem[0] && elem[0].nodeName ? elem[0] : document.querySelector(elem), void 0 !== this[0] && null !== this[0] && (this[0].eventRegistry = this[0].eventRegistry || {}))) : new DependencyLib(elem);
    }
    DependencyLib.prototype = {
      on: _events.on,
      off: _events.off,
      trigger: _events.trigger
    }, DependencyLib.extend = _extend["default"], DependencyLib.data = _data["default"], DependencyLib.Event = _events.Event;
    var _default = DependencyLib;
    exports["default"] = _default;
  }, function (module, exports, __webpack_require__) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: !0
    }), exports.mask = mask;
    var _keycode = _interopRequireDefault(__webpack_require__(0)),
      _positioning = __webpack_require__(1),
      _inputHandling = __webpack_require__(5),
      _eventruler = __webpack_require__(11),
      _environment = __webpack_require__(8),
      _validation = __webpack_require__(4),
      _eventhandlers = __webpack_require__(7);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    function mask() {
      var inputmask = this,
        opts = this.opts,
        el = this.el,
        $ = this.dependencyLib;
      function isElementTypeSupported(input, opts) {
        function patchValueProperty(npt) {
          var valueGet, valueSet;
          function patchValhook(type) {
            if ($.valHooks && (void 0 === $.valHooks[type] || !0 !== $.valHooks[type].inputmaskpatch)) {
              var valhookGet = $.valHooks[type] && $.valHooks[type].get ? $.valHooks[type].get : function (elem) {
                  return elem.value;
                },
                valhookSet = $.valHooks[type] && $.valHooks[type].set ? $.valHooks[type].set : function (elem, value) {
                  return elem.value = value, elem;
                };
              $.valHooks[type] = {
                get: function get(elem) {
                  if (elem.inputmask) {
                    if (elem.inputmask.opts.autoUnmask) return elem.inputmask.unmaskedvalue();
                    var result = valhookGet(elem);
                    return -1 !== _positioning.getLastValidPosition.call(inputmask, void 0, void 0, elem.inputmask.maskset.validPositions) || !0 !== opts.nullable ? result : "";
                  }
                  return valhookGet(elem);
                },
                set: function set(elem, value) {
                  var result = valhookSet(elem, value);
                  return elem.inputmask && (0, _inputHandling.applyInputValue)(elem, value), result;
                },
                inputmaskpatch: !0
              };
            }
          }
          function getter() {
            return this.inputmask ? this.inputmask.opts.autoUnmask ? this.inputmask.unmaskedvalue() : -1 !== _positioning.getLastValidPosition.call(inputmask) || !0 !== opts.nullable ? (this.inputmask.shadowRoot || document.activeElement) === this && opts.clearMaskOnLostFocus ? (inputmask.isRTL ? _inputHandling.clearOptionalTail.call(inputmask, _positioning.getBuffer.call(inputmask).slice()).reverse() : _inputHandling.clearOptionalTail.call(inputmask, _positioning.getBuffer.call(inputmask).slice())).join("") : valueGet.call(this) : "" : valueGet.call(this);
          }
          function setter(value) {
            valueSet.call(this, value), this.inputmask && (0, _inputHandling.applyInputValue)(this, value);
          }
          function installNativeValueSetFallback(npt) {
            _eventruler.EventRuler.on(npt, "mouseenter", function () {
              var input = this,
                value = this.inputmask._valueGet(!0);
              value !== (inputmask.isRTL ? _positioning.getBuffer.call(inputmask).reverse() : _positioning.getBuffer.call(inputmask)).join("") && (0, _inputHandling.applyInputValue)(this, value);
            });
          }
          if (!npt.inputmask.__valueGet) {
            if (!0 !== opts.noValuePatching) {
              if (Object.getOwnPropertyDescriptor) {
                var valueProperty = Object.getPrototypeOf ? Object.getOwnPropertyDescriptor(Object.getPrototypeOf(npt), "value") : void 0;
                valueProperty && valueProperty.get && valueProperty.set ? (valueGet = valueProperty.get, valueSet = valueProperty.set, Object.defineProperty(npt, "value", {
                  get: getter,
                  set: setter,
                  configurable: !0
                })) : "input" !== npt.tagName.toLowerCase() && (valueGet = function valueGet() {
                  return this.textContent;
                }, valueSet = function valueSet(value) {
                  this.textContent = value;
                }, Object.defineProperty(npt, "value", {
                  get: getter,
                  set: setter,
                  configurable: !0
                }));
              } else document.__lookupGetter__ && npt.__lookupGetter__("value") && (valueGet = npt.__lookupGetter__("value"), valueSet = npt.__lookupSetter__("value"), npt.__defineGetter__("value", getter), npt.__defineSetter__("value", setter));
              npt.inputmask.__valueGet = valueGet, npt.inputmask.__valueSet = valueSet;
            }
            npt.inputmask._valueGet = function (overruleRTL) {
              return inputmask.isRTL && !0 !== overruleRTL ? valueGet.call(this.el).split("").reverse().join("") : valueGet.call(this.el);
            }, npt.inputmask._valueSet = function (value, overruleRTL) {
              valueSet.call(this.el, null == value ? "" : !0 !== overruleRTL && inputmask.isRTL ? value.split("").reverse().join("") : value);
            }, void 0 === valueGet && (valueGet = function valueGet() {
              return this.value;
            }, valueSet = function valueSet(value) {
              this.value = value;
            }, patchValhook(npt.type), installNativeValueSetFallback(npt));
          }
        }
        "textarea" !== input.tagName.toLowerCase() && opts.ignorables.push(_keycode["default"].ENTER);
        var elementType = input.getAttribute("type"),
          isSupported = "input" === input.tagName.toLowerCase() && opts.supportsInputType.includes(elementType) || input.isContentEditable || "textarea" === input.tagName.toLowerCase();
        if (!isSupported) if ("input" === input.tagName.toLowerCase()) {
          var el = document.createElement("input");
          el.setAttribute("type", elementType), isSupported = "text" === el.type, el = null;
        } else isSupported = "partial";
        return !1 !== isSupported ? patchValueProperty(input) : input.inputmask = void 0, isSupported;
      }
      _eventruler.EventRuler.off(el);
      var isSupported = isElementTypeSupported(el, opts);
      if (!1 !== isSupported) {
        inputmask.originalPlaceholder = el.placeholder, inputmask.maxLength = void 0 !== el ? el.maxLength : void 0, -1 === inputmask.maxLength && (inputmask.maxLength = void 0), "inputMode" in el && null === el.getAttribute("inputmode") && (el.inputMode = opts.inputmode, el.setAttribute("inputmode", opts.inputmode)), !0 === isSupported && (opts.showMaskOnFocus = opts.showMaskOnFocus && -1 === ["cc-number", "cc-exp"].indexOf(el.autocomplete), _environment.iphone && (opts.insertModeVisual = !1), _eventruler.EventRuler.on(el, "submit", _eventhandlers.EventHandlers.submitEvent), _eventruler.EventRuler.on(el, "reset", _eventhandlers.EventHandlers.resetEvent), _eventruler.EventRuler.on(el, "blur", _eventhandlers.EventHandlers.blurEvent), _eventruler.EventRuler.on(el, "focus", _eventhandlers.EventHandlers.focusEvent), _eventruler.EventRuler.on(el, "invalid", _eventhandlers.EventHandlers.invalidEvent), _eventruler.EventRuler.on(el, "click", _eventhandlers.EventHandlers.clickEvent), _eventruler.EventRuler.on(el, "mouseleave", _eventhandlers.EventHandlers.mouseleaveEvent), _eventruler.EventRuler.on(el, "mouseenter", _eventhandlers.EventHandlers.mouseenterEvent), _eventruler.EventRuler.on(el, "paste", _eventhandlers.EventHandlers.pasteEvent), _eventruler.EventRuler.on(el, "cut", _eventhandlers.EventHandlers.cutEvent), _eventruler.EventRuler.on(el, "complete", opts.oncomplete), _eventruler.EventRuler.on(el, "incomplete", opts.onincomplete), _eventruler.EventRuler.on(el, "cleared", opts.oncleared), !0 !== opts.inputEventOnly && (_eventruler.EventRuler.on(el, "keydown", _eventhandlers.EventHandlers.keydownEvent), _eventruler.EventRuler.on(el, "keypress", _eventhandlers.EventHandlers.keypressEvent), _eventruler.EventRuler.on(el, "keyup", _eventhandlers.EventHandlers.keyupEvent)), (_environment.mobile || opts.inputEventOnly) && el.removeAttribute("maxLength"), _eventruler.EventRuler.on(el, "input", _eventhandlers.EventHandlers.inputFallBackEvent), _eventruler.EventRuler.on(el, "compositionend", _eventhandlers.EventHandlers.compositionendEvent)), _eventruler.EventRuler.on(el, "setvalue", _eventhandlers.EventHandlers.setValueEvent), inputmask.undoValue = _positioning.getBufferTemplate.call(inputmask).join("");
        var activeElement = (el.inputmask.shadowRoot || document).activeElement;
        if ("" !== el.inputmask._valueGet(!0) || !1 === opts.clearMaskOnLostFocus || activeElement === el) {
          (0, _inputHandling.applyInputValue)(el, el.inputmask._valueGet(!0), opts);
          var buffer = _positioning.getBuffer.call(inputmask).slice();
          !1 === _validation.isComplete.call(inputmask, buffer) && opts.clearIncomplete && _positioning.resetMaskSet.call(inputmask), opts.clearMaskOnLostFocus && activeElement !== el && (-1 === _positioning.getLastValidPosition.call(inputmask) ? buffer = [] : _inputHandling.clearOptionalTail.call(inputmask, buffer)), (!1 === opts.clearMaskOnLostFocus || opts.showMaskOnFocus && activeElement === el || "" !== el.inputmask._valueGet(!0)) && (0, _inputHandling.writeBuffer)(el, buffer), activeElement === el && _positioning.caret.call(inputmask, el, _positioning.seekNext.call(inputmask, _positioning.getLastValidPosition.call(inputmask)));
        }
      }
    }
  }, function (module, exports, __webpack_require__) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: !0
    }), exports.EventRuler = void 0;
    var _inputmask = _interopRequireDefault(__webpack_require__(2)),
      _keycode = _interopRequireDefault(__webpack_require__(0)),
      _positioning = __webpack_require__(1),
      _inputHandling = __webpack_require__(5);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    var EventRuler = {
      on: function on(input, eventName, eventHandler) {
        var $ = input.inputmask.dependencyLib,
          ev = function ev(e) {
            e.originalEvent && (e = e.originalEvent || e, arguments[0] = e);
            var that = this,
              args,
              inputmask = that.inputmask,
              opts = inputmask ? inputmask.opts : void 0;
            if (void 0 === inputmask && "FORM" !== this.nodeName) {
              var imOpts = $.data(that, "_inputmask_opts");
              $(that).off(), imOpts && new _inputmask["default"](imOpts).mask(that);
            } else {
              if (["submit", "reset", "setvalue"].includes(e.type) || "FORM" === this.nodeName || !(that.disabled || that.readOnly && !("keydown" === e.type && e.ctrlKey && 67 === e.keyCode || !1 === opts.tabThrough && e.keyCode === _keycode["default"].TAB))) {
                switch (e.type) {
                  case "input":
                    if (!0 === inputmask.skipInputEvent || e.inputType && "insertCompositionText" === e.inputType) return inputmask.skipInputEvent = !1, e.preventDefault();
                    break;
                  case "keydown":
                    inputmask.skipKeyPressEvent = !1, inputmask.skipInputEvent = inputmask.isComposing = e.keyCode === _keycode["default"].KEY_229;
                    break;
                  case "keyup":
                  case "compositionend":
                    inputmask.isComposing && (inputmask.skipInputEvent = !1);
                    break;
                  case "keypress":
                    if (!0 === inputmask.skipKeyPressEvent) return e.preventDefault();
                    inputmask.skipKeyPressEvent = !0;
                    break;
                  case "click":
                  case "focus":
                    return inputmask.validationEvent ? (inputmask.validationEvent = !1, input.blur(), (0, _inputHandling.HandleNativePlaceholder)(input, (inputmask.isRTL ? _positioning.getBufferTemplate.call(inputmask).slice().reverse() : _positioning.getBufferTemplate.call(inputmask)).join("")), setTimeout(function () {
                      input.focus();
                    }, 3e3)) : (args = arguments, setTimeout(function () {
                      input.inputmask && eventHandler.apply(that, args);
                    }, 0)), !1;
                }
                var returnVal = eventHandler.apply(that, arguments);
                return !1 === returnVal && (e.preventDefault(), e.stopPropagation()), returnVal;
              }
              e.preventDefault();
            }
          };
        input.inputmask.events[eventName] = input.inputmask.events[eventName] || [], input.inputmask.events[eventName].push(ev), ["submit", "reset"].includes(eventName) ? null !== input.form && $(input.form).on(eventName, ev.bind(input)) : $(input).on(eventName, ev);
      },
      off: function off(input, event) {
        if (input.inputmask && input.inputmask.events) {
          var $ = input.inputmask.dependencyLib,
            events = input.inputmask.events;
          for (var eventName in event && (events = [], events[event] = input.inputmask.events[event]), events) {
            for (var evArr = events[eventName]; 0 < evArr.length;) {
              var ev = evArr.pop();
              ["submit", "reset"].includes(eventName) ? null !== input.form && $(input.form).off(eventName, ev) : $(input).off(eventName, ev);
            }
            delete input.inputmask.events[eventName];
          }
        }
      }
    };
    exports.EventRuler = EventRuler;
  }, function (module, exports, __webpack_require__) {
    "use strict";

    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == _typeof2(Symbol.iterator) ? function _typeof(obj) {
        return _typeof2(obj);
      } : function _typeof(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
      }, _typeof(obj);
    }
    function extend() {
      var options,
        name,
        src,
        copy,
        copyIsArray,
        clone,
        target = arguments[0] || {},
        i = 1,
        length = arguments.length,
        deep = !1;
      for ("boolean" == typeof target && (deep = target, target = arguments[i] || {}, i++), "object" !== _typeof(target) && "function" != typeof target && (target = {}); i < length; i++) if (null != (options = arguments[i])) for (name in options) src = target[name], copy = options[name], target !== copy && (deep && copy && ("[object Object]" === Object.prototype.toString.call(copy) || (copyIsArray = Array.isArray(copy))) ? (clone = copyIsArray ? (copyIsArray = !1, src && Array.isArray(src) ? src : []) : src && "[object Object]" === Object.prototype.toString.call(src) ? src : {}, target[name] = extend(deep, clone, copy)) : void 0 !== copy && (target[name] = copy));
      return target;
    }
    Object.defineProperty(exports, "__esModule", {
      value: !0
    }), exports["default"] = extend;
  }, function (module, exports, __webpack_require__) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: !0
    }), exports["default"] = _default;
    var escapeRegexRegex = new RegExp("(\\" + ["/", ".", "*", "+", "?", "|", "(", ")", "[", "]", "{", "}", "\\", "$", "^"].join("|\\") + ")", "gim");
    function _default(str) {
      return str.replace(escapeRegexRegex, "\\$1");
    }
  }, function (module, exports, __webpack_require__) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: !0
    }), exports["default"] = void 0, __webpack_require__(15), __webpack_require__(23), __webpack_require__(24), __webpack_require__(25);
    var _inputmask2 = _interopRequireDefault(__webpack_require__(2));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    var _default = _inputmask2["default"];
    exports["default"] = _default;
  }, function (module, exports, __webpack_require__) {
    "use strict";

    var _inputmask = _interopRequireDefault(__webpack_require__(2));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    _inputmask["default"].extendDefinitions({
      A: {
        validator: "[A-Za-z\u0410-\u044F\u0401\u0451\xC0-\xFF\xB5]",
        casing: "upper"
      },
      "&": {
        validator: "[0-9A-Za-z\u0410-\u044F\u0401\u0451\xC0-\xFF\xB5]",
        casing: "upper"
      },
      "#": {
        validator: "[0-9A-Fa-f]",
        casing: "upper"
      }
    });
    var ipValidatorRegex = new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]");
    function ipValidator(chrs, maskset, pos, strict, opts) {
      return chrs = -1 < pos - 1 && "." !== maskset.buffer[pos - 1] ? (chrs = maskset.buffer[pos - 1] + chrs, -1 < pos - 2 && "." !== maskset.buffer[pos - 2] ? maskset.buffer[pos - 2] + chrs : "0" + chrs) : "00" + chrs, ipValidatorRegex.test(chrs);
    }
    _inputmask["default"].extendAliases({
      cssunit: {
        regex: "[+-]?[0-9]+\\.?([0-9]+)?(px|em|rem|ex|%|in|cm|mm|pt|pc)"
      },
      url: {
        regex: "(https?|ftp)://.*",
        autoUnmask: !1,
        keepStatic: !1,
        tabThrough: !0
      },
      ip: {
        mask: "i[i[i]].j[j[j]].k[k[k]].l[l[l]]",
        definitions: {
          i: {
            validator: ipValidator
          },
          j: {
            validator: ipValidator
          },
          k: {
            validator: ipValidator
          },
          l: {
            validator: ipValidator
          }
        },
        onUnMask: function onUnMask(maskedValue, unmaskedValue, opts) {
          return maskedValue;
        },
        inputmode: "numeric"
      },
      email: {
        mask: "*{1,64}[.*{1,64}][.*{1,64}][.*{1,63}]@-{1,63}.-{1,63}[.-{1,63}][.-{1,63}]",
        greedy: !1,
        casing: "lower",
        onBeforePaste: function onBeforePaste(pastedValue, opts) {
          return pastedValue = pastedValue.toLowerCase(), pastedValue.replace("mailto:", "");
        },
        definitions: {
          "*": {
            validator: "[0-9\uFF11-\uFF19A-Za-z\u0410-\u044F\u0401\u0451\xC0-\xFF\xB5!#$%&'*+/=?^_`{|}~-]"
          },
          "-": {
            validator: "[0-9A-Za-z-]"
          }
        },
        onUnMask: function onUnMask(maskedValue, unmaskedValue, opts) {
          return maskedValue;
        },
        inputmode: "email"
      },
      mac: {
        mask: "##:##:##:##:##:##"
      },
      vin: {
        mask: "V{13}9{4}",
        definitions: {
          V: {
            validator: "[A-HJ-NPR-Za-hj-npr-z\\d]",
            casing: "upper"
          }
        },
        clearIncomplete: !0,
        autoUnmask: !0
      },
      ssn: {
        mask: "999-99-9999",
        postValidation: function postValidation(buffer, pos, c, currentResult, opts, maskset, strict) {
          return /^(?!219-09-9999|078-05-1120)(?!666|000|9.{2}).{3}-(?!00).{2}-(?!0{4}).{4}$/.test(buffer.join(""));
        }
      }
    });
  }, function (module, exports, __webpack_require__) {
    "use strict";

    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == _typeof2(Symbol.iterator) ? function _typeof(obj) {
        return _typeof2(obj);
      } : function _typeof(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
      }, _typeof(obj);
    }
    "function" != typeof Object.getPrototypeOf && (Object.getPrototypeOf = "object" === _typeof("test".__proto__) ? function (object) {
      return object.__proto__;
    } : function (object) {
      return object.constructor.prototype;
    });
  }, function (module, exports, __webpack_require__) {
    "use strict";

    Array.prototype.includes || Object.defineProperty(Array.prototype, "includes", {
      value: function value(searchElement, fromIndex) {
        if (null == this) throw new TypeError('"this" is null or not defined');
        var o = Object(this),
          len = o.length >>> 0;
        if (0 == len) return !1;
        for (var n = 0 | fromIndex, k = Math.max(0 <= n ? n : len - Math.abs(n), 0); k < len;) {
          if (o[k] === searchElement) return !0;
          k++;
        }
        return !1;
      }
    });
  }, function (module, exports, __webpack_require__) {
    "use strict";

    function _default(owner, key, value) {
      if (void 0 === value) return owner.__data ? owner.__data[key] : null;
      owner.__data = owner.__data || {}, owner.__data[key] = value;
    }
    Object.defineProperty(exports, "__esModule", {
      value: !0
    }), exports["default"] = _default;
  }, function (module, exports, __webpack_require__) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: !0
    }), exports.on = on, exports.off = off, exports.trigger = trigger, exports.Event = void 0;
    var _extend = _interopRequireDefault(__webpack_require__(12)),
      _window = _interopRequireDefault(__webpack_require__(6)),
      _inputmask = _interopRequireDefault(__webpack_require__(9)),
      Event;
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    function isValidElement(elem) {
      return elem instanceof Element;
    }
    function on(events, handler) {
      function addEvent(ev, namespace) {
        elem.addEventListener ? elem.addEventListener(ev, handler, !1) : elem.attachEvent && elem.attachEvent("on" + ev, handler), eventRegistry[ev] = eventRegistry[ev] || {}, eventRegistry[ev][namespace] = eventRegistry[ev][namespace] || [], eventRegistry[ev][namespace].push(handler);
      }
      if (isValidElement(this[0])) for (var eventRegistry = this[0].eventRegistry, elem = this[0], _events = events.split(" "), endx = 0; endx < _events.length; endx++) {
        var nsEvent = _events[endx].split("."),
          ev = nsEvent[0],
          namespace = nsEvent[1] || "global";
        addEvent(ev, namespace);
      }
      return this;
    }
    function off(events, handler) {
      var eventRegistry, elem;
      function removeEvent(ev, namespace, handler) {
        if (ev in eventRegistry == !0) if (elem.removeEventListener ? elem.removeEventListener(ev, handler, !1) : elem.detachEvent && elem.detachEvent("on" + ev, handler), "global" === namespace) for (var nmsp in eventRegistry[ev]) eventRegistry[ev][nmsp].splice(eventRegistry[ev][nmsp].indexOf(handler), 1);else eventRegistry[ev][namespace].splice(eventRegistry[ev][namespace].indexOf(handler), 1);
      }
      function resolveNamespace(ev, namespace) {
        var evts = [],
          hndx,
          hndL;
        if (0 < ev.length) {
          if (void 0 === handler) for (hndx = 0, hndL = eventRegistry[ev][namespace].length; hndx < hndL; hndx++) evts.push({
            ev: ev,
            namespace: namespace && 0 < namespace.length ? namespace : "global",
            handler: eventRegistry[ev][namespace][hndx]
          });else evts.push({
            ev: ev,
            namespace: namespace && 0 < namespace.length ? namespace : "global",
            handler: handler
          });
        } else if (0 < namespace.length) for (var evNdx in eventRegistry) for (var nmsp in eventRegistry[evNdx]) if (nmsp === namespace) if (void 0 === handler) for (hndx = 0, hndL = eventRegistry[evNdx][nmsp].length; hndx < hndL; hndx++) evts.push({
          ev: evNdx,
          namespace: nmsp,
          handler: eventRegistry[evNdx][nmsp][hndx]
        });else evts.push({
          ev: evNdx,
          namespace: nmsp,
          handler: handler
        });
        return evts;
      }
      if (isValidElement(this[0])) {
        eventRegistry = this[0].eventRegistry, elem = this[0];
        for (var _events = events.split(" "), endx = 0; endx < _events.length; endx++) for (var nsEvent = _events[endx].split("."), offEvents = resolveNamespace(nsEvent[0], nsEvent[1]), i = 0, offEventsL = offEvents.length; i < offEventsL; i++) removeEvent(offEvents[i].ev, offEvents[i].namespace, offEvents[i].handler);
      }
      return this;
    }
    function trigger(events) {
      if (isValidElement(this[0])) for (var eventRegistry = this[0].eventRegistry, elem = this[0], _events = "string" == typeof events ? events.split(" ") : [events.type], endx = 0; endx < _events.length; endx++) {
        var nsEvent = _events[endx].split("."),
          ev = nsEvent[0],
          namespace = nsEvent[1] || "global";
        if (void 0 !== document && "global" === namespace) {
          var evnt,
            i,
            params = {
              bubbles: !0,
              cancelable: !0,
              detail: arguments[1]
            };
          if (document.createEvent) {
            try {
              evnt = new CustomEvent(ev, params);
            } catch (e) {
              evnt = document.createEvent("CustomEvent"), evnt.initCustomEvent(ev, params.bubbles, params.cancelable, params.detail);
            }
            events.type && (0, _extend["default"])(evnt, events), elem.dispatchEvent(evnt);
          } else evnt = document.createEventObject(), evnt.eventType = ev, evnt.detail = arguments[1], events.type && (0, _extend["default"])(evnt, events), elem.fireEvent("on" + evnt.eventType, evnt);
        } else if (void 0 !== eventRegistry[ev]) if (arguments[0] = arguments[0].type ? arguments[0] : _inputmask["default"].Event(arguments[0]), arguments[0].detail = arguments.slice(1), "global" === namespace) for (var nmsp in eventRegistry[ev]) for (i = 0; i < eventRegistry[ev][nmsp].length; i++) eventRegistry[ev][nmsp][i].apply(elem, arguments);else for (i = 0; i < eventRegistry[ev][namespace].length; i++) eventRegistry[ev][namespace][i].apply(elem, arguments);
      }
      return this;
    }
    exports.Event = Event, "function" == typeof _window["default"].CustomEvent ? exports.Event = Event = _window["default"].CustomEvent : (exports.Event = Event = function Event(event, params) {
      params = params || {
        bubbles: !1,
        cancelable: !1,
        detail: void 0
      };
      var evt = document.createEvent("CustomEvent");
      return evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail), evt;
    }, Event.prototype = _window["default"].Event.prototype);
  }, function (module, exports, __webpack_require__) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: !0
    }), exports.generateMaskSet = generateMaskSet, exports.analyseMask = analyseMask;
    var _inputmask = _interopRequireDefault(__webpack_require__(9));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    function generateMaskSet(opts, nocache) {
      var ms;
      function generateMask(mask, metadata, opts) {
        var regexMask = !1,
          masksetDefinition,
          maskdefKey;
        if (null !== mask && "" !== mask || (regexMask = null !== opts.regex, mask = regexMask ? (mask = opts.regex, mask.replace(/^(\^)(.*)(\$)$/, "$2")) : (regexMask = !0, ".*")), 1 === mask.length && !1 === opts.greedy && 0 !== opts.repeat && (opts.placeholder = ""), 0 < opts.repeat || "*" === opts.repeat || "+" === opts.repeat) {
          var repeatStart = "*" === opts.repeat ? 0 : "+" === opts.repeat ? 1 : opts.repeat;
          mask = opts.groupmarker[0] + mask + opts.groupmarker[1] + opts.quantifiermarker[0] + repeatStart + "," + opts.repeat + opts.quantifiermarker[1];
        }
        return maskdefKey = regexMask ? "regex_" + opts.regex : opts.numericInput ? mask.split("").reverse().join("") : mask, !1 !== opts.keepStatic && (maskdefKey = "ks_" + maskdefKey), void 0 === Inputmask.prototype.masksCache[maskdefKey] || !0 === nocache ? (masksetDefinition = {
          mask: mask,
          maskToken: Inputmask.prototype.analyseMask(mask, regexMask, opts),
          validPositions: {},
          _buffer: void 0,
          buffer: void 0,
          tests: {},
          excludes: {},
          metadata: metadata,
          maskLength: void 0,
          jitOffset: {}
        }, !0 !== nocache && (Inputmask.prototype.masksCache[maskdefKey] = masksetDefinition, masksetDefinition = _inputmask["default"].extend(!0, {}, Inputmask.prototype.masksCache[maskdefKey]))) : masksetDefinition = _inputmask["default"].extend(!0, {}, Inputmask.prototype.masksCache[maskdefKey]), masksetDefinition;
      }
      if ("function" == typeof opts.mask && (opts.mask = opts.mask(opts)), Array.isArray(opts.mask)) {
        if (1 < opts.mask.length) {
          null === opts.keepStatic && (opts.keepStatic = !0);
          var altMask = opts.groupmarker[0];
          return (opts.isRTL ? opts.mask.reverse() : opts.mask).forEach(function (msk) {
            1 < altMask.length && (altMask += opts.groupmarker[1] + opts.alternatormarker + opts.groupmarker[0]), void 0 !== msk.mask && "function" != typeof msk.mask ? altMask += msk.mask : altMask += msk;
          }), altMask += opts.groupmarker[1], generateMask(altMask, opts.mask, opts);
        }
        opts.mask = opts.mask.pop();
      }
      return null === opts.keepStatic && (opts.keepStatic = !1), ms = opts.mask && void 0 !== opts.mask.mask && "function" != typeof opts.mask.mask ? generateMask(opts.mask.mask, opts.mask, opts) : generateMask(opts.mask, opts.mask, opts), ms;
    }
    function analyseMask(mask, regexMask, opts) {
      var tokenizer = /(?:[?*+]|\{[0-9+*]+(?:,[0-9+*]*)?(?:\|[0-9+*]*)?\})|[^.?*+^${[]()|\\]+|./g,
        regexTokenizer = /\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,
        escaped = !1,
        currentToken = new MaskToken(),
        match,
        m,
        openenings = [],
        maskTokens = [],
        openingToken,
        currentOpeningToken,
        alternator,
        lastMatch,
        closeRegexGroup = !1;
      function MaskToken(isGroup, isOptional, isQuantifier, isAlternator) {
        this.matches = [], this.openGroup = isGroup || !1, this.alternatorGroup = !1, this.isGroup = isGroup || !1, this.isOptional = isOptional || !1, this.isQuantifier = isQuantifier || !1, this.isAlternator = isAlternator || !1, this.quantifier = {
          min: 1,
          max: 1
        };
      }
      function insertTestDefinition(mtoken, element, position) {
        position = void 0 !== position ? position : mtoken.matches.length;
        var prevMatch = mtoken.matches[position - 1];
        if (regexMask) 0 === element.indexOf("[") || escaped && /\\d|\\s|\\w]/i.test(element) || "." === element ? mtoken.matches.splice(position++, 0, {
          fn: new RegExp(element, opts.casing ? "i" : ""),
          "static": !1,
          optionality: !1,
          newBlockMarker: void 0 === prevMatch ? "master" : prevMatch.def !== element,
          casing: null,
          def: element,
          placeholder: void 0,
          nativeDef: element
        }) : (escaped && (element = element[element.length - 1]), element.split("").forEach(function (lmnt, ndx) {
          prevMatch = mtoken.matches[position - 1], mtoken.matches.splice(position++, 0, {
            fn: /[a-z]/i.test(opts.staticDefinitionSymbol || lmnt) ? new RegExp("[" + (opts.staticDefinitionSymbol || lmnt) + "]", opts.casing ? "i" : "") : null,
            "static": !0,
            optionality: !1,
            newBlockMarker: void 0 === prevMatch ? "master" : prevMatch.def !== lmnt && !0 !== prevMatch["static"],
            casing: null,
            def: opts.staticDefinitionSymbol || lmnt,
            placeholder: void 0 !== opts.staticDefinitionSymbol ? lmnt : void 0,
            nativeDef: (escaped ? "'" : "") + lmnt
          });
        })), escaped = !1;else {
          var maskdef = opts.definitions && opts.definitions[element] || opts.usePrototypeDefinitions && Inputmask.prototype.definitions[element];
          maskdef && !escaped ? mtoken.matches.splice(position++, 0, {
            fn: maskdef.validator ? "string" == typeof maskdef.validator ? new RegExp(maskdef.validator, opts.casing ? "i" : "") : new function () {
              this.test = maskdef.validator;
            }() : new RegExp("."),
            "static": maskdef["static"] || !1,
            optionality: !1,
            newBlockMarker: void 0 === prevMatch ? "master" : prevMatch.def !== (maskdef.definitionSymbol || element),
            casing: maskdef.casing,
            def: maskdef.definitionSymbol || element,
            placeholder: maskdef.placeholder,
            nativeDef: element,
            generated: maskdef.generated
          }) : (mtoken.matches.splice(position++, 0, {
            fn: /[a-z]/i.test(opts.staticDefinitionSymbol || element) ? new RegExp("[" + (opts.staticDefinitionSymbol || element) + "]", opts.casing ? "i" : "") : null,
            "static": !0,
            optionality: !1,
            newBlockMarker: void 0 === prevMatch ? "master" : prevMatch.def !== element && !0 !== prevMatch["static"],
            casing: null,
            def: opts.staticDefinitionSymbol || element,
            placeholder: void 0 !== opts.staticDefinitionSymbol ? element : void 0,
            nativeDef: (escaped ? "'" : "") + element
          }), escaped = !1);
        }
      }
      function verifyGroupMarker(maskToken) {
        maskToken && maskToken.matches && maskToken.matches.forEach(function (token, ndx) {
          var nextToken = maskToken.matches[ndx + 1];
          (void 0 === nextToken || void 0 === nextToken.matches || !1 === nextToken.isQuantifier) && token && token.isGroup && (token.isGroup = !1, regexMask || (insertTestDefinition(token, opts.groupmarker[0], 0), !0 !== token.openGroup && insertTestDefinition(token, opts.groupmarker[1]))), verifyGroupMarker(token);
        });
      }
      function defaultCase() {
        if (0 < openenings.length) {
          if (currentOpeningToken = openenings[openenings.length - 1], insertTestDefinition(currentOpeningToken, m), currentOpeningToken.isAlternator) {
            alternator = openenings.pop();
            for (var mndx = 0; mndx < alternator.matches.length; mndx++) alternator.matches[mndx].isGroup && (alternator.matches[mndx].isGroup = !1);
            0 < openenings.length ? (currentOpeningToken = openenings[openenings.length - 1], currentOpeningToken.matches.push(alternator)) : currentToken.matches.push(alternator);
          }
        } else insertTestDefinition(currentToken, m);
      }
      function reverseTokens(maskToken) {
        function reverseStatic(st) {
          return st === opts.optionalmarker[0] ? st = opts.optionalmarker[1] : st === opts.optionalmarker[1] ? st = opts.optionalmarker[0] : st === opts.groupmarker[0] ? st = opts.groupmarker[1] : st === opts.groupmarker[1] && (st = opts.groupmarker[0]), st;
        }
        for (var match in maskToken.matches = maskToken.matches.reverse(), maskToken.matches) if (Object.prototype.hasOwnProperty.call(maskToken.matches, match)) {
          var intMatch = parseInt(match);
          if (maskToken.matches[match].isQuantifier && maskToken.matches[intMatch + 1] && maskToken.matches[intMatch + 1].isGroup) {
            var qt = maskToken.matches[match];
            maskToken.matches.splice(match, 1), maskToken.matches.splice(intMatch + 1, 0, qt);
          }
          void 0 !== maskToken.matches[match].matches ? maskToken.matches[match] = reverseTokens(maskToken.matches[match]) : maskToken.matches[match] = reverseStatic(maskToken.matches[match]);
        }
        return maskToken;
      }
      function groupify(matches) {
        var groupToken = new MaskToken(!0);
        return groupToken.openGroup = !1, groupToken.matches = matches, groupToken;
      }
      function closeGroup() {
        if (openingToken = openenings.pop(), openingToken.openGroup = !1, void 0 !== openingToken) {
          if (0 < openenings.length) {
            if (currentOpeningToken = openenings[openenings.length - 1], currentOpeningToken.matches.push(openingToken), currentOpeningToken.isAlternator) {
              alternator = openenings.pop();
              for (var mndx = 0; mndx < alternator.matches.length; mndx++) alternator.matches[mndx].isGroup = !1, alternator.matches[mndx].alternatorGroup = !1;
              0 < openenings.length ? (currentOpeningToken = openenings[openenings.length - 1], currentOpeningToken.matches.push(alternator)) : currentToken.matches.push(alternator);
            }
          } else currentToken.matches.push(openingToken);
        } else defaultCase();
      }
      function groupQuantifier(matches) {
        var lastMatch = matches.pop();
        return lastMatch.isQuantifier && (lastMatch = groupify([matches.pop(), lastMatch])), lastMatch;
      }
      for (regexMask && (opts.optionalmarker[0] = void 0, opts.optionalmarker[1] = void 0); match = regexMask ? regexTokenizer.exec(mask) : tokenizer.exec(mask);) {
        if (m = match[0], regexMask) switch (m.charAt(0)) {
          case "?":
            m = "{0,1}";
            break;
          case "+":
          case "*":
            m = "{" + m + "}";
            break;
          case "|":
            if (0 === openenings.length) {
              var altRegexGroup = groupify(currentToken.matches);
              altRegexGroup.openGroup = !0, openenings.push(altRegexGroup), currentToken.matches = [], closeRegexGroup = !0;
            }
            break;
        }
        if (escaped) defaultCase();else switch (m.charAt(0)) {
          case "$":
          case "^":
            regexMask || defaultCase();
            break;
          case "(?=":
            break;
          case "(?!":
            break;
          case "(?<=":
            break;
          case "(?<!":
            break;
          case opts.escapeChar:
            escaped = !0, regexMask && defaultCase();
            break;
          case opts.optionalmarker[1]:
          case opts.groupmarker[1]:
            closeGroup();
            break;
          case opts.optionalmarker[0]:
            openenings.push(new MaskToken(!1, !0));
            break;
          case opts.groupmarker[0]:
            openenings.push(new MaskToken(!0));
            break;
          case opts.quantifiermarker[0]:
            var quantifier = new MaskToken(!1, !1, !0);
            m = m.replace(/[{}]/g, "");
            var mqj = m.split("|"),
              mq = mqj[0].split(","),
              mq0 = isNaN(mq[0]) ? mq[0] : parseInt(mq[0]),
              mq1 = 1 === mq.length ? mq0 : isNaN(mq[1]) ? mq[1] : parseInt(mq[1]);
            "*" !== mq0 && "+" !== mq0 || (mq0 = "*" === mq1 ? 0 : 1), quantifier.quantifier = {
              min: mq0,
              max: mq1,
              jit: mqj[1]
            };
            var matches = 0 < openenings.length ? openenings[openenings.length - 1].matches : currentToken.matches;
            if (match = matches.pop(), match.isAlternator) {
              matches.push(match), matches = match.matches;
              var groupToken = new MaskToken(!0),
                tmpMatch = matches.pop();
              matches.push(groupToken), matches = groupToken.matches, match = tmpMatch;
            }
            match.isGroup || (match = groupify([match])), matches.push(match), matches.push(quantifier);
            break;
          case opts.alternatormarker:
            if (0 < openenings.length) {
              currentOpeningToken = openenings[openenings.length - 1];
              var subToken = currentOpeningToken.matches[currentOpeningToken.matches.length - 1];
              lastMatch = currentOpeningToken.openGroup && (void 0 === subToken.matches || !1 === subToken.isGroup && !1 === subToken.isAlternator) ? openenings.pop() : groupQuantifier(currentOpeningToken.matches);
            } else lastMatch = groupQuantifier(currentToken.matches);
            if (lastMatch.isAlternator) openenings.push(lastMatch);else if (lastMatch.alternatorGroup ? (alternator = openenings.pop(), lastMatch.alternatorGroup = !1) : alternator = new MaskToken(!1, !1, !1, !0), alternator.matches.push(lastMatch), openenings.push(alternator), lastMatch.openGroup) {
              lastMatch.openGroup = !1;
              var alternatorGroup = new MaskToken(!0);
              alternatorGroup.alternatorGroup = !0, openenings.push(alternatorGroup);
            }
            break;
          default:
            defaultCase();
        }
      }
      for (closeRegexGroup && closeGroup(); 0 < openenings.length;) openingToken = openenings.pop(), currentToken.matches.push(openingToken);
      return 0 < currentToken.matches.length && (verifyGroupMarker(currentToken), maskTokens.push(currentToken)), (opts.numericInput || opts.isRTL) && reverseTokens(maskTokens[0]), maskTokens;
    }
  }, function (module, exports, __webpack_require__) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: !0
    }), exports["default"] = void 0;
    var _default = {
      9: {
        validator: "[0-9\uFF10-\uFF19]",
        definitionSymbol: "*"
      },
      a: {
        validator: "[A-Za-z\u0410-\u044F\u0401\u0451\xC0-\xFF\xB5]",
        definitionSymbol: "*"
      },
      "*": {
        validator: "[0-9\uFF10-\uFF19A-Za-z\u0410-\u044F\u0401\u0451\xC0-\xFF\xB5]"
      }
    };
    exports["default"] = _default;
  }, function (module, exports, __webpack_require__) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: !0
    }), exports["default"] = void 0;
    var _default = {
      _maxTestPos: 500,
      placeholder: "_",
      optionalmarker: ["[", "]"],
      quantifiermarker: ["{", "}"],
      groupmarker: ["(", ")"],
      alternatormarker: "|",
      escapeChar: "\\",
      mask: null,
      regex: null,
      oncomplete: function oncomplete() {},
      onincomplete: function onincomplete() {},
      oncleared: function oncleared() {},
      repeat: 0,
      greedy: !1,
      autoUnmask: !1,
      removeMaskOnSubmit: !1,
      clearMaskOnLostFocus: !0,
      insertMode: !0,
      insertModeVisual: !0,
      clearIncomplete: !1,
      alias: null,
      onKeyDown: function onKeyDown() {},
      onBeforeMask: null,
      onBeforePaste: function onBeforePaste(pastedValue, opts) {
        return "function" == typeof opts.onBeforeMask ? opts.onBeforeMask.call(this, pastedValue, opts) : pastedValue;
      },
      onBeforeWrite: null,
      onUnMask: null,
      showMaskOnFocus: !0,
      showMaskOnHover: !0,
      onKeyValidation: function onKeyValidation() {},
      skipOptionalPartCharacter: " ",
      numericInput: !1,
      rightAlign: !1,
      undoOnEscape: !0,
      radixPoint: "",
      _radixDance: !1,
      groupSeparator: "",
      keepStatic: null,
      positionCaretOnTab: !0,
      tabThrough: !1,
      supportsInputType: ["text", "tel", "url", "password", "search"],
      ignorables: [8, 9, 19, 27, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 93, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 0, 229],
      isComplete: null,
      preValidation: null,
      postValidation: null,
      staticDefinitionSymbol: void 0,
      jitMasking: !1,
      nullable: !0,
      inputEventOnly: !1,
      noValuePatching: !1,
      positionCaretOnClick: "lvp",
      casing: null,
      inputmode: "text",
      importDataAttributes: !0,
      shiftPositions: !0,
      usePrototypeDefinitions: !0
    };
    exports["default"] = _default;
  }, function (module, exports, __webpack_require__) {
    "use strict";

    var _inputmask = _interopRequireDefault(__webpack_require__(2)),
      _keycode = _interopRequireDefault(__webpack_require__(0)),
      _escapeRegex = _interopRequireDefault(__webpack_require__(13)),
      _positioning = __webpack_require__(1);
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == _typeof2(Symbol.iterator) ? function _typeof(obj) {
        return _typeof2(obj);
      } : function _typeof(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
      }, _typeof(obj);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    var $ = _inputmask["default"].dependencyLib,
      currentYear = new Date().getFullYear(),
      formatCode = {
        d: ["[1-9]|[12][0-9]|3[01]", Date.prototype.setDate, "day", Date.prototype.getDate],
        dd: ["0[1-9]|[12][0-9]|3[01]", Date.prototype.setDate, "day", function () {
          return pad(Date.prototype.getDate.call(this), 2);
        }],
        ddd: [""],
        dddd: [""],
        m: ["[1-9]|1[012]", Date.prototype.setMonth, "month", function () {
          return Date.prototype.getMonth.call(this) + 1;
        }],
        mm: ["0[1-9]|1[012]", Date.prototype.setMonth, "month", function () {
          return pad(Date.prototype.getMonth.call(this) + 1, 2);
        }],
        mmm: [""],
        mmmm: [""],
        yy: ["[0-9]{2}", Date.prototype.setFullYear, "year", function () {
          return pad(Date.prototype.getFullYear.call(this), 2);
        }],
        yyyy: ["[0-9]{4}", Date.prototype.setFullYear, "year", function () {
          return pad(Date.prototype.getFullYear.call(this), 4);
        }],
        h: ["[1-9]|1[0-2]", Date.prototype.setHours, "hours", Date.prototype.getHours],
        hh: ["0[1-9]|1[0-2]", Date.prototype.setHours, "hours", function () {
          return pad(Date.prototype.getHours.call(this), 2);
        }],
        hx: [function (x) {
          return "[0-9]{".concat(x, "}");
        }, Date.prototype.setHours, "hours", function (x) {
          return Date.prototype.getHours;
        }],
        H: ["1?[0-9]|2[0-3]", Date.prototype.setHours, "hours", Date.prototype.getHours],
        HH: ["0[0-9]|1[0-9]|2[0-3]", Date.prototype.setHours, "hours", function () {
          return pad(Date.prototype.getHours.call(this), 2);
        }],
        Hx: [function (x) {
          return "[0-9]{".concat(x, "}");
        }, Date.prototype.setHours, "hours", function (x) {
          return function () {
            return pad(Date.prototype.getHours.call(this), x);
          };
        }],
        M: ["[1-5]?[0-9]", Date.prototype.setMinutes, "minutes", Date.prototype.getMinutes],
        MM: ["0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]", Date.prototype.setMinutes, "minutes", function () {
          return pad(Date.prototype.getMinutes.call(this), 2);
        }],
        s: ["[1-5]?[0-9]", Date.prototype.setSeconds, "seconds", Date.prototype.getSeconds],
        ss: ["0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]", Date.prototype.setSeconds, "seconds", function () {
          return pad(Date.prototype.getSeconds.call(this), 2);
        }],
        l: ["[0-9]{3}", Date.prototype.setMilliseconds, "milliseconds", function () {
          return pad(Date.prototype.getMilliseconds.call(this), 3);
        }],
        L: ["[0-9]{2}", Date.prototype.setMilliseconds, "milliseconds", function () {
          return pad(Date.prototype.getMilliseconds.call(this), 2);
        }],
        t: ["[ap]"],
        tt: ["[ap]m"],
        T: ["[AP]"],
        TT: ["[AP]M"],
        Z: [""],
        o: [""],
        S: [""]
      },
      formatAlias = {
        isoDate: "yyyy-mm-dd",
        isoTime: "HH:MM:ss",
        isoDateTime: "yyyy-mm-dd'T'HH:MM:ss",
        isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
      };
    function formatcode(match) {
      var dynMatches = new RegExp("\\d+$").exec(match[0]);
      if (dynMatches && void 0 !== dynMatches[0]) {
        var fcode = formatCode[match[0][0] + "x"].slice("");
        return fcode[0] = fcode[0](dynMatches[0]), fcode[3] = fcode[3](dynMatches[0]), fcode;
      }
      if (formatCode[match[0]]) return formatCode[match[0]];
    }
    function getTokenizer(opts) {
      if (!opts.tokenizer) {
        var tokens = [],
          dyntokens = [];
        for (var ndx in formatCode) if (/\.*x$/.test(ndx)) {
          var dynToken = ndx[0] + "\\d+";
          -1 === dyntokens.indexOf(dynToken) && dyntokens.push(dynToken);
        } else -1 === tokens.indexOf(ndx[0]) && tokens.push(ndx[0]);
        opts.tokenizer = "(" + (0 < dyntokens.length ? dyntokens.join("|") + "|" : "") + tokens.join("+|") + ")+?|.", opts.tokenizer = new RegExp(opts.tokenizer, "g");
      }
      return opts.tokenizer;
    }
    function prefillYear(dateParts, currentResult, opts) {
      if (dateParts.year !== dateParts.rawyear) {
        var crrntyear = currentYear.toString(),
          enteredPart = dateParts.rawyear.replace(/[^0-9]/g, ""),
          currentYearPart = crrntyear.slice(0, enteredPart.length),
          currentYearNextPart = crrntyear.slice(enteredPart.length);
        if (2 === enteredPart.length && enteredPart === currentYearPart) {
          var entryCurrentYear = new Date(currentYear, dateParts.month - 1, dateParts.day);
          dateParts.day == entryCurrentYear.getDate() && (!opts.max || opts.max.date.getTime() >= entryCurrentYear.getTime()) && (dateParts.date.setFullYear(currentYear), dateParts.year = crrntyear, currentResult.insert = [{
            pos: currentResult.pos + 1,
            c: currentYearNextPart[0]
          }, {
            pos: currentResult.pos + 2,
            c: currentYearNextPart[1]
          }]);
        }
      }
      return currentResult;
    }
    function isValidDate(dateParts, currentResult, opts) {
      if (void 0 === dateParts.rawday || !isFinite(dateParts.rawday) && new Date(dateParts.date.getFullYear(), isFinite(dateParts.rawmonth) ? dateParts.month : dateParts.date.getMonth() + 1, 0).getDate() >= dateParts.day || "29" == dateParts.day && !isFinite(dateParts.rawyear) || new Date(dateParts.date.getFullYear(), isFinite(dateParts.rawmonth) ? dateParts.month : dateParts.date.getMonth() + 1, 0).getDate() >= dateParts.day) return currentResult;
      if ("29" == dateParts.day) {
        var tokenMatch = getTokenMatch(currentResult.pos, opts);
        if ("yyyy" === tokenMatch.targetMatch[0] && currentResult.pos - tokenMatch.targetMatchIndex == 2) return currentResult.remove = currentResult.pos + 1, currentResult;
      } else if ("02" == dateParts.month && "30" == dateParts.day) return dateParts.day = "03", dateParts.date.setDate(3), dateParts.date.setMonth(1), currentResult.insert = [{
        pos: currentResult.pos,
        c: "0"
      }, {
        pos: currentResult.pos + 1,
        c: currentResult.c
      }], currentResult.caret = _positioning.seekNext.call(this, currentResult.pos + 1), currentResult;
      return !1;
    }
    function isDateInRange(dateParts, result, opts, maskset, fromCheckval) {
      if (!result) return result;
      if (opts.min) {
        if (dateParts.rawyear) {
          var rawYear = dateParts.rawyear.replace(/[^0-9]/g, ""),
            minYear = opts.min.year.substr(0, rawYear.length),
            maxYear;
          if (rawYear < minYear) {
            var tokenMatch = getTokenMatch(result.pos, opts);
            if (rawYear = dateParts.rawyear.substr(0, result.pos - tokenMatch.targetMatchIndex + 1).replace(/[^0-9]/g, "0"), minYear = opts.min.year.substr(0, rawYear.length), minYear <= rawYear) return result.remove = tokenMatch.targetMatchIndex + rawYear.length, result;
            if (rawYear = "yyyy" === tokenMatch.targetMatch[0] ? dateParts.rawyear.substr(1, 1) : dateParts.rawyear.substr(0, 1), minYear = opts.min.year.substr(2, 1), maxYear = opts.max ? opts.max.year.substr(2, 1) : rawYear, 1 === rawYear.length && minYear <= rawYear && rawYear <= maxYear && !0 !== fromCheckval) return "yyyy" === tokenMatch.targetMatch[0] ? (result.insert = [{
              pos: result.pos + 1,
              c: rawYear,
              strict: !0
            }], result.caret = result.pos + 2, maskset.validPositions[result.pos].input = opts.min.year[1]) : (result.insert = [{
              pos: result.pos + 1,
              c: opts.min.year[1],
              strict: !0
            }, {
              pos: result.pos + 2,
              c: rawYear,
              strict: !0
            }], result.caret = result.pos + 3, maskset.validPositions[result.pos].input = opts.min.year[0]), result;
            result = !1;
          }
        }
        result && dateParts.year && dateParts.year === dateParts.rawyear && opts.min.date.getTime() == opts.min.date.getTime() && (result = opts.min.date.getTime() <= dateParts.date.getTime());
      }
      return result && opts.max && opts.max.date.getTime() == opts.max.date.getTime() && (result = opts.max.date.getTime() >= dateParts.date.getTime()), result;
    }
    function parse(format, dateObjValue, opts, raw) {
      var mask = "",
        match,
        fcode;
      for (getTokenizer(opts).lastIndex = 0; match = getTokenizer(opts).exec(format);) if (void 0 === dateObjValue) {
        if (fcode = formatcode(match)) mask += "(" + fcode[0] + ")";else switch (match[0]) {
          case "[":
            mask += "(";
            break;
          case "]":
            mask += ")?";
            break;
          default:
            mask += (0, _escapeRegex["default"])(match[0]);
        }
      } else if (fcode = formatcode(match)) {
        if (!0 !== raw && fcode[3]) {
          var getFn = fcode[3];
          mask += getFn.call(dateObjValue.date);
        } else fcode[2] ? mask += dateObjValue["raw" + fcode[2]] : mask += match[0];
      } else mask += match[0];
      return mask;
    }
    function pad(val, len) {
      for (val = String(val), len = len || 2; val.length < len;) val = "0" + val;
      return val;
    }
    function analyseMask(maskString, format, opts) {
      var dateObj = {
          date: new Date(1, 0, 1)
        },
        targetProp,
        mask = maskString,
        match,
        dateOperation;
      function setValue(dateObj, value, opts) {
        if (dateObj[targetProp] = value.replace(/[^0-9]/g, "0"), dateObj["raw" + targetProp] = value, void 0 !== dateOperation) {
          var datavalue = dateObj[targetProp];
          "day" === targetProp && 0 === parseInt(datavalue) && (datavalue = 1), "month" === targetProp && (datavalue = parseInt(datavalue), 0 < datavalue) && (datavalue -= 1), dateOperation.call(dateObj.date, datavalue);
        }
      }
      if ("string" == typeof mask) {
        for (getTokenizer(opts).lastIndex = 0; match = getTokenizer(opts).exec(format);) {
          var dynMatches = new RegExp("\\d+$").exec(match[0]),
            fcode = dynMatches ? match[0][0] + "x" : match[0],
            value = void 0;
          if (dynMatches) {
            var lastIndex = getTokenizer(opts).lastIndex,
              tokanMatch = getTokenMatch(match.index, opts);
            getTokenizer(opts).lastIndex = lastIndex, value = mask.slice(0, mask.indexOf(tokanMatch.nextMatch[0]));
          } else value = mask.slice(0, fcode.length);
          Object.prototype.hasOwnProperty.call(formatCode, fcode) && (targetProp = formatCode[fcode][2], dateOperation = formatCode[fcode][1], setValue(dateObj, value, opts)), mask = mask.slice(value.length);
        }
        return dateObj;
      }
      if (mask && "object" === _typeof(mask) && Object.prototype.hasOwnProperty.call(mask, "date")) return mask;
    }
    function importDate(dateObj, opts) {
      return parse(opts.inputFormat, {
        date: dateObj
      }, opts);
    }
    function getTokenMatch(pos, opts) {
      var calcPos = 0,
        targetMatch,
        match,
        matchLength = 0;
      for (getTokenizer(opts).lastIndex = 0; match = getTokenizer(opts).exec(opts.inputFormat);) {
        var dynMatches = new RegExp("\\d+$").exec(match[0]);
        if (matchLength = dynMatches ? parseInt(dynMatches[0]) : match[0].length, calcPos += matchLength, pos <= calcPos) {
          targetMatch = match, match = getTokenizer(opts).exec(opts.inputFormat);
          break;
        }
      }
      return {
        targetMatchIndex: calcPos - matchLength,
        nextMatch: match,
        targetMatch: targetMatch
      };
    }
    _inputmask["default"].extendAliases({
      datetime: {
        mask: function mask(opts) {
          return opts.numericInput = !1, formatCode.S = opts.i18n.ordinalSuffix.join("|"), opts.inputFormat = formatAlias[opts.inputFormat] || opts.inputFormat, opts.displayFormat = formatAlias[opts.displayFormat] || opts.displayFormat || opts.inputFormat, opts.outputFormat = formatAlias[opts.outputFormat] || opts.outputFormat || opts.inputFormat, opts.placeholder = "" !== opts.placeholder ? opts.placeholder : opts.inputFormat.replace(/[[\]]/, ""), opts.regex = parse(opts.inputFormat, void 0, opts), opts.min = analyseMask(opts.min, opts.inputFormat, opts), opts.max = analyseMask(opts.max, opts.inputFormat, opts), null;
        },
        placeholder: "",
        inputFormat: "isoDateTime",
        displayFormat: void 0,
        outputFormat: void 0,
        min: null,
        max: null,
        skipOptionalPartCharacter: "",
        i18n: {
          dayNames: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
          monthNames: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
          ordinalSuffix: ["st", "nd", "rd", "th"]
        },
        preValidation: function preValidation(buffer, pos, c, isSelection, opts, maskset, caretPos, strict) {
          if (strict) return !0;
          if (isNaN(c) && buffer[pos] !== c) {
            var tokenMatch = getTokenMatch(pos, opts);
            if (tokenMatch.nextMatch && tokenMatch.nextMatch[0] === c && 1 < tokenMatch.targetMatch[0].length) {
              var validator = formatCode[tokenMatch.targetMatch[0]][0];
              if (new RegExp(validator).test("0" + buffer[pos - 1])) return buffer[pos] = buffer[pos - 1], buffer[pos - 1] = "0", {
                fuzzy: !0,
                buffer: buffer,
                refreshFromBuffer: {
                  start: pos - 1,
                  end: pos + 1
                },
                pos: pos + 1
              };
            }
          }
          return !0;
        },
        postValidation: function postValidation(buffer, pos, c, currentResult, opts, maskset, strict, fromCheckval) {
          var inputmask = this,
            tokenMatch,
            validator;
          if (strict) return !0;
          if (!1 === currentResult) return tokenMatch = getTokenMatch(pos + 1, opts), tokenMatch.targetMatch && tokenMatch.targetMatchIndex === pos && 1 < tokenMatch.targetMatch[0].length && void 0 !== formatCode[tokenMatch.targetMatch[0]] && (validator = formatCode[tokenMatch.targetMatch[0]][0], new RegExp(validator).test("0" + c)) ? {
            insert: [{
              pos: pos,
              c: "0"
            }, {
              pos: pos + 1,
              c: c
            }],
            pos: pos + 1
          } : currentResult;
          if (currentResult.fuzzy && (buffer = currentResult.buffer, pos = currentResult.pos), tokenMatch = getTokenMatch(pos, opts), tokenMatch.targetMatch && tokenMatch.targetMatch[0] && void 0 !== formatCode[tokenMatch.targetMatch[0]]) {
            validator = formatCode[tokenMatch.targetMatch[0]][0];
            var part = buffer.slice(tokenMatch.targetMatchIndex, tokenMatch.targetMatchIndex + tokenMatch.targetMatch[0].length);
            !1 === new RegExp(validator).test(part.join("")) && 2 === tokenMatch.targetMatch[0].length && maskset.validPositions[tokenMatch.targetMatchIndex] && maskset.validPositions[tokenMatch.targetMatchIndex + 1] && (maskset.validPositions[tokenMatch.targetMatchIndex + 1].input = "0");
          }
          var result = currentResult,
            dateParts = analyseMask(buffer.join(""), opts.inputFormat, opts);
          return result && dateParts.date.getTime() == dateParts.date.getTime() && (result = prefillYear(dateParts, result, opts), result = isValidDate.call(this, dateParts, result, opts), result = isDateInRange(dateParts, result, opts, maskset, fromCheckval)), pos && result && currentResult.pos !== pos ? {
            buffer: parse(opts.inputFormat, dateParts, opts).split(""),
            refreshFromBuffer: {
              start: pos,
              end: currentResult.pos
            }
          } : result;
        },
        onKeyDown: function onKeyDown(e, buffer, caretPos, opts) {
          var input = this;
          e.ctrlKey && e.keyCode === _keycode["default"].RIGHT && (this.inputmask._valueSet(importDate(new Date(), opts)), $(this).trigger("setvalue"));
        },
        onUnMask: function onUnMask(maskedValue, unmaskedValue, opts) {
          return unmaskedValue ? parse(opts.outputFormat, analyseMask(maskedValue, opts.inputFormat, opts), opts, !0) : unmaskedValue;
        },
        casing: function casing(elem, test, pos, validPositions) {
          return 0 == test.nativeDef.indexOf("[ap]") ? elem.toLowerCase() : 0 == test.nativeDef.indexOf("[AP]") ? elem.toUpperCase() : elem;
        },
        onBeforeMask: function onBeforeMask(initialValue, opts) {
          return "[object Date]" === Object.prototype.toString.call(initialValue) && (initialValue = importDate(initialValue, opts)), initialValue;
        },
        insertMode: !1,
        shiftPositions: !1,
        keepStatic: !1,
        inputmode: "numeric"
      }
    });
  }, function (module, exports, __webpack_require__) {
    "use strict";

    var _inputmask = _interopRequireDefault(__webpack_require__(2)),
      _keycode = _interopRequireDefault(__webpack_require__(0)),
      _escapeRegex = _interopRequireDefault(__webpack_require__(13));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    var $ = _inputmask["default"].dependencyLib;
    function autoEscape(txt, opts) {
      for (var escapedTxt = "", i = 0; i < txt.length; i++) _inputmask["default"].prototype.definitions[txt.charAt(i)] || opts.definitions[txt.charAt(i)] || opts.optionalmarker[0] === txt.charAt(i) || opts.optionalmarker[1] === txt.charAt(i) || opts.quantifiermarker[0] === txt.charAt(i) || opts.quantifiermarker[1] === txt.charAt(i) || opts.groupmarker[0] === txt.charAt(i) || opts.groupmarker[1] === txt.charAt(i) || opts.alternatormarker === txt.charAt(i) ? escapedTxt += "\\" + txt.charAt(i) : escapedTxt += txt.charAt(i);
      return escapedTxt;
    }
    function alignDigits(buffer, digits, opts, force) {
      if (0 < buffer.length && 0 < digits && (!opts.digitsOptional || force)) {
        var radixPosition = buffer.indexOf(opts.radixPoint),
          negationBack = !1;
        opts.negationSymbol.back === buffer[buffer.length - 1] && (negationBack = !0, buffer.length--), -1 === radixPosition && (buffer.push(opts.radixPoint), radixPosition = buffer.length - 1);
        for (var i = 1; i <= digits; i++) isFinite(buffer[radixPosition + i]) || (buffer[radixPosition + i] = "0");
      }
      return negationBack && buffer.push(opts.negationSymbol.back), buffer;
    }
    function findValidator(symbol, maskset) {
      var posNdx = 0;
      if ("+" === symbol) {
        for (posNdx in maskset.validPositions);
        posNdx = parseInt(posNdx);
      }
      for (var tstNdx in maskset.tests) if (tstNdx = parseInt(tstNdx), posNdx <= tstNdx) for (var ndx = 0, ndxl = maskset.tests[tstNdx].length; ndx < ndxl; ndx++) if ((void 0 === maskset.validPositions[tstNdx] || "-" === symbol) && maskset.tests[tstNdx][ndx].match.def === symbol) return tstNdx + (void 0 !== maskset.validPositions[tstNdx] && "-" !== symbol ? 1 : 0);
      return posNdx;
    }
    function findValid(symbol, maskset) {
      var ret = -1;
      for (var ndx in maskset.validPositions) {
        var tst = maskset.validPositions[ndx];
        if (tst && tst.match.def === symbol) {
          ret = parseInt(ndx);
          break;
        }
      }
      return ret;
    }
    function parseMinMaxOptions(opts) {
      void 0 === opts.parseMinMaxOptions && (null !== opts.min && (opts.min = opts.min.toString().replace(new RegExp((0, _escapeRegex["default"])(opts.groupSeparator), "g"), ""), "," === opts.radixPoint && (opts.min = opts.min.replace(opts.radixPoint, ".")), opts.min = isFinite(opts.min) ? parseFloat(opts.min) : NaN, isNaN(opts.min) && (opts.min = Number.MIN_VALUE)), null !== opts.max && (opts.max = opts.max.toString().replace(new RegExp((0, _escapeRegex["default"])(opts.groupSeparator), "g"), ""), "," === opts.radixPoint && (opts.max = opts.max.replace(opts.radixPoint, ".")), opts.max = isFinite(opts.max) ? parseFloat(opts.max) : NaN, isNaN(opts.max) && (opts.max = Number.MAX_VALUE)), opts.parseMinMaxOptions = "done");
    }
    function genMask(opts) {
      opts.repeat = 0, opts.groupSeparator === opts.radixPoint && opts.digits && "0" !== opts.digits && ("." === opts.radixPoint ? opts.groupSeparator = "," : "," === opts.radixPoint ? opts.groupSeparator = "." : opts.groupSeparator = ""), " " === opts.groupSeparator && (opts.skipOptionalPartCharacter = void 0), 1 < opts.placeholder.length && (opts.placeholder = opts.placeholder.charAt(0)), "radixFocus" === opts.positionCaretOnClick && "" === opts.placeholder && (opts.positionCaretOnClick = "lvp");
      var decimalDef = "0",
        radixPointDef = opts.radixPoint;
      !0 === opts.numericInput && void 0 === opts.__financeInput ? (decimalDef = "1", opts.positionCaretOnClick = "radixFocus" === opts.positionCaretOnClick ? "lvp" : opts.positionCaretOnClick, opts.digitsOptional = !1, isNaN(opts.digits) && (opts.digits = 2), opts._radixDance = !1, radixPointDef = "," === opts.radixPoint ? "?" : "!", "" !== opts.radixPoint && void 0 === opts.definitions[radixPointDef] && (opts.definitions[radixPointDef] = {}, opts.definitions[radixPointDef].validator = "[" + opts.radixPoint + "]", opts.definitions[radixPointDef].placeholder = opts.radixPoint, opts.definitions[radixPointDef]["static"] = !0, opts.definitions[radixPointDef].generated = !0)) : (opts.__financeInput = !1, opts.numericInput = !0);
      var mask = "[+]",
        altMask;
      if (mask += autoEscape(opts.prefix, opts), "" !== opts.groupSeparator ? (void 0 === opts.definitions[opts.groupSeparator] && (opts.definitions[opts.groupSeparator] = {}, opts.definitions[opts.groupSeparator].validator = "[" + opts.groupSeparator + "]", opts.definitions[opts.groupSeparator].placeholder = opts.groupSeparator, opts.definitions[opts.groupSeparator]["static"] = !0, opts.definitions[opts.groupSeparator].generated = !0), mask += opts._mask(opts)) : mask += "9{+}", void 0 !== opts.digits && 0 !== opts.digits) {
        var dq = opts.digits.toString().split(",");
        isFinite(dq[0]) && dq[1] && isFinite(dq[1]) ? mask += radixPointDef + decimalDef + "{" + opts.digits + "}" : (isNaN(opts.digits) || 0 < parseInt(opts.digits)) && (opts.digitsOptional ? (altMask = mask + radixPointDef + decimalDef + "{0," + opts.digits + "}", opts.keepStatic = !0) : mask += radixPointDef + decimalDef + "{" + opts.digits + "}");
      }
      return mask += autoEscape(opts.suffix, opts), mask += "[-]", altMask && (mask = [altMask + autoEscape(opts.suffix, opts) + "[-]", mask]), opts.greedy = !1, parseMinMaxOptions(opts), mask;
    }
    function hanndleRadixDance(pos, c, radixPos, maskset, opts) {
      return opts._radixDance && opts.numericInput && c !== opts.negationSymbol.back && pos <= radixPos && (0 < radixPos || c == opts.radixPoint) && (void 0 === maskset.validPositions[pos - 1] || maskset.validPositions[pos - 1].input !== opts.negationSymbol.back) && (pos -= 1), pos;
    }
    function decimalValidator(chrs, maskset, pos, strict, opts) {
      var radixPos = maskset.buffer ? maskset.buffer.indexOf(opts.radixPoint) : -1,
        result = -1 !== radixPos && new RegExp("[0-9\uFF11-\uFF19]").test(chrs);
      return opts._radixDance && result && null == maskset.validPositions[radixPos] ? {
        insert: {
          pos: radixPos === pos ? radixPos + 1 : radixPos,
          c: opts.radixPoint
        },
        pos: pos
      } : result;
    }
    function checkForLeadingZeroes(buffer, opts) {
      var numberMatches = new RegExp("(^" + ("" !== opts.negationSymbol.front ? (0, _escapeRegex["default"])(opts.negationSymbol.front) + "?" : "") + (0, _escapeRegex["default"])(opts.prefix) + ")(.*)(" + (0, _escapeRegex["default"])(opts.suffix) + ("" != opts.negationSymbol.back ? (0, _escapeRegex["default"])(opts.negationSymbol.back) + "?" : "") + "$)").exec(buffer.slice().reverse().join("")),
        number = numberMatches ? numberMatches[2] : "",
        leadingzeroes = !1;
      return number && (number = number.split(opts.radixPoint.charAt(0))[0], leadingzeroes = new RegExp("^[0" + opts.groupSeparator + "]*").exec(number)), !(!leadingzeroes || !(1 < leadingzeroes[0].length || 0 < leadingzeroes[0].length && leadingzeroes[0].length < number.length)) && leadingzeroes;
    }
    _inputmask["default"].extendAliases({
      numeric: {
        mask: genMask,
        _mask: function _mask(opts) {
          return "(" + opts.groupSeparator + "999){+|1}";
        },
        digits: "*",
        digitsOptional: !0,
        enforceDigitsOnBlur: !1,
        radixPoint: ".",
        positionCaretOnClick: "radixFocus",
        _radixDance: !0,
        groupSeparator: "",
        allowMinus: !0,
        negationSymbol: {
          front: "-",
          back: ""
        },
        prefix: "",
        suffix: "",
        min: null,
        max: null,
        SetMaxOnOverflow: !1,
        step: 1,
        inputType: "text",
        unmaskAsNumber: !1,
        roundingFN: Math.round,
        inputmode: "numeric",
        shortcuts: {
          k: "000",
          m: "000000"
        },
        placeholder: "0",
        greedy: !1,
        rightAlign: !0,
        insertMode: !0,
        autoUnmask: !1,
        skipOptionalPartCharacter: "",
        definitions: {
          0: {
            validator: decimalValidator
          },
          1: {
            validator: decimalValidator,
            definitionSymbol: "9"
          },
          "+": {
            validator: function validator(chrs, maskset, pos, strict, opts) {
              return opts.allowMinus && ("-" === chrs || chrs === opts.negationSymbol.front);
            }
          },
          "-": {
            validator: function validator(chrs, maskset, pos, strict, opts) {
              return opts.allowMinus && chrs === opts.negationSymbol.back;
            }
          }
        },
        preValidation: function preValidation(buffer, pos, c, isSelection, opts, maskset, caretPos, strict) {
          if (!1 !== opts.__financeInput && c === opts.radixPoint) return !1;
          var pattern;
          if (pattern = opts.shortcuts && opts.shortcuts[c]) {
            if (1 < pattern.length) for (var inserts = [], i = 0; i < pattern.length; i++) inserts.push({
              pos: pos + i,
              c: pattern[i],
              strict: !1
            });
            return {
              insert: inserts
            };
          }
          var radixPos = buffer.indexOf(opts.radixPoint),
            initPos = pos;
          if (pos = hanndleRadixDance(pos, c, radixPos, maskset, opts), "-" === c || c === opts.negationSymbol.front) {
            if (!0 !== opts.allowMinus) return !1;
            var isNegative = !1,
              front = findValid("+", maskset),
              back = findValid("-", maskset);
            return -1 !== front && (isNegative = [front, back]), !1 !== isNegative ? {
              remove: isNegative,
              caret: initPos - opts.negationSymbol.front.length
            } : {
              insert: [{
                pos: findValidator("+", maskset),
                c: opts.negationSymbol.front,
                fromIsValid: !0
              }, {
                pos: findValidator("-", maskset),
                c: opts.negationSymbol.back,
                fromIsValid: void 0
              }],
              caret: initPos + opts.negationSymbol.back.length
            };
          }
          if (c === opts.groupSeparator) return {
            caret: initPos
          };
          if (strict) return !0;
          if (-1 !== radixPos && !0 === opts._radixDance && !1 === isSelection && c === opts.radixPoint && void 0 !== opts.digits && (isNaN(opts.digits) || 0 < parseInt(opts.digits)) && radixPos !== pos) return {
            caret: opts._radixDance && pos === radixPos - 1 ? radixPos + 1 : radixPos
          };
          if (!1 === opts.__financeInput) if (isSelection) {
            if (opts.digitsOptional) return {
              rewritePosition: caretPos.end
            };
            if (!opts.digitsOptional) {
              if (caretPos.begin > radixPos && caretPos.end <= radixPos) return c === opts.radixPoint ? {
                insert: {
                  pos: radixPos + 1,
                  c: "0",
                  fromIsValid: !0
                },
                rewritePosition: radixPos
              } : {
                rewritePosition: radixPos + 1
              };
              if (caretPos.begin < radixPos) return {
                rewritePosition: caretPos.begin - 1
              };
            }
          } else if (!opts.showMaskOnHover && !opts.showMaskOnFocus && !opts.digitsOptional && 0 < opts.digits && "" === this.__valueGet.call(this)) return {
            rewritePosition: radixPos
          };
          return {
            rewritePosition: pos
          };
        },
        postValidation: function postValidation(buffer, pos, c, currentResult, opts, maskset, strict) {
          if (!1 === currentResult) return currentResult;
          if (strict) return !0;
          if (null !== opts.min || null !== opts.max) {
            var unmasked = opts.onUnMask(buffer.slice().reverse().join(""), void 0, $.extend({}, opts, {
              unmaskAsNumber: !0
            }));
            if (null !== opts.min && unmasked < opts.min && (unmasked.toString().length > opts.min.toString().length || unmasked < 0)) return !1;
            if (null !== opts.max && unmasked > opts.max) return !!opts.SetMaxOnOverflow && {
              refreshFromBuffer: !0,
              buffer: alignDigits(opts.max.toString().replace(".", opts.radixPoint).split(""), opts.digits, opts).reverse()
            };
          }
          return currentResult;
        },
        onUnMask: function onUnMask(maskedValue, unmaskedValue, opts) {
          if ("" === unmaskedValue && !0 === opts.nullable) return unmaskedValue;
          var processValue = maskedValue.replace(opts.prefix, "");
          return processValue = processValue.replace(opts.suffix, ""), processValue = processValue.replace(new RegExp((0, _escapeRegex["default"])(opts.groupSeparator), "g"), ""), "" !== opts.placeholder.charAt(0) && (processValue = processValue.replace(new RegExp(opts.placeholder.charAt(0), "g"), "0")), opts.unmaskAsNumber ? ("" !== opts.radixPoint && -1 !== processValue.indexOf(opts.radixPoint) && (processValue = processValue.replace(_escapeRegex["default"].call(this, opts.radixPoint), ".")), processValue = processValue.replace(new RegExp("^" + (0, _escapeRegex["default"])(opts.negationSymbol.front)), "-"), processValue = processValue.replace(new RegExp((0, _escapeRegex["default"])(opts.negationSymbol.back) + "$"), ""), Number(processValue)) : processValue;
        },
        isComplete: function isComplete(buffer, opts) {
          var maskedValue = (opts.numericInput ? buffer.slice().reverse() : buffer).join("");
          return maskedValue = maskedValue.replace(new RegExp("^" + (0, _escapeRegex["default"])(opts.negationSymbol.front)), "-"), maskedValue = maskedValue.replace(new RegExp((0, _escapeRegex["default"])(opts.negationSymbol.back) + "$"), ""), maskedValue = maskedValue.replace(opts.prefix, ""), maskedValue = maskedValue.replace(opts.suffix, ""), maskedValue = maskedValue.replace(new RegExp((0, _escapeRegex["default"])(opts.groupSeparator) + "([0-9]{3})", "g"), "$1"), "," === opts.radixPoint && (maskedValue = maskedValue.replace((0, _escapeRegex["default"])(opts.radixPoint), ".")), isFinite(maskedValue);
        },
        onBeforeMask: function onBeforeMask(initialValue, opts) {
          var radixPoint = opts.radixPoint || ",";
          isFinite(opts.digits) && (opts.digits = parseInt(opts.digits)), "number" != typeof initialValue && "number" !== opts.inputType || "" === radixPoint || (initialValue = initialValue.toString().replace(".", radixPoint));
          var isNagtive = "-" === initialValue.charAt(0) || initialValue.charAt(0) === opts.negationSymbol.front,
            valueParts = initialValue.split(radixPoint),
            integerPart = valueParts[0].replace(/[^\-0-9]/g, ""),
            decimalPart = 1 < valueParts.length ? valueParts[1].replace(/[^0-9]/g, "") : "",
            forceDigits = 1 < valueParts.length;
          initialValue = integerPart + ("" !== decimalPart ? radixPoint + decimalPart : decimalPart);
          var digits = 0;
          if ("" !== radixPoint && (digits = opts.digitsOptional ? opts.digits < decimalPart.length ? opts.digits : decimalPart.length : opts.digits, "" !== decimalPart || !opts.digitsOptional)) {
            var digitsFactor = Math.pow(10, digits || 1);
            initialValue = initialValue.replace((0, _escapeRegex["default"])(radixPoint), "."), isNaN(parseFloat(initialValue)) || (initialValue = (opts.roundingFN(parseFloat(initialValue) * digitsFactor) / digitsFactor).toFixed(digits)), initialValue = initialValue.toString().replace(".", radixPoint);
          }
          if (0 === opts.digits && -1 !== initialValue.indexOf(radixPoint) && (initialValue = initialValue.substring(0, initialValue.indexOf(radixPoint))), null !== opts.min || null !== opts.max) {
            var numberValue = initialValue.toString().replace(radixPoint, ".");
            null !== opts.min && numberValue < opts.min ? initialValue = opts.min.toString().replace(".", radixPoint) : null !== opts.max && numberValue > opts.max && (initialValue = opts.max.toString().replace(".", radixPoint));
          }
          return isNagtive && "-" !== initialValue.charAt(0) && (initialValue = "-" + initialValue), alignDigits(initialValue.toString().split(""), digits, opts, forceDigits).join("");
        },
        onBeforeWrite: function onBeforeWrite(e, buffer, caretPos, opts) {
          function stripBuffer(buffer, stripRadix) {
            if (!1 !== opts.__financeInput || stripRadix) {
              var position = buffer.indexOf(opts.radixPoint);
              -1 !== position && buffer.splice(position, 1);
            }
            if ("" !== opts.groupSeparator) for (; -1 !== (position = buffer.indexOf(opts.groupSeparator));) buffer.splice(position, 1);
            return buffer;
          }
          var result,
            leadingzeroes = checkForLeadingZeroes(buffer, opts);
          if (leadingzeroes) for (var caretNdx = buffer.join("").lastIndexOf(leadingzeroes[0].split("").reverse().join("")) - (leadingzeroes[0] == leadingzeroes.input ? 0 : 1), offset = leadingzeroes[0] == leadingzeroes.input ? 1 : 0, i = leadingzeroes[0].length - offset; 0 < i; i--) delete this.maskset.validPositions[caretNdx + i], delete buffer[caretNdx + i];
          if (e) switch (e.type) {
            case "blur":
            case "checkval":
              if (null !== opts.min) {
                var unmasked = opts.onUnMask(buffer.slice().reverse().join(""), void 0, $.extend({}, opts, {
                  unmaskAsNumber: !0
                }));
                if (null !== opts.min && unmasked < opts.min) return {
                  refreshFromBuffer: !0,
                  buffer: alignDigits(opts.min.toString().replace(".", opts.radixPoint).split(""), opts.digits, opts).reverse()
                };
              }
              if (buffer[buffer.length - 1] === opts.negationSymbol.front) {
                var nmbrMtchs = new RegExp("(^" + ("" != opts.negationSymbol.front ? (0, _escapeRegex["default"])(opts.negationSymbol.front) + "?" : "") + (0, _escapeRegex["default"])(opts.prefix) + ")(.*)(" + (0, _escapeRegex["default"])(opts.suffix) + ("" != opts.negationSymbol.back ? (0, _escapeRegex["default"])(opts.negationSymbol.back) + "?" : "") + "$)").exec(stripBuffer(buffer.slice(), !0).reverse().join("")),
                  number = nmbrMtchs ? nmbrMtchs[2] : "";
                0 == number && (result = {
                  refreshFromBuffer: !0,
                  buffer: [0]
                });
              } else "" !== opts.radixPoint && buffer[0] === opts.radixPoint && (result && result.buffer ? result.buffer.shift() : (buffer.shift(), result = {
                refreshFromBuffer: !0,
                buffer: stripBuffer(buffer)
              }));
              if (opts.enforceDigitsOnBlur) {
                result = result || {};
                var bffr = result && result.buffer || buffer.slice().reverse();
                result.refreshFromBuffer = !0, result.buffer = alignDigits(bffr, opts.digits, opts, !0).reverse();
              }
          }
          return result;
        },
        onKeyDown: function onKeyDown(e, buffer, caretPos, opts) {
          var $input = $(this),
            bffr;
          if (e.ctrlKey) switch (e.keyCode) {
            case _keycode["default"].UP:
              return this.inputmask.__valueSet.call(this, parseFloat(this.inputmask.unmaskedvalue()) + parseInt(opts.step)), $input.trigger("setvalue"), !1;
            case _keycode["default"].DOWN:
              return this.inputmask.__valueSet.call(this, parseFloat(this.inputmask.unmaskedvalue()) - parseInt(opts.step)), $input.trigger("setvalue"), !1;
          }
          if (!e.shiftKey && (e.keyCode === _keycode["default"].DELETE || e.keyCode === _keycode["default"].BACKSPACE || e.keyCode === _keycode["default"].BACKSPACE_SAFARI) && caretPos.begin !== buffer.length) {
            if (buffer[e.keyCode === _keycode["default"].DELETE ? caretPos.begin - 1 : caretPos.end] === opts.negationSymbol.front) return bffr = buffer.slice().reverse(), "" !== opts.negationSymbol.front && bffr.shift(), "" !== opts.negationSymbol.back && bffr.pop(), $input.trigger("setvalue", [bffr.join(""), caretPos.begin]), !1;
            if (!0 === opts._radixDance) {
              var radixPos = buffer.indexOf(opts.radixPoint);
              if (opts.digitsOptional) {
                if (0 === radixPos) return bffr = buffer.slice().reverse(), bffr.pop(), $input.trigger("setvalue", [bffr.join(""), caretPos.begin >= bffr.length ? bffr.length : caretPos.begin]), !1;
              } else if (-1 !== radixPos && (caretPos.begin < radixPos || caretPos.end < radixPos || e.keyCode === _keycode["default"].DELETE && caretPos.begin === radixPos)) return caretPos.begin !== caretPos.end || e.keyCode !== _keycode["default"].BACKSPACE && e.keyCode !== _keycode["default"].BACKSPACE_SAFARI || caretPos.begin++, bffr = buffer.slice().reverse(), bffr.splice(bffr.length - caretPos.begin, caretPos.begin - caretPos.end + 1), bffr = alignDigits(bffr, opts.digits, opts).join(""), $input.trigger("setvalue", [bffr, caretPos.begin >= bffr.length ? radixPos + 1 : caretPos.begin]), !1;
            }
          }
        }
      },
      currency: {
        prefix: "",
        groupSeparator: ",",
        alias: "numeric",
        digits: 2,
        digitsOptional: !1
      },
      decimal: {
        alias: "numeric"
      },
      integer: {
        alias: "numeric",
        digits: 0
      },
      percentage: {
        alias: "numeric",
        min: 0,
        max: 100,
        suffix: " %",
        digits: 0,
        allowMinus: !1
      },
      indianns: {
        alias: "numeric",
        _mask: function _mask(opts) {
          return "(" + opts.groupSeparator + "99){*|1}(" + opts.groupSeparator + "999){1|1}";
        },
        groupSeparator: ",",
        radixPoint: ".",
        placeholder: "0",
        digits: 2,
        digitsOptional: !1
      }
    });
  }, function (module, exports, __webpack_require__) {
    "use strict";

    var _window = _interopRequireDefault(__webpack_require__(6)),
      _inputmask = _interopRequireDefault(__webpack_require__(2));
    function _typeof(obj) {
      return _typeof = "function" == typeof Symbol && "symbol" == _typeof2(Symbol.iterator) ? function _typeof(obj) {
        return _typeof2(obj);
      } : function _typeof(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
      }, _typeof(obj);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _inherits(subClass, superClass) {
      if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function");
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          writable: !0,
          configurable: !0
        }
      }), superClass && _setPrototypeOf(subClass, superClass);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self, call) {
      return !call || "object" !== _typeof(call) && "function" != typeof call ? _assertThisInitialized(self) : call;
    }
    function _assertThisInitialized(self) {
      if (void 0 === self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return self;
    }
    function _wrapNativeSuper(Class) {
      var _cache = "function" == typeof Map ? new Map() : void 0;
      return _wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (null === Class || !_isNativeFunction(Class)) return Class;
        if ("function" != typeof Class) throw new TypeError("Super expression must either be null or a function");
        if ("undefined" != typeof _cache) {
          if (_cache.has(Class)) return _cache.get(Class);
          _cache.set(Class, Wrapper);
        }
        function Wrapper() {
          return _construct(Class, arguments, _getPrototypeOf(this).constructor);
        }
        return Wrapper.prototype = Object.create(Class.prototype, {
          constructor: {
            value: Wrapper,
            enumerable: !1,
            writable: !0,
            configurable: !0
          }
        }), _setPrototypeOf(Wrapper, Class);
      }, _wrapNativeSuper(Class);
    }
    function _construct(Parent, args, Class) {
      return _construct = _isNativeReflectConstruct() ? Reflect.construct : function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a),
          instance = new Constructor();
        return Class && _setPrototypeOf(instance, Class.prototype), instance;
      }, _construct.apply(null, arguments);
    }
    function _isNativeReflectConstruct() {
      if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
      if (Reflect.construct.sham) return !1;
      if ("function" == typeof Proxy) return !0;
      try {
        return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;
      } catch (e) {
        return !1;
      }
    }
    function _isNativeFunction(fn) {
      return -1 !== Function.toString.call(fn).indexOf("[native code]");
    }
    function _setPrototypeOf(o, p) {
      return _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        return o.__proto__ = p, o;
      }, _setPrototypeOf(o, p);
    }
    function _getPrototypeOf(o) {
      return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      }, _getPrototypeOf(o);
    }
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    var document = _window["default"].document;
    if (document && document.head && document.head.attachShadow && _window["default"].customElements && void 0 === _window["default"].customElements.get("input-mask")) {
      var InputmaskElement = function (_HTMLElement) {
        _inherits(InputmaskElement, _HTMLElement);
        var _super = _createSuper(InputmaskElement);
        function InputmaskElement() {
          var _this;
          _classCallCheck(this, InputmaskElement), _this = _super.call(this);
          var attributeNames = _this.getAttributeNames(),
            shadow = _this.attachShadow({
              mode: "closed"
            }),
            input = document.createElement("input");
          for (var attr in input.type = "text", shadow.appendChild(input), attributeNames) Object.prototype.hasOwnProperty.call(attributeNames, attr) && input.setAttribute(attributeNames[attr], _this.getAttribute(attributeNames[attr]));
          var im = new _inputmask["default"]();
          return im.dataAttribute = "", im.mask(input), input.inputmask.shadowRoot = shadow, _this;
        }
        return InputmaskElement;
      }(_wrapNativeSuper(HTMLElement));
      _window["default"].customElements.define("input-mask", InputmaskElement);
    }
  }], installedModules = {}, __webpack_require__.m = modules, __webpack_require__.c = installedModules, __webpack_require__.d = function (exports, name, getter) {
    __webpack_require__.o(exports, name) || Object.defineProperty(exports, name, {
      enumerable: !0,
      get: getter
    });
  }, __webpack_require__.r = function (exports) {
    "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(exports, Symbol.toStringTag, {
      value: "Module"
    }), Object.defineProperty(exports, "__esModule", {
      value: !0
    });
  }, __webpack_require__.t = function (value, mode) {
    if (1 & mode && (value = __webpack_require__(value)), 8 & mode) return value;
    if (4 & mode && "object" == _typeof2(value) && value && value.__esModule) return value;
    var ns = Object.create(null);
    if (__webpack_require__.r(ns), Object.defineProperty(ns, "default", {
      enumerable: !0,
      value: value
    }), 2 & mode && "string" != typeof value) for (var key in value) __webpack_require__.d(ns, key, function (key) {
      return value[key];
    }.bind(null, key));
    return ns;
  }, __webpack_require__.n = function (module) {
    var getter = module && module.__esModule ? function getDefault() {
      return module["default"];
    } : function getModuleExports() {
      return module;
    };
    return __webpack_require__.d(getter, "a", getter), getter;
  }, __webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  }, __webpack_require__.p = "", __webpack_require__(__webpack_require__.s = 14);
  function __webpack_require__(moduleId) {
    if (installedModules[moduleId]) return installedModules[moduleId].exports;
    var module = installedModules[moduleId] = {
      i: moduleId,
      l: !1,
      exports: {}
    };
    return modules[moduleId].call(module.exports, module, module.exports, __webpack_require__), module.l = !0, module.exports;
  }
  var modules, installedModules;
});
"use strict";

function _typeof2(obj) { "@babel/helpers - typeof"; return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof2(obj); }
function _defineProperty(e, t, i) {
  return t in e ? Object.defineProperty(e, t, {
    value: i,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[t] = i, e;
}
var _typeof = "function" == typeof Symbol && "symbol" == _typeof2(Symbol.iterator) ? function (e) {
  return _typeof2(e);
} : function (e) {
  return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : _typeof2(e);
};
!function () {
  for (var e = ["DocumentType", "Element", "CharacterData"], t = function t() {
      null != this.parentNode && this.parentNode.removeChild(this);
    }, i = 0; i < e.length; i++) {
    var r = e[i];
    window[r] && !window[r].prototype.remove && (window[r].prototype.remove = t);
  }
}(), function (e) {
  function t() {}
  function i(e, t) {
    return function () {
      e.apply(t, arguments);
    };
  }
  function r(e) {
    if ("object" !== _typeof(this)) throw new TypeError("Promises must be constructed via new");
    if ("function" != typeof e) throw new TypeError("not a function");
    this._state = 0, this._handled = !1, this._value = void 0, this._deferreds = [], u(e, this);
  }
  function n(e, t) {
    for (; 3 === e._state;) e = e._value;
    return 0 === e._state ? void e._deferreds.push(t) : (e._handled = !0, void r._immediateFn(function () {
      var i = 1 === e._state ? t.onFulfilled : t.onRejected;
      if (null === i) return void (1 === e._state ? o : s)(t.promise, e._value);
      var r;
      try {
        r = i(e._value);
      } catch (n) {
        return void s(t.promise, n);
      }
      o(t.promise, r);
    }));
  }
  function o(e, t) {
    try {
      if (t === e) throw new TypeError("A promise cannot be resolved with itself.");
      if (t && ("object" === ("undefined" == typeof t ? "undefined" : _typeof(t)) || "function" == typeof t)) {
        var n = t.then;
        if (t instanceof r) return e._state = 3, e._value = t, void a(e);
        if ("function" == typeof n) return void u(i(n, t), e);
      }
      e._state = 1, e._value = t, a(e);
    } catch (o) {
      s(e, o);
    }
  }
  function s(e, t) {
    e._state = 2, e._value = t, a(e);
  }
  function a(e) {
    2 === e._state && 0 === e._deferreds.length && r._immediateFn(function () {
      e._handled || r._unhandledRejectionFn(e._value);
    });
    for (var t = 0, i = e._deferreds.length; t < i; t++) n(e, e._deferreds[t]);
    e._deferreds = null;
  }
  function l(e, t, i) {
    this.onFulfilled = "function" == typeof e ? e : null, this.onRejected = "function" == typeof t ? t : null, this.promise = i;
  }
  function u(e, t) {
    var i = !1;
    try {
      e(function (e) {
        i || (i = !0, o(t, e));
      }, function (e) {
        i || (i = !0, s(t, e));
      });
    } catch (r) {
      if (i) return;
      i = !0, s(t, r);
    }
  }
  var d = setTimeout;
  r.prototype["catch"] = function (e) {
    return this.then(null, e);
  }, r.prototype.then = function (e, i) {
    var r = new this.constructor(t);
    return n(this, new l(e, i, r)), r;
  }, r.all = function (e) {
    var t = Array.prototype.slice.call(e);
    return new r(function (e, i) {
      function r(o, s) {
        try {
          if (s && ("object" === ("undefined" == typeof s ? "undefined" : _typeof(s)) || "function" == typeof s)) {
            var a = s.then;
            if ("function" == typeof a) return void a.call(s, function (e) {
              r(o, e);
            }, i);
          }
          t[o] = s, 0 === --n && e(t);
        } catch (l) {
          i(l);
        }
      }
      if (0 === t.length) return e([]);
      for (var n = t.length, o = 0; o < t.length; o++) r(o, t[o]);
    });
  }, r.resolve = function (e) {
    return e && "object" === ("undefined" == typeof e ? "undefined" : _typeof(e)) && e.constructor === r ? e : new r(function (t) {
      t(e);
    });
  }, r.reject = function (e) {
    return new r(function (t, i) {
      i(e);
    });
  }, r.race = function (e) {
    return new r(function (t, i) {
      for (var r = 0, n = e.length; r < n; r++) e[r].then(t, i);
    });
  }, r._immediateFn = "function" == typeof setImmediate && function (e) {
    setImmediate(e);
  } || function (e) {
    d(e, 0);
  }, r._unhandledRejectionFn = function (e) {
    "undefined" != typeof console && console && console.warn("Possible Unhandled Promise Rejection:", e);
  }, r._setImmediateFn = function (e) {
    r._immediateFn = e;
  }, r._setUnhandledRejectionFn = function (e) {
    r._unhandledRejectionFn = e;
  }, "undefined" != typeof module && module.exports ? module.exports = r : e.Promise || (e.Promise = r);
}(window), function (e) {
  e.Promise || (e.Promise = Promise);
  var t = "required",
    i = "email",
    r = "minLength",
    n = "maxLength",
    o = "password",
    s = "zip",
    a = "phone",
    l = "remote",
    u = "strength",
    d = "function",
    c = function c(e, t) {
      if ("string" == typeof e) return e;
      var i = "post" === t.toLowerCase() ? "" : "?";
      return Array.isArray(e) ? i + e.map(function (e) {
        return e.name + "=" + e.value;
      }).join("&") : i + Object.keys(e).map(function (t) {
        return t + "=" + e[t];
      }).join("&");
    },
    h = function h(e) {
      var t = e.url,
        i = e.method,
        r = e.data,
        n = e.debug,
        o = e.callback,
        s = e.error;
      if (n) return void o("test");
      var a = e.async !== !1,
        l = new XMLHttpRequest(),
        u = c(r, "get"),
        d = null;
      "post" === i.toLowerCase() && (d = c(r, "post"), u = ""), l.open(i, t + u, a), l.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"), l.onreadystatechange = function () {
        4 === this.readyState && (200 === this.status ? o(this.responseText) : s && s(this.responseText));
      }, l.send(d);
    },
    f = function f(e, t) {
      this.options = t || {}, this.rules = this.options.rules || {}, this.messages = this.options.messages || void 0, this.colorWrong = this.options.colorWrong || "#B81111", this.result = {}, this.elements = [], this.tooltip = this.options.tooltip || {}, this.tooltipFadeOutTime = this.tooltip.fadeOutTime || 5e3, this.tooltipFadeOutClass = this.tooltip.fadeOutClass || "just-validate-tooltip-hide", this.tooltipSelectorWrap = document.querySelectorAll(this.tooltip.selectorWrap).length ? document.querySelectorAll(this.tooltip.selectorWrap) : document.querySelectorAll(".just-validate-tooltip-container"), this.bindHandlerKeyup = this.handlerKeyup.bind(this), this.submitHandler = this.options.submitHandler || void 0, this.invalidFormCallback = this.options.invalidFormCallback || void 0, this.promisesRemote = [], this.isValidationSuccess = !1, this.focusWrongField = this.options.focusWrongField || !1, this.REGEXP = {
        email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
        zip: /^\d{5}(-\d{4})?$/,
        phone: /^([0-9]( |-)?)?(\(?[0-9]{3}\)?|[0-9]{3})( |-)?([0-9]{3}( |-)?[0-9]{4}|[a-zA-Z0-9]{7})$/,
        password: /[^\w\d]*(([0-9]+.*[A-Za-z]+.*)|[A-Za-z]+.*([0-9]+.*))/,
        strengthPass: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]/
      }, this.DEFAULT_REMOTE_ERROR = "Error", this.state = {
        tooltipsTimer: null
      }, this.setForm(document.querySelector(e));
    };
  f.prototype = {
    defaultRules: {
      email: {
        required: !0,
        email: !0
      },
      name: {
        required: !0,
        minLength: 3,
        maxLength: 15
      },
      text: {
        required: !0,
        maxLength: 300,
        minLength: 5
      },
      password: {
        required: !0,
        password: !0,
        minLength: 4,
        maxLength: 8
      },
      zip: {
        required: !0,
        zip: !0
      },
      phone: {
        phone: !0
      }
    },
    defaultMessages: {
      required: "The field is required",
      email: "Please, type a valid email",
      maxLength: "The field must contain a maximum of :value characters",
      minLength: "The field must contain a minimum of :value characters",
      password: "Password is not valid",
      remote: "Email already exists",
      strength: "Password must contents at least one uppercase letter, one lowercase letter and one number",
      "function": "Function returned false"
    },
    handlerKeyup: function handlerKeyup(e) {
      var t = e.target,
        i = {
          name: t.getAttribute("data-validate-field"),
          value: t.value
        };
      delete this.result[i.name], this.validateItem({
        name: i.name,
        value: i.value,
        group: [],
        isKeyupChange: !0
      }), this.renderErrors();
    },
    setterEventListener: function setterEventListener(e, t, i, r) {
      switch ("keyup" === t && (i = this.bindHandlerKeyup), r) {
        case "add":
          e.addEventListener(t, i);
          break;
        case "remove":
          e.removeEventListener(t, i);
      }
    },
    getElementsRealValue: function getElementsRealValue() {
      for (var e = this.$form.querySelectorAll("*"), t = void 0, i = {}, r = 0, n = e.length; r < n; ++r) if (t = e[r].getAttribute("name")) {
        if ("checkbox" === e[r].type) {
          i[t] = e[r].checked;
          continue;
        }
        i[t] = e[r].value;
      }
      return i;
    },
    validationFailed: function validationFailed() {
      this.invalidFormCallback && this.invalidFormCallback(this.result);
      var e = document.querySelector(".js-validate-error-field");
      this.focusWrongField && e && e.focus && e.focus();
    },
    validationSuccess: function validationSuccess() {
      if (0 === Object.keys(this.result).length) {
        if (this.isValidationSuccess = !1, this.submitHandler) {
          var e = this.getElementsRealValue();
          return void this.submitHandler(this.$form, e, h);
        }
        this.$form.submit();
      }
    },
    setForm: function setForm(e) {
      var t = this;
      this.$form = e, this.$form.setAttribute("novalidate", "novalidate"), this.$form.addEventListener("submit", function (e) {
        return e.preventDefault(), t.result = [], t.getElements(), t.promisesRemote.length ? void Promise.all(t.promisesRemote).then(function () {
          t.promisesRemote = [], t.isValidationSuccess ? t.validationSuccess() : t.validationFailed();
        }) : void (t.isValidationSuccess ? t.validationSuccess() : t.validationFailed());
      });
    },
    isEmail: function isEmail(e) {
      return this.REGEXP.email.test(e);
    },
    isZip: function isZip(e) {
      return this.REGEXP.zip.test(e);
    },
    isPhone: function isPhone(e) {
      return this.REGEXP.phone.test(e);
    },
    isPassword: function isPassword(e) {
      return this.REGEXP.password.test(e);
    },
    isEmpty: function isEmpty(e) {
      var t = e;
      return e.trim && (t = e.trim()), !t;
    },
    checkLengthMax: function checkLengthMax(e, t) {
      return e.length <= t;
    },
    checkLengthMin: function checkLengthMin(e, t) {
      return e.length >= t;
    },
    checkStrengthPass: function checkStrengthPass(e) {
      return this.REGEXP.strengthPass.test(e);
    },
    getElements: function getElements() {
      var e = this,
        t = this.$form.querySelectorAll("[data-validate-field]");
      this.elements = [];
      for (var i = function i(_i, r) {
          var n = t[_i],
            o = n.getAttribute("data-validate-field"),
            s = n.value,
            a = !1,
            l = [];
          if ("checkbox" === n.type && (s = n.checked || "", n.addEventListener("change", function (t) {
            var i = t.target,
              r = {
                name: i.getAttribute("data-validate-field"),
                value: i.checked
              };
            delete e.result[r.name], e.validateItem({
              name: r.name,
              value: r.value,
              group: []
            }), e.renderErrors();
          })), "radio" === n.type) {
            var u = e.elements.filter(function (e) {
              if (e.name === o) return e;
            })[0];
            u ? (u.group.push(n.checked), a = !0) : l.push(n.checked), n.addEventListener("change", function (t) {
              var i = t.target,
                r = {
                  name: i.getAttribute("data-validate-field"),
                  value: i.checked
                };
              delete e.result[r.name], e.validateItem({
                name: r.name,
                value: r.value,
                group: []
              }), e.renderErrors();
            });
          }
          e.setterEventListener(n, "keyup", e.handlerKeyup, "add"), a || e.elements.push({
            name: o,
            value: s,
            group: l
          });
        }, r = 0, n = t.length; r < n; ++r) i(r, n);
      this.validateElements();
    },
    validateRequired: function validateRequired(e) {
      return !this.isEmpty(e);
    },
    validateEmail: function validateEmail(e) {
      return this.isEmail(e);
    },
    validatePhone: function validatePhone(e) {
      return this.isPhone(e);
    },
    validateMinLength: function validateMinLength(e, t) {
      return this.checkLengthMin(e, t);
    },
    validateMaxLength: function validateMaxLength(e, t) {
      return this.checkLengthMax(e, t);
    },
    validateStrengthPass: function validateStrengthPass(e) {
      return this.checkStrengthPass(e);
    },
    validatePassword: function validatePassword(e) {
      return this.isPassword(e);
    },
    validateZip: function validateZip(e) {
      return this.isZip(e);
    },
    validateRemote: function validateRemote(e) {
      var t = e.value,
        i = e.name,
        r = e.url,
        n = e.successAnswer,
        o = e.sendParam,
        s = e.method;
      return new Promise(function (e) {
        h({
          url: r,
          method: s,
          data: _defineProperty({}, o, t),
          async: !0,
          callback: function callback(t) {
            t.toLowerCase() === n.toLowerCase() && e("ok"), e({
              type: "incorrect",
              name: i
            });
          },
          error: function error() {
            e({
              type: "error",
              name: i
            });
          }
        });
      });
    },
    generateMessage: function generateMessage(e, t, i) {
      var r = this.messages || this.defaultMessages,
        n = r[t] && r[t][e] || this.messages && "string" == typeof this.messages[t] && r[t] || this.defaultMessages[e] || this.DEFAULT_REMOTE_ERROR;
      i && (n = n.replace(":value", i.toString())), this.result[t] = {
        message: n
      };
    },
    validateElements: function validateElements() {
      var e = this;
      return this.lockForm(), this.elements.forEach(function (t) {
        e.validateItem({
          name: t.name,
          value: t.value,
          group: t.group
        });
      }), this.promisesRemote.length ? void Promise.all(this.promisesRemote).then(function (t) {
        t.forEach(function (t) {
          return "ok" === t ? void e.renderErrors() : ("error" === t.type && alert("Server error occured. Please try later."), e.generateMessage(l, t.name), void e.renderErrors());
        });
      }) : void this.renderErrors();
    },
    validateItem: function validateItem(e) {
      var c = this,
        h = e.name,
        f = e.group,
        m = e.value,
        v = e.isKeyupChange,
        p = this.rules[h] || this.defaultRules[h] || !1;
      if (p) for (var g in p) {
        var y = p[g];
        if (g !== t && g !== d && "" == m) return;
        switch (g) {
          case d:
            if ("function" != typeof y) break;
            if (y(h, m)) break;
            return void this.generateMessage(d, h, y);
          case t:
            if (!y) break;
            if (f.length) {
              var b = !1;
              if (f.forEach(function (e) {
                c.validateRequired(e) && (b = !0);
              }), b) break;
            } else if (this.validateRequired(m)) break;
            return void this.generateMessage(t, h);
          case i:
            if (!y) break;
            if (this.validateEmail(m)) break;
            return void this.generateMessage(i, h);
          case r:
            if (!y) break;
            if (this.validateMinLength(m, y)) break;
            return void this.generateMessage(r, h, y);
          case n:
            if (!y) break;
            if (this.validateMaxLength(m, y)) break;
            return void this.generateMessage(n, h, y);
          case a:
            if (!y) break;
            if (this.validatePhone(m)) break;
            return void this.generateMessage(a, h);
          case o:
            if (!y) break;
            if (this.validatePassword(m)) break;
            return void this.generateMessage(o, h);
          case u:
            if (!y || "object" !== ("undefined" == typeof y ? "undefined" : _typeof(y))) break;
            if (y["default"] && this.validateStrengthPass(m)) break;
            if (y.custom) {
              var E = void 0;
              try {
                E = new RegExp(y.custom);
              } catch (w) {
                E = this.REGEXP.strengthPass, console.error("Custom regexp for strength rule is not valid. Default regexp was used.");
              }
              if (E.test(m)) break;
            }
            return void this.generateMessage(u, h);
          case s:
            if (!y) break;
            if (this.validateZip(m)) break;
            return void this.generateMessage(s, h);
          case l:
            if (v) break;
            if (!y) break;
            var k = y.url,
              _ = y.successAnswer,
              P = y.method,
              R = y.sendParam,
              S = this.$form.querySelector('input[data-validate-field="' + h + '"]');
            return this.setterEventListener(S, "keyup", this.handlerKeyup, "remove"), void this.promisesRemote.push(this.validateRemote({
              name: h,
              value: m,
              url: k,
              method: P,
              sendParam: R,
              successAnswer: _
            }));
        }
      }
    },
    clearErrors: function clearErrors() {
      for (var e = document.querySelectorAll(".js-validate-error-label"), t = 0, i = e.length; t < i; ++t) e[t].remove();
      e = document.querySelectorAll(".js-validate-error-field");
      for (var r = 0, n = e.length; r < n; ++r) e[r].classList.remove("js-validate-error-field"), e[r].style.border = "", e[r].style.color = "";
    },
    renderErrors: function renderErrors() {
      var e = this;
      if (this.clearErrors(), this.unlockForm(), this.isValidationSuccess = !1, 0 === Object.keys(this.result).length) return void (this.isValidationSuccess = !0);
      for (var t in this.result) {
        var i = this.result[t].message,
          r = this.$form.querySelectorAll('[data-validate-field="' + t + '"]'),
          n = r[r.length - 1],
          o = document.createElement("div");
        if (o.innerHTML = i, o.className = "js-validate-error-label", o.setAttribute("style", "color: " + this.colorWrong), n.style.border = "1px solid " + this.colorWrong, n.style.color = "" + this.colorWrong, n.classList.add("js-validate-error-field"), "checkbox" === n.type || "radio" === n.type) {
          var s = document.querySelector('label[for="' + n.getAttribute("id") + '"]');
          "label" === n.parentNode.tagName.toLowerCase() ? n.parentNode.parentNode.insertBefore(o, null) : s ? s.parentNode.insertBefore(o, s.nextSibling) : n.parentNode.insertBefore(o, n.nextSibling);
        } else n.parentNode.insertBefore(o, n.nextSibling);
      }
      this.tooltipSelectorWrap.length && (this.state.tooltipsTimer = setTimeout(function () {
        e.hideTooltips();
      }, this.tooltipFadeOutTime));
    },
    hideTooltips: function hideTooltips() {
      var e = this,
        t = document.querySelectorAll(".js-validate-error-label");
      t.forEach(function (t) {
        t.classList.add(e.tooltipFadeOutClass);
      }), this.state.tooltipsTimer = null;
    },
    lockForm: function lockForm() {
      for (var e = this.$form.querySelectorAll("input, textarea, button, select"), t = 0, i = e.length; t < i; ++t) e[t].setAttribute("disabled", "disabled"), e[t].style.pointerEvents = "none", e[t].style.webitFilter = "grayscale(100%)", e[t].style.filter = "grayscale(100%)";
    },
    unlockForm: function unlockForm() {
      for (var e = this.$form.querySelectorAll("input, textarea, button, select"), t = 0, i = e.length; t < i; ++t) e[t].removeAttribute("disabled"), e[t].style.pointerEvents = "", e[t].style.webitFilter = "", e[t].style.filter = "";
    }
  }, e.JustValidate = f;
}(window);
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
!function (t, e) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "undefined" != typeof module ? e(exports) : "function" == typeof define && define.amd ? define(["exports"], e) : e((t = "undefined" != typeof globalThis ? globalThis : t || self).noUiSlider = {});
}(void 0, function (ot) {
  "use strict";

  function n(t) {
    return "object" == _typeof(t) && "function" == typeof t.to;
  }
  function st(t) {
    t.parentElement.removeChild(t);
  }
  function at(t) {
    return null != t;
  }
  function lt(t) {
    t.preventDefault();
  }
  function i(t) {
    return "number" == typeof t && !isNaN(t) && isFinite(t);
  }
  function ut(t, e, r) {
    0 < r && (ft(t, e), setTimeout(function () {
      dt(t, e);
    }, r));
  }
  function ct(t) {
    return Math.max(Math.min(t, 100), 0);
  }
  function pt(t) {
    return Array.isArray(t) ? t : [t];
  }
  function e(t) {
    t = (t = String(t)).split(".");
    return 1 < t.length ? t[1].length : 0;
  }
  function ft(t, e) {
    t.classList && !/\s/.test(e) ? t.classList.add(e) : t.className += " " + e;
  }
  function dt(t, e) {
    t.classList && !/\s/.test(e) ? t.classList.remove(e) : t.className = t.className.replace(new RegExp("(^|\\b)" + e.split(" ").join("|") + "(\\b|$)", "gi"), " ");
  }
  function ht(t) {
    var e = void 0 !== window.pageXOffset,
      r = "CSS1Compat" === (t.compatMode || "");
    return {
      x: e ? window.pageXOffset : (r ? t.documentElement : t.body).scrollLeft,
      y: e ? window.pageYOffset : (r ? t.documentElement : t.body).scrollTop
    };
  }
  function s(t, e) {
    return 100 / (e - t);
  }
  function a(t, e, r) {
    return 100 * e / (t[r + 1] - t[r]);
  }
  function l(t, e) {
    for (var r = 1; t >= e[r];) r += 1;
    return r;
  }
  function r(t, e, r) {
    if (r >= t.slice(-1)[0]) return 100;
    var n = l(r, t),
      i = t[n - 1],
      o = t[n],
      t = e[n - 1],
      n = e[n];
    return t + (r = r, a(o = [i, o], o[0] < 0 ? r + Math.abs(o[0]) : r - o[0], 0) / s(t, n));
  }
  function o(t, e, r, n) {
    if (100 === n) return n;
    var i = l(n, t),
      o = t[i - 1],
      s = t[i];
    return r ? (s - o) / 2 < n - o ? s : o : e[i - 1] ? t[i - 1] + (t = n - t[i - 1], i = e[i - 1], Math.round(t / i) * i) : n;
  }
  ot.PipsMode = void 0, (H = ot.PipsMode || (ot.PipsMode = {})).Range = "range", H.Steps = "steps", H.Positions = "positions", H.Count = "count", H.Values = "values", ot.PipsType = void 0, (H = ot.PipsType || (ot.PipsType = {}))[H.None = -1] = "None", H[H.NoValue = 0] = "NoValue", H[H.LargeValue = 1] = "LargeValue", H[H.SmallValue = 2] = "SmallValue";
  var u = (t.prototype.getDistance = function (t) {
    for (var e = [], r = 0; r < this.xNumSteps.length - 1; r++) e[r] = a(this.xVal, t, r);
    return e;
  }, t.prototype.getAbsoluteDistance = function (t, e, r) {
    var n = 0;
    if (t < this.xPct[this.xPct.length - 1]) for (; t > this.xPct[n + 1];) n++;else t === this.xPct[this.xPct.length - 1] && (n = this.xPct.length - 2);
    r || t !== this.xPct[n + 1] || n++;
    for (var i, o = 1, s = (e = null === e ? [] : e)[n], a = 0, l = 0, u = 0, c = r ? (t - this.xPct[n]) / (this.xPct[n + 1] - this.xPct[n]) : (this.xPct[n + 1] - t) / (this.xPct[n + 1] - this.xPct[n]); 0 < s;) i = this.xPct[n + 1 + u] - this.xPct[n + u], 100 < e[n + u] * o + 100 - 100 * c ? (a = i * c, o = (s - 100 * c) / e[n + u], c = 1) : (a = e[n + u] * i / 100 * o, o = 0), r ? (l -= a, 1 <= this.xPct.length + u && u--) : (l += a, 1 <= this.xPct.length - u && u++), s = e[n + u] * o;
    return t + l;
  }, t.prototype.toStepping = function (t) {
    return t = r(this.xVal, this.xPct, t);
  }, t.prototype.fromStepping = function (t) {
    return function (t, e, r) {
      if (100 <= r) return t.slice(-1)[0];
      var n = l(r, e),
        i = t[n - 1],
        o = t[n],
        t = e[n - 1],
        n = e[n];
      return (r - t) * s(t, n) * ((o = [i, o])[1] - o[0]) / 100 + o[0];
    }(this.xVal, this.xPct, t);
  }, t.prototype.getStep = function (t) {
    return t = o(this.xPct, this.xSteps, this.snap, t);
  }, t.prototype.getDefaultStep = function (t, e, r) {
    var n = l(t, this.xPct);
    return (100 === t || e && t === this.xPct[n - 1]) && (n = Math.max(n - 1, 1)), (this.xVal[n] - this.xVal[n - 1]) / r;
  }, t.prototype.getNearbySteps = function (t) {
    t = l(t, this.xPct);
    return {
      stepBefore: {
        startValue: this.xVal[t - 2],
        step: this.xNumSteps[t - 2],
        highestStep: this.xHighestCompleteStep[t - 2]
      },
      thisStep: {
        startValue: this.xVal[t - 1],
        step: this.xNumSteps[t - 1],
        highestStep: this.xHighestCompleteStep[t - 1]
      },
      stepAfter: {
        startValue: this.xVal[t],
        step: this.xNumSteps[t],
        highestStep: this.xHighestCompleteStep[t]
      }
    };
  }, t.prototype.countStepDecimals = function () {
    var t = this.xNumSteps.map(e);
    return Math.max.apply(null, t);
  }, t.prototype.hasNoSize = function () {
    return this.xVal[0] === this.xVal[this.xVal.length - 1];
  }, t.prototype.convert = function (t) {
    return this.getStep(this.toStepping(t));
  }, t.prototype.handleEntryPoint = function (t, e) {
    t = "min" === t ? 0 : "max" === t ? 100 : parseFloat(t);
    if (!i(t) || !i(e[0])) throw new Error("noUiSlider: 'range' value isn't numeric.");
    this.xPct.push(t), this.xVal.push(e[0]);
    e = Number(e[1]);
    t ? this.xSteps.push(!isNaN(e) && e) : isNaN(e) || (this.xSteps[0] = e), this.xHighestCompleteStep.push(0);
  }, t.prototype.handleStepPoint = function (t, e) {
    e && (this.xVal[t] !== this.xVal[t + 1] ? (this.xSteps[t] = a([this.xVal[t], this.xVal[t + 1]], e, 0) / s(this.xPct[t], this.xPct[t + 1]), e = (this.xVal[t + 1] - this.xVal[t]) / this.xNumSteps[t], e = Math.ceil(Number(e.toFixed(3)) - 1), e = this.xVal[t] + this.xNumSteps[t] * e, this.xHighestCompleteStep[t] = e) : this.xSteps[t] = this.xHighestCompleteStep[t] = this.xVal[t]);
  }, t);
  function t(e, t, r) {
    var n;
    this.xPct = [], this.xVal = [], this.xSteps = [], this.xNumSteps = [], this.xHighestCompleteStep = [], this.xSteps = [r || !1], this.xNumSteps = [!1], this.snap = t;
    var i = [];
    for (Object.keys(e).forEach(function (t) {
      i.push([pt(e[t]), t]);
    }), i.sort(function (t, e) {
      return t[0][0] - e[0][0];
    }), n = 0; n < i.length; n++) this.handleEntryPoint(i[n][1], i[n][0]);
    for (this.xNumSteps = this.xSteps.slice(0), n = 0; n < this.xNumSteps.length; n++) this.handleStepPoint(n, this.xNumSteps[n]);
  }
  var c = {
      to: function to(t) {
        return void 0 === t ? "" : t.toFixed(2);
      },
      from: Number
    },
    p = {
      target: "target",
      base: "base",
      origin: "origin",
      handle: "handle",
      handleLower: "handle-lower",
      handleUpper: "handle-upper",
      touchArea: "touch-area",
      horizontal: "horizontal",
      vertical: "vertical",
      background: "background",
      connect: "connect",
      connects: "connects",
      ltr: "ltr",
      rtl: "rtl",
      textDirectionLtr: "txt-dir-ltr",
      textDirectionRtl: "txt-dir-rtl",
      draggable: "draggable",
      drag: "state-drag",
      tap: "state-tap",
      active: "active",
      tooltip: "tooltip",
      pips: "pips",
      pipsHorizontal: "pips-horizontal",
      pipsVertical: "pips-vertical",
      marker: "marker",
      markerHorizontal: "marker-horizontal",
      markerVertical: "marker-vertical",
      markerNormal: "marker-normal",
      markerLarge: "marker-large",
      markerSub: "marker-sub",
      value: "value",
      valueHorizontal: "value-horizontal",
      valueVertical: "value-vertical",
      valueNormal: "value-normal",
      valueLarge: "value-large",
      valueSub: "value-sub"
    },
    mt = {
      tooltips: ".__tooltips",
      aria: ".__aria"
    };
  function f(t, e) {
    if (!i(e)) throw new Error("noUiSlider: 'step' is not numeric.");
    t.singleStep = e;
  }
  function d(t, e) {
    if (!i(e)) throw new Error("noUiSlider: 'keyboardPageMultiplier' is not numeric.");
    t.keyboardPageMultiplier = e;
  }
  function h(t, e) {
    if (!i(e)) throw new Error("noUiSlider: 'keyboardMultiplier' is not numeric.");
    t.keyboardMultiplier = e;
  }
  function m(t, e) {
    if (!i(e)) throw new Error("noUiSlider: 'keyboardDefaultStep' is not numeric.");
    t.keyboardDefaultStep = e;
  }
  function g(t, e) {
    if ("object" != _typeof(e) || Array.isArray(e)) throw new Error("noUiSlider: 'range' is not an object.");
    if (void 0 === e.min || void 0 === e.max) throw new Error("noUiSlider: Missing 'min' or 'max' in 'range'.");
    t.spectrum = new u(e, t.snap || !1, t.singleStep);
  }
  function v(t, e) {
    if (e = pt(e), !Array.isArray(e) || !e.length) throw new Error("noUiSlider: 'start' option is incorrect.");
    t.handles = e.length, t.start = e;
  }
  function b(t, e) {
    if ("boolean" != typeof e) throw new Error("noUiSlider: 'snap' option must be a boolean.");
    t.snap = e;
  }
  function S(t, e) {
    if ("boolean" != typeof e) throw new Error("noUiSlider: 'animate' option must be a boolean.");
    t.animate = e;
  }
  function x(t, e) {
    if ("number" != typeof e) throw new Error("noUiSlider: 'animationDuration' option must be a number.");
    t.animationDuration = e;
  }
  function y(t, e) {
    var r,
      n = [!1];
    if ("lower" === e ? e = [!0, !1] : "upper" === e && (e = [!1, !0]), !0 === e || !1 === e) {
      for (r = 1; r < t.handles; r++) n.push(e);
      n.push(!1);
    } else {
      if (!Array.isArray(e) || !e.length || e.length !== t.handles + 1) throw new Error("noUiSlider: 'connect' option doesn't match handle count.");
      n = e;
    }
    t.connect = n;
  }
  function w(t, e) {
    switch (e) {
      case "horizontal":
        t.ort = 0;
        break;
      case "vertical":
        t.ort = 1;
        break;
      default:
        throw new Error("noUiSlider: 'orientation' option is invalid.");
    }
  }
  function E(t, e) {
    if (!i(e)) throw new Error("noUiSlider: 'margin' option must be numeric.");
    0 !== e && (t.margin = t.spectrum.getDistance(e));
  }
  function P(t, e) {
    if (!i(e)) throw new Error("noUiSlider: 'limit' option must be numeric.");
    if (t.limit = t.spectrum.getDistance(e), !t.limit || t.handles < 2) throw new Error("noUiSlider: 'limit' option is only supported on linear sliders with 2 or more handles.");
  }
  function C(t, e) {
    var r;
    if (!i(e) && !Array.isArray(e)) throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");
    if (Array.isArray(e) && 2 !== e.length && !i(e[0]) && !i(e[1])) throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");
    if (0 !== e) {
      for (Array.isArray(e) || (e = [e, e]), t.padding = [t.spectrum.getDistance(e[0]), t.spectrum.getDistance(e[1])], r = 0; r < t.spectrum.xNumSteps.length - 1; r++) if (t.padding[0][r] < 0 || t.padding[1][r] < 0) throw new Error("noUiSlider: 'padding' option must be a positive number(s).");
      var n = e[0] + e[1],
        e = t.spectrum.xVal[0];
      if (1 < n / (t.spectrum.xVal[t.spectrum.xVal.length - 1] - e)) throw new Error("noUiSlider: 'padding' option must not exceed 100% of the range.");
    }
  }
  function N(t, e) {
    switch (e) {
      case "ltr":
        t.dir = 0;
        break;
      case "rtl":
        t.dir = 1;
        break;
      default:
        throw new Error("noUiSlider: 'direction' option was not recognized.");
    }
  }
  function V(t, e) {
    if ("string" != typeof e) throw new Error("noUiSlider: 'behaviour' must be a string containing options.");
    var r = 0 <= e.indexOf("tap"),
      n = 0 <= e.indexOf("drag"),
      i = 0 <= e.indexOf("fixed"),
      o = 0 <= e.indexOf("snap"),
      s = 0 <= e.indexOf("hover"),
      a = 0 <= e.indexOf("unconstrained"),
      l = 0 <= e.indexOf("drag-all"),
      e = 0 <= e.indexOf("smooth-steps");
    if (i) {
      if (2 !== t.handles) throw new Error("noUiSlider: 'fixed' behaviour must be used with 2 handles");
      E(t, t.start[1] - t.start[0]);
    }
    if (a && (t.margin || t.limit)) throw new Error("noUiSlider: 'unconstrained' behaviour cannot be used with margin or limit");
    t.events = {
      tap: r || o,
      drag: n,
      dragAll: l,
      smoothSteps: e,
      fixed: i,
      snap: o,
      hover: s,
      unconstrained: a
    };
  }
  function A(t, e) {
    if (!1 !== e) if (!0 === e || n(e)) {
      t.tooltips = [];
      for (var r = 0; r < t.handles; r++) t.tooltips.push(e);
    } else {
      if ((e = pt(e)).length !== t.handles) throw new Error("noUiSlider: must pass a formatter for all handles.");
      e.forEach(function (t) {
        if ("boolean" != typeof t && !n(t)) throw new Error("noUiSlider: 'tooltips' must be passed a formatter or 'false'.");
      }), t.tooltips = e;
    }
  }
  function k(t, e) {
    if (e.length !== t.handles) throw new Error("noUiSlider: must pass a attributes for all handles.");
    t.handleAttributes = e;
  }
  function M(t, e) {
    if (!n(e)) throw new Error("noUiSlider: 'ariaFormat' requires 'to' method.");
    t.ariaFormat = e;
  }
  function U(t, e) {
    if (!n(r = e) || "function" != typeof r.from) throw new Error("noUiSlider: 'format' requires 'to' and 'from' methods.");
    var r;
    t.format = e;
  }
  function D(t, e) {
    if ("boolean" != typeof e) throw new Error("noUiSlider: 'keyboardSupport' option must be a boolean.");
    t.keyboardSupport = e;
  }
  function O(t, e) {
    t.documentElement = e;
  }
  function L(t, e) {
    if ("string" != typeof e && !1 !== e) throw new Error("noUiSlider: 'cssPrefix' must be a string or `false`.");
    t.cssPrefix = e;
  }
  function T(e, r) {
    if ("object" != _typeof(r)) throw new Error("noUiSlider: 'cssClasses' must be an object.");
    "string" == typeof e.cssPrefix ? (e.cssClasses = {}, Object.keys(r).forEach(function (t) {
      e.cssClasses[t] = e.cssPrefix + r[t];
    })) : e.cssClasses = r;
  }
  function gt(e) {
    var r = {
        margin: null,
        limit: null,
        padding: null,
        animate: !0,
        animationDuration: 300,
        ariaFormat: c,
        format: c
      },
      n = {
        step: {
          r: !1,
          t: f
        },
        keyboardPageMultiplier: {
          r: !1,
          t: d
        },
        keyboardMultiplier: {
          r: !1,
          t: h
        },
        keyboardDefaultStep: {
          r: !1,
          t: m
        },
        start: {
          r: !0,
          t: v
        },
        connect: {
          r: !0,
          t: y
        },
        direction: {
          r: !0,
          t: N
        },
        snap: {
          r: !1,
          t: b
        },
        animate: {
          r: !1,
          t: S
        },
        animationDuration: {
          r: !1,
          t: x
        },
        range: {
          r: !0,
          t: g
        },
        orientation: {
          r: !1,
          t: w
        },
        margin: {
          r: !1,
          t: E
        },
        limit: {
          r: !1,
          t: P
        },
        padding: {
          r: !1,
          t: C
        },
        behaviour: {
          r: !0,
          t: V
        },
        ariaFormat: {
          r: !1,
          t: M
        },
        format: {
          r: !1,
          t: U
        },
        tooltips: {
          r: !1,
          t: A
        },
        keyboardSupport: {
          r: !0,
          t: D
        },
        documentElement: {
          r: !1,
          t: O
        },
        cssPrefix: {
          r: !0,
          t: L
        },
        cssClasses: {
          r: !0,
          t: T
        },
        handleAttributes: {
          r: !1,
          t: k
        }
      },
      i = {
        connect: !1,
        direction: "ltr",
        behaviour: "tap",
        orientation: "horizontal",
        keyboardSupport: !0,
        cssPrefix: "noUi-",
        cssClasses: p,
        keyboardPageMultiplier: 5,
        keyboardMultiplier: 1,
        keyboardDefaultStep: 10
      };
    e.format && !e.ariaFormat && (e.ariaFormat = e.format), Object.keys(n).forEach(function (t) {
      if (at(e[t]) || void 0 !== i[t]) n[t].t(r, (at(e[t]) ? e : i)[t]);else if (n[t].r) throw new Error("noUiSlider: '" + t + "' is required.");
    }), r.pips = e.pips;
    var t = document.createElement("div"),
      o = void 0 !== t.style.msTransform,
      t = void 0 !== t.style.transform;
    r.transformRule = t ? "transform" : o ? "msTransform" : "webkitTransform";
    return r.style = [["left", "top"], ["right", "bottom"]][r.dir][r.ort], r;
  }
  function j(t, f, o) {
    var i,
      l,
      a,
      n,
      s,
      u,
      c = window.navigator.pointerEnabled ? {
        start: "pointerdown",
        move: "pointermove",
        end: "pointerup"
      } : window.navigator.msPointerEnabled ? {
        start: "MSPointerDown",
        move: "MSPointerMove",
        end: "MSPointerUp"
      } : {
        start: "mousedown touchstart",
        move: "mousemove touchmove",
        end: "mouseup touchend"
      },
      p = window.CSS && CSS.supports && CSS.supports("touch-action", "none") && function () {
        var t = !1;
        try {
          var e = Object.defineProperty({}, "passive", {
            get: function get() {
              t = !0;
            }
          });
          window.addEventListener("test", null, e);
        } catch (t) {}
        return t;
      }(),
      d = t,
      S = f.spectrum,
      h = [],
      m = [],
      g = [],
      v = 0,
      b = {},
      x = t.ownerDocument,
      y = f.documentElement || x.documentElement,
      w = x.body,
      E = "rtl" === x.dir || 1 === f.ort ? 0 : 100;
    function P(t, e) {
      var r = x.createElement("div");
      return e && ft(r, e), t.appendChild(r), r;
    }
    function C(t, e) {
      var r,
        t = P(t, f.cssClasses.origin),
        n = P(t, f.cssClasses.handle);
      return P(n, f.cssClasses.touchArea), n.setAttribute("data-handle", String(e)), f.keyboardSupport && (n.setAttribute("tabindex", "0"), n.addEventListener("keydown", function (t) {
        return function (t, e) {
          if (V() || A(e)) return !1;
          var r = ["Left", "Right"],
            n = ["Down", "Up"],
            i = ["PageDown", "PageUp"],
            o = ["Home", "End"];
          f.dir && !f.ort ? r.reverse() : f.ort && !f.dir && (n.reverse(), i.reverse());
          var s = t.key.replace("Arrow", ""),
            a = s === i[0],
            l = s === i[1],
            i = s === n[0] || s === r[0] || a,
            n = s === n[1] || s === r[1] || l,
            r = s === o[0],
            o = s === o[1];
          if (!(i || n || r || o)) return !0;
          if (t.preventDefault(), n || i) {
            var u = i ? 0 : 1,
              u = nt(e)[u];
            if (null === u) return !1;
            !1 === u && (u = S.getDefaultStep(m[e], i, f.keyboardDefaultStep)), u *= l || a ? f.keyboardPageMultiplier : f.keyboardMultiplier, u = Math.max(u, 1e-7), u *= i ? -1 : 1, u = h[e] + u;
          } else u = o ? f.spectrum.xVal[f.spectrum.xVal.length - 1] : f.spectrum.xVal[0];
          return Q(e, S.toStepping(u), !0, !0), I("slide", e), I("update", e), I("change", e), I("set", e), !1;
        }(t, e);
      })), void 0 !== f.handleAttributes && (r = f.handleAttributes[e], Object.keys(r).forEach(function (t) {
        n.setAttribute(t, r[t]);
      })), n.setAttribute("role", "slider"), n.setAttribute("aria-orientation", f.ort ? "vertical" : "horizontal"), 0 === e ? ft(n, f.cssClasses.handleLower) : e === f.handles - 1 && ft(n, f.cssClasses.handleUpper), t.handle = n, t;
    }
    function N(t, e) {
      return !!e && P(t, f.cssClasses.connect);
    }
    function e(t, e) {
      return !(!f.tooltips || !f.tooltips[e]) && P(t.firstChild, f.cssClasses.tooltip);
    }
    function V() {
      return d.hasAttribute("disabled");
    }
    function A(t) {
      return l[t].hasAttribute("disabled");
    }
    function k() {
      s && (Y("update" + mt.tooltips), s.forEach(function (t) {
        t && st(t);
      }), s = null);
    }
    function M() {
      k(), s = l.map(e), X("update" + mt.tooltips, function (t, e, r) {
        s && f.tooltips && !1 !== s[e] && (t = t[e], !0 !== f.tooltips[e] && (t = f.tooltips[e].to(r[e])), s[e].innerHTML = t);
      });
    }
    function U(t, e) {
      return t.map(function (t) {
        return S.fromStepping(e ? S.getStep(t) : t);
      });
    }
    function D(d) {
      var h = function (t) {
          if (t.mode === ot.PipsMode.Range || t.mode === ot.PipsMode.Steps) return S.xVal;
          if (t.mode !== ot.PipsMode.Count) return t.mode === ot.PipsMode.Positions ? U(t.values, t.stepped) : t.mode === ot.PipsMode.Values ? t.stepped ? t.values.map(function (t) {
            return S.fromStepping(S.getStep(S.toStepping(t)));
          }) : t.values : [];
          if (t.values < 2) throw new Error("noUiSlider: 'values' (>= 2) required for mode 'count'.");
          for (var e = t.values - 1, r = 100 / e, n = []; e--;) n[e] = e * r;
          return n.push(100), U(n, t.stepped);
        }(d),
        m = {},
        t = S.xVal[0],
        e = S.xVal[S.xVal.length - 1],
        g = !1,
        v = !1,
        b = 0;
      return (h = h.slice().sort(function (t, e) {
        return t - e;
      }).filter(function (t) {
        return !this[t] && (this[t] = !0);
      }, {}))[0] !== t && (h.unshift(t), g = !0), h[h.length - 1] !== e && (h.push(e), v = !0), h.forEach(function (t, e) {
        var r,
          n,
          i,
          o,
          s,
          a,
          l,
          u,
          t = t,
          c = h[e + 1],
          p = d.mode === ot.PipsMode.Steps,
          f = (f = p ? S.xNumSteps[e] : f) || c - t;
        for (void 0 === c && (c = t), f = Math.max(f, 1e-7), r = t; r <= c; r = Number((r + f).toFixed(7))) {
          for (a = (o = (i = S.toStepping(r)) - b) / (d.density || 1), u = o / (l = Math.round(a)), n = 1; n <= l; n += 1) m[(s = b + n * u).toFixed(5)] = [S.fromStepping(s), 0];
          a = -1 < h.indexOf(r) ? ot.PipsType.LargeValue : p ? ot.PipsType.SmallValue : ot.PipsType.NoValue, !e && g && r !== c && (a = 0), r === c && v || (m[i.toFixed(5)] = [r, a]), b = i;
        }
      }), m;
    }
    function O(i, o, s) {
      var t,
        a = x.createElement("div"),
        n = ((t = {})[ot.PipsType.None] = "", t[ot.PipsType.NoValue] = f.cssClasses.valueNormal, t[ot.PipsType.LargeValue] = f.cssClasses.valueLarge, t[ot.PipsType.SmallValue] = f.cssClasses.valueSub, t),
        l = ((t = {})[ot.PipsType.None] = "", t[ot.PipsType.NoValue] = f.cssClasses.markerNormal, t[ot.PipsType.LargeValue] = f.cssClasses.markerLarge, t[ot.PipsType.SmallValue] = f.cssClasses.markerSub, t),
        u = [f.cssClasses.valueHorizontal, f.cssClasses.valueVertical],
        c = [f.cssClasses.markerHorizontal, f.cssClasses.markerVertical];
      function p(t, e) {
        var r = e === f.cssClasses.value;
        return e + " " + (r ? u : c)[f.ort] + " " + (r ? n : l)[t];
      }
      return ft(a, f.cssClasses.pips), ft(a, 0 === f.ort ? f.cssClasses.pipsHorizontal : f.cssClasses.pipsVertical), Object.keys(i).forEach(function (t) {
        var e, r, n;
        r = i[e = t][0], n = i[t][1], (n = o ? o(r, n) : n) !== ot.PipsType.None && ((t = P(a, !1)).className = p(n, f.cssClasses.marker), t.style[f.style] = e + "%", n > ot.PipsType.NoValue && ((t = P(a, !1)).className = p(n, f.cssClasses.value), t.setAttribute("data-value", String(r)), t.style[f.style] = e + "%", t.innerHTML = String(s.to(r))));
      }), a;
    }
    function L() {
      n && (st(n), n = null);
    }
    function T(t) {
      L();
      var e = D(t),
        r = t.filter,
        t = t.format || {
          to: function to(t) {
            return String(Math.round(t));
          }
        };
      return n = d.appendChild(O(e, r, t));
    }
    function j() {
      var t = i.getBoundingClientRect(),
        e = "offset" + ["Width", "Height"][f.ort];
      return 0 === f.ort ? t.width || i[e] : t.height || i[e];
    }
    function z(n, i, o, s) {
      function e(t) {
        var e,
          r = function (e, t, r) {
            var n = 0 === e.type.indexOf("touch"),
              i = 0 === e.type.indexOf("mouse"),
              o = 0 === e.type.indexOf("pointer"),
              s = 0,
              a = 0;
            0 === e.type.indexOf("MSPointer") && (o = !0);
            if ("mousedown" === e.type && !e.buttons && !e.touches) return !1;
            if (n) {
              var l = function l(t) {
                t = t.target;
                return t === r || r.contains(t) || e.composed && e.composedPath().shift() === r;
              };
              if ("touchstart" === e.type) {
                n = Array.prototype.filter.call(e.touches, l);
                if (1 < n.length) return !1;
                s = n[0].pageX, a = n[0].pageY;
              } else {
                l = Array.prototype.find.call(e.changedTouches, l);
                if (!l) return !1;
                s = l.pageX, a = l.pageY;
              }
            }
            t = t || ht(x), (i || o) && (s = e.clientX + t.x, a = e.clientY + t.y);
            return e.pageOffset = t, e.points = [s, a], e.cursor = i || o, e;
          }(t, s.pageOffset, s.target || i);
        return !!r && !(V() && !s.doNotReject) && (e = d, t = f.cssClasses.tap, !((e.classList ? e.classList.contains(t) : new RegExp("\\b" + t + "\\b").test(e.className)) && !s.doNotReject) && !(n === c.start && void 0 !== r.buttons && 1 < r.buttons) && (!s.hover || !r.buttons) && (p || r.preventDefault(), r.calcPoint = r.points[f.ort], void o(r, s)));
      }
      var r = [];
      return n.split(" ").forEach(function (t) {
        i.addEventListener(t, e, !!p && {
          passive: !0
        }), r.push([t, e]);
      }), r;
    }
    function H(t) {
      var e,
        r,
        n = ct(n = 100 * (t - (n = i, e = f.ort, r = n.getBoundingClientRect(), n = (t = n.ownerDocument).documentElement, t = ht(t), /webkit.*Chrome.*Mobile/i.test(navigator.userAgent) && (t.x = 0), e ? r.top + t.y - n.clientTop : r.left + t.x - n.clientLeft)) / j());
      return f.dir ? 100 - n : n;
    }
    function F(t, e) {
      "mouseout" === t.type && "HTML" === t.target.nodeName && null === t.relatedTarget && _(t, e);
    }
    function R(t, e) {
      if (-1 === navigator.appVersion.indexOf("MSIE 9") && 0 === t.buttons && 0 !== e.buttonsProperty) return _(t, e);
      t = (f.dir ? -1 : 1) * (t.calcPoint - e.startCalcPoint);
      G(0 < t, 100 * t / e.baseSize, e.locations, e.handleNumbers, e.connect);
    }
    function _(t, e) {
      e.handle && (dt(e.handle, f.cssClasses.active), --v), e.listeners.forEach(function (t) {
        y.removeEventListener(t[0], t[1]);
      }), 0 === v && (dt(d, f.cssClasses.drag), K(), t.cursor && (w.style.cursor = "", w.removeEventListener("selectstart", lt))), f.events.smoothSteps && (e.handleNumbers.forEach(function (t) {
        Q(t, m[t], !0, !0, !1, !1);
      }), e.handleNumbers.forEach(function (t) {
        I("update", t);
      })), e.handleNumbers.forEach(function (t) {
        I("change", t), I("set", t), I("end", t);
      });
    }
    function B(t, e) {
      var r, n, i, o;
      e.handleNumbers.some(A) || (1 === e.handleNumbers.length && (o = l[e.handleNumbers[0]].children[0], v += 1, ft(o, f.cssClasses.active)), t.stopPropagation(), n = z(c.move, y, R, {
        target: t.target,
        handle: o,
        connect: e.connect,
        listeners: r = [],
        startCalcPoint: t.calcPoint,
        baseSize: j(),
        pageOffset: t.pageOffset,
        handleNumbers: e.handleNumbers,
        buttonsProperty: t.buttons,
        locations: m.slice()
      }), i = z(c.end, y, _, {
        target: t.target,
        handle: o,
        listeners: r,
        doNotReject: !0,
        handleNumbers: e.handleNumbers
      }), o = z("mouseout", y, F, {
        target: t.target,
        handle: o,
        listeners: r,
        doNotReject: !0,
        handleNumbers: e.handleNumbers
      }), r.push.apply(r, n.concat(i, o)), t.cursor && (w.style.cursor = getComputedStyle(t.target).cursor, 1 < l.length && ft(d, f.cssClasses.drag), w.addEventListener("selectstart", lt, !1)), e.handleNumbers.forEach(function (t) {
        I("start", t);
      }));
    }
    function r(t) {
      t.stopPropagation();
      var i,
        o,
        s,
        e = H(t.calcPoint),
        r = (i = e, s = !(o = 100), l.forEach(function (t, e) {
          var r, n;
          A(e) || (r = m[e], ((n = Math.abs(r - i)) < o || n <= o && r < i || 100 === n && 100 === o) && (s = e, o = n));
        }), s);
      !1 !== r && (f.events.snap || ut(d, f.cssClasses.tap, f.animationDuration), Q(r, e, !0, !0), K(), I("slide", r, !0), I("update", r, !0), f.events.snap ? B(t, {
        handleNumbers: [r]
      }) : (I("change", r, !0), I("set", r, !0)));
    }
    function q(t) {
      var t = H(t.calcPoint),
        t = S.getStep(t),
        e = S.fromStepping(t);
      Object.keys(b).forEach(function (t) {
        "hover" === t.split(".")[0] && b[t].forEach(function (t) {
          t.call(it, e);
        });
      });
    }
    function X(t, e) {
      b[t] = b[t] || [], b[t].push(e), "update" === t.split(".")[0] && l.forEach(function (t, e) {
        I("update", e);
      });
    }
    function Y(t) {
      var n = t && t.split(".")[0],
        i = n ? t.substring(n.length) : t;
      Object.keys(b).forEach(function (t) {
        var e = t.split(".")[0],
          r = t.substring(e.length);
        n && n !== e || i && i !== r || ((e = r) !== mt.aria && e !== mt.tooltips || i === r) && delete b[t];
      });
    }
    function I(r, n, i) {
      Object.keys(b).forEach(function (t) {
        var e = t.split(".")[0];
        r === e && b[t].forEach(function (t) {
          t.call(it, h.map(f.format.to), n, h.slice(), i || !1, m.slice(), it);
        });
      });
    }
    function W(t, e, r, n, i, o, s) {
      var a;
      return 1 < l.length && !f.events.unconstrained && (n && 0 < e && (a = S.getAbsoluteDistance(t[e - 1], f.margin, !1), r = Math.max(r, a)), i && e < l.length - 1 && (a = S.getAbsoluteDistance(t[e + 1], f.margin, !0), r = Math.min(r, a))), 1 < l.length && f.limit && (n && 0 < e && (a = S.getAbsoluteDistance(t[e - 1], f.limit, !1), r = Math.min(r, a)), i && e < l.length - 1 && (a = S.getAbsoluteDistance(t[e + 1], f.limit, !0), r = Math.max(r, a))), f.padding && (0 === e && (a = S.getAbsoluteDistance(0, f.padding[0], !1), r = Math.max(r, a)), e === l.length - 1 && (a = S.getAbsoluteDistance(100, f.padding[1], !0), r = Math.min(r, a))), !((r = ct(r = !s ? S.getStep(r) : r)) === t[e] && !o) && r;
    }
    function $(t, e) {
      var r = f.ort;
      return (r ? e : t) + ", " + (r ? t : e);
    }
    function G(t, r, n, e, i) {
      var o = n.slice(),
        s = e[0],
        a = f.events.smoothSteps,
        l = [!t, t],
        u = [t, !t];
      e = e.slice(), t && e.reverse(), 1 < e.length ? e.forEach(function (t, e) {
        e = W(o, t, o[t] + r, l[e], u[e], !1, a);
        !1 === e ? r = 0 : (r = e - o[t], o[t] = e);
      }) : l = u = [!0];
      var c = !1;
      e.forEach(function (t, e) {
        c = Q(t, n[t] + r, l[e], u[e], !1, a) || c;
      }), c && (e.forEach(function (t) {
        I("update", t), I("slide", t);
      }), null != i && I("drag", s));
    }
    function J(t, e) {
      return f.dir ? 100 - t - e : t;
    }
    function K() {
      g.forEach(function (t) {
        var e = 50 < m[t] ? -1 : 1,
          e = 3 + (l.length + e * t);
        l[t].style.zIndex = String(e);
      });
    }
    function Q(t, e, r, n, i, o) {
      return !1 !== (e = i ? e : W(m, t, e, r, n, !1, o)) && (e = e, m[t = t] = e, h[t] = S.fromStepping(e), e = "translate(" + $(J(e, 0) - E + "%", "0") + ")", l[t].style[f.transformRule] = e, Z(t), Z(t + 1), !0);
    }
    function Z(t) {
      var e, r;
      a[t] && (r = 100, e = "translate(" + $(J(e = (e = 0) !== t ? m[t - 1] : e, r = (r = t !== a.length - 1 ? m[t] : r) - e) + "%", "0") + ")", r = "scale(" + $(r / 100, "1") + ")", a[t].style[f.transformRule] = e + " " + r);
    }
    function tt(t, e) {
      return null === t || !1 === t || void 0 === t ? m[e] : ("number" == typeof t && (t = String(t)), !1 === (t = !1 !== (t = f.format.from(t)) ? S.toStepping(t) : t) || isNaN(t) ? m[e] : t);
    }
    function et(t, e, r) {
      var n = pt(t),
        t = void 0 === m[0];
      e = void 0 === e || e, f.animate && !t && ut(d, f.cssClasses.tap, f.animationDuration), g.forEach(function (t) {
        Q(t, tt(n[t], t), !0, !1, r);
      });
      var i,
        o = 1 === g.length ? 0 : 1;
      for (t && S.hasNoSize() && (r = !0, m[0] = 0, 1 < g.length && (i = 100 / (g.length - 1), g.forEach(function (t) {
        m[t] = t * i;
      }))); o < g.length; ++o) g.forEach(function (t) {
        Q(t, m[t], !0, !0, r);
      });
      K(), g.forEach(function (t) {
        I("update", t), null !== n[t] && e && I("set", t);
      });
    }
    function rt(t) {
      if (t = void 0 === t ? !1 : t) return 1 === h.length ? h[0] : h.slice(0);
      t = h.map(f.format.to);
      return 1 === t.length ? t[0] : t;
    }
    function nt(t) {
      var e = m[t],
        r = S.getNearbySteps(e),
        n = h[t],
        i = r.thisStep.step,
        t = null;
      if (f.snap) return [n - r.stepBefore.startValue || null, r.stepAfter.startValue - n || null];
      !1 !== i && n + i > r.stepAfter.startValue && (i = r.stepAfter.startValue - n), t = n > r.thisStep.startValue ? r.thisStep.step : !1 !== r.stepBefore.step && n - r.stepBefore.highestStep, 100 === e ? i = null : 0 === e && (t = null);
      e = S.countStepDecimals();
      return null !== i && !1 !== i && (i = Number(i.toFixed(e))), [t = null !== t && !1 !== t ? Number(t.toFixed(e)) : t, i];
    }
    ft(t = d, f.cssClasses.target), 0 === f.dir ? ft(t, f.cssClasses.ltr) : ft(t, f.cssClasses.rtl), 0 === f.ort ? ft(t, f.cssClasses.horizontal) : ft(t, f.cssClasses.vertical), ft(t, "rtl" === getComputedStyle(t).direction ? f.cssClasses.textDirectionRtl : f.cssClasses.textDirectionLtr), i = P(t, f.cssClasses.base), function (t, e) {
      var r = P(e, f.cssClasses.connects);
      l = [], (a = []).push(N(r, t[0]));
      for (var n = 0; n < f.handles; n++) l.push(C(e, n)), g[n] = n, a.push(N(r, t[n + 1]));
    }(f.connect, i), (u = f.events).fixed || l.forEach(function (t, e) {
      z(c.start, t.children[0], B, {
        handleNumbers: [e]
      });
    }), u.tap && z(c.start, i, r, {}), u.hover && z(c.move, i, q, {
      hover: !0
    }), u.drag && a.forEach(function (e, t) {
      var r, n, i, o, s;
      !1 !== e && 0 !== t && t !== a.length - 1 && (r = l[t - 1], n = l[t], i = [e], o = [r, n], s = [t - 1, t], ft(e, f.cssClasses.draggable), u.fixed && (i.push(r.children[0]), i.push(n.children[0])), u.dragAll && (o = l, s = g), i.forEach(function (t) {
        z(c.start, t, B, {
          handles: o,
          handleNumbers: s,
          connect: e
        });
      }));
    }), et(f.start), f.pips && T(f.pips), f.tooltips && M(), Y("update" + mt.aria), X("update" + mt.aria, function (t, e, o, r, s) {
      g.forEach(function (t) {
        var e = l[t],
          r = W(m, t, 0, !0, !0, !0),
          n = W(m, t, 100, !0, !0, !0),
          i = s[t],
          t = String(f.ariaFormat.to(o[t])),
          r = S.fromStepping(r).toFixed(1),
          n = S.fromStepping(n).toFixed(1),
          i = S.fromStepping(i).toFixed(1);
        e.children[0].setAttribute("aria-valuemin", r), e.children[0].setAttribute("aria-valuemax", n), e.children[0].setAttribute("aria-valuenow", i), e.children[0].setAttribute("aria-valuetext", t);
      });
    });
    var it = {
      destroy: function destroy() {
        for (Y(mt.aria), Y(mt.tooltips), Object.keys(f.cssClasses).forEach(function (t) {
          dt(d, f.cssClasses[t]);
        }); d.firstChild;) d.removeChild(d.firstChild);
        delete d.noUiSlider;
      },
      steps: function steps() {
        return g.map(nt);
      },
      on: X,
      off: Y,
      get: rt,
      set: et,
      setHandle: function setHandle(t, e, r, n) {
        if (!(0 <= (t = Number(t)) && t < g.length)) throw new Error("noUiSlider: invalid handle number, got: " + t);
        Q(t, tt(e, t), !0, !0, n), I("update", t), r && I("set", t);
      },
      reset: function reset(t) {
        et(f.start, t);
      },
      disable: function disable(t) {
        null != t ? (l[t].setAttribute("disabled", ""), l[t].handle.removeAttribute("tabindex")) : (d.setAttribute("disabled", ""), l.forEach(function (t) {
          t.handle.removeAttribute("tabindex");
        }));
      },
      enable: function enable(t) {
        null != t ? (l[t].removeAttribute("disabled"), l[t].handle.setAttribute("tabindex", "0")) : (d.removeAttribute("disabled"), l.forEach(function (t) {
          t.removeAttribute("disabled"), t.handle.setAttribute("tabindex", "0");
        }));
      },
      __moveHandles: function __moveHandles(t, e, r) {
        G(t, e, m, r);
      },
      options: o,
      updateOptions: function updateOptions(e, t) {
        var r = rt(),
          n = ["margin", "limit", "padding", "range", "animate", "snap", "step", "format", "pips", "tooltips"];
        n.forEach(function (t) {
          void 0 !== e[t] && (o[t] = e[t]);
        });
        var i = gt(o);
        n.forEach(function (t) {
          void 0 !== e[t] && (f[t] = i[t]);
        }), S = i.spectrum, f.margin = i.margin, f.limit = i.limit, f.padding = i.padding, f.pips ? T(f.pips) : L(), (f.tooltips ? M : k)(), m = [], et(at(e.start) ? e.start : r, t);
      },
      target: d,
      removePips: L,
      removeTooltips: k,
      getPositions: function getPositions() {
        return m.slice();
      },
      getTooltips: function getTooltips() {
        return s;
      },
      getOrigins: function getOrigins() {
        return l;
      },
      pips: T
    };
    return it;
  }
  function z(t, e) {
    if (!t || !t.nodeName) throw new Error("noUiSlider: create requires a single element, got: " + t);
    if (t.noUiSlider) throw new Error("noUiSlider: Slider was already initialized.");
    e = j(t, gt(e), e);
    return t.noUiSlider = e;
  }
  var H = {
    __spectrum: u,
    cssClasses: p,
    create: z
  };
  ot.create = z, ot.cssClasses = p, ot["default"] = H, Object.defineProperty(ot, "__esModule", {
    value: !0
  });
});
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatMoney = void 0;
var formatMoney = function formatMoney(money) {
  return new Intl.NumberFormat("ru-RU").format(money);
};
exports.formatMoney = formatMoney;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNob2ljZXMubWluLmpzIiwiaW5kZXguanMiLCJpbnB1dG1hc2subWluLmpzIiwianVzdC12YWxpZGF0ZS5taW4uanMiLCJub3Vpc2xpZGVyLm1pbi5qcyIsInV0aWxzL2Zvcm1hdC5qcyJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJDaG9pY2VzIiwiZSIsInQiLCJpIiwibiIsImV4cG9ydHMiLCJyIiwibCIsImNhbGwiLCJtIiwiYyIsImQiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsIl90eXBlb2YiLCJfX2VzTW9kdWxlIiwiY3JlYXRlIiwiYmluZCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJERUZBVUxUX0NMQVNTTkFNRVMiLCJjb250YWluZXJPdXRlciIsImNvbnRhaW5lcklubmVyIiwiaW5wdXQiLCJpbnB1dENsb25lZCIsImxpc3QiLCJsaXN0SXRlbXMiLCJsaXN0U2luZ2xlIiwibGlzdERyb3Bkb3duIiwiaXRlbSIsIml0ZW1TZWxlY3RhYmxlIiwiaXRlbURpc2FibGVkIiwiaXRlbUNob2ljZSIsInBsYWNlaG9sZGVyIiwiZ3JvdXAiLCJncm91cEhlYWRpbmciLCJidXR0b24iLCJhY3RpdmVTdGF0ZSIsImZvY3VzU3RhdGUiLCJvcGVuU3RhdGUiLCJkaXNhYmxlZFN0YXRlIiwiaGlnaGxpZ2h0ZWRTdGF0ZSIsInNlbGVjdGVkU3RhdGUiLCJmbGlwcGVkU3RhdGUiLCJsb2FkaW5nU3RhdGUiLCJub1Jlc3VsdHMiLCJub0Nob2ljZXMiLCJERUZBVUxUX0NPTkZJRyIsIml0ZW1zIiwiY2hvaWNlcyIsInNpbGVudCIsInJlbmRlckNob2ljZUxpbWl0IiwibWF4SXRlbUNvdW50IiwiYWRkSXRlbXMiLCJhZGRJdGVtRmlsdGVyIiwicmVtb3ZlSXRlbXMiLCJyZW1vdmVJdGVtQnV0dG9uIiwiZWRpdEl0ZW1zIiwiZHVwbGljYXRlSXRlbXNBbGxvd2VkIiwiZGVsaW1pdGVyIiwicGFzdGUiLCJzZWFyY2hFbmFibGVkIiwic2VhcmNoQ2hvaWNlcyIsInNlYXJjaEZsb29yIiwic2VhcmNoUmVzdWx0TGltaXQiLCJzZWFyY2hGaWVsZHMiLCJwb3NpdGlvbiIsInJlc2V0U2Nyb2xsUG9zaXRpb24iLCJzaG91bGRTb3J0Iiwic2hvdWxkU29ydEl0ZW1zIiwic29ydGVyIiwic29ydEJ5QWxwaGEiLCJwbGFjZWhvbGRlclZhbHVlIiwic2VhcmNoUGxhY2Vob2xkZXJWYWx1ZSIsInByZXBlbmRWYWx1ZSIsImFwcGVuZFZhbHVlIiwicmVuZGVyU2VsZWN0ZWRDaG9pY2VzIiwibG9hZGluZ1RleHQiLCJub1Jlc3VsdHNUZXh0Iiwibm9DaG9pY2VzVGV4dCIsIml0ZW1TZWxlY3RUZXh0IiwidW5pcXVlSXRlbVRleHQiLCJjdXN0b21BZGRJdGVtVGV4dCIsImFkZEl0ZW1UZXh0Iiwic2FuaXRpc2UiLCJtYXhJdGVtVGV4dCIsInZhbHVlQ29tcGFyZXIiLCJmdXNlT3B0aW9ucyIsImluY2x1ZGVTY29yZSIsImNhbGxiYWNrT25Jbml0IiwiY2FsbGJhY2tPbkNyZWF0ZVRlbXBsYXRlcyIsImNsYXNzTmFtZXMiLCJFVkVOVFMiLCJzaG93RHJvcGRvd24iLCJoaWRlRHJvcGRvd24iLCJjaGFuZ2UiLCJjaG9pY2UiLCJzZWFyY2giLCJhZGRJdGVtIiwicmVtb3ZlSXRlbSIsImhpZ2hsaWdodEl0ZW0iLCJoaWdobGlnaHRDaG9pY2UiLCJ1bmhpZ2hsaWdodEl0ZW0iLCJBQ1RJT05fVFlQRVMiLCJBRERfQ0hPSUNFIiwiRklMVEVSX0NIT0lDRVMiLCJBQ1RJVkFURV9DSE9JQ0VTIiwiQ0xFQVJfQ0hPSUNFUyIsIkFERF9HUk9VUCIsIkFERF9JVEVNIiwiUkVNT1ZFX0lURU0iLCJISUdITElHSFRfSVRFTSIsIkNMRUFSX0FMTCIsIlJFU0VUX1RPIiwiU0VUX0lTX0xPQURJTkciLCJLRVlfQ09ERVMiLCJCQUNLX0tFWSIsIkRFTEVURV9LRVkiLCJFTlRFUl9LRVkiLCJBX0tFWSIsIkVTQ19LRVkiLCJVUF9LRVkiLCJET1dOX0tFWSIsIlBBR0VfVVBfS0VZIiwiUEFHRV9ET1dOX0tFWSIsIlRFWFRfVFlQRSIsIlNFTEVDVF9PTkVfVFlQRSIsIlNFTEVDVF9NVUxUSVBMRV9UWVBFIiwiU0NST0xMSU5HX1NQRUVEIiwiZ2V0UmFuZG9tTnVtYmVyIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiZ2VuZXJhdGVDaGFycyIsIkFycmF5IiwiZnJvbSIsImxlbmd0aCIsInRvU3RyaW5nIiwiam9pbiIsImdlbmVyYXRlSWQiLCJpZCIsIm5hbWUiLCJyZXBsYWNlIiwiZ2V0VHlwZSIsInNsaWNlIiwiaXNUeXBlIiwid3JhcCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIm5leHRTaWJsaW5nIiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsImFwcGVuZENoaWxkIiwiZ2V0QWRqYWNlbnRFbCIsIm1hdGNoZXMiLCJpc1Njcm9sbGVkSW50b1ZpZXciLCJzY3JvbGxUb3AiLCJvZmZzZXRIZWlnaHQiLCJvZmZzZXRUb3AiLCJzdHJUb0VsIiwidHJpbSIsImlubmVySFRNTCIsImNoaWxkcmVuIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwibGFiZWwiLCJhIiwibG9jYWxlQ29tcGFyZSIsInNlbnNpdGl2aXR5IiwiaWdub3JlUHVuY3R1YXRpb24iLCJudW1lcmljIiwic29ydEJ5U2NvcmUiLCJzY29yZSIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZXhpc3RzSW5BcnJheSIsInNvbWUiLCJjbG9uZU9iamVjdCIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsImRpZmYiLCJrZXlzIiwic29ydCIsImZpbHRlciIsImluZGV4T2YiLCJzZWxmIiwidiIsImgiLCJzdWJzdHJpbmciLCJzcGxpdCIsIklOSVQiLCJSRVBMQUNFIiwiUFJPQkVfVU5LTk9XTl9BQ1RJT04iLCJnZXRQcm90b3R5cGVPZiIsImFyZ3VtZW50cyIsIkVycm9yIiwidSIsImYiLCJwdXNoIiwic3BsaWNlIiwidHlwZSIsImRpc3BhdGNoIiwic3Vic2NyaWJlIiwiZ2V0U3RhdGUiLCJyZXBsYWNlUmVkdWNlciIsIlR5cGVFcnJvciIsIm5leHQiLCJ1bnN1YnNjcmliZSIsIlN0cmluZyIsImZvckVhY2giLCJhcHBseSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJyZWR1Y2UiLCJtYXAiLCJfX2ltcG9ydERlZmF1bHQiLCJkZWZhdWx0U3RhdGUiLCJncm91cHMiLCJsb2FkaW5nIiwiY29tYmluZVJlZHVjZXJzIiwic3RhdGUiLCJlbGVtZW50IiwiSFRNTElucHV0RWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiaXNEaXNhYmxlZCIsImRhdGFzZXQiLCJkaXIiLCJzZXQiLCJjb25jZWFsIiwiY2xhc3NMaXN0IiwiYWRkIiwiaGlkZGVuIiwidGFiSW5kZXgiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJyZXZlYWwiLCJyZW1vdmUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJlbmFibGUiLCJkaXNhYmxlZCIsImRpc2FibGUiLCJ0cmlnZ2VyRXZlbnQiLCJvYnNlcnZhYmxlIiwiX19zcHJlYWRBcnJheXMiLCJfIiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJnIiwieSIsImNvbmZpZyIsImFsbCIsImRlZmF1bHRzIiwib3B0aW9ucyIsImFycmF5TWVyZ2UiLCJjb25zb2xlIiwid2FybiIsInF1ZXJ5U2VsZWN0b3IiLCJfaXNUZXh0RWxlbWVudCIsIl9pc1NlbGVjdE9uZUVsZW1lbnQiLCJfaXNTZWxlY3RNdWx0aXBsZUVsZW1lbnQiLCJfaXNTZWxlY3RFbGVtZW50IiwiaW5jbHVkZXMiLCJSZWdFeHAiLCJ0ZXN0IiwicGFzc2VkRWxlbWVudCIsIldyYXBwZWRJbnB1dCIsIldyYXBwZWRTZWxlY3QiLCJ0ZW1wbGF0ZSIsIl90ZW1wbGF0ZXMiLCJvcHRpb24iLCJpbml0aWFsaXNlZCIsIl9zdG9yZSIsIl9pbml0aWFsU3RhdGUiLCJfY3VycmVudFN0YXRlIiwiX3ByZXZTdGF0ZSIsIl9jdXJyZW50VmFsdWUiLCJfY2FuU2VhcmNoIiwiX2lzU2Nyb2xsaW5nT25JZSIsIl9oaWdobGlnaHRQb3NpdGlvbiIsIl93YXNUYXAiLCJfcGxhY2Vob2xkZXJWYWx1ZSIsIl9nZW5lcmF0ZVBsYWNlaG9sZGVyVmFsdWUiLCJfYmFzZUlkIiwiX2RpcmVjdGlvbiIsImdldENvbXB1dGVkU3R5bGUiLCJkaXJlY3Rpb24iLCJfaWROYW1lcyIsIl9wcmVzZXRHcm91cHMiLCJvcHRpb25Hcm91cHMiLCJfcHJlc2V0T3B0aW9ucyIsIl9wcmVzZXRDaG9pY2VzIiwiX3ByZXNldEl0ZW1zIiwiY29uY2F0Iiwic2VsZWN0ZWQiLCJoYXNBdHRyaWJ1dGUiLCJjdXN0b21Qcm9wZXJ0aWVzIiwiX3JlbmRlciIsIl9vbkZvY3VzIiwiX29uQmx1ciIsIl9vbktleVVwIiwiX29uS2V5RG93biIsIl9vbkNsaWNrIiwiX29uVG91Y2hNb3ZlIiwiX29uVG91Y2hFbmQiLCJfb25Nb3VzZURvd24iLCJfb25Nb3VzZU92ZXIiLCJfb25Gb3JtUmVzZXQiLCJfb25TZWxlY3RLZXkiLCJfb25FbnRlcktleSIsIl9vbkVzY2FwZUtleSIsIl9vbkRpcmVjdGlvbktleSIsIl9vbkRlbGV0ZUtleSIsImlzQWN0aXZlIiwiaW5pdCIsInByZXZlbnRFeHRlbnNpb25zIiwidGVtcGxhdGVzIiwiX2NyZWF0ZVRlbXBsYXRlcyIsIl9jcmVhdGVFbGVtZW50cyIsIl9jcmVhdGVTdHJ1Y3R1cmUiLCJfYWRkRXZlbnRMaXN0ZW5lcnMiLCJkZXN0cm95IiwiX3JlbW92ZUV2ZW50TGlzdGVuZXJzIiwidW53cmFwIiwiY2xlYXJTdG9yZSIsImdyb3VwSWQiLCJnZXRHcm91cEJ5SWQiLCJncm91cFZhbHVlIiwiaGlnaGxpZ2h0QWxsIiwidW5oaWdobGlnaHRBbGwiLCJyZW1vdmVBY3RpdmVJdGVtc0J5VmFsdWUiLCJhY3RpdmVJdGVtcyIsIl9yZW1vdmVJdGVtIiwicmVtb3ZlQWN0aXZlSXRlbXMiLCJyZW1vdmVIaWdobGlnaHRlZEl0ZW1zIiwiaGlnaGxpZ2h0ZWRBY3RpdmVJdGVtcyIsIl90cmlnZ2VyQ2hhbmdlIiwiZHJvcGRvd24iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzaG93Iiwib3BlbiIsImRpc3RhbmNlRnJvbVRvcFdpbmRvdyIsImZvY3VzIiwiaGlkZSIsImNsb3NlIiwicmVtb3ZlQWN0aXZlRGVzY2VuZGFudCIsImJsdXIiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwiX3NldENob2ljZU9ySXRlbSIsInNldENob2ljZUJ5VmFsdWUiLCJpc0FycmF5IiwiX2ZpbmRBbmRTZWxlY3RDaG9pY2VCeVZhbHVlIiwic2V0Q2hvaWNlcyIsIlJlZmVyZW5jZUVycm9yIiwiY2xlYXJDaG9pY2VzIiwiUHJvbWlzZSIsInRoZW4iLCJfaGFuZGxlTG9hZGluZ1N0YXRlIiwiZXJyb3IiLCJyZW1vdmVMb2FkaW5nU3RhdGUiLCJfc3RhcnRMb2FkaW5nIiwiX2FkZEdyb3VwIiwicGFyc2VJbnQiLCJ2YWx1ZUtleSIsImxhYmVsS2V5IiwiX2FkZENob2ljZSIsImlzU2VsZWN0ZWQiLCJfc3RvcExvYWRpbmciLCJjbGVhckFsbCIsImNsZWFySW5wdXQiLCJjbGVhciIsIl9pc1NlYXJjaGluZyIsImFjdGl2YXRlQ2hvaWNlcyIsImlzTG9hZGluZyIsIl9yZW5kZXJDaG9pY2VzIiwiX3JlbmRlckl0ZW1zIiwiYWN0aXZlR3JvdXBzIiwiYWN0aXZlQ2hvaWNlcyIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjaG9pY2VMaXN0Iiwic2Nyb2xsVG9Ub3AiLCJfY3JlYXRlQ2hvaWNlc0ZyYWdtZW50IiwiX2NyZWF0ZUdyb3Vwc0ZyYWdtZW50IiwiY2hpbGROb2RlcyIsIl9jYW5BZGRJdGVtIiwicmVzcG9uc2UiLCJhcHBlbmQiLCJfaGlnaGxpZ2h0Q2hvaWNlIiwiX2dldFRlbXBsYXRlIiwibm90aWNlIiwiaXRlbUxpc3QiLCJfY3JlYXRlSXRlbXNGcmFnbWVudCIsInBsYWNlaG9sZGVyQ2hvaWNlcyIsIm5vcm1hbENob2ljZXMiLCJfc2VsZWN0UGxhY2Vob2xkZXJDaG9pY2UiLCJfYWRkSXRlbSIsImNob2ljZUlkIiwiX2hhbmRsZUJ1dHRvbkFjdGlvbiIsImZpbmQiLCJwbGFjZWhvbGRlckNob2ljZSIsIl9oYW5kbGVJdGVtQWN0aW9uIiwiaGlnaGxpZ2h0ZWQiLCJfaGFuZGxlQ2hvaWNlQWN0aW9uIiwiZ2V0Q2hvaWNlQnlJZCIsImtleUNvZGUiLCJfaGFuZGxlQmFja3NwYWNlIiwic2V0V2lkdGgiLCJzZXRJc0xvYWRpbmciLCJnZXRDaGlsZCIsImFkZExvYWRpbmdTdGF0ZSIsIl9oYW5kbGVTZWFyY2giLCJpc0ZvY3Vzc2VkIiwiYWN0aXZlIiwiX3NlYXJjaENob2ljZXMiLCJyZXN1bHRDb3VudCIsInNlYXJjaGFibGVDaG9pY2VzIiwiYXNzaWduIiwiaW5jbHVkZU1hdGNoZXMiLCJmaWx0ZXJDaG9pY2VzIiwiYWRkRXZlbnRMaXN0ZW5lciIsInBhc3NpdmUiLCJmb3JtIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJoYXNDaGlsZHJlbiIsImZyb21DaGFyQ29kZSIsInRvTG93ZXJDYXNlIiwidGFyZ2V0Iiwib3V0ZXJIVE1MIiwiY3RybEtleSIsIm1ldGFLZXkiLCJhY3RpdmVFbGVtZW50IiwicHJldmVudERlZmF1bHQiLCJzY3JvbGxUb0NoaWxkRWxlbWVudCIsInRvdWNoZXMiLCJjb250YWlucyIsInN0b3BQcm9wYWdhdGlvbiIsIkhUTUxFbGVtZW50IiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJvZmZzZXRYIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRMZWZ0IiwiY2xvc2VzdCIsInNoaWZ0S2V5IiwicmVtb3ZlRm9jdXNTdGF0ZSIsImFkZEZvY3VzU3RhdGUiLCJyZXNldFRvIiwicXVlcnlTZWxlY3RvckFsbCIsImVsIiwic2V0QWN0aXZlRGVzY2VuZGFudCIsImIiLCJFIiwiYWRkQ2hvaWNlIiwiZWxlbWVudElkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJEYXRlIiwidmFsdWVPZiIsImFkZEdyb3VwIiwiQ29udGFpbmVyIiwiSW5wdXQiLCJwcmV2ZW50UGFzdGUiLCJMaXN0IiwiRHJvcGRvd24iLCJfYWRkUHJlZGVmaW5lZEdyb3VwcyIsIl9hZGRQcmVkZWZpbmVkQ2hvaWNlcyIsIl9hZGRQcmVkZWZpbmVkSXRlbXMiLCJwbGFjZWhvbGRlck9wdGlvbiIsInRhZ05hbWUiLCJmaW5kSW5kZXgiLCJsb2ciLCJvYmplY3QiLCJzdHJpbmciLCJ0ZXh0IiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsImtleSIsImxvY2F0aW9uIiwiZGlzdGFuY2UiLCJ0aHJlc2hvbGQiLCJtYXhQYXR0ZXJuTGVuZ3RoIiwiY2FzZVNlbnNpdGl2ZSIsInRva2VuU2VwYXJhdG9yIiwiZmluZEFsbE1hdGNoZXMiLCJtaW5NYXRjaENoYXJMZW5ndGgiLCJTIiwiSSIsIk8iLCJDIiwiVCIsImdldEZuIiwidyIsIkEiLCJzb3J0Rm4iLCJMIiwiUCIsInRva2VuaXplIiwiRCIsIngiLCJtYXRjaEFsbFRva2VucyIsIk4iLCJNIiwiaiIsImsiLCJGIiwiSyIsInZlcmJvc2UiLCJSIiwiaXNDYXNlU2Vuc2l0aXZlIiwic2V0Q29sbGVjdGlvbiIsImxpbWl0IiwiX2xvZyIsIl9wcmVwYXJlU2VhcmNoZXJzIiwidG9rZW5TZWFyY2hlcnMiLCJmdWxsU2VhcmNoZXIiLCJfc2VhcmNoIiwid2VpZ2h0cyIsInJlc3VsdHMiLCJfY29tcHV0ZVNjb3JlIiwiX3NvcnQiLCJfZm9ybWF0IiwiX2FuYWx5emUiLCJyZWNvcmQiLCJpbmRleCIsInJlc3VsdE1hcCIsIndlaWdodCIsImFycmF5SW5kZXgiLCJwYXR0ZXJuIiwiaXNNYXRjaCIsIm91dHB1dCIsIm1hdGNoZWRJbmRpY2VzIiwibWluIiwiblNjb3JlIiwiaW5kaWNlcyIsInBhdHRlcm5BbHBoYWJldCIsIm1hdGNoIiwiZXJyb3JzIiwiY3VycmVudExvY2F0aW9uIiwiZXhwZWN0ZWRMb2NhdGlvbiIsImxhc3RJbmRleE9mIiwibWF4IiwiY2hhckF0IiwiYWJzIiwiJCR0eXBlb2YiLCJjbG9uZSIsImlzTWVyZ2VhYmxlT2JqZWN0IiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJjdXN0b21NZXJnZSIsImNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkIiwiY3JlYXRlU3RvcmUiLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fIiwic2VsZWN0YWJsZUNob2ljZXMiLCJyZXZlcnNlIiwiRnVuY3Rpb24iLCJ3ZWJwYWNrUG9seWZpbGwiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJib3R0b20iLCJpc09wZW4iLCJpc0ZsaXBwZWQiLCJzaG91bGRGbGlwIiwibWF0Y2hNZWRpYSIsImlzRXF1YWxOb2RlIiwiX29uUGFzdGUiLCJfb25JbnB1dCIsIm1pbldpZHRoIiwid2lkdGgiLCJzY3JvbGxQb3MiLCJoZWlnaHQiLCJoYXNDaGlsZE5vZGVzIiwiX2FuaW1hdGVTY3JvbGwiLCJfc2Nyb2xsRG93biIsIl9zY3JvbGxVcCIsIl9fZXh0ZW5kcyIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXBwZW5kRG9jRnJhZ21lbnQiLCJjbGFzc05hbWUiLCJkZWxldGFibGUiLCJjaG9pY2VHcm91cCIsInNlbGVjdFRleHQiLCJjaG9pY2VEaXNhYmxlZCIsImNob2ljZVNlbGVjdGFibGUiLCJhdXRvY29tcGxldGUiLCJhdXRvY2FwaXRhbGl6ZSIsInNwZWxsY2hlY2siLCJPcHRpb24iLCJ1c2VmdWxTd2lwZXIiLCJTd2lwZXIiLCJyZXNpemVPYnNlcnZlciIsInVwZGF0ZU9uV2luZG93UmVzaXplIiwic2xpZGVzUGVyQ29sdW1uIiwic2xpZGVzUGVyVmlldyIsInNwYWNlQmV0d2VlbiIsIm5hdmlnYXRpb24iLCJuZXh0RWwiLCJwcmV2RWwiLCJwYWdpbmF0aW9uIiwiY2xpY2thYmxlIiwiYnJlYWtwb2ludHMiLCJzbGlkZXNQZXJHcm91cCIsInN3aXBlciIsImxvb3AiLCJvZmZlcnNTd2lwZXIiLCJhdXRvSGVpZ2h0IiwiYWxsb3dIVE1MIiwic2VsZWN0Y2hvaWNlcyIsImJ1cmdlciIsImhlYWRlck5hdiIsImNsb3NlTWVudSIsIm9wZW5NZW51IiwiYm9keSIsInBob25lSW5wdXQiLCJnZXRFbGVtZW50QnlJZCIsImltIiwiSW5wdXRtYXNrIiwibWFzayIsInBvcHVwIiwiSnVzdFZhbGlkYXRlIiwicnVsZXMiLCJyZXF1aXJlZCIsIm1pbkxlbmd0aCIsIm1heExlbmd0aCIsInRlbCIsIl9mdW5jdGlvbiIsInBob25lIiwiaW5wdXRtYXNrIiwidW5tYXNrZWR2YWx1ZSIsIk51bWJlciIsIm1haWwiLCJlbWFpbCIsImNoZWNrYm94IiwiZm9jdXNXcm9uZ0ZpZWxkIiwibWVzc2FnZXMiLCJzdWJtaXRIYW5kbGVyIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsIm92ZXJmbG93IiwicmVzZXQiLCJwb3B1cEZvcm0iLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsIlVSTFNlYXJjaFBhcmFtcyIsImlucHV0cyIsImZhZGVJbiIsInRpbWVvdXQiLCJvcGFjaXR5IiwidHJhbnNpdGlvbiIsInNldFRpbWVvdXQiLCJmYWRlT3V0Iiwic2hvd01vcmVCdG4iLCJhbGxSYXRpbmdDYXJkcyIsInRleHRDb250ZW50IiwibGltaXRTaG93SXRlbXMiLCJzaG93TW9yZSIsImNvbnRhaW5lciIsImFsbEl0ZW1zIiwicHJvZHVjdFNsaWRlck5hdiIsInNsaWRlQ2xhc3MiLCJmcmVlTW9kZSIsInByb2R1Y3RTbGlkZXIiLCJpbml0aWFsU2xpZGUiLCJtb3VzZXdoZWVsIiwiZ3JhYkN1cnNvciIsInRodW1icyIsInNsaWRlclRodW1icyIsInNsaWRlckltYWdlcyIsInByb2R1Y3RTd2lwZXIiLCJjYXRhbG9nU3dpcGVyIiwiZ3JpZCIsInJvd3MiLCJyZW5kZXJCdWxsZXQiLCJmb3JtYXRNb25leSIsIm1vbmV5IiwiSW50bCIsIk51bWJlckZvcm1hdCIsImZvcm1hdCIsImNyZWF0ZUNob2ljZUl0ZW0iLCJkYXRhQ29sb3IiLCJyYW5nZVNsaWRlciIsImNyZWF0ZVJhbmdlQ2hvaWNlSXRlbSIsIm9sZFZhbHVlIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwibm9VaVNsaWRlciIsInN0YXJ0IiwiY29ubmVjdCIsInN0ZXAiLCJyYW5nZSIsImlucHV0MCIsImlucHV0MSIsIm9uIiwidmFsdWVzIiwiaGFuZGxlIiwicm91bmQiLCJiYWNrZ3JvdW5kIiwic2V0UmFuZ2VTbGlkZXIiLCJhcnIiLCJjdXJyZW50VGFyZ2V0IiwicmFuZ2VTbGlkZXIyIiwicmFuZ2VJbnB1dHMiLCJrZXlib2FyZFN1cHBvcnQiLCJzZXRyYW5nZVNsaWRlcjIiLCJoYW5kbGVzIiwibm9VaUxpbmUiLCJjbG9zZUJ0biIsImhpZGVQb3B1cCIsInNob3dQb3B1cCIsImhhbmRsZXJBY3RpdmUiLCJldmVudCIsImNsb3NlQnRuRm9ybSIsImJ1eUJ0biIsInBvcHVwU2xpZGVyIiwiY2xvc2VCdG5TbGlkZXIiLCJpbml0aWFsU2xpZGVyIiwid2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJyb290IiwiZmFjdG9yeSIsIl90eXBlb2YyIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwibW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJjYXJldCIsImRldGVybWluZUxhc3RSZXF1aXJlZFBvc2l0aW9uIiwiZGV0ZXJtaW5lTmV3Q2FyZXRQb3NpdGlvbiIsImdldEJ1ZmZlciIsImdldEJ1ZmZlclRlbXBsYXRlIiwiZ2V0TGFzdFZhbGlkUG9zaXRpb24iLCJpc01hc2siLCJyZXNldE1hc2tTZXQiLCJzZWVrTmV4dCIsInNlZWtQcmV2aW91cyIsInRyYW5zbGF0ZVBvc2l0aW9uIiwiX3ZhbGlkYXRpb25UZXN0cyIsIl92YWxpZGF0aW9uIiwiX21hc2siLCJiZWdpbiIsImVuZCIsIm5vdHJhbnNsYXRlIiwiaXNEZWxldGUiLCJvcHRzIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJnZXRSYW5nZUF0IiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJzdGFydE9mZnNldCIsImVuZE9mZnNldCIsInNlbGVjdGlvbiIsImNyZWF0ZVJhbmdlIiwiZHVwbGljYXRlIiwibW92ZVN0YXJ0IiwiX3ZhbHVlR2V0IiwiaXNSVEwiLCJzY3JvbGxDYWxjIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiY3VycmVudFN0eWxlIiwiZm9udFNpemUiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsV2lkdGgiLCJjYXJldFBvcyIsImluc2VydE1vZGVWaXN1YWwiLCJpbnNlcnRNb2RlIiwic2hhZG93Um9vdCIsInNldFNlbGVjdGlvblJhbmdlIiwidGV4dE5vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsInNldFN0YXJ0Iiwic2V0RW5kIiwiY29sbGFwc2UiLCJzZWwiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsImNyZWF0ZVRleHRSYW5nZSIsIm1vdmVFbmQiLCJzZWxlY3QiLCJyZXR1cm5EZWZpbml0aW9uIiwibWFza3NldCIsIiQiLCJkZXBlbmRlbmN5TGliIiwiYnVmZmVyIiwiZ2V0TWFza1RlbXBsYXRlIiwiYmwiLCJwb3MiLCJsdnAiLCJwb3NpdGlvbnMiLCJsdlRlc3QiLCJ2YWxpZFBvc2l0aW9ucyIsIm5keEludGx6ciIsImxvY2F0b3IiLCJ0ZXN0UG9zIiwiZ2V0VGVzdFRlbXBsYXRlIiwiZXh0ZW5kIiwibHZUZXN0QWx0IiwiYWx0ZXJuYXRpb24iLCJvcHRpb25hbGl0eSIsIm9wdGlvbmFsUXVhbnRpZmllciIsIm5ld0Jsb2NrTWFya2VyIiwiY2hlY2tBbHRlcm5hdGlvbk1hdGNoIiwiZ2V0VGVzdHMiLCJkZWYiLCJnZXRQbGFjZWhvbGRlciIsInNlbGVjdGVkQ2FyZXQiLCJ0YWJiZWQiLCJkb1JhZGl4Rm9jdXMiLCJjbGlja1BvcyIsInJhZGl4UG9pbnQiLCJkaWdpdHMiLCJ2cHMiLCJyYWRpeFBvcyIsInZwIiwicG9zaXRpb25DYXJldE9uQ2xpY2siLCJudW1lcmljSW5wdXQiLCJjbGlja1Bvc2l0aW9uIiwibHZjbGlja1Bvc2l0aW9uIiwibGFzdFBvc2l0aW9uIiwidHQiLCJrZWVwU3RhdGljIiwibmV3UG9zIiwibm9DYWNoZSIsIl9idWZmZXIiLCJjbG9zZXN0VG8iLCJzdHJpY3QiLCJiZWZvcmUiLCJhZnRlciIsInZhbGlkcyIsInBvc05keCIsInBzTmR4IiwiZ2VuZXJhdGVkSW5wdXQiLCJmdXp6eSIsImdldFRlc3QiLCJmbiIsInRlc3RzIiwidGVzdFRlbXBsYXRlIiwiZGV0ZXJtaW5lVGVzdFRlbXBsYXRlIiwidGVzdFBsYWNlSG9sZGVyIiwic29mdCIsIm5ld0Jsb2NrIiwiZ3JlZWR5IiwiX2lucHV0bWFzayIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfd2luZG93IiwiX21hc2tMZXhlciIsIl9wb3NpdGlvbmluZyIsIl9pbnB1dEhhbmRsaW5nIiwiX2V2ZW50cnVsZXIiLCJfZGVmaW5pdGlvbnMiLCJfZGVmYXVsdHMiLCJvYmoiLCJkYXRhS2V5IiwiYWxpYXMiLCJpbnRlcm5hbCIsImV2ZW50cyIsIm5vTWFza3NDYWNoZSIsImRlZmluaXRpb25zIiwidXNlck9wdGlvbnMiLCJyZXNvbHZlQWxpYXMiLCJyZWZyZXNoVmFsdWUiLCJ1bmRvVmFsdWUiLCIkZWwiLCJza2lwS2V5UHJlc3NFdmVudCIsInNraXBJbnB1dEV2ZW50IiwidmFsaWRhdGlvbkV2ZW50IiwiaWdub3JhYmxlIiwibW91c2VFbnRlciIsIm9yaWdpbmFsUGxhY2Vob2xkZXIiLCJpc0NvbXBvc2luZyIsImFsaWFzU3RyIiwiYWxpYXNEZWZpbml0aW9uIiwiYWxpYXNlcyIsImltcG9ydEF0dHJpYnV0ZU9wdGlvbnMiLCJucHQiLCJkYXRhQXR0cmlidXRlIiwiaW1wb3J0T3B0aW9uIiwib3B0aW9uRGF0YSIsImF0dHJPcHRpb24iLCJpbXBvcnREYXRhQXR0cmlidXRlcyIsImF0dHJPcHRpb25zIiwiZGF0YW9wdGlvbnMiLCJyaWdodEFsaWduIiwidGV4dEFsaWduIiwibWFza3NDYWNoZSIsImVsZW1zIiwidGhhdCIsIm5vZGVOYW1lIiwibmR4Iiwic2NvcGVkT3B0cyIsImdlbmVyYXRlTWFza1NldCIsImF1dG9Vbm1hc2siLCJkYXRhIiwibm9yZW1hc2siLCJ2YWx1ZUJ1ZmZlciIsIm9uQmVmb3JlTWFzayIsImNoZWNrVmFsIiwib25CZWZvcmVXcml0ZSIsImN2IiwidmFsdWVQcm9wZXJ0eSIsIl92YWx1ZVNldCIsIkV2ZW50UnVsZXIiLCJvZmYiLCJfX3ZhbHVlR2V0IiwiX192YWx1ZVNldCIsIl9fbG9va3VwR2V0dGVyX18iLCJfX2RlZmluZUdldHRlcl9fIiwiX19kZWZpbmVTZXR0ZXJfXyIsImdldGVtcHR5bWFzayIsImhhc01hc2tlZFZhbHVlIiwiaXNDb21wbGV0ZSIsImdldG1ldGFkYXRhIiwibWV0YWRhdGEiLCJtYXNrVGFyZ2V0IiwibXRkdCIsImlzVmFsaWQiLCJybCIsImxtaWIiLCJmb3JtYXR0ZWRWYWx1ZSIsInRyaWdnZXIiLCJhbmFseXNlTWFzayIsImV4dGVuZERlZmF1bHRzIiwiZXh0ZW5kRGVmaW5pdGlvbnMiLCJkZWZpbml0aW9uIiwiZXh0ZW5kQWxpYXNlcyIsInVubWFzayIsIl9kZWZhdWx0IiwiZ2V0TG9jYXRvciIsInRzdCIsImFsaWduIiwibWxvYyIsImdldERlY2lzaW9uVGFrZXIiLCJkZWNpc2lvblRha2VyIiwicmV0dXJuUEwiLCJzdGF0aWNBbHRlcm5hdGlvbnMiLCJwcmV2VGVzdCIsImJhc2VPbklucHV0IiwibWluaW1hbFBvcyIsImluY2x1ZGVNb2RlIiwibm9KaXQiLCJjbGVhck9wdGlvbmFsVGFpbCIsIm1hc2tUZW1wbGF0ZSIsImppdFJlbmRlclN0YXRpYyIsInNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIiLCJuYXRpdmVEZWYiLCJqaXRNYXNraW5nIiwiaml0IiwiZ3JvdXBTZXBhcmF0b3IiLCJpc0Zpbml0ZSIsInBvcCIsIm1hc2tMZW5ndGgiLCJ0c3RQcyIsImFsdFRlc3QiLCJ0YXJnZXRMb2NhdG9yIiwidHN0TG9jYXRvciIsImJlc3RNYXRjaCIsIm1hc2tUb2tlbnMiLCJtYXNrVG9rZW4iLCJuZHhJbml0aWFsaXplciIsImluc2VydFN0b3AiLCJsYXRlc3RNYXRjaCIsImNhY2hlRGVwZW5kZW5jeSIsInJlc29sdmVUZXN0RnJvbVRva2VuIiwibG9vcE5keCIsInF1YW50aWZpZXJSZWN1cnNlIiwiaGFuZGxlTWF0Y2giLCJpc0ZpcnN0TWF0Y2giLCJ0b2tlbkdyb3VwIiwiZmlyc3RNYXRjaCIsImV2ZXJ5IiwiaXNRdWFudGlmaWVyIiwicmVzb2x2ZU5keEluaXRpYWxpemVyIiwiYWx0ZXJuYXRlTmR4IiwidGFyZ2V0QWx0ZXJuYXRpb24iLCJpbmRleFBvcyIsImxtbnQiLCJuZHhQb3MiLCJiZXN0TWF0Y2hBbHRJbmRleCIsImlzU3Vic2V0T2YiLCJzb3VyY2UiLCJleHBhbmQiLCJleHBhbmRlZCIsImNoYXJDb2RlQXQiLCJyZWdleCIsInN0YXRpY0Nhbk1hdGNoRGVmaW5pdGlvbiIsInNldE1lcmdlTG9jYXRvcnMiLCJ0YXJnZXRNYXRjaCIsImFsdE1hdGNoIiwiYWx0ZXJuYXRpb25OZHgiLCJzaG91bGRNZXJnZSIsImxvY05keCIsImlzU2FtZUxldmVsIiwiX21heFRlc3RQb3MiLCJjZCIsImlzR3JvdXAiLCJpc09wdGlvbmFsIiwib3B0aW9uYWxUb2tlbiIsIm10Y2hzTmR4IiwibXRjaCIsImlzQWx0ZXJuYXRvciIsImFsdGVybmF0ZVRva2VuIiwibWFsdGVybmF0ZU1hdGNoZXMiLCJtYWx0TWF0Y2hlcyIsImN1cnJlbnRNYXRjaGVzIiwibG9vcE5keENudCIsImFsdEluZGV4Iiwic2hpZnQiLCJjdXJyZW50UG9zIiwibmR4SW5pdGlhbGl6ZXJDbG9uZSIsImFsdEluZGV4QXJyIiwiYW1uZHgiLCJleGNsdWRlcyIsImFsdEluZGV4QXJyQ2xvbmUiLCJleGwiLCJleGNsdWRlU2V0IiwidW5NYXRjaGVkQWx0ZXJuYXRpb24iLCJuZHgxIiwiZHJvcE1hdGNoIiwibmR4MiIsImFsdE1hdGNoMiIsInF0IiwicW5keCIsImlzTmFOIiwicXVhbnRpZmllciIsImppdE9mZnNldCIsInRuZHgiLCJtZXJnZUxvY2F0b3JzIiwicHJldmlvdXNQb3MiLCJtdG5keCIsImNhc2luZyIsImFsdGVybmF0ZSIsInJlZnJlc2hGcm9tQnVmZmVyIiwicmV2YWxpZGF0ZU1hc2siLCJoYW5kbGVSZW1vdmUiLCJfa2V5Y29kZSIsIl9ldmVudGhhbmRsZXJzIiwibWFza1BvcyIsImZyb21Jc1ZhbGlkIiwickFsdFBvcyIsInZhbGlkUHNDbG9uZSIsInRzdENsb25lIiwibGFzdEFsdCIsImlzVmFsaWRSc2x0IiwicmV0dXJuUnNsdCIsImFsdFBvcyIsInByZXZBbHRQb3MiLCJ2YWxpZFBvcyIsImRlY2lzaW9uUG9zIiwibEFsdFBvcyIsIm5leHRQb3MiLCJ2YWxpZElucHV0cyIsInJlc3VsdFBvcyIsImVsZW0iLCJ0b1VwcGVyQ2FzZSIsInBvc0JlZm9yZSIsIlNQQUNFIiwiYXJncyIsImFsdEFycjEiLCJhbHRBcnIyIiwibmEiLCJhbHRBcnJDIiwibmFBcnIiLCJuYU5keCIsImFsbmR4IiwiQkFDS1NQQUNFIiwiREVMRVRFIiwicGVuZCIsIm9mZnNldCIsInJlc3VsdCIsInJlcGVhdCIsImNvbXBsZXRlIiwibHJwIiwiYW1sIiwiZnJvbUFsdGVybmF0ZSIsInZhbGlkYXRlT25seSIsImZyb21DaGVja3ZhbCIsImlzU2VsZWN0aW9uIiwicG9zT2JqIiwicHJvY2Vzc0NvbW1hbmRPYmplY3QiLCJjb21tYW5kT2JqIiwiaW5zZXJ0IiwicmVmcmVzaCIsInJld3JpdGVQb3NpdGlvbiIsIl9pc1ZhbGlkIiwicnNsdCIsInZhbGlkYXRlZFBvcyIsInBvc2l0aW9uc0Nsb25lIiwicHJlVmFsaWRhdGlvbiIsImN1cnJlbnRQb3NWYWxpZCIsInNraXAiLCJuUG9zIiwic25Qb3MiLCJ0cmFja2JhY2tQb3NpdGlvbnMiLCJwb3N0VmFsaWRhdGlvbiIsInBvc3RSZXN1bHQiLCJlbmRSZXN1bHQiLCJwb3NpdGlvbkNhbk1hdGNoRGVmaW5pdGlvbiIsInRlc3REZWZpbml0aW9uIiwidmFsaWQiLCJzaGlmdFBvc2l0aW9ucyIsImJmZnIiLCJrZXlwcmVzcyIsIkV2ZW50Iiwid2hpY2giLCJ2YWxSZXN1bHQiLCJFdmVudEhhbmRsZXJzIiwia2V5cHJlc3NFdmVudCIsImZvcndhcmRQb3NpdGlvbiIsIm9yaWdpbmFsUG9zIiwiZmlsbE9ubHkiLCJwcyIsIm5wIiwiY3ZwSW5wdXQiLCJ2YWxpZFRlc3QiLCJJc0VuY2xvc2VkU3RhdGljIiwicG9zTWF0Y2giLCJwcmV2TWF0Y2giLCJuZXh0TWF0Y2giLCJjYW5NYXRjaCIsImFwcGx5SW5wdXRWYWx1ZSIsIkhhbmRsZU5hdGl2ZVBsYWNlaG9sZGVyIiwid3JpdGVCdWZmZXIiLCJfZW52aXJvbm1lbnQiLCJjbGVhck1hc2tPbkxvc3RGb2N1cyIsImNsZWFySW5jb21wbGV0ZSIsIndyaXRlT3V0IiwibnB0dmwiLCJpbml0aWF0aW5nRXZlbnQiLCJpbnB1dFZhbHVlIiwiY2hhckNvZGVzIiwiaW5pdGlhbE5keCIsImlzVGVtcGxhdGVNYXRjaCIsInRhcmdldFRlbXBsYXRlIiwiY2hhckNvZGVOZHgiLCJzdGF0aWNNYXRjaGVzIiwicHJldkNhcmV0UG9zIiwiY2hhckNvZGUiLCJzbmR4IiwibmV4dFZhbGlkIiwibmV4dFNuZHgiLCJpZSIsIm5wdFZhbHVlIiwidW1WYWx1ZSIsInBuZHgiLCJ1bm1hc2tlZFZhbHVlIiwib25Vbk1hc2siLCJidWZmZXJWYWx1ZSIsInRyaWdnZXJFdmVudHMiLCIkaW5wdXQiLCJucHRWYWwiLCJldmFsIiwia2V5ZG93bkV2ZW50Iiwia2RSZXN1bHQiLCJvbktleURvd24iLCJpcGhvbmUiLCJCQUNLU1BBQ0VfU0FGQVJJIiwiWCIsIkVORCIsIlBBR0VfRE9XTiIsIkhPTUUiLCJQQUdFX1VQIiwidW5kb09uRXNjYXBlIiwiRVNDQVBFIiwiYWx0S2V5IiwidGFiVGhyb3VnaCIsIlRBQiIsIlJJR0hUIiwiTEVGVCIsImNhcmV0UG9zX2JlZ2luIiwiY2FyZXRQb3NfZW5kIiwiaWdub3JhYmxlcyIsImNoZWNrdmFsIiwiRU5URVIiLCJ3cml0ZU91dEJ1ZmZlciIsIm9uS2V5VmFsaWRhdGlvbiIsImtleXVwRXZlbnQiLCJLRVlfMjI5IiwicGFzdGVFdmVudCIsInRlbXBWYWx1ZSIsInZhbHVlQmVmb3JlQ2FyZXQiLCJzdWJzdHIiLCJ2YWx1ZUFmdGVyQ2FyZXQiLCJjbGlwYm9hcmREYXRhIiwiZ2V0RGF0YSIsInBhc3RlVmFsdWUiLCJvbkJlZm9yZVBhc3RlIiwiaW5wdXRGYWxsQmFja0V2ZW50IiwiaWVNb2JpbGVIYW5kbGVyIiwiaWVtb2JpbGUiLCJpbnB1dENoYXIiLCJpdiIsImFuYWx5c2VDaGFuZ2VzIiwiZnJvbnRQYXJ0IiwiYmFja1BhcnQiLCJmcm9udEJ1ZmZlclBhcnQiLCJiYWNrQnVmZmVyUGFydCIsImZwbCIsImJwbCIsImFjdGlvbiIsIm1hcmtlciIsInVuc2hpZnQiLCJuZXdCdWZmZXIiLCJvbGRCdWZmZXIiLCJjaGFuZ2VzIiwiZW50cnkiLCJrZXlkb3duIiwiY29tcG9zaXRpb25lbmRFdmVudCIsInNldFZhbHVlRXZlbnQiLCJhcmd1bWVudF8xIiwiYXJndW1lbnRfMiIsImZvY3VzRXZlbnQiLCJzaG93TWFza09uRm9jdXMiLCJwb3NpdGlvbkNhcmV0T25UYWIiLCJjbGlja0V2ZW50IiwiaW52YWxpZEV2ZW50IiwibW91c2VsZWF2ZUV2ZW50IiwibmV3Q2FyZXRQb3NpdGlvbiIsImN1dEV2ZW50IiwiY2xpcERhdGEiLCJzZXREYXRhIiwiZXhlY0NvbW1hbmQiLCJibHVyRXZlbnQiLCJtb3VzZWVudGVyRXZlbnQiLCJzaG93TWFza09uSG92ZXIiLCJzdWJtaXRFdmVudCIsInJlbW92ZU1hc2tPblN1Ym1pdCIsInJlc2V0RXZlbnQiLCJtb2JpbGUiLCJ1YSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIl9leHRlbmQiLCJfZGF0YSIsIl9ldmVudHMiLCJEZXBlbmRlbmN5TGliIiwiZXZlbnRSZWdpc3RyeSIsImlzRWxlbWVudFR5cGVTdXBwb3J0ZWQiLCJwYXRjaFZhbHVlUHJvcGVydHkiLCJ2YWx1ZUdldCIsInZhbHVlU2V0IiwicGF0Y2hWYWxob29rIiwidmFsSG9va3MiLCJpbnB1dG1hc2twYXRjaCIsInZhbGhvb2tHZXQiLCJ2YWxob29rU2V0IiwibnVsbGFibGUiLCJnZXR0ZXIiLCJzZXR0ZXIiLCJpbnN0YWxsTmF0aXZlVmFsdWVTZXRGYWxsYmFjayIsIm5vVmFsdWVQYXRjaGluZyIsIl9fbG9va3VwU2V0dGVyX18iLCJvdmVycnVsZVJUTCIsImVsZW1lbnRUeXBlIiwiaXNTdXBwb3J0ZWQiLCJzdXBwb3J0c0lucHV0VHlwZSIsImlzQ29udGVudEVkaXRhYmxlIiwiaW5wdXRNb2RlIiwiaW5wdXRtb2RlIiwib25jb21wbGV0ZSIsIm9uaW5jb21wbGV0ZSIsIm9uY2xlYXJlZCIsImlucHV0RXZlbnRPbmx5IiwiZXZlbnROYW1lIiwiZXZlbnRIYW5kbGVyIiwiZXYiLCJvcmlnaW5hbEV2ZW50IiwiaW1PcHRzIiwicmVhZE9ubHkiLCJpbnB1dFR5cGUiLCJyZXR1cm5WYWwiLCJldkFyciIsInNyYyIsImNvcHkiLCJjb3B5SXNBcnJheSIsImRlZXAiLCJlc2NhcGVSZWdleFJlZ2V4Iiwic3RyIiwiX2lucHV0bWFzazIiLCJ2YWxpZGF0b3IiLCJpcFZhbGlkYXRvclJlZ2V4IiwiaXBWYWxpZGF0b3IiLCJjaHJzIiwiY3NzdW5pdCIsInVybCIsImlwIiwibWFza2VkVmFsdWUiLCJwYXN0ZWRWYWx1ZSIsIm1hYyIsInZpbiIsIlYiLCJzc24iLCJjdXJyZW50UmVzdWx0Iiwic2VhcmNoRWxlbWVudCIsImZyb21JbmRleCIsImxlbiIsIm93bmVyIiwiX19kYXRhIiwiaXNWYWxpZEVsZW1lbnQiLCJFbGVtZW50IiwiaGFuZGxlciIsImFkZEV2ZW50IiwibmFtZXNwYWNlIiwiYXR0YWNoRXZlbnQiLCJlbmR4IiwibnNFdmVudCIsInJlbW92ZUV2ZW50IiwiZGV0YWNoRXZlbnQiLCJubXNwIiwicmVzb2x2ZU5hbWVzcGFjZSIsImV2dHMiLCJobmR4IiwiaG5kTCIsImV2TmR4Iiwib2ZmRXZlbnRzIiwib2ZmRXZlbnRzTCIsImV2bnQiLCJwYXJhbXMiLCJjcmVhdGVFdmVudCIsImluaXRDdXN0b21FdmVudCIsImNyZWF0ZUV2ZW50T2JqZWN0IiwiZXZlbnRUeXBlIiwiZmlyZUV2ZW50IiwiZXZ0Iiwibm9jYWNoZSIsIm1zIiwiZ2VuZXJhdGVNYXNrIiwicmVnZXhNYXNrIiwibWFza3NldERlZmluaXRpb24iLCJtYXNrZGVmS2V5IiwicmVwZWF0U3RhcnQiLCJncm91cG1hcmtlciIsInF1YW50aWZpZXJtYXJrZXIiLCJhbHRNYXNrIiwibXNrIiwiYWx0ZXJuYXRvcm1hcmtlciIsInRva2VuaXplciIsInJlZ2V4VG9rZW5pemVyIiwiZXNjYXBlZCIsImN1cnJlbnRUb2tlbiIsIk1hc2tUb2tlbiIsIm9wZW5lbmluZ3MiLCJvcGVuaW5nVG9rZW4iLCJjdXJyZW50T3BlbmluZ1Rva2VuIiwiYWx0ZXJuYXRvciIsImxhc3RNYXRjaCIsImNsb3NlUmVnZXhHcm91cCIsIm9wZW5Hcm91cCIsImFsdGVybmF0b3JHcm91cCIsImluc2VydFRlc3REZWZpbml0aW9uIiwibXRva2VuIiwic3RhdGljRGVmaW5pdGlvblN5bWJvbCIsIm1hc2tkZWYiLCJ1c2VQcm90b3R5cGVEZWZpbml0aW9ucyIsImRlZmluaXRpb25TeW1ib2wiLCJnZW5lcmF0ZWQiLCJ2ZXJpZnlHcm91cE1hcmtlciIsInRva2VuIiwibmV4dFRva2VuIiwiZGVmYXVsdENhc2UiLCJtbmR4IiwicmV2ZXJzZVRva2VucyIsInJldmVyc2VTdGF0aWMiLCJzdCIsIm9wdGlvbmFsbWFya2VyIiwiaW50TWF0Y2giLCJncm91cGlmeSIsImdyb3VwVG9rZW4iLCJjbG9zZUdyb3VwIiwiZ3JvdXBRdWFudGlmaWVyIiwiZXhlYyIsImFsdFJlZ2V4R3JvdXAiLCJlc2NhcGVDaGFyIiwibXFqIiwibXEiLCJtcTAiLCJtcTEiLCJ0bXBNYXRjaCIsInN1YlRva2VuIiwiX3JhZGl4RGFuY2UiLCJfZXNjYXBlUmVnZXgiLCJjdXJyZW50WWVhciIsImdldEZ1bGxZZWFyIiwiZm9ybWF0Q29kZSIsInNldERhdGUiLCJnZXREYXRlIiwiZGQiLCJwYWQiLCJkZGQiLCJkZGRkIiwic2V0TW9udGgiLCJnZXRNb250aCIsIm1tIiwibW1tIiwibW1tbSIsInl5Iiwic2V0RnVsbFllYXIiLCJ5eXl5Iiwic2V0SG91cnMiLCJnZXRIb3VycyIsImhoIiwiaHgiLCJIIiwiSEgiLCJIeCIsInNldE1pbnV0ZXMiLCJnZXRNaW51dGVzIiwiTU0iLCJzZXRTZWNvbmRzIiwiZ2V0U2Vjb25kcyIsInNzIiwic2V0TWlsbGlzZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiVFQiLCJaIiwiZm9ybWF0QWxpYXMiLCJpc29EYXRlIiwiaXNvVGltZSIsImlzb0RhdGVUaW1lIiwiaXNvVXRjRGF0ZVRpbWUiLCJmb3JtYXRjb2RlIiwiZHluTWF0Y2hlcyIsImZjb2RlIiwiZ2V0VG9rZW5pemVyIiwidG9rZW5zIiwiZHludG9rZW5zIiwiZHluVG9rZW4iLCJwcmVmaWxsWWVhciIsImRhdGVQYXJ0cyIsInllYXIiLCJyYXd5ZWFyIiwiY3JybnR5ZWFyIiwiZW50ZXJlZFBhcnQiLCJjdXJyZW50WWVhclBhcnQiLCJjdXJyZW50WWVhck5leHRQYXJ0IiwiZW50cnlDdXJyZW50WWVhciIsIm1vbnRoIiwiZGF5IiwiZGF0ZSIsImdldFRpbWUiLCJpc1ZhbGlkRGF0ZSIsInJhd2RheSIsInJhd21vbnRoIiwidG9rZW5NYXRjaCIsImdldFRva2VuTWF0Y2giLCJ0YXJnZXRNYXRjaEluZGV4IiwiaXNEYXRlSW5SYW5nZSIsInJhd1llYXIiLCJtaW5ZZWFyIiwibWF4WWVhciIsImRhdGVPYmpWYWx1ZSIsInJhdyIsImxhc3RJbmRleCIsInZhbCIsIm1hc2tTdHJpbmciLCJkYXRlT2JqIiwidGFyZ2V0UHJvcCIsImRhdGVPcGVyYXRpb24iLCJkYXRhdmFsdWUiLCJ0b2thbk1hdGNoIiwiaW1wb3J0RGF0ZSIsImlucHV0Rm9ybWF0IiwiY2FsY1BvcyIsIm1hdGNoTGVuZ3RoIiwiZGF0ZXRpbWUiLCJpMThuIiwib3JkaW5hbFN1ZmZpeCIsImRpc3BsYXlGb3JtYXQiLCJvdXRwdXRGb3JtYXQiLCJkYXlOYW1lcyIsIm1vbnRoTmFtZXMiLCJwYXJ0IiwiaW5pdGlhbFZhbHVlIiwiYXV0b0VzY2FwZSIsInR4dCIsImVzY2FwZWRUeHQiLCJhbGlnbkRpZ2l0cyIsImZvcmNlIiwiZGlnaXRzT3B0aW9uYWwiLCJyYWRpeFBvc2l0aW9uIiwibmVnYXRpb25CYWNrIiwibmVnYXRpb25TeW1ib2wiLCJiYWNrIiwiZmluZFZhbGlkYXRvciIsInN5bWJvbCIsInRzdE5keCIsIm5keGwiLCJmaW5kVmFsaWQiLCJyZXQiLCJwYXJzZU1pbk1heE9wdGlvbnMiLCJwYXJzZUZsb2F0IiwiTmFOIiwiTUlOX1ZBTFVFIiwiTUFYX1ZBTFVFIiwiZ2VuTWFzayIsImRlY2ltYWxEZWYiLCJyYWRpeFBvaW50RGVmIiwiX19maW5hbmNlSW5wdXQiLCJwcmVmaXgiLCJkcSIsInN1ZmZpeCIsImhhbm5kbGVSYWRpeERhbmNlIiwiZGVjaW1hbFZhbGlkYXRvciIsImNoZWNrRm9yTGVhZGluZ1plcm9lcyIsIm51bWJlck1hdGNoZXMiLCJmcm9udCIsIm51bWJlciIsImxlYWRpbmd6ZXJvZXMiLCJlbmZvcmNlRGlnaXRzT25CbHVyIiwiYWxsb3dNaW51cyIsIlNldE1heE9uT3ZlcmZsb3ciLCJ1bm1hc2tBc051bWJlciIsInJvdW5kaW5nRk4iLCJzaG9ydGN1dHMiLCJpbnNlcnRzIiwiaW5pdFBvcyIsImlzTmVnYXRpdmUiLCJ1bm1hc2tlZCIsInByb2Nlc3NWYWx1ZSIsImlzTmFndGl2ZSIsInZhbHVlUGFydHMiLCJpbnRlZ2VyUGFydCIsImRlY2ltYWxQYXJ0IiwiZm9yY2VEaWdpdHMiLCJkaWdpdHNGYWN0b3IiLCJwb3ciLCJ0b0ZpeGVkIiwibnVtYmVyVmFsdWUiLCJzdHJpcEJ1ZmZlciIsInN0cmlwUmFkaXgiLCJjYXJldE5keCIsIm5tYnJNdGNocyIsIlVQIiwiRE9XTiIsImN1cnJlbmN5IiwiZGVjaW1hbCIsImludGVnZXIiLCJwZXJjZW50YWdlIiwiaW5kaWFubnMiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX3NldFByb3RvdHlwZU9mIiwiX2NyZWF0ZVN1cGVyIiwiRGVyaXZlZCIsImhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2NyZWF0ZVN1cGVySW50ZXJuYWwiLCJTdXBlciIsIl9nZXRQcm90b3R5cGVPZiIsIk5ld1RhcmdldCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJfd3JhcE5hdGl2ZVN1cGVyIiwiQ2xhc3MiLCJfY2FjaGUiLCJNYXAiLCJfaXNOYXRpdmVGdW5jdGlvbiIsImhhcyIsIldyYXBwZXIiLCJfY29uc3RydWN0IiwiUGFyZW50Iiwic2hhbSIsIlByb3h5IiwiaGVhZCIsImF0dGFjaFNoYWRvdyIsImN1c3RvbUVsZW1lbnRzIiwiSW5wdXRtYXNrRWxlbWVudCIsIl9IVE1MRWxlbWVudCIsIl9zdXBlciIsIl90aGlzIiwiYXR0cmlidXRlTmFtZXMiLCJnZXRBdHRyaWJ1dGVOYW1lcyIsInNoYWRvdyIsIm1vZGUiLCJhdHRyIiwiaW5zdGFsbGVkTW9kdWxlcyIsIm5zIiwiZ2V0RGVmYXVsdCIsImdldE1vZHVsZUV4cG9ydHMiLCJwcm9wZXJ0eSIsIm1vZHVsZUlkIiwiX2RlZmluZVByb3BlcnR5IiwiX3N0YXRlIiwiX2hhbmRsZWQiLCJfdmFsdWUiLCJfZGVmZXJyZWRzIiwiX2ltbWVkaWF0ZUZuIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwicHJvbWlzZSIsIl91bmhhbmRsZWRSZWplY3Rpb25GbiIsInJlc29sdmUiLCJyZWplY3QiLCJyYWNlIiwic2V0SW1tZWRpYXRlIiwiX3NldEltbWVkaWF0ZUZuIiwiX3NldFVuaGFuZGxlZFJlamVjdGlvbkZuIiwibWV0aG9kIiwiZGVidWciLCJjYWxsYmFjayIsImFzeW5jIiwicmVzcG9uc2VUZXh0IiwiY29sb3JXcm9uZyIsImVsZW1lbnRzIiwidG9vbHRpcCIsInRvb2x0aXBGYWRlT3V0VGltZSIsImZhZGVPdXRUaW1lIiwidG9vbHRpcEZhZGVPdXRDbGFzcyIsImZhZGVPdXRDbGFzcyIsInRvb2x0aXBTZWxlY3RvcldyYXAiLCJzZWxlY3RvcldyYXAiLCJiaW5kSGFuZGxlcktleXVwIiwiaGFuZGxlcktleXVwIiwiaW52YWxpZEZvcm1DYWxsYmFjayIsInByb21pc2VzUmVtb3RlIiwiaXNWYWxpZGF0aW9uU3VjY2VzcyIsIlJFR0VYUCIsInppcCIsInBhc3N3b3JkIiwic3RyZW5ndGhQYXNzIiwiREVGQVVMVF9SRU1PVEVfRVJST1IiLCJ0b29sdGlwc1RpbWVyIiwic2V0Rm9ybSIsImRlZmF1bHRSdWxlcyIsImRlZmF1bHRNZXNzYWdlcyIsInJlbW90ZSIsInN0cmVuZ3RoIiwidmFsaWRhdGVJdGVtIiwiaXNLZXl1cENoYW5nZSIsInJlbmRlckVycm9ycyIsInNldHRlckV2ZW50TGlzdGVuZXIiLCJnZXRFbGVtZW50c1JlYWxWYWx1ZSIsIiRmb3JtIiwiY2hlY2tlZCIsInZhbGlkYXRpb25GYWlsZWQiLCJ2YWxpZGF0aW9uU3VjY2VzcyIsInN1Ym1pdCIsImdldEVsZW1lbnRzIiwiaXNFbWFpbCIsImlzWmlwIiwiaXNQaG9uZSIsImlzUGFzc3dvcmQiLCJpc0VtcHR5IiwiY2hlY2tMZW5ndGhNYXgiLCJjaGVja0xlbmd0aE1pbiIsImNoZWNrU3RyZW5ndGhQYXNzIiwidmFsaWRhdGVFbGVtZW50cyIsInZhbGlkYXRlUmVxdWlyZWQiLCJ2YWxpZGF0ZUVtYWlsIiwidmFsaWRhdGVQaG9uZSIsInZhbGlkYXRlTWluTGVuZ3RoIiwidmFsaWRhdGVNYXhMZW5ndGgiLCJ2YWxpZGF0ZVN0cmVuZ3RoUGFzcyIsInZhbGlkYXRlUGFzc3dvcmQiLCJ2YWxpZGF0ZVppcCIsInZhbGlkYXRlUmVtb3RlIiwic3VjY2Vzc0Fuc3dlciIsInNlbmRQYXJhbSIsImdlbmVyYXRlTWVzc2FnZSIsIm1lc3NhZ2UiLCJsb2NrRm9ybSIsImFsZXJ0IiwiY3VzdG9tIiwiY2xlYXJFcnJvcnMiLCJib3JkZXIiLCJjb2xvciIsInVubG9ja0Zvcm0iLCJoaWRlVG9vbHRpcHMiLCJwb2ludGVyRXZlbnRzIiwid2ViaXRGaWx0ZXIiLCJnbG9iYWxUaGlzIiwib3QiLCJ0byIsInBhcmVudEVsZW1lbnQiLCJhdCIsImx0IiwidXQiLCJmdCIsImR0IiwiY3QiLCJwdCIsImh0IiwicGFnZVhPZmZzZXQiLCJjb21wYXRNb2RlIiwicGFnZVlPZmZzZXQiLCJQaXBzTW9kZSIsIlJhbmdlIiwiU3RlcHMiLCJQb3NpdGlvbnMiLCJDb3VudCIsIlZhbHVlcyIsIlBpcHNUeXBlIiwiTm9uZSIsIk5vVmFsdWUiLCJMYXJnZVZhbHVlIiwiU21hbGxWYWx1ZSIsImdldERpc3RhbmNlIiwieE51bVN0ZXBzIiwieFZhbCIsImdldEFic29sdXRlRGlzdGFuY2UiLCJ4UGN0IiwidG9TdGVwcGluZyIsImZyb21TdGVwcGluZyIsImdldFN0ZXAiLCJ4U3RlcHMiLCJzbmFwIiwiZ2V0RGVmYXVsdFN0ZXAiLCJnZXROZWFyYnlTdGVwcyIsInN0ZXBCZWZvcmUiLCJzdGFydFZhbHVlIiwiaGlnaGVzdFN0ZXAiLCJ4SGlnaGVzdENvbXBsZXRlU3RlcCIsInRoaXNTdGVwIiwic3RlcEFmdGVyIiwiY291bnRTdGVwRGVjaW1hbHMiLCJoYXNOb1NpemUiLCJjb252ZXJ0IiwiaGFuZGxlRW50cnlQb2ludCIsImhhbmRsZVN0ZXBQb2ludCIsImNlaWwiLCJiYXNlIiwib3JpZ2luIiwiaGFuZGxlTG93ZXIiLCJoYW5kbGVVcHBlciIsInRvdWNoQXJlYSIsImhvcml6b250YWwiLCJ2ZXJ0aWNhbCIsImNvbm5lY3RzIiwibHRyIiwicnRsIiwidGV4dERpcmVjdGlvbkx0ciIsInRleHREaXJlY3Rpb25SdGwiLCJkcmFnZ2FibGUiLCJkcmFnIiwidGFwIiwicGlwcyIsInBpcHNIb3Jpem9udGFsIiwicGlwc1ZlcnRpY2FsIiwibWFya2VySG9yaXpvbnRhbCIsIm1hcmtlclZlcnRpY2FsIiwibWFya2VyTm9ybWFsIiwibWFya2VyTGFyZ2UiLCJtYXJrZXJTdWIiLCJ2YWx1ZUhvcml6b250YWwiLCJ2YWx1ZVZlcnRpY2FsIiwidmFsdWVOb3JtYWwiLCJ2YWx1ZUxhcmdlIiwidmFsdWVTdWIiLCJtdCIsInRvb2x0aXBzIiwiYXJpYSIsInNpbmdsZVN0ZXAiLCJrZXlib2FyZFBhZ2VNdWx0aXBsaWVyIiwia2V5Ym9hcmRNdWx0aXBsaWVyIiwia2V5Ym9hcmREZWZhdWx0U3RlcCIsInNwZWN0cnVtIiwiYW5pbWF0ZSIsImFuaW1hdGlvbkR1cmF0aW9uIiwib3J0IiwibWFyZ2luIiwicGFkZGluZyIsImRyYWdBbGwiLCJzbW9vdGhTdGVwcyIsImZpeGVkIiwiaG92ZXIiLCJ1bmNvbnN0cmFpbmVkIiwiaGFuZGxlQXR0cmlidXRlcyIsImFyaWFGb3JtYXQiLCJVIiwiY3NzUHJlZml4IiwiY3NzQ2xhc3NlcyIsImd0Iiwib3JpZW50YXRpb24iLCJiZWhhdmlvdXIiLCJtc1RyYW5zZm9ybSIsInRyYW5zZm9ybSIsInRyYW5zZm9ybVJ1bGUiLCJwb2ludGVyRW5hYmxlZCIsIm1vdmUiLCJtc1BvaW50ZXJFbmFibGVkIiwiQ1NTIiwic3VwcG9ydHMiLCJudCIsIlEiLCJZIiwic3RlcHBlZCIsImRlbnNpdHkiLCJ6IiwiYnV0dG9ucyIsImNvbXBvc2VkIiwiY29tcG9zZWRQYXRoIiwicGFnZVgiLCJwYWdlWSIsImNoYW5nZWRUb3VjaGVzIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlT2Zmc2V0IiwicG9pbnRzIiwiY3Vyc29yIiwiZG9Ob3RSZWplY3QiLCJjYWxjUG9pbnQiLCJ0b3AiLCJjbGllbnRUb3AiLCJsZWZ0IiwiY2xpZW50TGVmdCIsInJlbGF0ZWRUYXJnZXQiLCJhcHBWZXJzaW9uIiwiYnV0dG9uc1Byb3BlcnR5Iiwic3RhcnRDYWxjUG9pbnQiLCJHIiwiYmFzZVNpemUiLCJsb2NhdGlvbnMiLCJoYW5kbGVOdW1iZXJzIiwibGlzdGVuZXJzIiwiQiIsInEiLCJpdCIsIlciLCJKIiwiekluZGV4IiwiZXQiLCJydCIsInN0ZXBzIiwic2V0SGFuZGxlIiwiX19tb3ZlSGFuZGxlcyIsInVwZGF0ZU9wdGlvbnMiLCJyZW1vdmVQaXBzIiwicmVtb3ZlVG9vbHRpcHMiLCJnZXRQb3NpdGlvbnMiLCJnZXRUb29sdGlwcyIsImdldE9yaWdpbnMiLCJfX3NwZWN0cnVtIl0sIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBQSxNQUFNLENBQUNDLE9BQU8sR0FBQyxVQUFTQyxDQUFDLEVBQUM7RUFBQyxJQUFJQyxDQUFDLEdBQUMsQ0FBQyxDQUFDO0VBQUMsU0FBU0MsQ0FBQ0EsQ0FBQ0MsQ0FBQyxFQUFDO0lBQUMsSUFBR0YsQ0FBQyxDQUFDRSxDQUFDLENBQUMsRUFBQyxPQUFPRixDQUFDLENBQUNFLENBQUMsQ0FBQyxDQUFDQyxPQUFPO0lBQUMsSUFBSUMsQ0FBQyxHQUFDSixDQUFDLENBQUNFLENBQUMsQ0FBQyxHQUFDO01BQUNELENBQUMsRUFBQ0MsQ0FBQztNQUFDRyxDQUFDLEVBQUMsQ0FBQyxDQUFDO01BQUNGLE9BQU8sRUFBQyxDQUFDO0lBQUMsQ0FBQztJQUFDLE9BQU9KLENBQUMsQ0FBQ0csQ0FBQyxDQUFDLENBQUNJLElBQUksQ0FBQ0YsQ0FBQyxDQUFDRCxPQUFPLEVBQUNDLENBQUMsRUFBQ0EsQ0FBQyxDQUFDRCxPQUFPLEVBQUNGLENBQUMsQ0FBQyxFQUFDRyxDQUFDLENBQUNDLENBQUMsR0FBQyxDQUFDLENBQUMsRUFBQ0QsQ0FBQyxDQUFDRCxPQUFPO0VBQUE7RUFBQyxPQUFPRixDQUFDLENBQUNNLENBQUMsR0FBQ1IsQ0FBQyxFQUFDRSxDQUFDLENBQUNPLENBQUMsR0FBQ1IsQ0FBQyxFQUFDQyxDQUFDLENBQUNRLENB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QUFDSixNQUFNLEVBQUM2dkQ7RUFBQyxDQUFDO0VBQUNwSCxFQUFFLENBQUN6b0QsTUFBTSxHQUFDNnZELENBQUMsRUFBQ3BILEVBQUUsQ0FBQ21HLFVBQVUsR0FBQ3h1RCxDQUFDLEVBQUNxb0QsRUFBRSxXQUFRLEdBQUNuUixDQUFDLEVBQUMvM0MsTUFBTSxDQUFDQyxjQUFjLENBQUNpcEQsRUFBRSxFQUFDLFlBQVksRUFBQztJQUFDNW9ELEtBQUssRUFBQyxDQUFDO0VBQUMsQ0FBQyxDQUFDO0FBQUEsQ0FBQyxDQUFDOzs7Ozs7O0FDQXQrMEIsSUFBTWlxQixXQUFXLEdBQUcsU0FBZEEsV0FBV0EsQ0FBSUMsS0FBSyxFQUFLO0VBQ3BDLE9BQU8sSUFBSUMsSUFBSSxDQUFDQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUNDLE1BQU0sQ0FBQ0gsS0FBSyxDQUFDO0FBQ3JELENBQUM7QUFBQ2hyQixPQUFBLENBQUErcUIsV0FBQSxHQUFBQSxXQUFBIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qISBjaG9pY2VzLmpzIHY5LjAuMSB8IMKpIDIwMTkgSm9zaCBKb2huc29uIHwgaHR0cHM6Ly9naXRodWIuY29tL2pzaGpvaG5zb24vQ2hvaWNlcyNyZWFkbWUgKi9cbndpbmRvdy5DaG9pY2VzPWZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIGkobil7aWYodFtuXSlyZXR1cm4gdFtuXS5leHBvcnRzO3ZhciByPXRbbl09e2k6bixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW25dLmNhbGwoci5leHBvcnRzLHIsci5leHBvcnRzLGkpLHIubD0hMCxyLmV4cG9ydHN9cmV0dXJuIGkubT1lLGkuYz10LGkuZD1mdW5jdGlvbihlLHQsbil7aS5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2VudW1lcmFibGU6ITAsZ2V0Om59KX0saS5yPWZ1bmN0aW9uKGUpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LGkudD1mdW5jdGlvbihlLHQpe2lmKDEmdCYmKGU9aShlKSksOCZ0KXJldHVybiBlO2lmKDQmdCYmXCJvYmplY3RcIj09dHlwZW9mIGUmJmUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgbj1PYmplY3QuY3JlYXRlKG51bGwpO2lmKGkucihuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobixcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTplfSksMiZ0JiZcInN0cmluZ1wiIT10eXBlb2YgZSlmb3IodmFyIHIgaW4gZSlpLmQobixyLGZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfS5iaW5kKG51bGwscikpO3JldHVybiBufSxpLm49ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIGkuZCh0LFwiYVwiLHQpLHR9LGkubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0saS5wPVwiL3B1YmxpYy9hc3NldHMvc2NyaXB0cy9cIixpKGkucz03KX0oW2Z1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1pKDEpO3QuREVGQVVMVF9DTEFTU05BTUVTPXtjb250YWluZXJPdXRlcjpcImNob2ljZXNcIixjb250YWluZXJJbm5lcjpcImNob2ljZXNfX2lubmVyXCIsaW5wdXQ6XCJjaG9pY2VzX19pbnB1dFwiLGlucHV0Q2xvbmVkOlwiY2hvaWNlc19faW5wdXQtLWNsb25lZFwiLGxpc3Q6XCJjaG9pY2VzX19saXN0XCIsbGlzdEl0ZW1zOlwiY2hvaWNlc19fbGlzdC0tbXVsdGlwbGVcIixsaXN0U2luZ2xlOlwiY2hvaWNlc19fbGlzdC0tc2luZ2xlXCIsbGlzdERyb3Bkb3duOlwiY2hvaWNlc19fbGlzdC0tZHJvcGRvd25cIixpdGVtOlwiY2hvaWNlc19faXRlbVwiLGl0ZW1TZWxlY3RhYmxlOlwiY2hvaWNlc19faXRlbS0tc2VsZWN0YWJsZVwiLGl0ZW1EaXNhYmxlZDpcImNob2ljZXNfX2l0ZW0tLWRpc2FibGVkXCIsaXRlbUNob2ljZTpcImNob2ljZXNfX2l0ZW0tLWNob2ljZVwiLHBsYWNlaG9sZGVyOlwiY2hvaWNlc19fcGxhY2Vob2xkZXJcIixncm91cDpcImNob2ljZXNfX2dyb3VwXCIsZ3JvdXBIZWFkaW5nOlwiY2hvaWNlc19faGVhZGluZ1wiLGJ1dHRvbjpcImNob2ljZXNfX2J1dHRvblwiLGFjdGl2ZVN0YXRlOlwiaXMtYWN0aXZlXCIsZm9jdXNTdGF0ZTpcImlzLWZvY3VzZWRcIixvcGVuU3RhdGU6XCJpcy1vcGVuXCIsZGlzYWJsZWRTdGF0ZTpcImlzLWRpc2FibGVkXCIsaGlnaGxpZ2h0ZWRTdGF0ZTpcImlzLWhpZ2hsaWdodGVkXCIsc2VsZWN0ZWRTdGF0ZTpcImlzLXNlbGVjdGVkXCIsZmxpcHBlZFN0YXRlOlwiaXMtZmxpcHBlZFwiLGxvYWRpbmdTdGF0ZTpcImlzLWxvYWRpbmdcIixub1Jlc3VsdHM6XCJoYXMtbm8tcmVzdWx0c1wiLG5vQ2hvaWNlczpcImhhcy1uby1jaG9pY2VzXCJ9LHQuREVGQVVMVF9DT05GSUc9e2l0ZW1zOltdLGNob2ljZXM6W10sc2lsZW50OiExLHJlbmRlckNob2ljZUxpbWl0Oi0xLG1heEl0ZW1Db3VudDotMSxhZGRJdGVtczohMCxhZGRJdGVtRmlsdGVyOm51bGwscmVtb3ZlSXRlbXM6ITAscmVtb3ZlSXRlbUJ1dHRvbjohMSxlZGl0SXRlbXM6ITEsZHVwbGljYXRlSXRlbXNBbGxvd2VkOiEwLGRlbGltaXRlcjpcIixcIixwYXN0ZTohMCxzZWFyY2hFbmFibGVkOiEwLHNlYXJjaENob2ljZXM6ITAsc2VhcmNoRmxvb3I6MSxzZWFyY2hSZXN1bHRMaW1pdDo0LHNlYXJjaEZpZWxkczpbXCJsYWJlbFwiLFwidmFsdWVcIl0scG9zaXRpb246XCJhdXRvXCIscmVzZXRTY3JvbGxQb3NpdGlvbjohMCxzaG91bGRTb3J0OiEwLHNob3VsZFNvcnRJdGVtczohMSxzb3J0ZXI6bi5zb3J0QnlBbHBoYSxwbGFjZWhvbGRlcjohMCxwbGFjZWhvbGRlclZhbHVlOm51bGwsc2VhcmNoUGxhY2Vob2xkZXJWYWx1ZTpudWxsLHByZXBlbmRWYWx1ZTpudWxsLGFwcGVuZFZhbHVlOm51bGwscmVuZGVyU2VsZWN0ZWRDaG9pY2VzOlwiYXV0b1wiLGxvYWRpbmdUZXh0OlwiTG9hZGluZy4uLlwiLG5vUmVzdWx0c1RleHQ6XCJObyByZXN1bHRzIGZvdW5kXCIsbm9DaG9pY2VzVGV4dDpcIk5vIGNob2ljZXMgdG8gY2hvb3NlIGZyb21cIixpdGVtU2VsZWN0VGV4dDpcIlByZXNzIHRvIHNlbGVjdFwiLHVuaXF1ZUl0ZW1UZXh0OlwiT25seSB1bmlxdWUgdmFsdWVzIGNhbiBiZSBhZGRlZFwiLGN1c3RvbUFkZEl0ZW1UZXh0OlwiT25seSB2YWx1ZXMgbWF0Y2hpbmcgc3BlY2lmaWMgY29uZGl0aW9ucyBjYW4gYmUgYWRkZWRcIixhZGRJdGVtVGV4dDpmdW5jdGlvbihlKXtyZXR1cm4nUHJlc3MgRW50ZXIgdG8gYWRkIDxiPlwiJytuLnNhbml0aXNlKGUpKydcIjwvYj4nfSxtYXhJdGVtVGV4dDpmdW5jdGlvbihlKXtyZXR1cm5cIk9ubHkgXCIrZStcIiB2YWx1ZXMgY2FuIGJlIGFkZGVkXCJ9LHZhbHVlQ29tcGFyZXI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT09PXR9LGZ1c2VPcHRpb25zOntpbmNsdWRlU2NvcmU6ITB9LGNhbGxiYWNrT25Jbml0Om51bGwsY2FsbGJhY2tPbkNyZWF0ZVRlbXBsYXRlczpudWxsLGNsYXNzTmFtZXM6dC5ERUZBVUxUX0NMQVNTTkFNRVN9LHQuRVZFTlRTPXtzaG93RHJvcGRvd246XCJzaG93RHJvcGRvd25cIixoaWRlRHJvcGRvd246XCJoaWRlRHJvcGRvd25cIixjaGFuZ2U6XCJjaGFuZ2VcIixjaG9pY2U6XCJjaG9pY2VcIixzZWFyY2g6XCJzZWFyY2hcIixhZGRJdGVtOlwiYWRkSXRlbVwiLHJlbW92ZUl0ZW06XCJyZW1vdmVJdGVtXCIsaGlnaGxpZ2h0SXRlbTpcImhpZ2hsaWdodEl0ZW1cIixoaWdobGlnaHRDaG9pY2U6XCJoaWdobGlnaHRDaG9pY2VcIix1bmhpZ2hsaWdodEl0ZW06XCJ1bmhpZ2hsaWdodEl0ZW1cIn0sdC5BQ1RJT05fVFlQRVM9e0FERF9DSE9JQ0U6XCJBRERfQ0hPSUNFXCIsRklMVEVSX0NIT0lDRVM6XCJGSUxURVJfQ0hPSUNFU1wiLEFDVElWQVRFX0NIT0lDRVM6XCJBQ1RJVkFURV9DSE9JQ0VTXCIsQ0xFQVJfQ0hPSUNFUzpcIkNMRUFSX0NIT0lDRVNcIixBRERfR1JPVVA6XCJBRERfR1JPVVBcIixBRERfSVRFTTpcIkFERF9JVEVNXCIsUkVNT1ZFX0lURU06XCJSRU1PVkVfSVRFTVwiLEhJR0hMSUdIVF9JVEVNOlwiSElHSExJR0hUX0lURU1cIixDTEVBUl9BTEw6XCJDTEVBUl9BTExcIixSRVNFVF9UTzpcIlJFU0VUX1RPXCIsU0VUX0lTX0xPQURJTkc6XCJTRVRfSVNfTE9BRElOR1wifSx0LktFWV9DT0RFUz17QkFDS19LRVk6NDYsREVMRVRFX0tFWTo4LEVOVEVSX0tFWToxMyxBX0tFWTo2NSxFU0NfS0VZOjI3LFVQX0tFWTozOCxET1dOX0tFWTo0MCxQQUdFX1VQX0tFWTozMyxQQUdFX0RPV05fS0VZOjM0fSx0LlRFWFRfVFlQRT1cInRleHRcIix0LlNFTEVDVF9PTkVfVFlQRT1cInNlbGVjdC1vbmVcIix0LlNFTEVDVF9NVUxUSVBMRV9UWVBFPVwic2VsZWN0LW11bHRpcGxlXCIsdC5TQ1JPTExJTkdfU1BFRUQ9NH0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO3ZhciBuO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZ2V0UmFuZG9tTnVtYmVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSoodC1lKStlKX0sdC5nZW5lcmF0ZUNoYXJzPWZ1bmN0aW9uKGUpe3JldHVybiBBcnJheS5mcm9tKHtsZW5ndGg6ZX0sKGZ1bmN0aW9uKCl7cmV0dXJuIHQuZ2V0UmFuZG9tTnVtYmVyKDAsMzYpLnRvU3RyaW5nKDM2KX0pKS5qb2luKFwiXCIpfSx0LmdlbmVyYXRlSWQ9ZnVuY3Rpb24oZSxpKXt2YXIgbj1lLmlkfHxlLm5hbWUmJmUubmFtZStcIi1cIit0LmdlbmVyYXRlQ2hhcnMoMil8fHQuZ2VuZXJhdGVDaGFycyg0KTtyZXR1cm4gbj1pK1wiLVwiKyhuPW4ucmVwbGFjZSgvKDp8XFwufFxcW3xcXF18LCkvZyxcIlwiKSl9LHQuZ2V0VHlwZT1mdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpfSx0LmlzVHlwZT1mdW5jdGlvbihlLGkpe3JldHVybiBudWxsIT1pJiZ0LmdldFR5cGUoaSk9PT1lfSx0LndyYXA9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSksZS5uZXh0U2libGluZz9lLnBhcmVudE5vZGUmJmUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodCxlLm5leHRTaWJsaW5nKTplLnBhcmVudE5vZGUmJmUucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0KSx0LmFwcGVuZENoaWxkKGUpfSx0LmdldEFkamFjZW50RWw9ZnVuY3Rpb24oZSx0LGkpe3ZvaWQgMD09PWkmJihpPTEpO2Zvcih2YXIgbj0oaT4wP1wibmV4dFwiOlwicHJldmlvdXNcIikrXCJFbGVtZW50U2libGluZ1wiLHI9ZVtuXTtyOyl7aWYoci5tYXRjaGVzKHQpKXJldHVybiByO3I9cltuXX1yZXR1cm4gcn0sdC5pc1Njcm9sbGVkSW50b1ZpZXc9ZnVuY3Rpb24oZSx0LGkpe3JldHVybiB2b2lkIDA9PT1pJiYoaT0xKSwhIWUmJihpPjA/dC5zY3JvbGxUb3ArdC5vZmZzZXRIZWlnaHQ+PWUub2Zmc2V0VG9wK2Uub2Zmc2V0SGVpZ2h0OmUub2Zmc2V0VG9wPj10LnNjcm9sbFRvcCl9LHQuc2FuaXRpc2U9ZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGU/ZTplLnJlcGxhY2UoLyYvZyxcIiZhbXA7XCIpLnJlcGxhY2UoLz4vZyxcIiZydDtcIikucmVwbGFjZSgvPC9nLFwiJmx0O1wiKS5yZXBsYWNlKC9cIi9nLFwiJnF1b3Q7XCIpfSx0LnN0clRvRWw9KG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxmdW5jdGlvbihlKXt2YXIgdD1lLnRyaW0oKTtuLmlubmVySFRNTD10O2Zvcih2YXIgaT1uLmNoaWxkcmVuWzBdO24uZmlyc3RDaGlsZDspbi5yZW1vdmVDaGlsZChuLmZpcnN0Q2hpbGQpO3JldHVybiBpfSksdC5zb3J0QnlBbHBoYT1mdW5jdGlvbihlLHQpe3ZhciBpPWUudmFsdWUsbj1lLmxhYmVsLHI9dm9pZCAwPT09bj9pOm4sbz10LnZhbHVlLHM9dC5sYWJlbCxhPXZvaWQgMD09PXM/bzpzO3JldHVybiByLmxvY2FsZUNvbXBhcmUoYSxbXSx7c2Vuc2l0aXZpdHk6XCJiYXNlXCIsaWdub3JlUHVuY3R1YXRpb246ITAsbnVtZXJpYzohMH0pfSx0LnNvcnRCeVNjb3JlPWZ1bmN0aW9uKGUsdCl7dmFyIGk9ZS5zY29yZSxuPXZvaWQgMD09PWk/MDppLHI9dC5zY29yZTtyZXR1cm4gbi0odm9pZCAwPT09cj8wOnIpfSx0LmRpc3BhdGNoRXZlbnQ9ZnVuY3Rpb24oZSx0LGkpe3ZvaWQgMD09PWkmJihpPW51bGwpO3ZhciBuPW5ldyBDdXN0b21FdmVudCh0LHtkZXRhaWw6aSxidWJibGVzOiEwLGNhbmNlbGFibGU6ITB9KTtyZXR1cm4gZS5kaXNwYXRjaEV2ZW50KG4pfSx0LmV4aXN0c0luQXJyYXk9ZnVuY3Rpb24oZSx0LGkpe3JldHVybiB2b2lkIDA9PT1pJiYoaT1cInZhbHVlXCIpLGUuc29tZSgoZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQ/ZVtpXT09PXQudHJpbSgpOmVbaV09PT10fSkpfSx0LmNsb25lT2JqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGUpKX0sdC5kaWZmPWZ1bmN0aW9uKGUsdCl7dmFyIGk9T2JqZWN0LmtleXMoZSkuc29ydCgpLG49T2JqZWN0LmtleXModCkuc29ydCgpO3JldHVybiBpLmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuIG4uaW5kZXhPZihlKTwwfSkpfX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiOyhmdW5jdGlvbihlLG4pe3ZhciByLG89aSg2KTtyPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dm9pZCAwIT09ZT9lOm47dmFyIHM9T2JqZWN0KG8uYSkocik7dC5hPXN9KS5jYWxsKHRoaXMsaSgxMiksaSgxMykoZSkpfSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7aS5yKHQpLGkuZCh0LFwiX19ET19OT1RfVVNFX19BY3Rpb25UeXBlc1wiLChmdW5jdGlvbigpe3JldHVybiBvfSkpLGkuZCh0LFwiYXBwbHlNaWRkbGV3YXJlXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIHZ9KSksaS5kKHQsXCJiaW5kQWN0aW9uQ3JlYXRvcnNcIiwoZnVuY3Rpb24oKXtyZXR1cm4gaH0pKSxpLmQodCxcImNvbWJpbmVSZWR1Y2Vyc1wiLChmdW5jdGlvbigpe3JldHVybiBsfSkpLGkuZCh0LFwiY29tcG9zZVwiLChmdW5jdGlvbigpe3JldHVybiBtfSkpLGkuZCh0LFwiY3JlYXRlU3RvcmVcIiwoZnVuY3Rpb24oKXtyZXR1cm4gYX0pKTt2YXIgbj1pKDIpLHI9ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KFwiXCIpLmpvaW4oXCIuXCIpfSxvPXtJTklUOlwiQEByZWR1eC9JTklUXCIrcigpLFJFUExBQ0U6XCJAQHJlZHV4L1JFUExBQ0VcIityKCksUFJPQkVfVU5LTk9XTl9BQ1RJT046ZnVuY3Rpb24oKXtyZXR1cm5cIkBAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05cIityKCl9fTtmdW5jdGlvbiBzKGUpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZSlyZXR1cm4hMTtmb3IodmFyIHQ9ZTtudWxsIT09T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpOyl0PU9iamVjdC5nZXRQcm90b3R5cGVPZih0KTtyZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKGUpPT09dH1mdW5jdGlvbiBhKGUsdCxpKXt2YXIgcjtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBhcmd1bWVudHNbM10pdGhyb3cgbmV3IEVycm9yKFwiSXQgbG9va3MgbGlrZSB5b3UgYXJlIHBhc3Npbmcgc2V2ZXJhbCBzdG9yZSBlbmhhbmNlcnMgdG8gY3JlYXRlU3RvcmUoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCBjb21wb3NlIHRoZW0gdG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24uXCIpO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJnZvaWQgMD09PWkmJihpPXQsdD12b2lkIDApLHZvaWQgMCE9PWkpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGkpdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uXCIpO3JldHVybiBpKGEpKGUsdCl9aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCB0aGUgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLlwiKTt2YXIgYz1lLGw9dCx1PVtdLGg9dSxkPSExO2Z1bmN0aW9uIHAoKXtoPT09dSYmKGg9dS5zbGljZSgpKX1mdW5jdGlvbiBmKCl7aWYoZCl0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLmdldFN0YXRlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiBUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuIFBhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuXCIpO3JldHVybiBsfWZ1bmN0aW9uIG0oZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCB0aGUgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi5cIik7aWYoZCl0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy5cIik7dmFyIHQ9ITA7cmV0dXJuIHAoKSxoLnB1c2goZSksZnVuY3Rpb24oKXtpZih0KXtpZihkKXRocm93IG5ldyBFcnJvcihcIllvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy5cIik7dD0hMSxwKCk7dmFyIGk9aC5pbmRleE9mKGUpO2guc3BsaWNlKGksMSl9fX1mdW5jdGlvbiB2KGUpe2lmKCFzKGUpKXRocm93IG5ldyBFcnJvcihcIkFjdGlvbnMgbXVzdCBiZSBwbGFpbiBvYmplY3RzLiBVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuXCIpO2lmKHZvaWQgMD09PWUudHlwZSl0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PycpO2lmKGQpdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLlwiKTt0cnl7ZD0hMCxsPWMobCxlKX1maW5hbGx5e2Q9ITF9Zm9yKHZhciB0PXU9aCxpPTA7aTx0Lmxlbmd0aDtpKyspeygwLHRbaV0pKCl9cmV0dXJuIGV9cmV0dXJuIHYoe3R5cGU6by5JTklUfSksKHI9e2Rpc3BhdGNoOnYsc3Vic2NyaWJlOm0sZ2V0U3RhdGU6ZixyZXBsYWNlUmVkdWNlcjpmdW5jdGlvbihlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIHRoZSBuZXh0UmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLlwiKTtjPWUsdih7dHlwZTpvLlJFUExBQ0V9KX19KVtuLmFdPWZ1bmN0aW9uKCl7dmFyIGUsdD1tO3JldHVybihlPXtzdWJzY3JpYmU6ZnVuY3Rpb24oZSl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lKXRocm93IG5ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCB0aGUgb2JzZXJ2ZXIgdG8gYmUgYW4gb2JqZWN0LlwiKTtmdW5jdGlvbiBpKCl7ZS5uZXh0JiZlLm5leHQoZigpKX1yZXR1cm4gaSgpLHt1bnN1YnNjcmliZTp0KGkpfX19KVtuLmFdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LGV9LHJ9ZnVuY3Rpb24gYyhlLHQpe3ZhciBpPXQmJnQudHlwZTtyZXR1cm5cIkdpdmVuIFwiKyhpJiYnYWN0aW9uIFwiJytTdHJpbmcoaSkrJ1wiJ3x8XCJhbiBhY3Rpb25cIikrJywgcmVkdWNlciBcIicrZSsnXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiBUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuIElmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLid9ZnVuY3Rpb24gbChlKXtmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSksaT17fSxuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciByPXRbbl07MCxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlW3JdJiYoaVtyXT1lW3JdKX12YXIgcyxhPU9iamVjdC5rZXlzKGkpO3RyeXshZnVuY3Rpb24oZSl7T2JqZWN0LmtleXMoZSkuZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIGk9ZVt0XTtpZih2b2lkIDA9PT1pKHZvaWQgMCx7dHlwZTpvLklOSVR9KSl0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXIgXCInK3QrXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIElmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIHlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO2lmKHZvaWQgMD09PWkodm9pZCAwLHt0eXBlOm8uUFJPQkVfVU5LTk9XTl9BQ1RJT04oKX0pKXRocm93IG5ldyBFcnJvcignUmVkdWNlciBcIicrdCtcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gRG9uJ3QgdHJ5IHRvIGhhbmRsZSBcIitvLklOSVQrJyBvciBvdGhlciBhY3Rpb25zIGluIFwicmVkdXgvKlwiIG5hbWVzcGFjZS4gVGhleSBhcmUgY29uc2lkZXJlZCBwcml2YXRlLiBJbnN0ZWFkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsIGluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBhY3Rpb24gdHlwZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQsIGJ1dCBjYW4gYmUgbnVsbC4nKX0pKX0oaSl9Y2F0Y2goZSl7cz1lfXJldHVybiBmdW5jdGlvbihlLHQpe2lmKHZvaWQgMD09PWUmJihlPXt9KSxzKXRocm93IHM7Zm9yKHZhciBuPSExLHI9e30sbz0wO288YS5sZW5ndGg7bysrKXt2YXIgbD1hW29dLHU9aVtsXSxoPWVbbF0sZD11KGgsdCk7aWYodm9pZCAwPT09ZCl7dmFyIHA9YyhsLHQpO3Rocm93IG5ldyBFcnJvcihwKX1yW2xdPWQsbj1ufHxkIT09aH1yZXR1cm4gbj9yOmV9fWZ1bmN0aW9uIHUoZSx0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdChlLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9fWZ1bmN0aW9uIGgoZSx0KXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKXJldHVybiB1KGUsdCk7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lKXRocm93IG5ldyBFcnJvcihcImJpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgaW5zdGVhZCByZWNlaXZlZCBcIisobnVsbD09PWU/XCJudWxsXCI6dHlwZW9mIGUpKycuIERpZCB5b3Ugd3JpdGUgXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVwiIGluc3RlYWQgb2YgXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXCI/Jyk7dmFyIGk9e307Zm9yKHZhciBuIGluIGUpe3ZhciByPWVbbl07XCJmdW5jdGlvblwiPT10eXBlb2YgciYmKGlbbl09dShyLHQpKX1yZXR1cm4gaX1mdW5jdGlvbiBkKGUsdCxpKXtyZXR1cm4gdCBpbiBlP09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse3ZhbHVlOmksZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTplW3RdPWksZX1mdW5jdGlvbiBwKGUsdCl7dmFyIGk9T2JqZWN0LmtleXMoZSk7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMmJmkucHVzaC5hcHBseShpLE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSkpLHQmJihpPWkuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHQpLmVudW1lcmFibGV9KSkpLGl9ZnVuY3Rpb24gZihlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgaT1udWxsIT1hcmd1bWVudHNbdF0/YXJndW1lbnRzW3RdOnt9O3QlMj9wKGksITApLmZvckVhY2goKGZ1bmN0aW9uKHQpe2QoZSx0LGlbdF0pfSkpOk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzP09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoaSkpOnAoaSkuZm9yRWFjaCgoZnVuY3Rpb24odCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGksdCkpfSkpfXJldHVybiBlfWZ1bmN0aW9uIG0oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCx0PW5ldyBBcnJheShlKSxpPTA7aTxlO2krKyl0W2ldPWFyZ3VtZW50c1tpXTtyZXR1cm4gMD09PXQubGVuZ3RoP2Z1bmN0aW9uKGUpe3JldHVybiBlfToxPT09dC5sZW5ndGg/dFswXTp0LnJlZHVjZSgoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZSh0LmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpKX19KSl9ZnVuY3Rpb24gdigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLHQ9bmV3IEFycmF5KGUpLGk9MDtpPGU7aSsrKXRbaV09YXJndW1lbnRzW2ldO3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgaT1lLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpLG49ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiBPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guXCIpfSxyPXtnZXRTdGF0ZTppLmdldFN0YXRlLGRpc3BhdGNoOmZ1bmN0aW9uKCl7cmV0dXJuIG4uYXBwbHkodm9pZCAwLGFyZ3VtZW50cyl9fSxvPXQubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gZShyKX0pKTtyZXR1cm4gZih7fSxpLHtkaXNwYXRjaDpuPW0uYXBwbHkodm9pZCAwLG8pKGkuZGlzcGF0Y2gpfSl9fX19LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcj1pKDMpLG89bihpKDE0KSkscz1uKGkoMTUpKSxhPW4oaSgxNikpLGM9bihpKDE3KSksbD1pKDEpO3QuZGVmYXVsdFN0YXRlPXtncm91cHM6W10saXRlbXM6W10sY2hvaWNlczpbXSxsb2FkaW5nOiExfTt2YXIgdT1yLmNvbWJpbmVSZWR1Y2Vycyh7aXRlbXM6by5kZWZhdWx0LGdyb3VwczpzLmRlZmF1bHQsY2hvaWNlczphLmRlZmF1bHQsbG9hZGluZzpjLmRlZmF1bHR9KTt0LmRlZmF1bHQ9ZnVuY3Rpb24oZSxpKXt2YXIgbj1lO2lmKFwiQ0xFQVJfQUxMXCI9PT1pLnR5cGUpbj10LmRlZmF1bHRTdGF0ZTtlbHNlIGlmKFwiUkVTRVRfVE9cIj09PWkudHlwZSlyZXR1cm4gbC5jbG9uZU9iamVjdChpLnN0YXRlKTtyZXR1cm4gdShuLGkpfX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWkoMSkscj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dmFyIHQ9ZS5lbGVtZW50LGk9ZS5jbGFzc05hbWVzO2lmKHRoaXMuZWxlbWVudD10LHRoaXMuY2xhc3NOYW1lcz1pLCEodCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnR8fHQgaW5zdGFuY2VvZiBIVE1MU2VsZWN0RWxlbWVudCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgZWxlbWVudCBwYXNzZWRcIik7dGhpcy5pc0Rpc2FibGVkPSExfXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJpc0FjdGl2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cImFjdGl2ZVwiPT09dGhpcy5lbGVtZW50LmRhdGFzZXQuY2hvaWNlfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImRpclwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbGVtZW50LmRpcn0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJ2YWx1ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbGVtZW50LnZhbHVlfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5lbGVtZW50LnZhbHVlPWV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksZS5wcm90b3R5cGUuY29uY2VhbD1mdW5jdGlvbigpe3RoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lcy5pbnB1dCksdGhpcy5lbGVtZW50LmhpZGRlbj0hMCx0aGlzLmVsZW1lbnQudGFiSW5kZXg9LTE7dmFyIGU9dGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcInN0eWxlXCIpO2UmJnRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWNob2ljZS1vcmlnLXN0eWxlXCIsZSksdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtY2hvaWNlXCIsXCJhY3RpdmVcIil9LGUucHJvdG90eXBlLnJldmVhbD1mdW5jdGlvbigpe3RoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY2xhc3NOYW1lcy5pbnB1dCksdGhpcy5lbGVtZW50LmhpZGRlbj0hMSx0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwidGFiaW5kZXhcIik7dmFyIGU9dGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtY2hvaWNlLW9yaWctc3R5bGVcIik7ZT8odGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtY2hvaWNlLW9yaWctc3R5bGVcIiksdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcInN0eWxlXCIsZSkpOnRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJzdHlsZVwiKSx0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1jaG9pY2VcIiksdGhpcy5lbGVtZW50LnZhbHVlPXRoaXMuZWxlbWVudC52YWx1ZX0sZS5wcm90b3R5cGUuZW5hYmxlPWZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImRpc2FibGVkXCIpLHRoaXMuZWxlbWVudC5kaXNhYmxlZD0hMSx0aGlzLmlzRGlzYWJsZWQ9ITF9LGUucHJvdG90eXBlLmRpc2FibGU9ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIixcIlwiKSx0aGlzLmVsZW1lbnQuZGlzYWJsZWQ9ITAsdGhpcy5pc0Rpc2FibGVkPSEwfSxlLnByb3RvdHlwZS50cmlnZ2VyRXZlbnQ9ZnVuY3Rpb24oZSx0KXtuLmRpc3BhdGNoRXZlbnQodGhpcy5lbGVtZW50LGUsdCl9LGV9KCk7dC5kZWZhdWx0PXJ9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3ZhciB0LGk9ZS5TeW1ib2w7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgaT9pLm9ic2VydmFibGU/dD1pLm9ic2VydmFibGU6KHQ9aShcIm9ic2VydmFibGVcIiksaS5vYnNlcnZhYmxlPXQpOnQ9XCJAQG9ic2VydmFibGVcIix0fWkuZCh0LFwiYVwiLChmdW5jdGlvbigpe3JldHVybiBufSkpfSxmdW5jdGlvbihlLHQsaSl7ZS5leHBvcnRzPWkoOCl9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fc3ByZWFkQXJyYXlzfHxmdW5jdGlvbigpe2Zvcih2YXIgZT0wLHQ9MCxpPWFyZ3VtZW50cy5sZW5ndGg7dDxpO3QrKyllKz1hcmd1bWVudHNbdF0ubGVuZ3RoO3ZhciBuPUFycmF5KGUpLHI9MDtmb3IodD0wO3Q8aTt0KyspZm9yKHZhciBvPWFyZ3VtZW50c1t0XSxzPTAsYT1vLmxlbmd0aDtzPGE7cysrLHIrKyluW3JdPW9bc107cmV0dXJuIG59LHI9dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89cihpKDkpKSxzPXIoaSgxMCkpLGE9cihpKDExKSksYz1pKDE4KSxsPWkoMCksdT1yKGkoMjUpKSxoPWkoMjYpLGQ9aSgyNykscD1pKDI4KSxmPWkoMjkpLG09aSgxKSx2PWkoNCksXz1cIi1tcy1zY3JvbGwtbGltaXRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSYmXCItbXMtaW1lLWFsaWduXCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUsZz17fSx5PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LGkpe3ZhciByPXRoaXM7dm9pZCAwPT09dCYmKHQ9XCJbZGF0YS1jaG9pY2VdXCIpLHZvaWQgMD09PWkmJihpPXt9KSx0aGlzLmNvbmZpZz1zLmRlZmF1bHQuYWxsKFtsLkRFRkFVTFRfQ09ORklHLGUuZGVmYXVsdHMub3B0aW9ucyxpXSx7YXJyYXlNZXJnZTpmdW5jdGlvbihlLHQpe3JldHVybiBuKHQpfX0pO3ZhciBvPW0uZGlmZih0aGlzLmNvbmZpZyxsLkRFRkFVTFRfQ09ORklHKTtvLmxlbmd0aCYmY29uc29sZS53YXJuKFwiVW5rbm93biBjb25maWcgb3B0aW9uKHMpIHBhc3NlZFwiLG8uam9pbihcIiwgXCIpKTt2YXIgdT1cInN0cmluZ1wiPT10eXBlb2YgdD9kb2N1bWVudC5xdWVyeVNlbGVjdG9yKHQpOnQ7aWYoISh1IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudHx8dSBpbnN0YW5jZW9mIEhUTUxTZWxlY3RFbGVtZW50KSl0aHJvdyBUeXBlRXJyb3IoXCJFeHBlY3RlZCBvbmUgb2YgdGhlIGZvbGxvd2luZyB0eXBlcyB0ZXh0fHNlbGVjdC1vbmV8c2VsZWN0LW11bHRpcGxlXCIpO2lmKHRoaXMuX2lzVGV4dEVsZW1lbnQ9dS50eXBlPT09bC5URVhUX1RZUEUsdGhpcy5faXNTZWxlY3RPbmVFbGVtZW50PXUudHlwZT09PWwuU0VMRUNUX09ORV9UWVBFLHRoaXMuX2lzU2VsZWN0TXVsdGlwbGVFbGVtZW50PXUudHlwZT09PWwuU0VMRUNUX01VTFRJUExFX1RZUEUsdGhpcy5faXNTZWxlY3RFbGVtZW50PXRoaXMuX2lzU2VsZWN0T25lRWxlbWVudHx8dGhpcy5faXNTZWxlY3RNdWx0aXBsZUVsZW1lbnQsdGhpcy5jb25maWcuc2VhcmNoRW5hYmxlZD10aGlzLl9pc1NlbGVjdE11bHRpcGxlRWxlbWVudHx8dGhpcy5jb25maWcuc2VhcmNoRW5hYmxlZCxbXCJhdXRvXCIsXCJhbHdheXNcIl0uaW5jbHVkZXMoXCJcIit0aGlzLmNvbmZpZy5yZW5kZXJTZWxlY3RlZENob2ljZXMpfHwodGhpcy5jb25maWcucmVuZGVyU2VsZWN0ZWRDaG9pY2VzPVwiYXV0b1wiKSxpLmFkZEl0ZW1GaWx0ZXImJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGkuYWRkSXRlbUZpbHRlcil7dmFyIGg9aS5hZGRJdGVtRmlsdGVyIGluc3RhbmNlb2YgUmVnRXhwP2kuYWRkSXRlbUZpbHRlcjpuZXcgUmVnRXhwKGkuYWRkSXRlbUZpbHRlcik7dGhpcy5jb25maWcuYWRkSXRlbUZpbHRlcj1oLnRlc3QuYmluZChoKX1pZih0aGlzLl9pc1RleHRFbGVtZW50P3RoaXMucGFzc2VkRWxlbWVudD1uZXcgYy5XcmFwcGVkSW5wdXQoe2VsZW1lbnQ6dSxjbGFzc05hbWVzOnRoaXMuY29uZmlnLmNsYXNzTmFtZXMsZGVsaW1pdGVyOnRoaXMuY29uZmlnLmRlbGltaXRlcn0pOnRoaXMucGFzc2VkRWxlbWVudD1uZXcgYy5XcmFwcGVkU2VsZWN0KHtlbGVtZW50OnUsY2xhc3NOYW1lczp0aGlzLmNvbmZpZy5jbGFzc05hbWVzLHRlbXBsYXRlOmZ1bmN0aW9uKGUpe3JldHVybiByLl90ZW1wbGF0ZXMub3B0aW9uKGUpfX0pLHRoaXMuaW5pdGlhbGlzZWQ9ITEsdGhpcy5fc3RvcmU9bmV3IGEuZGVmYXVsdCx0aGlzLl9pbml0aWFsU3RhdGU9di5kZWZhdWx0U3RhdGUsdGhpcy5fY3VycmVudFN0YXRlPXYuZGVmYXVsdFN0YXRlLHRoaXMuX3ByZXZTdGF0ZT12LmRlZmF1bHRTdGF0ZSx0aGlzLl9jdXJyZW50VmFsdWU9XCJcIix0aGlzLl9jYW5TZWFyY2g9ISF0aGlzLmNvbmZpZy5zZWFyY2hFbmFibGVkLHRoaXMuX2lzU2Nyb2xsaW5nT25JZT0hMSx0aGlzLl9oaWdobGlnaHRQb3NpdGlvbj0wLHRoaXMuX3dhc1RhcD0hMCx0aGlzLl9wbGFjZWhvbGRlclZhbHVlPXRoaXMuX2dlbmVyYXRlUGxhY2Vob2xkZXJWYWx1ZSgpLHRoaXMuX2Jhc2VJZD1tLmdlbmVyYXRlSWQodGhpcy5wYXNzZWRFbGVtZW50LmVsZW1lbnQsXCJjaG9pY2VzLVwiKSx0aGlzLl9kaXJlY3Rpb249dGhpcy5wYXNzZWRFbGVtZW50LmRpciwhdGhpcy5fZGlyZWN0aW9uKXt2YXIgZD13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLnBhc3NlZEVsZW1lbnQuZWxlbWVudCkuZGlyZWN0aW9uO2QhPT13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLmRpcmVjdGlvbiYmKHRoaXMuX2RpcmVjdGlvbj1kKX1pZih0aGlzLl9pZE5hbWVzPXtpdGVtQ2hvaWNlOlwiaXRlbS1jaG9pY2VcIn0sdGhpcy5faXNTZWxlY3RFbGVtZW50JiYodGhpcy5fcHJlc2V0R3JvdXBzPXRoaXMucGFzc2VkRWxlbWVudC5vcHRpb25Hcm91cHMsdGhpcy5fcHJlc2V0T3B0aW9ucz10aGlzLnBhc3NlZEVsZW1lbnQub3B0aW9ucyksdGhpcy5fcHJlc2V0Q2hvaWNlcz10aGlzLmNvbmZpZy5jaG9pY2VzLHRoaXMuX3ByZXNldEl0ZW1zPXRoaXMuY29uZmlnLml0ZW1zLHRoaXMucGFzc2VkRWxlbWVudC52YWx1ZSYmdGhpcy5faXNUZXh0RWxlbWVudCl7dmFyIHA9dGhpcy5wYXNzZWRFbGVtZW50LnZhbHVlLnNwbGl0KHRoaXMuY29uZmlnLmRlbGltaXRlcik7dGhpcy5fcHJlc2V0SXRlbXM9dGhpcy5fcHJlc2V0SXRlbXMuY29uY2F0KHApfWlmKHRoaXMucGFzc2VkRWxlbWVudC5vcHRpb25zJiZ0aGlzLnBhc3NlZEVsZW1lbnQub3B0aW9ucy5mb3JFYWNoKChmdW5jdGlvbihlKXtyLl9wcmVzZXRDaG9pY2VzLnB1c2goe3ZhbHVlOmUudmFsdWUsbGFiZWw6ZS5pbm5lckhUTUwsc2VsZWN0ZWQ6ISFlLnNlbGVjdGVkLGRpc2FibGVkOmUuZGlzYWJsZWR8fGUucGFyZW50Tm9kZS5kaXNhYmxlZCxwbGFjZWhvbGRlcjpcIlwiPT09ZS52YWx1ZXx8ZS5oYXNBdHRyaWJ1dGUoXCJwbGFjZWhvbGRlclwiKSxjdXN0b21Qcm9wZXJ0aWVzOmUuZGF0YXNldFtcImN1c3RvbS1wcm9wZXJ0aWVzXCJdfSl9KSksdGhpcy5fcmVuZGVyPXRoaXMuX3JlbmRlci5iaW5kKHRoaXMpLHRoaXMuX29uRm9jdXM9dGhpcy5fb25Gb2N1cy5iaW5kKHRoaXMpLHRoaXMuX29uQmx1cj10aGlzLl9vbkJsdXIuYmluZCh0aGlzKSx0aGlzLl9vbktleVVwPXRoaXMuX29uS2V5VXAuYmluZCh0aGlzKSx0aGlzLl9vbktleURvd249dGhpcy5fb25LZXlEb3duLmJpbmQodGhpcyksdGhpcy5fb25DbGljaz10aGlzLl9vbkNsaWNrLmJpbmQodGhpcyksdGhpcy5fb25Ub3VjaE1vdmU9dGhpcy5fb25Ub3VjaE1vdmUuYmluZCh0aGlzKSx0aGlzLl9vblRvdWNoRW5kPXRoaXMuX29uVG91Y2hFbmQuYmluZCh0aGlzKSx0aGlzLl9vbk1vdXNlRG93bj10aGlzLl9vbk1vdXNlRG93bi5iaW5kKHRoaXMpLHRoaXMuX29uTW91c2VPdmVyPXRoaXMuX29uTW91c2VPdmVyLmJpbmQodGhpcyksdGhpcy5fb25Gb3JtUmVzZXQ9dGhpcy5fb25Gb3JtUmVzZXQuYmluZCh0aGlzKSx0aGlzLl9vblNlbGVjdEtleT10aGlzLl9vblNlbGVjdEtleS5iaW5kKHRoaXMpLHRoaXMuX29uRW50ZXJLZXk9dGhpcy5fb25FbnRlcktleS5iaW5kKHRoaXMpLHRoaXMuX29uRXNjYXBlS2V5PXRoaXMuX29uRXNjYXBlS2V5LmJpbmQodGhpcyksdGhpcy5fb25EaXJlY3Rpb25LZXk9dGhpcy5fb25EaXJlY3Rpb25LZXkuYmluZCh0aGlzKSx0aGlzLl9vbkRlbGV0ZUtleT10aGlzLl9vbkRlbGV0ZUtleS5iaW5kKHRoaXMpLHRoaXMucGFzc2VkRWxlbWVudC5pc0FjdGl2ZSlyZXR1cm4gdGhpcy5jb25maWcuc2lsZW50fHxjb25zb2xlLndhcm4oXCJUcnlpbmcgdG8gaW5pdGlhbGlzZSBDaG9pY2VzIG9uIGVsZW1lbnQgYWxyZWFkeSBpbml0aWFsaXNlZFwiLHtlbGVtZW50OnR9KSx2b2lkKHRoaXMuaW5pdGlhbGlzZWQ9ITApO3RoaXMuaW5pdCgpfXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImRlZmF1bHRzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe2dldCBvcHRpb25zKCl7cmV0dXJuIGd9LGdldCB0ZW1wbGF0ZXMoKXtyZXR1cm4gdS5kZWZhdWx0fX0pfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGUucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oKXtpZighdGhpcy5pbml0aWFsaXNlZCl7dGhpcy5fY3JlYXRlVGVtcGxhdGVzKCksdGhpcy5fY3JlYXRlRWxlbWVudHMoKSx0aGlzLl9jcmVhdGVTdHJ1Y3R1cmUoKSx0aGlzLl9zdG9yZS5zdWJzY3JpYmUodGhpcy5fcmVuZGVyKSx0aGlzLl9yZW5kZXIoKSx0aGlzLl9hZGRFdmVudExpc3RlbmVycygpLCghdGhpcy5jb25maWcuYWRkSXRlbXN8fHRoaXMucGFzc2VkRWxlbWVudC5lbGVtZW50Lmhhc0F0dHJpYnV0ZShcImRpc2FibGVkXCIpKSYmdGhpcy5kaXNhYmxlKCksdGhpcy5pbml0aWFsaXNlZD0hMDt2YXIgZT10aGlzLmNvbmZpZy5jYWxsYmFja09uSW5pdDtlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiZlLmNhbGwodGhpcyl9fSxlLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dGhpcy5pbml0aWFsaXNlZCYmKHRoaXMuX3JlbW92ZUV2ZW50TGlzdGVuZXJzKCksdGhpcy5wYXNzZWRFbGVtZW50LnJldmVhbCgpLHRoaXMuY29udGFpbmVyT3V0ZXIudW53cmFwKHRoaXMucGFzc2VkRWxlbWVudC5lbGVtZW50KSx0aGlzLmNsZWFyU3RvcmUoKSx0aGlzLl9pc1NlbGVjdEVsZW1lbnQmJih0aGlzLnBhc3NlZEVsZW1lbnQub3B0aW9ucz10aGlzLl9wcmVzZXRPcHRpb25zKSx0aGlzLl90ZW1wbGF0ZXM9dS5kZWZhdWx0LHRoaXMuaW5pdGlhbGlzZWQ9ITEpfSxlLnByb3RvdHlwZS5lbmFibGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYXNzZWRFbGVtZW50LmlzRGlzYWJsZWQmJnRoaXMucGFzc2VkRWxlbWVudC5lbmFibGUoKSx0aGlzLmNvbnRhaW5lck91dGVyLmlzRGlzYWJsZWQmJih0aGlzLl9hZGRFdmVudExpc3RlbmVycygpLHRoaXMuaW5wdXQuZW5hYmxlKCksdGhpcy5jb250YWluZXJPdXRlci5lbmFibGUoKSksdGhpc30sZS5wcm90b3R5cGUuZGlzYWJsZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnBhc3NlZEVsZW1lbnQuaXNEaXNhYmxlZHx8dGhpcy5wYXNzZWRFbGVtZW50LmRpc2FibGUoKSx0aGlzLmNvbnRhaW5lck91dGVyLmlzRGlzYWJsZWR8fCh0aGlzLl9yZW1vdmVFdmVudExpc3RlbmVycygpLHRoaXMuaW5wdXQuZGlzYWJsZSgpLHRoaXMuY29udGFpbmVyT3V0ZXIuZGlzYWJsZSgpKSx0aGlzfSxlLnByb3RvdHlwZS5oaWdobGlnaHRJdGVtPWZ1bmN0aW9uKGUsdCl7aWYodm9pZCAwPT09dCYmKHQ9ITApLCFlfHwhZS5pZClyZXR1cm4gdGhpczt2YXIgaT1lLmlkLG49ZS5ncm91cElkLHI9dm9pZCAwPT09bj8tMTpuLG89ZS52YWx1ZSxzPXZvaWQgMD09PW8/XCJcIjpvLGE9ZS5sYWJlbCxjPXZvaWQgMD09PWE/XCJcIjphLHU9cj49MD90aGlzLl9zdG9yZS5nZXRHcm91cEJ5SWQocik6bnVsbDtyZXR1cm4gdGhpcy5fc3RvcmUuZGlzcGF0Y2goZC5oaWdobGlnaHRJdGVtKGksITApKSx0JiZ0aGlzLnBhc3NlZEVsZW1lbnQudHJpZ2dlckV2ZW50KGwuRVZFTlRTLmhpZ2hsaWdodEl0ZW0se2lkOmksdmFsdWU6cyxsYWJlbDpjLGdyb3VwVmFsdWU6dSYmdS52YWx1ZT91LnZhbHVlOm51bGx9KSx0aGlzfSxlLnByb3RvdHlwZS51bmhpZ2hsaWdodEl0ZW09ZnVuY3Rpb24oZSl7aWYoIWV8fCFlLmlkKXJldHVybiB0aGlzO3ZhciB0PWUuaWQsaT1lLmdyb3VwSWQsbj12b2lkIDA9PT1pPy0xOmkscj1lLnZhbHVlLG89dm9pZCAwPT09cj9cIlwiOnIscz1lLmxhYmVsLGE9dm9pZCAwPT09cz9cIlwiOnMsYz1uPj0wP3RoaXMuX3N0b3JlLmdldEdyb3VwQnlJZChuKTpudWxsO3JldHVybiB0aGlzLl9zdG9yZS5kaXNwYXRjaChkLmhpZ2hsaWdodEl0ZW0odCwhMSkpLHRoaXMucGFzc2VkRWxlbWVudC50cmlnZ2VyRXZlbnQobC5FVkVOVFMuaGlnaGxpZ2h0SXRlbSx7aWQ6dCx2YWx1ZTpvLGxhYmVsOmEsZ3JvdXBWYWx1ZTpjJiZjLnZhbHVlP2MudmFsdWU6bnVsbH0pLHRoaXN9LGUucHJvdG90eXBlLmhpZ2hsaWdodEFsbD1mdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIHRoaXMuX3N0b3JlLml0ZW1zLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiBlLmhpZ2hsaWdodEl0ZW0odCl9KSksdGhpc30sZS5wcm90b3R5cGUudW5oaWdobGlnaHRBbGw9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3JldHVybiB0aGlzLl9zdG9yZS5pdGVtcy5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gZS51bmhpZ2hsaWdodEl0ZW0odCl9KSksdGhpc30sZS5wcm90b3R5cGUucmVtb3ZlQWN0aXZlSXRlbXNCeVZhbHVlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIHRoaXMuX3N0b3JlLmFjdGl2ZUl0ZW1zLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIHQudmFsdWU9PT1lfSkpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3JldHVybiB0Ll9yZW1vdmVJdGVtKGUpfSkpLHRoaXN9LGUucHJvdG90eXBlLnJlbW92ZUFjdGl2ZUl0ZW1zPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIHRoaXMuX3N0b3JlLmFjdGl2ZUl0ZW1zLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIHQuaWQhPT1lfSkpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3JldHVybiB0Ll9yZW1vdmVJdGVtKGUpfSkpLHRoaXN9LGUucHJvdG90eXBlLnJlbW92ZUhpZ2hsaWdodGVkSXRlbXM9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4gdm9pZCAwPT09ZSYmKGU9ITEpLHRoaXMuX3N0b3JlLmhpZ2hsaWdodGVkQWN0aXZlSXRlbXMuZm9yRWFjaCgoZnVuY3Rpb24oaSl7dC5fcmVtb3ZlSXRlbShpKSxlJiZ0Ll90cmlnZ2VyQ2hhbmdlKGkudmFsdWUpfSkpLHRoaXN9LGUucHJvdG90eXBlLnNob3dEcm9wZG93bj1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiB0aGlzLmRyb3Bkb3duLmlzQWN0aXZlP3RoaXM6KHJlcXVlc3RBbmltYXRpb25GcmFtZSgoZnVuY3Rpb24oKXt0LmRyb3Bkb3duLnNob3coKSx0LmNvbnRhaW5lck91dGVyLm9wZW4odC5kcm9wZG93bi5kaXN0YW5jZUZyb21Ub3BXaW5kb3cpLCFlJiZ0Ll9jYW5TZWFyY2gmJnQuaW5wdXQuZm9jdXMoKSx0LnBhc3NlZEVsZW1lbnQudHJpZ2dlckV2ZW50KGwuRVZFTlRTLnNob3dEcm9wZG93bix7fSl9KSksdGhpcyl9LGUucHJvdG90eXBlLmhpZGVEcm9wZG93bj1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiB0aGlzLmRyb3Bkb3duLmlzQWN0aXZlPyhyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKGZ1bmN0aW9uKCl7dC5kcm9wZG93bi5oaWRlKCksdC5jb250YWluZXJPdXRlci5jbG9zZSgpLCFlJiZ0Ll9jYW5TZWFyY2gmJih0LmlucHV0LnJlbW92ZUFjdGl2ZURlc2NlbmRhbnQoKSx0LmlucHV0LmJsdXIoKSksdC5wYXNzZWRFbGVtZW50LnRyaWdnZXJFdmVudChsLkVWRU5UUy5oaWRlRHJvcGRvd24se30pfSkpLHRoaXMpOnRoaXN9LGUucHJvdG90eXBlLmdldFZhbHVlPWZ1bmN0aW9uKGUpe3ZvaWQgMD09PWUmJihlPSExKTt2YXIgdD10aGlzLl9zdG9yZS5hY3RpdmVJdGVtcy5yZWR1Y2UoKGZ1bmN0aW9uKHQsaSl7dmFyIG49ZT9pLnZhbHVlOmk7cmV0dXJuIHQucHVzaChuKSx0fSksW10pO3JldHVybiB0aGlzLl9pc1NlbGVjdE9uZUVsZW1lbnQ/dFswXTp0fSxlLnByb3RvdHlwZS5zZXRWYWx1ZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiB0aGlzLmluaXRpYWxpc2VkPyhlLmZvckVhY2goKGZ1bmN0aW9uKGUpe3JldHVybiB0Ll9zZXRDaG9pY2VPckl0ZW0oZSl9KSksdGhpcyk6dGhpc30sZS5wcm90b3R5cGUuc2V0Q2hvaWNlQnlWYWx1ZT1mdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiF0aGlzLmluaXRpYWxpc2VkfHx0aGlzLl9pc1RleHRFbGVtZW50P3RoaXM6KChBcnJheS5pc0FycmF5KGUpP2U6W2VdKS5mb3JFYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gdC5fZmluZEFuZFNlbGVjdENob2ljZUJ5VmFsdWUoZSl9KSksdGhpcyl9LGUucHJvdG90eXBlLnNldENob2ljZXM9ZnVuY3Rpb24oZSx0LGksbil7dmFyIHI9dGhpcztpZih2b2lkIDA9PT1lJiYoZT1bXSksdm9pZCAwPT09dCYmKHQ9XCJ2YWx1ZVwiKSx2b2lkIDA9PT1pJiYoaT1cImxhYmVsXCIpLHZvaWQgMD09PW4mJihuPSExKSwhdGhpcy5pbml0aWFsaXNlZCl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJzZXRDaG9pY2VzIHdhcyBjYWxsZWQgb24gYSBub24taW5pdGlhbGl6ZWQgaW5zdGFuY2Ugb2YgQ2hvaWNlc1wiKTtpZighdGhpcy5faXNTZWxlY3RFbGVtZW50KXRocm93IG5ldyBUeXBlRXJyb3IoXCJzZXRDaG9pY2VzIGNhbid0IGJlIHVzZWQgd2l0aCBJTlBVVCBiYXNlZCBDaG9pY2VzXCIpO2lmKFwic3RyaW5nXCIhPXR5cGVvZiB0fHwhdCl0aHJvdyBuZXcgVHlwZUVycm9yKFwidmFsdWUgcGFyYW1ldGVyIG11c3QgYmUgYSBuYW1lIG9mICd2YWx1ZScgZmllbGQgaW4gcGFzc2VkIG9iamVjdHNcIik7aWYobiYmdGhpcy5jbGVhckNob2ljZXMoKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKXt2YXIgbz1lKHRoaXMpO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb21pc2UmJm8gaW5zdGFuY2VvZiBQcm9taXNlKXJldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSl7cmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShlKX0pKS50aGVuKChmdW5jdGlvbigpe3JldHVybiByLl9oYW5kbGVMb2FkaW5nU3RhdGUoITApfSkpLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIG99KSkudGhlbigoZnVuY3Rpb24oZSl7cmV0dXJuIHIuc2V0Q2hvaWNlcyhlLHQsaSxuKX0pKS5jYXRjaCgoZnVuY3Rpb24oZSl7ci5jb25maWcuc2lsZW50fHxjb25zb2xlLmVycm9yKGUpfSkpLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIHIuX2hhbmRsZUxvYWRpbmdTdGF0ZSghMSl9KSkudGhlbigoZnVuY3Rpb24oKXtyZXR1cm4gcn0pKTtpZighQXJyYXkuaXNBcnJheShvKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiLnNldENob2ljZXMgZmlyc3QgYXJndW1lbnQgZnVuY3Rpb24gbXVzdCByZXR1cm4gZWl0aGVyIGFycmF5IG9mIGNob2ljZXMgb3IgUHJvbWlzZSwgZ290OiBcIit0eXBlb2Ygbyk7cmV0dXJuIHRoaXMuc2V0Q2hvaWNlcyhvLHQsaSwhMSl9aWYoIUFycmF5LmlzQXJyYXkoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIi5zZXRDaG9pY2VzIG11c3QgYmUgY2FsbGVkIGVpdGhlciB3aXRoIGFycmF5IG9mIGNob2ljZXMgd2l0aCBhIGZ1bmN0aW9uIHJlc3VsdGluZyBpbnRvIFByb21pc2Ugb2YgYXJyYXkgb2YgY2hvaWNlc1wiKTtyZXR1cm4gdGhpcy5jb250YWluZXJPdXRlci5yZW1vdmVMb2FkaW5nU3RhdGUoKSx0aGlzLl9zdGFydExvYWRpbmcoKSxlLmZvckVhY2goKGZ1bmN0aW9uKGUpe2lmKGUuY2hvaWNlcylyLl9hZGRHcm91cCh7aWQ6ZS5pZD9wYXJzZUludChcIlwiK2UuaWQsMTApOm51bGwsZ3JvdXA6ZSx2YWx1ZUtleTp0LGxhYmVsS2V5Oml9KTtlbHNle3ZhciBuPWU7ci5fYWRkQ2hvaWNlKHt2YWx1ZTpuW3RdLGxhYmVsOm5baV0saXNTZWxlY3RlZDohIW4uc2VsZWN0ZWQsaXNEaXNhYmxlZDohIW4uZGlzYWJsZWQscGxhY2Vob2xkZXI6ISFuLnBsYWNlaG9sZGVyLGN1c3RvbVByb3BlcnRpZXM6bi5jdXN0b21Qcm9wZXJ0aWVzfSl9fSkpLHRoaXMuX3N0b3BMb2FkaW5nKCksdGhpc30sZS5wcm90b3R5cGUuY2xlYXJDaG9pY2VzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3N0b3JlLmRpc3BhdGNoKGguY2xlYXJDaG9pY2VzKCkpLHRoaXN9LGUucHJvdG90eXBlLmNsZWFyU3RvcmU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3RvcmUuZGlzcGF0Y2goZi5jbGVhckFsbCgpKSx0aGlzfSxlLnByb3RvdHlwZS5jbGVhcklucHV0PWZ1bmN0aW9uKCl7dmFyIGU9IXRoaXMuX2lzU2VsZWN0T25lRWxlbWVudDtyZXR1cm4gdGhpcy5pbnB1dC5jbGVhcihlKSwhdGhpcy5faXNUZXh0RWxlbWVudCYmdGhpcy5fY2FuU2VhcmNoJiYodGhpcy5faXNTZWFyY2hpbmc9ITEsdGhpcy5fc3RvcmUuZGlzcGF0Y2goaC5hY3RpdmF0ZUNob2ljZXMoITApKSksdGhpc30sZS5wcm90b3R5cGUuX3JlbmRlcj1mdW5jdGlvbigpe2lmKCF0aGlzLl9zdG9yZS5pc0xvYWRpbmcoKSl7dGhpcy5fY3VycmVudFN0YXRlPXRoaXMuX3N0b3JlLnN0YXRlO3ZhciBlPXRoaXMuX2N1cnJlbnRTdGF0ZS5jaG9pY2VzIT09dGhpcy5fcHJldlN0YXRlLmNob2ljZXN8fHRoaXMuX2N1cnJlbnRTdGF0ZS5ncm91cHMhPT10aGlzLl9wcmV2U3RhdGUuZ3JvdXBzfHx0aGlzLl9jdXJyZW50U3RhdGUuaXRlbXMhPT10aGlzLl9wcmV2U3RhdGUuaXRlbXMsdD10aGlzLl9pc1NlbGVjdEVsZW1lbnQsaT10aGlzLl9jdXJyZW50U3RhdGUuaXRlbXMhPT10aGlzLl9wcmV2U3RhdGUuaXRlbXM7ZSYmKHQmJnRoaXMuX3JlbmRlckNob2ljZXMoKSxpJiZ0aGlzLl9yZW5kZXJJdGVtcygpLHRoaXMuX3ByZXZTdGF0ZT10aGlzLl9jdXJyZW50U3RhdGUpfX0sZS5wcm90b3R5cGUuX3JlbmRlckNob2ljZXM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9dGhpcy5fc3RvcmUsaT10LmFjdGl2ZUdyb3VwcyxuPXQuYWN0aXZlQ2hvaWNlcyxyPWRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtpZih0aGlzLmNob2ljZUxpc3QuY2xlYXIoKSx0aGlzLmNvbmZpZy5yZXNldFNjcm9sbFBvc2l0aW9uJiZyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKGZ1bmN0aW9uKCl7cmV0dXJuIGUuY2hvaWNlTGlzdC5zY3JvbGxUb1RvcCgpfSkpLGkubGVuZ3RoPj0xJiYhdGhpcy5faXNTZWFyY2hpbmcpe3ZhciBvPW4uZmlsdGVyKChmdW5jdGlvbihlKXtyZXR1cm4hMD09PWUucGxhY2Vob2xkZXImJi0xPT09ZS5ncm91cElkfSkpO28ubGVuZ3RoPj0xJiYocj10aGlzLl9jcmVhdGVDaG9pY2VzRnJhZ21lbnQobyxyKSkscj10aGlzLl9jcmVhdGVHcm91cHNGcmFnbWVudChpLG4scil9ZWxzZSBuLmxlbmd0aD49MSYmKHI9dGhpcy5fY3JlYXRlQ2hvaWNlc0ZyYWdtZW50KG4scikpO2lmKHIuY2hpbGROb2RlcyYmci5jaGlsZE5vZGVzLmxlbmd0aD4wKXt2YXIgcz10aGlzLl9zdG9yZS5hY3RpdmVJdGVtcyxhPXRoaXMuX2NhbkFkZEl0ZW0ocyx0aGlzLmlucHV0LnZhbHVlKTtpZihhLnJlc3BvbnNlKXRoaXMuY2hvaWNlTGlzdC5hcHBlbmQociksdGhpcy5faGlnaGxpZ2h0Q2hvaWNlKCk7ZWxzZXt2YXIgYz10aGlzLl9nZXRUZW1wbGF0ZShcIm5vdGljZVwiLGEubm90aWNlKTt0aGlzLmNob2ljZUxpc3QuYXBwZW5kKGMpfX1lbHNle3ZhciBsPXZvaWQgMDtjPXZvaWQgMDt0aGlzLl9pc1NlYXJjaGluZz8oYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLmNvbmZpZy5ub1Jlc3VsdHNUZXh0P3RoaXMuY29uZmlnLm5vUmVzdWx0c1RleHQoKTp0aGlzLmNvbmZpZy5ub1Jlc3VsdHNUZXh0LGw9dGhpcy5fZ2V0VGVtcGxhdGUoXCJub3RpY2VcIixjLFwibm8tcmVzdWx0c1wiKSk6KGM9XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5jb25maWcubm9DaG9pY2VzVGV4dD90aGlzLmNvbmZpZy5ub0Nob2ljZXNUZXh0KCk6dGhpcy5jb25maWcubm9DaG9pY2VzVGV4dCxsPXRoaXMuX2dldFRlbXBsYXRlKFwibm90aWNlXCIsYyxcIm5vLWNob2ljZXNcIikpLHRoaXMuY2hvaWNlTGlzdC5hcHBlbmQobCl9fSxlLnByb3RvdHlwZS5fcmVuZGVySXRlbXM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLl9zdG9yZS5hY3RpdmVJdGVtc3x8W107dGhpcy5pdGVtTGlzdC5jbGVhcigpO3ZhciB0PXRoaXMuX2NyZWF0ZUl0ZW1zRnJhZ21lbnQoZSk7dC5jaGlsZE5vZGVzJiZ0aGlzLml0ZW1MaXN0LmFwcGVuZCh0KX0sZS5wcm90b3R5cGUuX2NyZWF0ZUdyb3Vwc0ZyYWdtZW50PWZ1bmN0aW9uKGUsdCxpKXt2YXIgbj10aGlzO3ZvaWQgMD09PWkmJihpPWRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSk7cmV0dXJuIHRoaXMuY29uZmlnLnNob3VsZFNvcnQmJmUuc29ydCh0aGlzLmNvbmZpZy5zb3J0ZXIpLGUuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIHI9ZnVuY3Rpb24oZSl7cmV0dXJuIHQuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gbi5faXNTZWxlY3RPbmVFbGVtZW50P3QuZ3JvdXBJZD09PWUuaWQ6dC5ncm91cElkPT09ZS5pZCYmKFwiYWx3YXlzXCI9PT1uLmNvbmZpZy5yZW5kZXJTZWxlY3RlZENob2ljZXN8fCF0LnNlbGVjdGVkKX0pKX0oZSk7aWYoci5sZW5ndGg+PTEpe3ZhciBvPW4uX2dldFRlbXBsYXRlKFwiY2hvaWNlR3JvdXBcIixlKTtpLmFwcGVuZENoaWxkKG8pLG4uX2NyZWF0ZUNob2ljZXNGcmFnbWVudChyLGksITApfX0pKSxpfSxlLnByb3RvdHlwZS5fY3JlYXRlQ2hvaWNlc0ZyYWdtZW50PWZ1bmN0aW9uKGUsdCxpKXt2YXIgcj10aGlzO3ZvaWQgMD09PXQmJih0PWRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSksdm9pZCAwPT09aSYmKGk9ITEpO3ZhciBvPXRoaXMuY29uZmlnLHM9by5yZW5kZXJTZWxlY3RlZENob2ljZXMsYT1vLnNlYXJjaFJlc3VsdExpbWl0LGM9by5yZW5kZXJDaG9pY2VMaW1pdCxsPXRoaXMuX2lzU2VhcmNoaW5nP20uc29ydEJ5U2NvcmU6dGhpcy5jb25maWcuc29ydGVyLHU9ZnVuY3Rpb24oZSl7aWYoXCJhdXRvXCIhPT1zfHwoci5faXNTZWxlY3RPbmVFbGVtZW50fHwhZS5zZWxlY3RlZCkpe3ZhciBpPXIuX2dldFRlbXBsYXRlKFwiY2hvaWNlXCIsZSxyLmNvbmZpZy5pdGVtU2VsZWN0VGV4dCk7dC5hcHBlbmRDaGlsZChpKX19LGg9ZTtcImF1dG9cIiE9PXN8fHRoaXMuX2lzU2VsZWN0T25lRWxlbWVudHx8KGg9ZS5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiFlLnNlbGVjdGVkfSkpKTt2YXIgZD1oLnJlZHVjZSgoZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC5wbGFjZWhvbGRlcj9lLnBsYWNlaG9sZGVyQ2hvaWNlcy5wdXNoKHQpOmUubm9ybWFsQ2hvaWNlcy5wdXNoKHQpLGV9KSx7cGxhY2Vob2xkZXJDaG9pY2VzOltdLG5vcm1hbENob2ljZXM6W119KSxwPWQucGxhY2Vob2xkZXJDaG9pY2VzLGY9ZC5ub3JtYWxDaG9pY2VzOyh0aGlzLmNvbmZpZy5zaG91bGRTb3J0fHx0aGlzLl9pc1NlYXJjaGluZykmJmYuc29ydChsKTt2YXIgdj1oLmxlbmd0aCxfPXRoaXMuX2lzU2VsZWN0T25lRWxlbWVudD9uKHAsZik6Zjt0aGlzLl9pc1NlYXJjaGluZz92PWE6YyYmYz4wJiYhaSYmKHY9Yyk7Zm9yKHZhciBnPTA7Zzx2O2crPTEpX1tnXSYmdShfW2ddKTtyZXR1cm4gdH0sZS5wcm90b3R5cGUuX2NyZWF0ZUl0ZW1zRnJhZ21lbnQ9ZnVuY3Rpb24oZSx0KXt2YXIgaT10aGlzO3ZvaWQgMD09PXQmJih0PWRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSk7dmFyIG49dGhpcy5jb25maWcscj1uLnNob3VsZFNvcnRJdGVtcyxvPW4uc29ydGVyLHM9bi5yZW1vdmVJdGVtQnV0dG9uO3ImJiF0aGlzLl9pc1NlbGVjdE9uZUVsZW1lbnQmJmUuc29ydChvKSx0aGlzLl9pc1RleHRFbGVtZW50P3RoaXMucGFzc2VkRWxlbWVudC52YWx1ZT1lLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuIGUudmFsdWV9KSkuam9pbih0aGlzLmNvbmZpZy5kZWxpbWl0ZXIpOnRoaXMucGFzc2VkRWxlbWVudC5vcHRpb25zPWU7cmV0dXJuIGUuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIG49aS5fZ2V0VGVtcGxhdGUoXCJpdGVtXCIsZSxzKTt0LmFwcGVuZENoaWxkKG4pfSkpLHR9LGUucHJvdG90eXBlLl90cmlnZ2VyQ2hhbmdlPWZ1bmN0aW9uKGUpe251bGwhPWUmJnRoaXMucGFzc2VkRWxlbWVudC50cmlnZ2VyRXZlbnQobC5FVkVOVFMuY2hhbmdlLHt2YWx1ZTplfSl9LGUucHJvdG90eXBlLl9zZWxlY3RQbGFjZWhvbGRlckNob2ljZT1mdW5jdGlvbihlKXt0aGlzLl9hZGRJdGVtKHt2YWx1ZTplLnZhbHVlLGxhYmVsOmUubGFiZWwsY2hvaWNlSWQ6ZS5pZCxncm91cElkOmUuZ3JvdXBJZCxwbGFjZWhvbGRlcjplLnBsYWNlaG9sZGVyfSksdGhpcy5fdHJpZ2dlckNoYW5nZShlLnZhbHVlKX0sZS5wcm90b3R5cGUuX2hhbmRsZUJ1dHRvbkFjdGlvbj1mdW5jdGlvbihlLHQpe2lmKGUmJnQmJnRoaXMuY29uZmlnLnJlbW92ZUl0ZW1zJiZ0aGlzLmNvbmZpZy5yZW1vdmVJdGVtQnV0dG9uKXt2YXIgaT10LnBhcmVudE5vZGUmJnQucGFyZW50Tm9kZS5kYXRhc2V0LmlkLG49aSYmZS5maW5kKChmdW5jdGlvbihlKXtyZXR1cm4gZS5pZD09PXBhcnNlSW50KGksMTApfSkpO24mJih0aGlzLl9yZW1vdmVJdGVtKG4pLHRoaXMuX3RyaWdnZXJDaGFuZ2Uobi52YWx1ZSksdGhpcy5faXNTZWxlY3RPbmVFbGVtZW50JiZ0aGlzLl9zdG9yZS5wbGFjZWhvbGRlckNob2ljZSYmdGhpcy5fc2VsZWN0UGxhY2Vob2xkZXJDaG9pY2UodGhpcy5fc3RvcmUucGxhY2Vob2xkZXJDaG9pY2UpKX19LGUucHJvdG90eXBlLl9oYW5kbGVJdGVtQWN0aW9uPWZ1bmN0aW9uKGUsdCxpKXt2YXIgbj10aGlzO2lmKHZvaWQgMD09PWkmJihpPSExKSxlJiZ0JiZ0aGlzLmNvbmZpZy5yZW1vdmVJdGVtcyYmIXRoaXMuX2lzU2VsZWN0T25lRWxlbWVudCl7dmFyIHI9dC5kYXRhc2V0LmlkO2UuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5pZCE9PXBhcnNlSW50KFwiXCIrciwxMCl8fGUuaGlnaGxpZ2h0ZWQ/IWkmJmUuaGlnaGxpZ2h0ZWQmJm4udW5oaWdobGlnaHRJdGVtKGUpOm4uaGlnaGxpZ2h0SXRlbShlKX0pKSx0aGlzLmlucHV0LmZvY3VzKCl9fSxlLnByb3RvdHlwZS5faGFuZGxlQ2hvaWNlQWN0aW9uPWZ1bmN0aW9uKGUsdCl7aWYoZSYmdCl7dmFyIGk9dC5kYXRhc2V0LmlkLG49aSYmdGhpcy5fc3RvcmUuZ2V0Q2hvaWNlQnlJZChpKTtpZihuKXt2YXIgcj1lWzBdJiZlWzBdLmtleUNvZGU/ZVswXS5rZXlDb2RlOnZvaWQgMCxvPXRoaXMuZHJvcGRvd24uaXNBY3RpdmU7aWYobi5rZXlDb2RlPXIsdGhpcy5wYXNzZWRFbGVtZW50LnRyaWdnZXJFdmVudChsLkVWRU5UUy5jaG9pY2Use2Nob2ljZTpufSksIW4uc2VsZWN0ZWQmJiFuLmRpc2FibGVkKXRoaXMuX2NhbkFkZEl0ZW0oZSxuLnZhbHVlKS5yZXNwb25zZSYmKHRoaXMuX2FkZEl0ZW0oe3ZhbHVlOm4udmFsdWUsbGFiZWw6bi5sYWJlbCxjaG9pY2VJZDpuLmlkLGdyb3VwSWQ6bi5ncm91cElkLGN1c3RvbVByb3BlcnRpZXM6bi5jdXN0b21Qcm9wZXJ0aWVzLHBsYWNlaG9sZGVyOm4ucGxhY2Vob2xkZXIsa2V5Q29kZTpuLmtleUNvZGV9KSx0aGlzLl90cmlnZ2VyQ2hhbmdlKG4udmFsdWUpKTt0aGlzLmNsZWFySW5wdXQoKSxvJiZ0aGlzLl9pc1NlbGVjdE9uZUVsZW1lbnQmJih0aGlzLmhpZGVEcm9wZG93bighMCksdGhpcy5jb250YWluZXJPdXRlci5mb2N1cygpKX19fSxlLnByb3RvdHlwZS5faGFuZGxlQmFja3NwYWNlPWZ1bmN0aW9uKGUpe2lmKHRoaXMuY29uZmlnLnJlbW92ZUl0ZW1zJiZlKXt2YXIgdD1lW2UubGVuZ3RoLTFdLGk9ZS5zb21lKChmdW5jdGlvbihlKXtyZXR1cm4gZS5oaWdobGlnaHRlZH0pKTt0aGlzLmNvbmZpZy5lZGl0SXRlbXMmJiFpJiZ0Pyh0aGlzLmlucHV0LnZhbHVlPXQudmFsdWUsdGhpcy5pbnB1dC5zZXRXaWR0aCgpLHRoaXMuX3JlbW92ZUl0ZW0odCksdGhpcy5fdHJpZ2dlckNoYW5nZSh0LnZhbHVlKSk6KGl8fHRoaXMuaGlnaGxpZ2h0SXRlbSh0LCExKSx0aGlzLnJlbW92ZUhpZ2hsaWdodGVkSXRlbXMoITApKX19LGUucHJvdG90eXBlLl9zdGFydExvYWRpbmc9ZnVuY3Rpb24oKXt0aGlzLl9zdG9yZS5kaXNwYXRjaChmLnNldElzTG9hZGluZyghMCkpfSxlLnByb3RvdHlwZS5fc3RvcExvYWRpbmc9ZnVuY3Rpb24oKXt0aGlzLl9zdG9yZS5kaXNwYXRjaChmLnNldElzTG9hZGluZyghMSkpfSxlLnByb3RvdHlwZS5faGFuZGxlTG9hZGluZ1N0YXRlPWZ1bmN0aW9uKGUpe3ZvaWQgMD09PWUmJihlPSEwKTt2YXIgdD10aGlzLml0ZW1MaXN0LmdldENoaWxkKFwiLlwiK3RoaXMuY29uZmlnLmNsYXNzTmFtZXMucGxhY2Vob2xkZXIpO2U/KHRoaXMuZGlzYWJsZSgpLHRoaXMuY29udGFpbmVyT3V0ZXIuYWRkTG9hZGluZ1N0YXRlKCksdGhpcy5faXNTZWxlY3RPbmVFbGVtZW50P3Q/dC5pbm5lckhUTUw9dGhpcy5jb25maWcubG9hZGluZ1RleHQ6KHQ9dGhpcy5fZ2V0VGVtcGxhdGUoXCJwbGFjZWhvbGRlclwiLHRoaXMuY29uZmlnLmxvYWRpbmdUZXh0KSkmJnRoaXMuaXRlbUxpc3QuYXBwZW5kKHQpOnRoaXMuaW5wdXQucGxhY2Vob2xkZXI9dGhpcy5jb25maWcubG9hZGluZ1RleHQpOih0aGlzLmVuYWJsZSgpLHRoaXMuY29udGFpbmVyT3V0ZXIucmVtb3ZlTG9hZGluZ1N0YXRlKCksdGhpcy5faXNTZWxlY3RPbmVFbGVtZW50P3QmJih0LmlubmVySFRNTD10aGlzLl9wbGFjZWhvbGRlclZhbHVlfHxcIlwiKTp0aGlzLmlucHV0LnBsYWNlaG9sZGVyPXRoaXMuX3BsYWNlaG9sZGVyVmFsdWV8fFwiXCIpfSxlLnByb3RvdHlwZS5faGFuZGxlU2VhcmNoPWZ1bmN0aW9uKGUpe2lmKGUmJnRoaXMuaW5wdXQuaXNGb2N1c3NlZCl7dmFyIHQ9dGhpcy5fc3RvcmUuY2hvaWNlcyxpPXRoaXMuY29uZmlnLG49aS5zZWFyY2hGbG9vcixyPWkuc2VhcmNoQ2hvaWNlcyxvPXQuc29tZSgoZnVuY3Rpb24oZSl7cmV0dXJuIWUuYWN0aXZlfSkpO2lmKGUmJmUubGVuZ3RoPj1uKXt2YXIgcz1yP3RoaXMuX3NlYXJjaENob2ljZXMoZSk6MDt0aGlzLnBhc3NlZEVsZW1lbnQudHJpZ2dlckV2ZW50KGwuRVZFTlRTLnNlYXJjaCx7dmFsdWU6ZSxyZXN1bHRDb3VudDpzfSl9ZWxzZSBvJiYodGhpcy5faXNTZWFyY2hpbmc9ITEsdGhpcy5fc3RvcmUuZGlzcGF0Y2goaC5hY3RpdmF0ZUNob2ljZXMoITApKSl9fSxlLnByb3RvdHlwZS5fY2FuQWRkSXRlbT1mdW5jdGlvbihlLHQpe3ZhciBpPSEwLG49XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5jb25maWcuYWRkSXRlbVRleHQ/dGhpcy5jb25maWcuYWRkSXRlbVRleHQodCk6dGhpcy5jb25maWcuYWRkSXRlbVRleHQ7aWYoIXRoaXMuX2lzU2VsZWN0T25lRWxlbWVudCl7dmFyIHI9bS5leGlzdHNJbkFycmF5KGUsdCk7dGhpcy5jb25maWcubWF4SXRlbUNvdW50PjAmJnRoaXMuY29uZmlnLm1heEl0ZW1Db3VudDw9ZS5sZW5ndGgmJihpPSExLG49XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5jb25maWcubWF4SXRlbVRleHQ/dGhpcy5jb25maWcubWF4SXRlbVRleHQodGhpcy5jb25maWcubWF4SXRlbUNvdW50KTp0aGlzLmNvbmZpZy5tYXhJdGVtVGV4dCksIXRoaXMuY29uZmlnLmR1cGxpY2F0ZUl0ZW1zQWxsb3dlZCYmciYmaSYmKGk9ITEsbj1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLmNvbmZpZy51bmlxdWVJdGVtVGV4dD90aGlzLmNvbmZpZy51bmlxdWVJdGVtVGV4dCh0KTp0aGlzLmNvbmZpZy51bmlxdWVJdGVtVGV4dCksdGhpcy5faXNUZXh0RWxlbWVudCYmdGhpcy5jb25maWcuYWRkSXRlbXMmJmkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuY29uZmlnLmFkZEl0ZW1GaWx0ZXImJiF0aGlzLmNvbmZpZy5hZGRJdGVtRmlsdGVyKHQpJiYoaT0hMSxuPVwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuY29uZmlnLmN1c3RvbUFkZEl0ZW1UZXh0P3RoaXMuY29uZmlnLmN1c3RvbUFkZEl0ZW1UZXh0KHQpOnRoaXMuY29uZmlnLmN1c3RvbUFkZEl0ZW1UZXh0KX1yZXR1cm57cmVzcG9uc2U6aSxub3RpY2U6bn19LGUucHJvdG90eXBlLl9zZWFyY2hDaG9pY2VzPWZ1bmN0aW9uKGUpe3ZhciB0PVwic3RyaW5nXCI9PXR5cGVvZiBlP2UudHJpbSgpOmUsaT1cInN0cmluZ1wiPT10eXBlb2YgdGhpcy5fY3VycmVudFZhbHVlP3RoaXMuX2N1cnJlbnRWYWx1ZS50cmltKCk6dGhpcy5fY3VycmVudFZhbHVlO2lmKHQubGVuZ3RoPDEmJnQ9PT1pK1wiIFwiKXJldHVybiAwO3ZhciByPXRoaXMuX3N0b3JlLnNlYXJjaGFibGVDaG9pY2VzLHM9dCxhPW4odGhpcy5jb25maWcuc2VhcmNoRmllbGRzKSxjPU9iamVjdC5hc3NpZ24odGhpcy5jb25maWcuZnVzZU9wdGlvbnMse2tleXM6YSxpbmNsdWRlTWF0Y2hlczohMH0pLGw9bmV3IG8uZGVmYXVsdChyLGMpLnNlYXJjaChzKTtyZXR1cm4gdGhpcy5fY3VycmVudFZhbHVlPXQsdGhpcy5faGlnaGxpZ2h0UG9zaXRpb249MCx0aGlzLl9pc1NlYXJjaGluZz0hMCx0aGlzLl9zdG9yZS5kaXNwYXRjaChoLmZpbHRlckNob2ljZXMobCkpLGwubGVuZ3RofSxlLnByb3RvdHlwZS5fYWRkRXZlbnRMaXN0ZW5lcnM9ZnVuY3Rpb24oKXt2YXIgZT1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7ZS5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIix0aGlzLl9vblRvdWNoRW5kLCEwKSx0aGlzLmNvbnRhaW5lck91dGVyLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIix0aGlzLl9vbktleURvd24sITApLHRoaXMuY29udGFpbmVyT3V0ZXIuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsdGhpcy5fb25Nb3VzZURvd24sITApLGUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdGhpcy5fb25DbGljayx7cGFzc2l2ZTohMH0pLGUuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLHRoaXMuX29uVG91Y2hNb3ZlLHtwYXNzaXZlOiEwfSksdGhpcy5kcm9wZG93bi5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIix0aGlzLl9vbk1vdXNlT3Zlcix7cGFzc2l2ZTohMH0pLHRoaXMuX2lzU2VsZWN0T25lRWxlbWVudCYmKHRoaXMuY29udGFpbmVyT3V0ZXIuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIix0aGlzLl9vbkZvY3VzLHtwYXNzaXZlOiEwfSksdGhpcy5jb250YWluZXJPdXRlci5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsdGhpcy5fb25CbHVyLHtwYXNzaXZlOiEwfSkpLHRoaXMuaW5wdXQuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIix0aGlzLl9vbktleVVwLHtwYXNzaXZlOiEwfSksdGhpcy5pbnB1dC5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLHRoaXMuX29uRm9jdXMse3Bhc3NpdmU6ITB9KSx0aGlzLmlucHV0LmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIix0aGlzLl9vbkJsdXIse3Bhc3NpdmU6ITB9KSx0aGlzLmlucHV0LmVsZW1lbnQuZm9ybSYmdGhpcy5pbnB1dC5lbGVtZW50LmZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInJlc2V0XCIsdGhpcy5fb25Gb3JtUmVzZXQse3Bhc3NpdmU6ITB9KSx0aGlzLmlucHV0LmFkZEV2ZW50TGlzdGVuZXJzKCl9LGUucHJvdG90eXBlLl9yZW1vdmVFdmVudExpc3RlbmVycz1mdW5jdGlvbigpe3ZhciBlPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLHRoaXMuX29uVG91Y2hFbmQsITApLHRoaXMuY29udGFpbmVyT3V0ZXIuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLHRoaXMuX29uS2V5RG93biwhMCksdGhpcy5jb250YWluZXJPdXRlci5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIix0aGlzLl9vbk1vdXNlRG93biwhMCksZS5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIix0aGlzLl9vbkNsaWNrKSxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIix0aGlzLl9vblRvdWNoTW92ZSksdGhpcy5kcm9wZG93bi5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIix0aGlzLl9vbk1vdXNlT3ZlciksdGhpcy5faXNTZWxlY3RPbmVFbGVtZW50JiYodGhpcy5jb250YWluZXJPdXRlci5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLHRoaXMuX29uRm9jdXMpLHRoaXMuY29udGFpbmVyT3V0ZXIuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmx1clwiLHRoaXMuX29uQmx1cikpLHRoaXMuaW5wdXQuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5dXBcIix0aGlzLl9vbktleVVwKSx0aGlzLmlucHV0LmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsdGhpcy5fb25Gb2N1cyksdGhpcy5pbnB1dC5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJibHVyXCIsdGhpcy5fb25CbHVyKSx0aGlzLmlucHV0LmVsZW1lbnQuZm9ybSYmdGhpcy5pbnB1dC5lbGVtZW50LmZvcm0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2V0XCIsdGhpcy5fb25Gb3JtUmVzZXQpLHRoaXMuaW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKX0sZS5wcm90b3R5cGUuX29uS2V5RG93bj1mdW5jdGlvbihlKXt2YXIgdD1lLmtleUNvZGUsaT10aGlzLl9zdG9yZS5hY3RpdmVJdGVtcyxuPXRoaXMuaW5wdXQuaXNGb2N1c3NlZCxyPXRoaXMuZHJvcGRvd24uaXNBY3RpdmUsbz10aGlzLml0ZW1MaXN0Lmhhc0NoaWxkcmVuKCkscz1TdHJpbmcuZnJvbUNoYXJDb2RlKHQpLGE9L1thLXpBLVowLTktXyBdLy50ZXN0KHMpLGM9bC5LRVlfQ09ERVMuQkFDS19LRVksdT1sLktFWV9DT0RFUy5ERUxFVEVfS0VZLGg9bC5LRVlfQ09ERVMuRU5URVJfS0VZLGQ9bC5LRVlfQ09ERVMuQV9LRVkscD1sLktFWV9DT0RFUy5FU0NfS0VZLGY9bC5LRVlfQ09ERVMuVVBfS0VZLG09bC5LRVlfQ09ERVMuRE9XTl9LRVksdj1sLktFWV9DT0RFUy5QQUdFX1VQX0tFWSxfPWwuS0VZX0NPREVTLlBBR0VfRE9XTl9LRVk7c3dpdGNoKHRoaXMuX2lzVGV4dEVsZW1lbnR8fHJ8fCFhfHwodGhpcy5zaG93RHJvcGRvd24oKSx0aGlzLmlucHV0LmlzRm9jdXNzZWR8fCh0aGlzLmlucHV0LnZhbHVlKz1zLnRvTG93ZXJDYXNlKCkpKSx0KXtjYXNlIGQ6cmV0dXJuIHRoaXMuX29uU2VsZWN0S2V5KGUsbyk7Y2FzZSBoOnJldHVybiB0aGlzLl9vbkVudGVyS2V5KGUsaSxyKTtjYXNlIHA6cmV0dXJuIHRoaXMuX29uRXNjYXBlS2V5KHIpO2Nhc2UgZjpjYXNlIHY6Y2FzZSBtOmNhc2UgXzpyZXR1cm4gdGhpcy5fb25EaXJlY3Rpb25LZXkoZSxyKTtjYXNlIHU6Y2FzZSBjOnJldHVybiB0aGlzLl9vbkRlbGV0ZUtleShlLGksbil9fSxlLnByb3RvdHlwZS5fb25LZXlVcD1mdW5jdGlvbihlKXt2YXIgdD1lLnRhcmdldCxpPWUua2V5Q29kZSxuPXRoaXMuaW5wdXQudmFsdWUscj10aGlzLl9zdG9yZS5hY3RpdmVJdGVtcyxvPXRoaXMuX2NhbkFkZEl0ZW0ocixuKSxzPWwuS0VZX0NPREVTLkJBQ0tfS0VZLGE9bC5LRVlfQ09ERVMuREVMRVRFX0tFWTtpZih0aGlzLl9pc1RleHRFbGVtZW50KXtpZihvLm5vdGljZSYmbil7dmFyIGM9dGhpcy5fZ2V0VGVtcGxhdGUoXCJub3RpY2VcIixvLm5vdGljZSk7dGhpcy5kcm9wZG93bi5lbGVtZW50LmlubmVySFRNTD1jLm91dGVySFRNTCx0aGlzLnNob3dEcm9wZG93bighMCl9ZWxzZSB0aGlzLmhpZGVEcm9wZG93bighMCl9ZWxzZXt2YXIgdT0oaT09PXN8fGk9PT1hKSYmdCYmIXQudmFsdWUsZD0hdGhpcy5faXNUZXh0RWxlbWVudCYmdGhpcy5faXNTZWFyY2hpbmcscD10aGlzLl9jYW5TZWFyY2gmJm8ucmVzcG9uc2U7dSYmZD8odGhpcy5faXNTZWFyY2hpbmc9ITEsdGhpcy5fc3RvcmUuZGlzcGF0Y2goaC5hY3RpdmF0ZUNob2ljZXMoITApKSk6cCYmdGhpcy5faGFuZGxlU2VhcmNoKHRoaXMuaW5wdXQudmFsdWUpfXRoaXMuX2NhblNlYXJjaD10aGlzLmNvbmZpZy5zZWFyY2hFbmFibGVkfSxlLnByb3RvdHlwZS5fb25TZWxlY3RLZXk9ZnVuY3Rpb24oZSx0KXt2YXIgaT1lLmN0cmxLZXksbj1lLm1ldGFLZXk7KGl8fG4pJiZ0JiYodGhpcy5fY2FuU2VhcmNoPSExLHRoaXMuY29uZmlnLnJlbW92ZUl0ZW1zJiYhdGhpcy5pbnB1dC52YWx1ZSYmdGhpcy5pbnB1dC5lbGVtZW50PT09ZG9jdW1lbnQuYWN0aXZlRWxlbWVudCYmdGhpcy5oaWdobGlnaHRBbGwoKSl9LGUucHJvdG90eXBlLl9vbkVudGVyS2V5PWZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1lLnRhcmdldCxyPWwuS0VZX0NPREVTLkVOVEVSX0tFWSxvPW4mJm4uaGFzQXR0cmlidXRlKFwiZGF0YS1idXR0b25cIik7aWYodGhpcy5faXNUZXh0RWxlbWVudCYmbiYmbi52YWx1ZSl7dmFyIHM9dGhpcy5pbnB1dC52YWx1ZTt0aGlzLl9jYW5BZGRJdGVtKHQscykucmVzcG9uc2UmJih0aGlzLmhpZGVEcm9wZG93bighMCksdGhpcy5fYWRkSXRlbSh7dmFsdWU6c30pLHRoaXMuX3RyaWdnZXJDaGFuZ2UocyksdGhpcy5jbGVhcklucHV0KCkpfWlmKG8mJih0aGlzLl9oYW5kbGVCdXR0b25BY3Rpb24odCxuKSxlLnByZXZlbnREZWZhdWx0KCkpLGkpe3ZhciBhPXRoaXMuZHJvcGRvd24uZ2V0Q2hpbGQoXCIuXCIrdGhpcy5jb25maWcuY2xhc3NOYW1lcy5oaWdobGlnaHRlZFN0YXRlKTthJiYodFswXSYmKHRbMF0ua2V5Q29kZT1yKSx0aGlzLl9oYW5kbGVDaG9pY2VBY3Rpb24odCxhKSksZS5wcmV2ZW50RGVmYXVsdCgpfWVsc2UgdGhpcy5faXNTZWxlY3RPbmVFbGVtZW50JiYodGhpcy5zaG93RHJvcGRvd24oKSxlLnByZXZlbnREZWZhdWx0KCkpfSxlLnByb3RvdHlwZS5fb25Fc2NhcGVLZXk9ZnVuY3Rpb24oZSl7ZSYmKHRoaXMuaGlkZURyb3Bkb3duKCEwKSx0aGlzLmNvbnRhaW5lck91dGVyLmZvY3VzKCkpfSxlLnByb3RvdHlwZS5fb25EaXJlY3Rpb25LZXk9ZnVuY3Rpb24oZSx0KXt2YXIgaT1lLmtleUNvZGUsbj1lLm1ldGFLZXkscj1sLktFWV9DT0RFUy5ET1dOX0tFWSxvPWwuS0VZX0NPREVTLlBBR0VfVVBfS0VZLHM9bC5LRVlfQ09ERVMuUEFHRV9ET1dOX0tFWTtpZih0fHx0aGlzLl9pc1NlbGVjdE9uZUVsZW1lbnQpe3RoaXMuc2hvd0Ryb3Bkb3duKCksdGhpcy5fY2FuU2VhcmNoPSExO3ZhciBhPWk9PT1yfHxpPT09cz8xOi0xLGM9dm9pZCAwO2lmKG58fGk9PT1zfHxpPT09byljPWE+MD90aGlzLmRyb3Bkb3duLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcIltkYXRhLWNob2ljZS1zZWxlY3RhYmxlXTpsYXN0LW9mLXR5cGVcIik6dGhpcy5kcm9wZG93bi5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1jaG9pY2Utc2VsZWN0YWJsZV1cIik7ZWxzZXt2YXIgdT10aGlzLmRyb3Bkb3duLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5cIit0aGlzLmNvbmZpZy5jbGFzc05hbWVzLmhpZ2hsaWdodGVkU3RhdGUpO2M9dT9tLmdldEFkamFjZW50RWwodSxcIltkYXRhLWNob2ljZS1zZWxlY3RhYmxlXVwiLGEpOnRoaXMuZHJvcGRvd24uZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtY2hvaWNlLXNlbGVjdGFibGVdXCIpfWMmJihtLmlzU2Nyb2xsZWRJbnRvVmlldyhjLHRoaXMuY2hvaWNlTGlzdC5lbGVtZW50LGEpfHx0aGlzLmNob2ljZUxpc3Quc2Nyb2xsVG9DaGlsZEVsZW1lbnQoYyxhKSx0aGlzLl9oaWdobGlnaHRDaG9pY2UoYykpLGUucHJldmVudERlZmF1bHQoKX19LGUucHJvdG90eXBlLl9vbkRlbGV0ZUtleT1mdW5jdGlvbihlLHQsaSl7dmFyIG49ZS50YXJnZXQ7dGhpcy5faXNTZWxlY3RPbmVFbGVtZW50fHxuLnZhbHVlfHwhaXx8KHRoaXMuX2hhbmRsZUJhY2tzcGFjZSh0KSxlLnByZXZlbnREZWZhdWx0KCkpfSxlLnByb3RvdHlwZS5fb25Ub3VjaE1vdmU9ZnVuY3Rpb24oKXt0aGlzLl93YXNUYXAmJih0aGlzLl93YXNUYXA9ITEpfSxlLnByb3RvdHlwZS5fb25Ub3VjaEVuZD1mdW5jdGlvbihlKXt2YXIgdD0oZXx8ZS50b3VjaGVzWzBdKS50YXJnZXQ7dGhpcy5fd2FzVGFwJiZ0aGlzLmNvbnRhaW5lck91dGVyLmVsZW1lbnQuY29udGFpbnModCkmJigodD09PXRoaXMuY29udGFpbmVyT3V0ZXIuZWxlbWVudHx8dD09PXRoaXMuY29udGFpbmVySW5uZXIuZWxlbWVudCkmJih0aGlzLl9pc1RleHRFbGVtZW50P3RoaXMuaW5wdXQuZm9jdXMoKTp0aGlzLl9pc1NlbGVjdE11bHRpcGxlRWxlbWVudCYmdGhpcy5zaG93RHJvcGRvd24oKSksZS5zdG9wUHJvcGFnYXRpb24oKSk7dGhpcy5fd2FzVGFwPSEwfSxlLnByb3RvdHlwZS5fb25Nb3VzZURvd249ZnVuY3Rpb24oZSl7dmFyIHQ9ZS50YXJnZXQ7aWYodCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KXtpZihfJiZ0aGlzLmNob2ljZUxpc3QuZWxlbWVudC5jb250YWlucyh0KSl7dmFyIGk9dGhpcy5jaG9pY2VMaXN0LmVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQsbj1cImx0clwiPT09dGhpcy5fZGlyZWN0aW9uP2Uub2Zmc2V0WD49aS5vZmZzZXRXaWR0aDplLm9mZnNldFg8aS5vZmZzZXRMZWZ0O3RoaXMuX2lzU2Nyb2xsaW5nT25JZT1ufWlmKHQhPT10aGlzLmlucHV0LmVsZW1lbnQpe3ZhciByPXQuY2xvc2VzdChcIltkYXRhLWJ1dHRvbl0sW2RhdGEtaXRlbV0sW2RhdGEtY2hvaWNlXVwiKTtpZihyIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpe3ZhciBvPWUuc2hpZnRLZXkscz10aGlzLl9zdG9yZS5hY3RpdmVJdGVtcyxhPXIuZGF0YXNldDtcImJ1dHRvblwiaW4gYT90aGlzLl9oYW5kbGVCdXR0b25BY3Rpb24ocyxyKTpcIml0ZW1cImluIGE/dGhpcy5faGFuZGxlSXRlbUFjdGlvbihzLHIsbyk6XCJjaG9pY2VcImluIGEmJnRoaXMuX2hhbmRsZUNob2ljZUFjdGlvbihzLHIpfWUucHJldmVudERlZmF1bHQoKX19fSxlLnByb3RvdHlwZS5fb25Nb3VzZU92ZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS50YXJnZXQ7dCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50JiZcImNob2ljZVwiaW4gdC5kYXRhc2V0JiZ0aGlzLl9oaWdobGlnaHRDaG9pY2UodCl9LGUucHJvdG90eXBlLl9vbkNsaWNrPWZ1bmN0aW9uKGUpe3ZhciB0PWUudGFyZ2V0O3RoaXMuY29udGFpbmVyT3V0ZXIuZWxlbWVudC5jb250YWlucyh0KT90aGlzLmRyb3Bkb3duLmlzQWN0aXZlfHx0aGlzLmNvbnRhaW5lck91dGVyLmlzRGlzYWJsZWQ/dGhpcy5faXNTZWxlY3RPbmVFbGVtZW50JiZ0IT09dGhpcy5pbnB1dC5lbGVtZW50JiYhdGhpcy5kcm9wZG93bi5lbGVtZW50LmNvbnRhaW5zKHQpJiZ0aGlzLmhpZGVEcm9wZG93bigpOnRoaXMuX2lzVGV4dEVsZW1lbnQ/ZG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PXRoaXMuaW5wdXQuZWxlbWVudCYmdGhpcy5pbnB1dC5mb2N1cygpOih0aGlzLnNob3dEcm9wZG93bigpLHRoaXMuY29udGFpbmVyT3V0ZXIuZm9jdXMoKSk6KHRoaXMuX3N0b3JlLmhpZ2hsaWdodGVkQWN0aXZlSXRlbXMubGVuZ3RoPjAmJnRoaXMudW5oaWdobGlnaHRBbGwoKSx0aGlzLmNvbnRhaW5lck91dGVyLnJlbW92ZUZvY3VzU3RhdGUoKSx0aGlzLmhpZGVEcm9wZG93bighMCkpfSxlLnByb3RvdHlwZS5fb25Gb2N1cz1mdW5jdGlvbihlKXt2YXIgdCxpPXRoaXMsbj1lLnRhcmdldDtuJiZ0aGlzLmNvbnRhaW5lck91dGVyLmVsZW1lbnQuY29udGFpbnMobikmJigodD17fSlbbC5URVhUX1RZUEVdPWZ1bmN0aW9uKCl7bj09PWkuaW5wdXQuZWxlbWVudCYmaS5jb250YWluZXJPdXRlci5hZGRGb2N1c1N0YXRlKCl9LHRbbC5TRUxFQ1RfT05FX1RZUEVdPWZ1bmN0aW9uKCl7aS5jb250YWluZXJPdXRlci5hZGRGb2N1c1N0YXRlKCksbj09PWkuaW5wdXQuZWxlbWVudCYmaS5zaG93RHJvcGRvd24oITApfSx0W2wuU0VMRUNUX01VTFRJUExFX1RZUEVdPWZ1bmN0aW9uKCl7bj09PWkuaW5wdXQuZWxlbWVudCYmKGkuc2hvd0Ryb3Bkb3duKCEwKSxpLmNvbnRhaW5lck91dGVyLmFkZEZvY3VzU3RhdGUoKSl9LHQpW3RoaXMucGFzc2VkRWxlbWVudC5lbGVtZW50LnR5cGVdKCl9LGUucHJvdG90eXBlLl9vbkJsdXI9ZnVuY3Rpb24oZSl7dmFyIHQsaT10aGlzLG49ZS50YXJnZXQ7aWYobiYmdGhpcy5jb250YWluZXJPdXRlci5lbGVtZW50LmNvbnRhaW5zKG4pJiYhdGhpcy5faXNTY3JvbGxpbmdPbkllKXt2YXIgcj10aGlzLl9zdG9yZS5hY3RpdmVJdGVtcy5zb21lKChmdW5jdGlvbihlKXtyZXR1cm4gZS5oaWdobGlnaHRlZH0pKTsoKHQ9e30pW2wuVEVYVF9UWVBFXT1mdW5jdGlvbigpe249PT1pLmlucHV0LmVsZW1lbnQmJihpLmNvbnRhaW5lck91dGVyLnJlbW92ZUZvY3VzU3RhdGUoKSxyJiZpLnVuaGlnaGxpZ2h0QWxsKCksaS5oaWRlRHJvcGRvd24oITApKX0sdFtsLlNFTEVDVF9PTkVfVFlQRV09ZnVuY3Rpb24oKXtpLmNvbnRhaW5lck91dGVyLnJlbW92ZUZvY3VzU3RhdGUoKSwobj09PWkuaW5wdXQuZWxlbWVudHx8bj09PWkuY29udGFpbmVyT3V0ZXIuZWxlbWVudCYmIWkuX2NhblNlYXJjaCkmJmkuaGlkZURyb3Bkb3duKCEwKX0sdFtsLlNFTEVDVF9NVUxUSVBMRV9UWVBFXT1mdW5jdGlvbigpe249PT1pLmlucHV0LmVsZW1lbnQmJihpLmNvbnRhaW5lck91dGVyLnJlbW92ZUZvY3VzU3RhdGUoKSxpLmhpZGVEcm9wZG93bighMCksciYmaS51bmhpZ2hsaWdodEFsbCgpKX0sdClbdGhpcy5wYXNzZWRFbGVtZW50LmVsZW1lbnQudHlwZV0oKX1lbHNlIHRoaXMuX2lzU2Nyb2xsaW5nT25JZT0hMSx0aGlzLmlucHV0LmVsZW1lbnQuZm9jdXMoKX0sZS5wcm90b3R5cGUuX29uRm9ybVJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5fc3RvcmUuZGlzcGF0Y2goZi5yZXNldFRvKHRoaXMuX2luaXRpYWxTdGF0ZSkpfSxlLnByb3RvdHlwZS5faGlnaGxpZ2h0Q2hvaWNlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dm9pZCAwPT09ZSYmKGU9bnVsbCk7dmFyIGk9QXJyYXkuZnJvbSh0aGlzLmRyb3Bkb3duLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLWNob2ljZS1zZWxlY3RhYmxlXVwiKSk7aWYoaS5sZW5ndGgpe3ZhciBuPWU7QXJyYXkuZnJvbSh0aGlzLmRyb3Bkb3duLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5cIit0aGlzLmNvbmZpZy5jbGFzc05hbWVzLmhpZ2hsaWdodGVkU3RhdGUpKS5mb3JFYWNoKChmdW5jdGlvbihlKXtlLmNsYXNzTGlzdC5yZW1vdmUodC5jb25maWcuY2xhc3NOYW1lcy5oaWdobGlnaHRlZFN0YXRlKSxlLnNldEF0dHJpYnV0ZShcImFyaWEtc2VsZWN0ZWRcIixcImZhbHNlXCIpfSkpLG4/dGhpcy5faGlnaGxpZ2h0UG9zaXRpb249aS5pbmRleE9mKG4pOihuPWkubGVuZ3RoPnRoaXMuX2hpZ2hsaWdodFBvc2l0aW9uP2lbdGhpcy5faGlnaGxpZ2h0UG9zaXRpb25dOmlbaS5sZW5ndGgtMV0pfHwobj1pWzBdKSxuLmNsYXNzTGlzdC5hZGQodGhpcy5jb25maWcuY2xhc3NOYW1lcy5oaWdobGlnaHRlZFN0YXRlKSxuLnNldEF0dHJpYnV0ZShcImFyaWEtc2VsZWN0ZWRcIixcInRydWVcIiksdGhpcy5wYXNzZWRFbGVtZW50LnRyaWdnZXJFdmVudChsLkVWRU5UUy5oaWdobGlnaHRDaG9pY2Use2VsOm59KSx0aGlzLmRyb3Bkb3duLmlzQWN0aXZlJiYodGhpcy5pbnB1dC5zZXRBY3RpdmVEZXNjZW5kYW50KG4uaWQpLHRoaXMuY29udGFpbmVyT3V0ZXIuc2V0QWN0aXZlRGVzY2VuZGFudChuLmlkKSl9fSxlLnByb3RvdHlwZS5fYWRkSXRlbT1mdW5jdGlvbihlKXt2YXIgdD1lLnZhbHVlLGk9ZS5sYWJlbCxuPXZvaWQgMD09PWk/bnVsbDppLHI9ZS5jaG9pY2VJZCxvPXZvaWQgMD09PXI/LTE6cixzPWUuZ3JvdXBJZCxhPXZvaWQgMD09PXM/LTE6cyxjPWUuY3VzdG9tUHJvcGVydGllcyx1PXZvaWQgMD09PWM/e306YyxoPWUucGxhY2Vob2xkZXIscD12b2lkIDAhPT1oJiZoLGY9ZS5rZXlDb2RlLG09dm9pZCAwPT09Zj8tMTpmLHY9XCJzdHJpbmdcIj09dHlwZW9mIHQ/dC50cmltKCk6dCxfPXRoaXMuX3N0b3JlLml0ZW1zLGc9bnx8dix5PW98fC0xLGI9YT49MD90aGlzLl9zdG9yZS5nZXRHcm91cEJ5SWQoYSk6bnVsbCxFPV8/Xy5sZW5ndGgrMToxO3RoaXMuY29uZmlnLnByZXBlbmRWYWx1ZSYmKHY9dGhpcy5jb25maWcucHJlcGVuZFZhbHVlK3YudG9TdHJpbmcoKSksdGhpcy5jb25maWcuYXBwZW5kVmFsdWUmJih2Kz10aGlzLmNvbmZpZy5hcHBlbmRWYWx1ZS50b1N0cmluZygpKSx0aGlzLl9zdG9yZS5kaXNwYXRjaChkLmFkZEl0ZW0oe3ZhbHVlOnYsbGFiZWw6ZyxpZDpFLGNob2ljZUlkOnksZ3JvdXBJZDphLGN1c3RvbVByb3BlcnRpZXM6dSxwbGFjZWhvbGRlcjpwLGtleUNvZGU6bX0pKSx0aGlzLl9pc1NlbGVjdE9uZUVsZW1lbnQmJnRoaXMucmVtb3ZlQWN0aXZlSXRlbXMoRSksdGhpcy5wYXNzZWRFbGVtZW50LnRyaWdnZXJFdmVudChsLkVWRU5UUy5hZGRJdGVtLHtpZDpFLHZhbHVlOnYsbGFiZWw6ZyxjdXN0b21Qcm9wZXJ0aWVzOnUsZ3JvdXBWYWx1ZTpiJiZiLnZhbHVlP2IudmFsdWU6bnVsbCxrZXlDb2RlOm19KX0sZS5wcm90b3R5cGUuX3JlbW92ZUl0ZW09ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5pZCxpPWUudmFsdWUsbj1lLmxhYmVsLHI9ZS5jdXN0b21Qcm9wZXJ0aWVzLG89ZS5jaG9pY2VJZCxzPWUuZ3JvdXBJZCxhPXMmJnM+PTA/dGhpcy5fc3RvcmUuZ2V0R3JvdXBCeUlkKHMpOm51bGw7dCYmbyYmKHRoaXMuX3N0b3JlLmRpc3BhdGNoKGQucmVtb3ZlSXRlbSh0LG8pKSx0aGlzLnBhc3NlZEVsZW1lbnQudHJpZ2dlckV2ZW50KGwuRVZFTlRTLnJlbW92ZUl0ZW0se2lkOnQsdmFsdWU6aSxsYWJlbDpuLGN1c3RvbVByb3BlcnRpZXM6cixncm91cFZhbHVlOmEmJmEudmFsdWU/YS52YWx1ZTpudWxsfSkpfSxlLnByb3RvdHlwZS5fYWRkQ2hvaWNlPWZ1bmN0aW9uKGUpe3ZhciB0PWUudmFsdWUsaT1lLmxhYmVsLG49dm9pZCAwPT09aT9udWxsOmkscj1lLmlzU2VsZWN0ZWQsbz12b2lkIDAhPT1yJiZyLHM9ZS5pc0Rpc2FibGVkLGE9dm9pZCAwIT09cyYmcyxjPWUuZ3JvdXBJZCxsPXZvaWQgMD09PWM/LTE6Yyx1PWUuY3VzdG9tUHJvcGVydGllcyxkPXZvaWQgMD09PXU/e306dSxwPWUucGxhY2Vob2xkZXIsZj12b2lkIDAhPT1wJiZwLG09ZS5rZXlDb2RlLHY9dm9pZCAwPT09bT8tMTptO2lmKG51bGwhPXQpe3ZhciBfPXRoaXMuX3N0b3JlLmNob2ljZXMsZz1ufHx0LHk9Xz9fLmxlbmd0aCsxOjEsYj10aGlzLl9iYXNlSWQrXCItXCIrdGhpcy5faWROYW1lcy5pdGVtQ2hvaWNlK1wiLVwiK3k7dGhpcy5fc3RvcmUuZGlzcGF0Y2goaC5hZGRDaG9pY2Uoe2lkOnksZ3JvdXBJZDpsLGVsZW1lbnRJZDpiLHZhbHVlOnQsbGFiZWw6ZyxkaXNhYmxlZDphLGN1c3RvbVByb3BlcnRpZXM6ZCxwbGFjZWhvbGRlcjpmLGtleUNvZGU6dn0pKSxvJiZ0aGlzLl9hZGRJdGVtKHt2YWx1ZTp0LGxhYmVsOmcsY2hvaWNlSWQ6eSxjdXN0b21Qcm9wZXJ0aWVzOmQscGxhY2Vob2xkZXI6ZixrZXlDb2RlOnZ9KX19LGUucHJvdG90eXBlLl9hZGRHcm91cD1mdW5jdGlvbihlKXt2YXIgdD10aGlzLGk9ZS5ncm91cCxuPWUuaWQscj1lLnZhbHVlS2V5LG89dm9pZCAwPT09cj9cInZhbHVlXCI6cixzPWUubGFiZWxLZXksYT12b2lkIDA9PT1zP1wibGFiZWxcIjpzLGM9bS5pc1R5cGUoXCJPYmplY3RcIixpKT9pLmNob2ljZXM6QXJyYXkuZnJvbShpLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiT1BUSU9OXCIpKSxsPW58fE1hdGguZmxvb3IoKG5ldyBEYXRlKS52YWx1ZU9mKCkqTWF0aC5yYW5kb20oKSksdT0hIWkuZGlzYWJsZWQmJmkuZGlzYWJsZWQ7aWYoYyl7dGhpcy5fc3RvcmUuZGlzcGF0Y2gocC5hZGRHcm91cCh7dmFsdWU6aS5sYWJlbCxpZDpsLGFjdGl2ZTohMCxkaXNhYmxlZDp1fSkpO2MuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIGk9ZS5kaXNhYmxlZHx8ZS5wYXJlbnROb2RlJiZlLnBhcmVudE5vZGUuZGlzYWJsZWQ7dC5fYWRkQ2hvaWNlKHt2YWx1ZTplW29dLGxhYmVsOm0uaXNUeXBlKFwiT2JqZWN0XCIsZSk/ZVthXTplLmlubmVySFRNTCxpc1NlbGVjdGVkOmUuc2VsZWN0ZWQsaXNEaXNhYmxlZDppLGdyb3VwSWQ6bCxjdXN0b21Qcm9wZXJ0aWVzOmUuY3VzdG9tUHJvcGVydGllcyxwbGFjZWhvbGRlcjplLnBsYWNlaG9sZGVyfSl9KSl9ZWxzZSB0aGlzLl9zdG9yZS5kaXNwYXRjaChwLmFkZEdyb3VwKHt2YWx1ZTppLmxhYmVsLGlkOmkuaWQsYWN0aXZlOiExLGRpc2FibGVkOmkuZGlzYWJsZWR9KSl9LGUucHJvdG90eXBlLl9nZXRUZW1wbGF0ZT1mdW5jdGlvbihlKXtmb3IodmFyIHQsaT1bXSxyPTE7cjxhcmd1bWVudHMubGVuZ3RoO3IrKylpW3ItMV09YXJndW1lbnRzW3JdO3ZhciBvPXRoaXMuY29uZmlnLmNsYXNzTmFtZXM7cmV0dXJuKHQ9dGhpcy5fdGVtcGxhdGVzW2VdKS5jYWxsLmFwcGx5KHQsbihbdGhpcyxvXSxpKSl9LGUucHJvdG90eXBlLl9jcmVhdGVUZW1wbGF0ZXM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmNvbmZpZy5jYWxsYmFja09uQ3JlYXRlVGVtcGxhdGVzLHQ9e307ZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZSYmKHQ9ZS5jYWxsKHRoaXMsbS5zdHJUb0VsKSksdGhpcy5fdGVtcGxhdGVzPXMuZGVmYXVsdCh1LmRlZmF1bHQsdCl9LGUucHJvdG90eXBlLl9jcmVhdGVFbGVtZW50cz1mdW5jdGlvbigpe3RoaXMuY29udGFpbmVyT3V0ZXI9bmV3IGMuQ29udGFpbmVyKHtlbGVtZW50OnRoaXMuX2dldFRlbXBsYXRlKFwiY29udGFpbmVyT3V0ZXJcIix0aGlzLl9kaXJlY3Rpb24sdGhpcy5faXNTZWxlY3RFbGVtZW50LHRoaXMuX2lzU2VsZWN0T25lRWxlbWVudCx0aGlzLmNvbmZpZy5zZWFyY2hFbmFibGVkLHRoaXMucGFzc2VkRWxlbWVudC5lbGVtZW50LnR5cGUpLGNsYXNzTmFtZXM6dGhpcy5jb25maWcuY2xhc3NOYW1lcyx0eXBlOnRoaXMucGFzc2VkRWxlbWVudC5lbGVtZW50LnR5cGUscG9zaXRpb246dGhpcy5jb25maWcucG9zaXRpb259KSx0aGlzLmNvbnRhaW5lcklubmVyPW5ldyBjLkNvbnRhaW5lcih7ZWxlbWVudDp0aGlzLl9nZXRUZW1wbGF0ZShcImNvbnRhaW5lcklubmVyXCIpLGNsYXNzTmFtZXM6dGhpcy5jb25maWcuY2xhc3NOYW1lcyx0eXBlOnRoaXMucGFzc2VkRWxlbWVudC5lbGVtZW50LnR5cGUscG9zaXRpb246dGhpcy5jb25maWcucG9zaXRpb259KSx0aGlzLmlucHV0PW5ldyBjLklucHV0KHtlbGVtZW50OnRoaXMuX2dldFRlbXBsYXRlKFwiaW5wdXRcIix0aGlzLl9wbGFjZWhvbGRlclZhbHVlKSxjbGFzc05hbWVzOnRoaXMuY29uZmlnLmNsYXNzTmFtZXMsdHlwZTp0aGlzLnBhc3NlZEVsZW1lbnQuZWxlbWVudC50eXBlLHByZXZlbnRQYXN0ZTohdGhpcy5jb25maWcucGFzdGV9KSx0aGlzLmNob2ljZUxpc3Q9bmV3IGMuTGlzdCh7ZWxlbWVudDp0aGlzLl9nZXRUZW1wbGF0ZShcImNob2ljZUxpc3RcIix0aGlzLl9pc1NlbGVjdE9uZUVsZW1lbnQpfSksdGhpcy5pdGVtTGlzdD1uZXcgYy5MaXN0KHtlbGVtZW50OnRoaXMuX2dldFRlbXBsYXRlKFwiaXRlbUxpc3RcIix0aGlzLl9pc1NlbGVjdE9uZUVsZW1lbnQpfSksdGhpcy5kcm9wZG93bj1uZXcgYy5Ecm9wZG93bih7ZWxlbWVudDp0aGlzLl9nZXRUZW1wbGF0ZShcImRyb3Bkb3duXCIpLGNsYXNzTmFtZXM6dGhpcy5jb25maWcuY2xhc3NOYW1lcyx0eXBlOnRoaXMucGFzc2VkRWxlbWVudC5lbGVtZW50LnR5cGV9KX0sZS5wcm90b3R5cGUuX2NyZWF0ZVN0cnVjdHVyZT1mdW5jdGlvbigpe3RoaXMucGFzc2VkRWxlbWVudC5jb25jZWFsKCksdGhpcy5jb250YWluZXJJbm5lci53cmFwKHRoaXMucGFzc2VkRWxlbWVudC5lbGVtZW50KSx0aGlzLmNvbnRhaW5lck91dGVyLndyYXAodGhpcy5jb250YWluZXJJbm5lci5lbGVtZW50KSx0aGlzLl9pc1NlbGVjdE9uZUVsZW1lbnQ/dGhpcy5pbnB1dC5wbGFjZWhvbGRlcj10aGlzLmNvbmZpZy5zZWFyY2hQbGFjZWhvbGRlclZhbHVlfHxcIlwiOnRoaXMuX3BsYWNlaG9sZGVyVmFsdWUmJih0aGlzLmlucHV0LnBsYWNlaG9sZGVyPXRoaXMuX3BsYWNlaG9sZGVyVmFsdWUsdGhpcy5pbnB1dC5zZXRXaWR0aCgpKSx0aGlzLmNvbnRhaW5lck91dGVyLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5jb250YWluZXJJbm5lci5lbGVtZW50KSx0aGlzLmNvbnRhaW5lck91dGVyLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5kcm9wZG93bi5lbGVtZW50KSx0aGlzLmNvbnRhaW5lcklubmVyLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5pdGVtTGlzdC5lbGVtZW50KSx0aGlzLl9pc1RleHRFbGVtZW50fHx0aGlzLmRyb3Bkb3duLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5jaG9pY2VMaXN0LmVsZW1lbnQpLHRoaXMuX2lzU2VsZWN0T25lRWxlbWVudD90aGlzLmNvbmZpZy5zZWFyY2hFbmFibGVkJiZ0aGlzLmRyb3Bkb3duLmVsZW1lbnQuaW5zZXJ0QmVmb3JlKHRoaXMuaW5wdXQuZWxlbWVudCx0aGlzLmRyb3Bkb3duLmVsZW1lbnQuZmlyc3RDaGlsZCk6dGhpcy5jb250YWluZXJJbm5lci5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuaW5wdXQuZWxlbWVudCksdGhpcy5faXNTZWxlY3RFbGVtZW50JiYodGhpcy5faGlnaGxpZ2h0UG9zaXRpb249MCx0aGlzLl9pc1NlYXJjaGluZz0hMSx0aGlzLl9zdGFydExvYWRpbmcoKSx0aGlzLl9wcmVzZXRHcm91cHMubGVuZ3RoP3RoaXMuX2FkZFByZWRlZmluZWRHcm91cHModGhpcy5fcHJlc2V0R3JvdXBzKTp0aGlzLl9hZGRQcmVkZWZpbmVkQ2hvaWNlcyh0aGlzLl9wcmVzZXRDaG9pY2VzKSx0aGlzLl9zdG9wTG9hZGluZygpKSx0aGlzLl9pc1RleHRFbGVtZW50JiZ0aGlzLl9hZGRQcmVkZWZpbmVkSXRlbXModGhpcy5fcHJlc2V0SXRlbXMpfSxlLnByb3RvdHlwZS5fYWRkUHJlZGVmaW5lZEdyb3Vwcz1mdW5jdGlvbihlKXt2YXIgdD10aGlzLGk9dGhpcy5wYXNzZWRFbGVtZW50LnBsYWNlaG9sZGVyT3B0aW9uO2kmJmkucGFyZW50Tm9kZSYmXCJTRUxFQ1RcIj09PWkucGFyZW50Tm9kZS50YWdOYW1lJiZ0aGlzLl9hZGRDaG9pY2Uoe3ZhbHVlOmkudmFsdWUsbGFiZWw6aS5pbm5lckhUTUwsaXNTZWxlY3RlZDppLnNlbGVjdGVkLGlzRGlzYWJsZWQ6aS5kaXNhYmxlZCxwbGFjZWhvbGRlcjohMH0pLGUuZm9yRWFjaCgoZnVuY3Rpb24oZSl7cmV0dXJuIHQuX2FkZEdyb3VwKHtncm91cDplLGlkOmUuaWR8fG51bGx9KX0pKX0sZS5wcm90b3R5cGUuX2FkZFByZWRlZmluZWRDaG9pY2VzPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dGhpcy5jb25maWcuc2hvdWxkU29ydCYmZS5zb3J0KHRoaXMuY29uZmlnLnNvcnRlcik7dmFyIGk9ZS5zb21lKChmdW5jdGlvbihlKXtyZXR1cm4gZS5zZWxlY3RlZH0pKSxuPWUuZmluZEluZGV4KChmdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZS5kaXNhYmxlZHx8IWUuZGlzYWJsZWR9KSk7ZS5mb3JFYWNoKChmdW5jdGlvbihlLHIpe3ZhciBvPWUudmFsdWUscz12b2lkIDA9PT1vP1wiXCI6byxhPWUubGFiZWwsYz1lLmN1c3RvbVByb3BlcnRpZXMsbD1lLnBsYWNlaG9sZGVyO2lmKHQuX2lzU2VsZWN0RWxlbWVudClpZihlLmNob2ljZXMpdC5fYWRkR3JvdXAoe2dyb3VwOmUsaWQ6ZS5pZHx8bnVsbH0pO2Vsc2V7dmFyIHU9ISEodC5faXNTZWxlY3RPbmVFbGVtZW50JiYhaSYmcj09PW4pfHxlLnNlbGVjdGVkLGg9ZS5kaXNhYmxlZDtjb25zb2xlLmxvZyhoLGUpLHQuX2FkZENob2ljZSh7dmFsdWU6cyxsYWJlbDphLGlzU2VsZWN0ZWQ6ISF1LGlzRGlzYWJsZWQ6ISFoLHBsYWNlaG9sZGVyOiEhbCxjdXN0b21Qcm9wZXJ0aWVzOmN9KX1lbHNlIHQuX2FkZENob2ljZSh7dmFsdWU6cyxsYWJlbDphLGlzU2VsZWN0ZWQ6ISFlLnNlbGVjdGVkLGlzRGlzYWJsZWQ6ISFlLmRpc2FibGVkLHBsYWNlaG9sZGVyOiEhZS5wbGFjZWhvbGRlcixjdXN0b21Qcm9wZXJ0aWVzOmN9KX0pKX0sZS5wcm90b3R5cGUuX2FkZFByZWRlZmluZWRJdGVtcz1mdW5jdGlvbihlKXt2YXIgdD10aGlzO2UuZm9yRWFjaCgoZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09dHlwZW9mIGUmJmUudmFsdWUmJnQuX2FkZEl0ZW0oe3ZhbHVlOmUudmFsdWUsbGFiZWw6ZS5sYWJlbCxjaG9pY2VJZDplLmlkLGN1c3RvbVByb3BlcnRpZXM6ZS5jdXN0b21Qcm9wZXJ0aWVzLHBsYWNlaG9sZGVyOmUucGxhY2Vob2xkZXJ9KSxcInN0cmluZ1wiPT10eXBlb2YgZSYmdC5fYWRkSXRlbSh7dmFsdWU6ZX0pfSkpfSxlLnByb3RvdHlwZS5fc2V0Q2hvaWNlT3JJdGVtPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7KHtvYmplY3Q6ZnVuY3Rpb24oKXtlLnZhbHVlJiYodC5faXNUZXh0RWxlbWVudD90Ll9hZGRJdGVtKHt2YWx1ZTplLnZhbHVlLGxhYmVsOmUubGFiZWwsY2hvaWNlSWQ6ZS5pZCxjdXN0b21Qcm9wZXJ0aWVzOmUuY3VzdG9tUHJvcGVydGllcyxwbGFjZWhvbGRlcjplLnBsYWNlaG9sZGVyfSk6dC5fYWRkQ2hvaWNlKHt2YWx1ZTplLnZhbHVlLGxhYmVsOmUubGFiZWwsaXNTZWxlY3RlZDohMCxpc0Rpc2FibGVkOiExLGN1c3RvbVByb3BlcnRpZXM6ZS5jdXN0b21Qcm9wZXJ0aWVzLHBsYWNlaG9sZGVyOmUucGxhY2Vob2xkZXJ9KSl9LHN0cmluZzpmdW5jdGlvbigpe3QuX2lzVGV4dEVsZW1lbnQ/dC5fYWRkSXRlbSh7dmFsdWU6ZX0pOnQuX2FkZENob2ljZSh7dmFsdWU6ZSxsYWJlbDplLGlzU2VsZWN0ZWQ6ITAsaXNEaXNhYmxlZDohMX0pfX0pW20uZ2V0VHlwZShlKS50b0xvd2VyQ2FzZSgpXSgpfSxlLnByb3RvdHlwZS5fZmluZEFuZFNlbGVjdENob2ljZUJ5VmFsdWU9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxpPXRoaXMuX3N0b3JlLmNob2ljZXMuZmluZCgoZnVuY3Rpb24oaSl7cmV0dXJuIHQuY29uZmlnLnZhbHVlQ29tcGFyZXIoaS52YWx1ZSxlKX0pKTtpJiYhaS5zZWxlY3RlZCYmdGhpcy5fYWRkSXRlbSh7dmFsdWU6aS52YWx1ZSxsYWJlbDppLmxhYmVsLGNob2ljZUlkOmkuaWQsZ3JvdXBJZDppLmdyb3VwSWQsY3VzdG9tUHJvcGVydGllczppLmN1c3RvbVByb3BlcnRpZXMscGxhY2Vob2xkZXI6aS5wbGFjZWhvbGRlcixrZXlDb2RlOmkua2V5Q29kZX0pfSxlLnByb3RvdHlwZS5fZ2VuZXJhdGVQbGFjZWhvbGRlclZhbHVlPWZ1bmN0aW9uKCl7aWYodGhpcy5faXNTZWxlY3RFbGVtZW50KXt2YXIgZT10aGlzLnBhc3NlZEVsZW1lbnQucGxhY2Vob2xkZXJPcHRpb247cmV0dXJuIGU/ZS50ZXh0Om51bGx9dmFyIHQ9dGhpcy5jb25maWcsaT10LnBsYWNlaG9sZGVyLG49dC5wbGFjZWhvbGRlclZhbHVlLHI9dGhpcy5wYXNzZWRFbGVtZW50LmVsZW1lbnQuZGF0YXNldDtpZihpKXtpZihuKXJldHVybiBuO2lmKHIucGxhY2Vob2xkZXIpcmV0dXJuIHIucGxhY2Vob2xkZXJ9cmV0dXJuIG51bGx9LGV9KCk7dC5kZWZhdWx0PXl9LGZ1bmN0aW9uKGUsdCxpKXtcbi8qIVxuICogRnVzZS5qcyB2My40LjYgLSBMaWdodHdlaWdodCBmdXp6eS1zZWFyY2ggKGh0dHA6Ly9mdXNlanMuaW8pXG4gKiBcbiAqIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IEtpcm9sbG9zIFJpc2sgKGh0dHA6Ly9raXJvLm1lKVxuICogQWxsIFJpZ2h0cyBSZXNlcnZlZC4gQXBhY2hlIFNvZnR3YXJlIExpY2Vuc2UgMi4wXG4gKiBcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICovXG5lLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gaShuKXtpZih0W25dKXJldHVybiB0W25dLmV4cG9ydHM7dmFyIHI9dFtuXT17aTpuLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbbl0uY2FsbChyLmV4cG9ydHMscixyLmV4cG9ydHMsaSksci5sPSEwLHIuZXhwb3J0c31yZXR1cm4gaS5tPWUsaS5jPXQsaS5kPWZ1bmN0aW9uKGUsdCxuKXtpLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7ZW51bWVyYWJsZTohMCxnZXQ6bn0pfSxpLnI9ZnVuY3Rpb24oZSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLnRvU3RyaW5nVGFnJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiTW9kdWxlXCJ9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0saS50PWZ1bmN0aW9uKGUsdCl7aWYoMSZ0JiYoZT1pKGUpKSw4JnQpcmV0dXJuIGU7aWYoNCZ0JiZcIm9iamVjdFwiPT10eXBlb2YgZSYmZSYmZS5fX2VzTW9kdWxlKXJldHVybiBlO3ZhciBuPU9iamVjdC5jcmVhdGUobnVsbCk7aWYoaS5yKG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOmV9KSwyJnQmJlwic3RyaW5nXCIhPXR5cGVvZiBlKWZvcih2YXIgciBpbiBlKWkuZChuLHIsZnVuY3Rpb24odCl7cmV0dXJuIGVbdF19LmJpbmQobnVsbCxyKSk7cmV0dXJuIG59LGkubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gaS5kKHQsXCJhXCIsdCksdH0saS5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxpLnA9XCJcIixpKGkucz0xKX0oW2Z1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBBcnJheS5pc0FycmF5P0FycmF5LmlzQXJyYXkoZSk6XCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfX0sZnVuY3Rpb24oZSx0LGkpe2Z1bmN0aW9uIG4oZSl7cmV0dXJuKG49XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX0pKGUpfWZ1bmN0aW9uIHIoZSx0KXtmb3IodmFyIGk9MDtpPHQubGVuZ3RoO2krKyl7dmFyIG49dFtpXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbi5rZXksbil9fXZhciBvPWkoMikscz1pKDgpLGE9aSgwKSxjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LGkpe3ZhciBuPWkubG9jYXRpb24scj12b2lkIDA9PT1uPzA6bixvPWkuZGlzdGFuY2UsYT12b2lkIDA9PT1vPzEwMDpvLGM9aS50aHJlc2hvbGQsbD12b2lkIDA9PT1jPy42OmMsdT1pLm1heFBhdHRlcm5MZW5ndGgsaD12b2lkIDA9PT11PzMyOnUsZD1pLmNhc2VTZW5zaXRpdmUscD12b2lkIDAhPT1kJiZkLGY9aS50b2tlblNlcGFyYXRvcixtPXZvaWQgMD09PWY/LyArL2c6Zix2PWkuZmluZEFsbE1hdGNoZXMsXz12b2lkIDAhPT12JiZ2LGc9aS5taW5NYXRjaENoYXJMZW5ndGgseT12b2lkIDA9PT1nPzE6ZyxiPWkuaWQsRT12b2lkIDA9PT1iP251bGw6YixTPWkua2V5cyxJPXZvaWQgMD09PVM/W106UyxPPWkuc2hvdWxkU29ydCxDPXZvaWQgMD09PU98fE8sVD1pLmdldEZuLHc9dm9pZCAwPT09VD9zOlQsQT1pLnNvcnRGbixMPXZvaWQgMD09PUE/ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5zY29yZS10LnNjb3JlfTpBLFA9aS50b2tlbml6ZSxEPXZvaWQgMCE9PVAmJlAseD1pLm1hdGNoQWxsVG9rZW5zLE49dm9pZCAwIT09eCYmeCxNPWkuaW5jbHVkZU1hdGNoZXMsaj12b2lkIDAhPT1NJiZNLGs9aS5pbmNsdWRlU2NvcmUsRj12b2lkIDAhPT1rJiZrLEs9aS52ZXJib3NlLFI9dm9pZCAwIT09SyYmSzshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHRoaXMub3B0aW9ucz17bG9jYXRpb246cixkaXN0YW5jZTphLHRocmVzaG9sZDpsLG1heFBhdHRlcm5MZW5ndGg6aCxpc0Nhc2VTZW5zaXRpdmU6cCx0b2tlblNlcGFyYXRvcjptLGZpbmRBbGxNYXRjaGVzOl8sbWluTWF0Y2hDaGFyTGVuZ3RoOnksaWQ6RSxrZXlzOkksaW5jbHVkZU1hdGNoZXM6aixpbmNsdWRlU2NvcmU6RixzaG91bGRTb3J0OkMsZ2V0Rm46dyxzb3J0Rm46TCx2ZXJib3NlOlIsdG9rZW5pemU6RCxtYXRjaEFsbFRva2VuczpOfSx0aGlzLnNldENvbGxlY3Rpb24odCl9dmFyIHQsaTtyZXR1cm4gdD1lLChpPVt7a2V5Olwic2V0Q29sbGVjdGlvblwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmxpc3Q9ZSxlfX0se2tleTpcInNlYXJjaFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7bGltaXQ6ITF9O3RoaXMuX2xvZygnLS0tLS0tLS0tXFxuU2VhcmNoIHBhdHRlcm46IFwiJy5jb25jYXQoZSwnXCInKSk7dmFyIGk9dGhpcy5fcHJlcGFyZVNlYXJjaGVycyhlKSxuPWkudG9rZW5TZWFyY2hlcnMscj1pLmZ1bGxTZWFyY2hlcixvPXRoaXMuX3NlYXJjaChuLHIpLHM9by53ZWlnaHRzLGE9by5yZXN1bHRzO3JldHVybiB0aGlzLl9jb21wdXRlU2NvcmUocyxhKSx0aGlzLm9wdGlvbnMuc2hvdWxkU29ydCYmdGhpcy5fc29ydChhKSx0LmxpbWl0JiZcIm51bWJlclwiPT10eXBlb2YgdC5saW1pdCYmKGE9YS5zbGljZSgwLHQubGltaXQpKSx0aGlzLl9mb3JtYXQoYSl9fSx7a2V5OlwiX3ByZXBhcmVTZWFyY2hlcnNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpcIlwiLHQ9W107aWYodGhpcy5vcHRpb25zLnRva2VuaXplKWZvcih2YXIgaT1lLnNwbGl0KHRoaXMub3B0aW9ucy50b2tlblNlcGFyYXRvciksbj0wLHI9aS5sZW5ndGg7bjxyO24rPTEpdC5wdXNoKG5ldyBvKGlbbl0sdGhpcy5vcHRpb25zKSk7cmV0dXJue3Rva2VuU2VhcmNoZXJzOnQsZnVsbFNlYXJjaGVyOm5ldyBvKGUsdGhpcy5vcHRpb25zKX19fSx7a2V5OlwiX3NlYXJjaFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOltdLHQ9YXJndW1lbnRzLmxlbmd0aD4xP2FyZ3VtZW50c1sxXTp2b2lkIDAsaT10aGlzLmxpc3Qsbj17fSxyPVtdO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBpWzBdKXtmb3IodmFyIG89MCxzPWkubGVuZ3RoO288cztvKz0xKXRoaXMuX2FuYWx5emUoe2tleTpcIlwiLHZhbHVlOmlbb10scmVjb3JkOm8saW5kZXg6b30se3Jlc3VsdE1hcDpuLHJlc3VsdHM6cix0b2tlblNlYXJjaGVyczplLGZ1bGxTZWFyY2hlcjp0fSk7cmV0dXJue3dlaWdodHM6bnVsbCxyZXN1bHRzOnJ9fWZvcih2YXIgYT17fSxjPTAsbD1pLmxlbmd0aDtjPGw7Yys9MSlmb3IodmFyIHU9aVtjXSxoPTAsZD10aGlzLm9wdGlvbnMua2V5cy5sZW5ndGg7aDxkO2grPTEpe3ZhciBwPXRoaXMub3B0aW9ucy5rZXlzW2hdO2lmKFwic3RyaW5nXCIhPXR5cGVvZiBwKXtpZihhW3AubmFtZV09e3dlaWdodDoxLXAud2VpZ2h0fHwxfSxwLndlaWdodDw9MHx8cC53ZWlnaHQ+MSl0aHJvdyBuZXcgRXJyb3IoXCJLZXkgd2VpZ2h0IGhhcyB0byBiZSA+IDAgYW5kIDw9IDFcIik7cD1wLm5hbWV9ZWxzZSBhW3BdPXt3ZWlnaHQ6MX07dGhpcy5fYW5hbHl6ZSh7a2V5OnAsdmFsdWU6dGhpcy5vcHRpb25zLmdldEZuKHUscCkscmVjb3JkOnUsaW5kZXg6Y30se3Jlc3VsdE1hcDpuLHJlc3VsdHM6cix0b2tlblNlYXJjaGVyczplLGZ1bGxTZWFyY2hlcjp0fSl9cmV0dXJue3dlaWdodHM6YSxyZXN1bHRzOnJ9fX0se2tleTpcIl9hbmFseXplXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgaT1lLmtleSxuPWUuYXJyYXlJbmRleCxyPXZvaWQgMD09PW4/LTE6bixvPWUudmFsdWUscz1lLnJlY29yZCxjPWUuaW5kZXgsbD10LnRva2VuU2VhcmNoZXJzLHU9dm9pZCAwPT09bD9bXTpsLGg9dC5mdWxsU2VhcmNoZXIsZD12b2lkIDA9PT1oP1tdOmgscD10LnJlc3VsdE1hcCxmPXZvaWQgMD09PXA/e306cCxtPXQucmVzdWx0cyx2PXZvaWQgMD09PW0/W106bTtpZihudWxsIT1vKXt2YXIgXz0hMSxnPS0xLHk9MDtpZihcInN0cmluZ1wiPT10eXBlb2Ygbyl7dGhpcy5fbG9nKFwiXFxuS2V5OiBcIi5jb25jYXQoXCJcIj09PWk/XCItXCI6aSkpO3ZhciBiPWQuc2VhcmNoKG8pO2lmKHRoaXMuX2xvZygnRnVsbCB0ZXh0OiBcIicuY29uY2F0KG8sJ1wiLCBzY29yZTogJykuY29uY2F0KGIuc2NvcmUpKSx0aGlzLm9wdGlvbnMudG9rZW5pemUpe2Zvcih2YXIgRT1vLnNwbGl0KHRoaXMub3B0aW9ucy50b2tlblNlcGFyYXRvciksUz1bXSxJPTA7STx1Lmxlbmd0aDtJKz0xKXt2YXIgTz11W0ldO3RoaXMuX2xvZygnXFxuUGF0dGVybjogXCInLmNvbmNhdChPLnBhdHRlcm4sJ1wiJykpO2Zvcih2YXIgQz0hMSxUPTA7VDxFLmxlbmd0aDtUKz0xKXt2YXIgdz1FW1RdLEE9Ty5zZWFyY2godyksTD17fTtBLmlzTWF0Y2g/KExbd109QS5zY29yZSxfPSEwLEM9ITAsUy5wdXNoKEEuc2NvcmUpKTooTFt3XT0xLHRoaXMub3B0aW9ucy5tYXRjaEFsbFRva2Vuc3x8Uy5wdXNoKDEpKSx0aGlzLl9sb2coJ1Rva2VuOiBcIicuY29uY2F0KHcsJ1wiLCBzY29yZTogJykuY29uY2F0KExbd10pKX1DJiYoeSs9MSl9Zz1TWzBdO2Zvcih2YXIgUD1TLmxlbmd0aCxEPTE7RDxQO0QrPTEpZys9U1tEXTtnLz1QLHRoaXMuX2xvZyhcIlRva2VuIHNjb3JlIGF2ZXJhZ2U6XCIsZyl9dmFyIHg9Yi5zY29yZTtnPi0xJiYoeD0oeCtnKS8yKSx0aGlzLl9sb2coXCJTY29yZSBhdmVyYWdlOlwiLHgpO3ZhciBOPSF0aGlzLm9wdGlvbnMudG9rZW5pemV8fCF0aGlzLm9wdGlvbnMubWF0Y2hBbGxUb2tlbnN8fHk+PXUubGVuZ3RoO2lmKHRoaXMuX2xvZyhcIlxcbkNoZWNrIE1hdGNoZXM6IFwiLmNvbmNhdChOKSksKF98fGIuaXNNYXRjaCkmJk4pe3ZhciBNPWZbY107TT9NLm91dHB1dC5wdXNoKHtrZXk6aSxhcnJheUluZGV4OnIsdmFsdWU6byxzY29yZTp4LG1hdGNoZWRJbmRpY2VzOmIubWF0Y2hlZEluZGljZXN9KTooZltjXT17aXRlbTpzLG91dHB1dDpbe2tleTppLGFycmF5SW5kZXg6cix2YWx1ZTpvLHNjb3JlOngsbWF0Y2hlZEluZGljZXM6Yi5tYXRjaGVkSW5kaWNlc31dfSx2LnB1c2goZltjXSkpfX1lbHNlIGlmKGEobykpZm9yKHZhciBqPTAsaz1vLmxlbmd0aDtqPGs7ais9MSl0aGlzLl9hbmFseXplKHtrZXk6aSxhcnJheUluZGV4OmosdmFsdWU6b1tqXSxyZWNvcmQ6cyxpbmRleDpjfSx7cmVzdWx0TWFwOmYscmVzdWx0czp2LHRva2VuU2VhcmNoZXJzOnUsZnVsbFNlYXJjaGVyOmR9KX19fSx7a2V5OlwiX2NvbXB1dGVTY29yZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dGhpcy5fbG9nKFwiXFxuXFxuQ29tcHV0aW5nIHNjb3JlOlxcblwiKTtmb3IodmFyIGk9MCxuPXQubGVuZ3RoO2k8bjtpKz0xKXtmb3IodmFyIHI9dFtpXS5vdXRwdXQsbz1yLmxlbmd0aCxzPTEsYT0xLGM9MDtjPG87Yys9MSl7dmFyIGw9ZT9lW3JbY10ua2V5XS53ZWlnaHQ6MSx1PSgxPT09bD9yW2NdLnNjb3JlOnJbY10uc2NvcmV8fC4wMDEpKmw7MSE9PWw/YT1NYXRoLm1pbihhLHUpOihyW2NdLm5TY29yZT11LHMqPXUpfXRbaV0uc2NvcmU9MT09PWE/czphLHRoaXMuX2xvZyh0W2ldKX19fSx7a2V5OlwiX3NvcnRcIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9sb2coXCJcXG5cXG5Tb3J0aW5nLi4uLlwiKSxlLnNvcnQodGhpcy5vcHRpb25zLnNvcnRGbil9fSx7a2V5OlwiX2Zvcm1hdFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PVtdO2lmKHRoaXMub3B0aW9ucy52ZXJib3NlKXt2YXIgaT1bXTt0aGlzLl9sb2coXCJcXG5cXG5PdXRwdXQ6XFxuXFxuXCIsSlNPTi5zdHJpbmdpZnkoZSwoZnVuY3Rpb24oZSx0KXtpZihcIm9iamVjdFwiPT09bih0KSYmbnVsbCE9PXQpe2lmKC0xIT09aS5pbmRleE9mKHQpKXJldHVybjtpLnB1c2godCl9cmV0dXJuIHR9KSkpLGk9bnVsbH12YXIgcj1bXTt0aGlzLm9wdGlvbnMuaW5jbHVkZU1hdGNoZXMmJnIucHVzaCgoZnVuY3Rpb24oZSx0KXt2YXIgaT1lLm91dHB1dDt0Lm1hdGNoZXM9W107Zm9yKHZhciBuPTAscj1pLmxlbmd0aDtuPHI7bis9MSl7dmFyIG89aVtuXTtpZigwIT09by5tYXRjaGVkSW5kaWNlcy5sZW5ndGgpe3ZhciBzPXtpbmRpY2VzOm8ubWF0Y2hlZEluZGljZXMsdmFsdWU6by52YWx1ZX07by5rZXkmJihzLmtleT1vLmtleSksby5oYXNPd25Qcm9wZXJ0eShcImFycmF5SW5kZXhcIikmJm8uYXJyYXlJbmRleD4tMSYmKHMuYXJyYXlJbmRleD1vLmFycmF5SW5kZXgpLHQubWF0Y2hlcy5wdXNoKHMpfX19KSksdGhpcy5vcHRpb25zLmluY2x1ZGVTY29yZSYmci5wdXNoKChmdW5jdGlvbihlLHQpe3Quc2NvcmU9ZS5zY29yZX0pKTtmb3IodmFyIG89MCxzPWUubGVuZ3RoO288cztvKz0xKXt2YXIgYT1lW29dO2lmKHRoaXMub3B0aW9ucy5pZCYmKGEuaXRlbT10aGlzLm9wdGlvbnMuZ2V0Rm4oYS5pdGVtLHRoaXMub3B0aW9ucy5pZClbMF0pLHIubGVuZ3RoKXtmb3IodmFyIGM9e2l0ZW06YS5pdGVtfSxsPTAsdT1yLmxlbmd0aDtsPHU7bCs9MSlyW2xdKGEsYyk7dC5wdXNoKGMpfWVsc2UgdC5wdXNoKGEuaXRlbSl9cmV0dXJuIHR9fSx7a2V5OlwiX2xvZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU7dGhpcy5vcHRpb25zLnZlcmJvc2UmJihlPWNvbnNvbGUpLmxvZy5hcHBseShlLGFyZ3VtZW50cyl9fV0pJiZyKHQucHJvdG90eXBlLGkpLGV9KCk7ZS5leHBvcnRzPWN9LGZ1bmN0aW9uKGUsdCxpKXtmdW5jdGlvbiBuKGUsdCl7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspe3ZhciBuPXRbaV07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG4ua2V5LG4pfX12YXIgcj1pKDMpLG89aSg0KSxzPWkoNyksYT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxpKXt2YXIgbj1pLmxvY2F0aW9uLHI9dm9pZCAwPT09bj8wOm4sbz1pLmRpc3RhbmNlLGE9dm9pZCAwPT09bz8xMDA6byxjPWkudGhyZXNob2xkLGw9dm9pZCAwPT09Yz8uNjpjLHU9aS5tYXhQYXR0ZXJuTGVuZ3RoLGg9dm9pZCAwPT09dT8zMjp1LGQ9aS5pc0Nhc2VTZW5zaXRpdmUscD12b2lkIDAhPT1kJiZkLGY9aS50b2tlblNlcGFyYXRvcixtPXZvaWQgMD09PWY/LyArL2c6Zix2PWkuZmluZEFsbE1hdGNoZXMsXz12b2lkIDAhPT12JiZ2LGc9aS5taW5NYXRjaENoYXJMZW5ndGgseT12b2lkIDA9PT1nPzE6ZzshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHRoaXMub3B0aW9ucz17bG9jYXRpb246cixkaXN0YW5jZTphLHRocmVzaG9sZDpsLG1heFBhdHRlcm5MZW5ndGg6aCxpc0Nhc2VTZW5zaXRpdmU6cCx0b2tlblNlcGFyYXRvcjptLGZpbmRBbGxNYXRjaGVzOl8sbWluTWF0Y2hDaGFyTGVuZ3RoOnl9LHRoaXMucGF0dGVybj10aGlzLm9wdGlvbnMuaXNDYXNlU2Vuc2l0aXZlP3Q6dC50b0xvd2VyQ2FzZSgpLHRoaXMucGF0dGVybi5sZW5ndGg8PWgmJih0aGlzLnBhdHRlcm5BbHBoYWJldD1zKHRoaXMucGF0dGVybikpfXZhciB0LGk7cmV0dXJuIHQ9ZSwoaT1be2tleTpcInNlYXJjaFwiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKHRoaXMub3B0aW9ucy5pc0Nhc2VTZW5zaXRpdmV8fChlPWUudG9Mb3dlckNhc2UoKSksdGhpcy5wYXR0ZXJuPT09ZSlyZXR1cm57aXNNYXRjaDohMCxzY29yZTowLG1hdGNoZWRJbmRpY2VzOltbMCxlLmxlbmd0aC0xXV19O3ZhciB0PXRoaXMub3B0aW9ucyxpPXQubWF4UGF0dGVybkxlbmd0aCxuPXQudG9rZW5TZXBhcmF0b3I7aWYodGhpcy5wYXR0ZXJuLmxlbmd0aD5pKXJldHVybiByKGUsdGhpcy5wYXR0ZXJuLG4pO3ZhciBzPXRoaXMub3B0aW9ucyxhPXMubG9jYXRpb24sYz1zLmRpc3RhbmNlLGw9cy50aHJlc2hvbGQsdT1zLmZpbmRBbGxNYXRjaGVzLGg9cy5taW5NYXRjaENoYXJMZW5ndGg7cmV0dXJuIG8oZSx0aGlzLnBhdHRlcm4sdGhpcy5wYXR0ZXJuQWxwaGFiZXQse2xvY2F0aW9uOmEsZGlzdGFuY2U6Yyx0aHJlc2hvbGQ6bCxmaW5kQWxsTWF0Y2hlczp1LG1pbk1hdGNoQ2hhckxlbmd0aDpofSl9fV0pJiZuKHQucHJvdG90eXBlLGkpLGV9KCk7ZS5leHBvcnRzPWF9LGZ1bmN0aW9uKGUsdCl7dmFyIGk9L1tcXC1cXFtcXF1cXC9cXHtcXH1cXChcXClcXCpcXCtcXD9cXC5cXFxcXFxeXFwkXFx8XS9nO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTovICsvZyxyPW5ldyBSZWdFeHAodC5yZXBsYWNlKGksXCJcXFxcJCZcIikucmVwbGFjZShuLFwifFwiKSksbz1lLm1hdGNoKHIpLHM9ISFvLGE9W107aWYocylmb3IodmFyIGM9MCxsPW8ubGVuZ3RoO2M8bDtjKz0xKXt2YXIgdT1vW2NdO2EucHVzaChbZS5pbmRleE9mKHUpLHUubGVuZ3RoLTFdKX1yZXR1cm57c2NvcmU6cz8uNToxLGlzTWF0Y2g6cyxtYXRjaGVkSW5kaWNlczphfX19LGZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1pKDUpLHI9aSg2KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0LGksbyl7Zm9yKHZhciBzPW8ubG9jYXRpb24sYT12b2lkIDA9PT1zPzA6cyxjPW8uZGlzdGFuY2UsbD12b2lkIDA9PT1jPzEwMDpjLHU9by50aHJlc2hvbGQsaD12b2lkIDA9PT11Py42OnUsZD1vLmZpbmRBbGxNYXRjaGVzLHA9dm9pZCAwIT09ZCYmZCxmPW8ubWluTWF0Y2hDaGFyTGVuZ3RoLG09dm9pZCAwPT09Zj8xOmYsdj1hLF89ZS5sZW5ndGgsZz1oLHk9ZS5pbmRleE9mKHQsdiksYj10Lmxlbmd0aCxFPVtdLFM9MDtTPF87Uys9MSlFW1NdPTA7aWYoLTEhPT15KXt2YXIgST1uKHQse2Vycm9yczowLGN1cnJlbnRMb2NhdGlvbjp5LGV4cGVjdGVkTG9jYXRpb246dixkaXN0YW5jZTpsfSk7aWYoZz1NYXRoLm1pbihJLGcpLC0xIT09KHk9ZS5sYXN0SW5kZXhPZih0LHYrYikpKXt2YXIgTz1uKHQse2Vycm9yczowLGN1cnJlbnRMb2NhdGlvbjp5LGV4cGVjdGVkTG9jYXRpb246dixkaXN0YW5jZTpsfSk7Zz1NYXRoLm1pbihPLGcpfX15PS0xO2Zvcih2YXIgQz1bXSxUPTEsdz1iK18sQT0xPDwoYjw9MzE/Yi0xOjMwKSxMPTA7TDxiO0wrPTEpe2Zvcih2YXIgUD0wLEQ9dztQPEQ7KW4odCx7ZXJyb3JzOkwsY3VycmVudExvY2F0aW9uOnYrRCxleHBlY3RlZExvY2F0aW9uOnYsZGlzdGFuY2U6bH0pPD1nP1A9RDp3PUQsRD1NYXRoLmZsb29yKCh3LVApLzIrUCk7dz1EO3ZhciB4PU1hdGgubWF4KDEsdi1EKzEpLE49cD9fOk1hdGgubWluKHYrRCxfKStiLE09QXJyYXkoTisyKTtNW04rMV09KDE8PEwpLTE7Zm9yKHZhciBqPU47aj49eDtqLT0xKXt2YXIgaz1qLTEsRj1pW2UuY2hhckF0KGspXTtpZihGJiYoRVtrXT0xKSxNW2pdPShNW2orMV08PDF8MSkmRiwwIT09TCYmKE1bal18PShDW2orMV18Q1tqXSk8PDF8MXxDW2orMV0pLE1bal0mQSYmKFQ9bih0LHtlcnJvcnM6TCxjdXJyZW50TG9jYXRpb246ayxleHBlY3RlZExvY2F0aW9uOnYsZGlzdGFuY2U6bH0pKTw9Zyl7aWYoZz1ULCh5PWspPD12KWJyZWFrO3g9TWF0aC5tYXgoMSwyKnYteSl9fWlmKG4odCx7ZXJyb3JzOkwrMSxjdXJyZW50TG9jYXRpb246dixleHBlY3RlZExvY2F0aW9uOnYsZGlzdGFuY2U6bH0pPmcpYnJlYWs7Qz1NfXJldHVybntpc01hdGNoOnk+PTAsc2NvcmU6MD09PVQ/LjAwMTpULG1hdGNoZWRJbmRpY2VzOnIoRSxtKX19fSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3ZhciBpPXQuZXJyb3JzLG49dm9pZCAwPT09aT8wOmkscj10LmN1cnJlbnRMb2NhdGlvbixvPXZvaWQgMD09PXI/MDpyLHM9dC5leHBlY3RlZExvY2F0aW9uLGE9dm9pZCAwPT09cz8wOnMsYz10LmRpc3RhbmNlLGw9dm9pZCAwPT09Yz8xMDA6Yyx1PW4vZS5sZW5ndGgsaD1NYXRoLmFicyhhLW8pO3JldHVybiBsP3UraC9sOmg/MTp1fX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOltdLHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOjEsaT1bXSxuPS0xLHI9LTEsbz0wLHM9ZS5sZW5ndGg7bzxzO28rPTEpe3ZhciBhPWVbb107YSYmLTE9PT1uP249bzphfHwtMT09PW58fCgocj1vLTEpLW4rMT49dCYmaS5wdXNoKFtuLHJdKSxuPS0xKX1yZXR1cm4gZVtvLTFdJiZvLW4+PXQmJmkucHVzaChbbixvLTFdKSxpfX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXt9LGk9ZS5sZW5ndGgsbj0wO248aTtuKz0xKXRbZS5jaGFyQXQobildPTA7Zm9yKHZhciByPTA7cjxpO3IrPTEpdFtlLmNoYXJBdChyKV18PTE8PGktci0xO3JldHVybiB0fX0sZnVuY3Rpb24oZSx0LGkpe3ZhciBuPWkoMCk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uIGUodCxpLHIpe2lmKGkpe3ZhciBvPWkuaW5kZXhPZihcIi5cIikscz1pLGE9bnVsbDstMSE9PW8mJihzPWkuc2xpY2UoMCxvKSxhPWkuc2xpY2UobysxKSk7dmFyIGM9dFtzXTtpZihudWxsIT1jKWlmKGF8fFwic3RyaW5nXCIhPXR5cGVvZiBjJiZcIm51bWJlclwiIT10eXBlb2YgYylpZihuKGMpKWZvcih2YXIgbD0wLHU9Yy5sZW5ndGg7bDx1O2wrPTEpZShjW2xdLGEscik7ZWxzZSBhJiZlKGMsYSxyKTtlbHNlIHIucHVzaChjLnRvU3RyaW5nKCkpfWVsc2Ugci5wdXNoKHQpO3JldHVybiByfShlLHQsW10pfX1dKX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO3ZhciBuPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4hIWUmJlwib2JqZWN0XCI9PXR5cGVvZiBlfShlKSYmIWZ1bmN0aW9uKGUpe3ZhciB0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKTtyZXR1cm5cIltvYmplY3QgUmVnRXhwXVwiPT09dHx8XCJbb2JqZWN0IERhdGVdXCI9PT10fHxmdW5jdGlvbihlKXtyZXR1cm4gZS4kJHR5cGVvZj09PXJ9KGUpfShlKX07dmFyIHI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzO2Z1bmN0aW9uIG8oZSx0KXtyZXR1cm4hMSE9PXQuY2xvbmUmJnQuaXNNZXJnZWFibGVPYmplY3QoZSk/bCgoaT1lLEFycmF5LmlzQXJyYXkoaSk/W106e30pLGUsdCk6ZTt2YXIgaX1mdW5jdGlvbiBzKGUsdCxpKXtyZXR1cm4gZS5jb25jYXQodCkubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gbyhlLGkpfSkpfWZ1bmN0aW9uIGEoZSl7cmV0dXJuIE9iamVjdC5rZXlzKGUpLmNvbmNhdChmdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scz9PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIGUucHJvcGVydHlJc0VudW1lcmFibGUodCl9KSk6W119KGUpKX1mdW5jdGlvbiBjKGUsdCxpKXt2YXIgbj17fTtyZXR1cm4gaS5pc01lcmdlYWJsZU9iamVjdChlKSYmYShlKS5mb3JFYWNoKChmdW5jdGlvbih0KXtuW3RdPW8oZVt0XSxpKX0pKSxhKHQpLmZvckVhY2goKGZ1bmN0aW9uKHIpeyhmdW5jdGlvbihlLHQpe3RyeXtyZXR1cm4gdCBpbiBlJiYhKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCkmJk9iamVjdC5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKGUsdCkpfWNhdGNoKGUpe3JldHVybiExfX0pKGUscil8fChpLmlzTWVyZ2VhYmxlT2JqZWN0KHRbcl0pJiZlW3JdP25bcl09ZnVuY3Rpb24oZSx0KXtpZighdC5jdXN0b21NZXJnZSlyZXR1cm4gbDt2YXIgaT10LmN1c3RvbU1lcmdlKGUpO3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGk/aTpsfShyLGkpKGVbcl0sdFtyXSxpKTpuW3JdPW8odFtyXSxpKSl9KSksbn1mdW5jdGlvbiBsKGUsdCxpKXsoaT1pfHx7fSkuYXJyYXlNZXJnZT1pLmFycmF5TWVyZ2V8fHMsaS5pc01lcmdlYWJsZU9iamVjdD1pLmlzTWVyZ2VhYmxlT2JqZWN0fHxuLGkuY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQ9bzt2YXIgcj1BcnJheS5pc0FycmF5KHQpO3JldHVybiByPT09QXJyYXkuaXNBcnJheShlKT9yP2kuYXJyYXlNZXJnZShlLHQsaSk6YyhlLHQsaSk6byh0LGkpfWwuYWxsPWZ1bmN0aW9uKGUsdCl7aWYoIUFycmF5LmlzQXJyYXkoZSkpdGhyb3cgbmV3IEVycm9yKFwiZmlyc3QgYXJndW1lbnQgc2hvdWxkIGJlIGFuIGFycmF5XCIpO3JldHVybiBlLnJlZHVjZSgoZnVuY3Rpb24oZSxpKXtyZXR1cm4gbChlLGksdCl9KSx7fSl9O3ZhciB1PWw7ZS5leHBvcnRzPXV9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fc3ByZWFkQXJyYXlzfHxmdW5jdGlvbigpe2Zvcih2YXIgZT0wLHQ9MCxpPWFyZ3VtZW50cy5sZW5ndGg7dDxpO3QrKyllKz1hcmd1bWVudHNbdF0ubGVuZ3RoO3ZhciBuPUFycmF5KGUpLHI9MDtmb3IodD0wO3Q8aTt0KyspZm9yKHZhciBvPWFyZ3VtZW50c1t0XSxzPTAsYT1vLmxlbmd0aDtzPGE7cysrLHIrKyluW3JdPW9bc107cmV0dXJuIG59LHI9dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89aSgzKSxzPXIoaSg0KSksYT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt0aGlzLl9zdG9yZT1vLmNyZWF0ZVN0b3JlKHMuZGVmYXVsdCx3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyYmd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18oKSl9cmV0dXJuIGUucHJvdG90eXBlLnN1YnNjcmliZT1mdW5jdGlvbihlKXt0aGlzLl9zdG9yZS5zdWJzY3JpYmUoZSl9LGUucHJvdG90eXBlLmRpc3BhdGNoPWZ1bmN0aW9uKGUpe3RoaXMuX3N0b3JlLmRpc3BhdGNoKGUpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJzdGF0ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3RvcmUuZ2V0U3RhdGUoKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJpdGVtc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdGF0ZS5pdGVtc30sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJhY3RpdmVJdGVtc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pdGVtcy5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiEwPT09ZS5hY3RpdmV9KSl9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiaGlnaGxpZ2h0ZWRBY3RpdmVJdGVtc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pdGVtcy5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiBlLmFjdGl2ZSYmZS5oaWdobGlnaHRlZH0pKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJjaG9pY2VzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnN0YXRlLmNob2ljZXN9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiYWN0aXZlQ2hvaWNlc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jaG9pY2VzLmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuITA9PT1lLmFjdGl2ZX0pKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJzZWxlY3RhYmxlQ2hvaWNlc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jaG9pY2VzLmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuITAhPT1lLmRpc2FibGVkfSkpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInNlYXJjaGFibGVDaG9pY2VzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNlbGVjdGFibGVDaG9pY2VzLmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuITAhPT1lLnBsYWNlaG9sZGVyfSkpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcInBsYWNlaG9sZGVyQ2hvaWNlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBuKHRoaXMuY2hvaWNlcykucmV2ZXJzZSgpLmZpbmQoKGZ1bmN0aW9uKGUpe3JldHVybiEwPT09ZS5wbGFjZWhvbGRlcn0pKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJncm91cHNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RhdGUuZ3JvdXBzfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLnByb3RvdHlwZSxcImFjdGl2ZUdyb3Vwc1wiLHtnZXQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmdyb3Vwcyx0PXRoaXMuY2hvaWNlcztyZXR1cm4gZS5maWx0ZXIoKGZ1bmN0aW9uKGUpe3ZhciBpPSEwPT09ZS5hY3RpdmUmJiExPT09ZS5kaXNhYmxlZCxuPXQuc29tZSgoZnVuY3Rpb24oZSl7cmV0dXJuITA9PT1lLmFjdGl2ZSYmITE9PT1lLmRpc2FibGVkfSkpO3JldHVybiBpJiZufSksW10pfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGUucHJvdG90eXBlLmlzTG9hZGluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnN0YXRlLmxvYWRpbmd9LGUucHJvdG90eXBlLmdldENob2ljZUJ5SWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuYWN0aXZlQ2hvaWNlcy5maW5kKChmdW5jdGlvbih0KXtyZXR1cm4gdC5pZD09PXBhcnNlSW50KGUsMTApfSkpfSxlLnByb3RvdHlwZS5nZXRHcm91cEJ5SWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZ3JvdXBzLmZpbmQoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlkPT09ZX0pKX0sZX0oKTt0LmRlZmF1bHQ9YX0sZnVuY3Rpb24oZSx0KXt2YXIgaTtpPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KCk7dHJ5e2k9aXx8bmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKX1jYXRjaChlKXtcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93JiYoaT13aW5kb3cpfWUuZXhwb3J0cz1pfSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlKXtpZighZS53ZWJwYWNrUG9seWZpbGwpe3ZhciB0PU9iamVjdC5jcmVhdGUoZSk7dC5jaGlsZHJlbnx8KHQuY2hpbGRyZW49W10pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwibG9hZGVkXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHQubH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcImlkXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHQuaX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcImV4cG9ydHNcIix7ZW51bWVyYWJsZTohMH0pLHQud2VicGFja1BvbHlmaWxsPTF9cmV0dXJuIHR9fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX3NwcmVhZEFycmF5c3x8ZnVuY3Rpb24oKXtmb3IodmFyIGU9MCx0PTAsaT1hcmd1bWVudHMubGVuZ3RoO3Q8aTt0KyspZSs9YXJndW1lbnRzW3RdLmxlbmd0aDt2YXIgbj1BcnJheShlKSxyPTA7Zm9yKHQ9MDt0PGk7dCsrKWZvcih2YXIgbz1hcmd1bWVudHNbdF0scz0wLGE9by5sZW5ndGg7czxhO3MrKyxyKyspbltyXT1vW3NdO3JldHVybiBufTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmRlZmF1bHRTdGF0ZT1bXSx0LmRlZmF1bHQ9ZnVuY3Rpb24oZSxpKXtzd2l0Y2godm9pZCAwPT09ZSYmKGU9dC5kZWZhdWx0U3RhdGUpLGkudHlwZSl7Y2FzZVwiQUREX0lURU1cIjp2YXIgcj1pO3JldHVybiBuKGUsW3tpZDpyLmlkLGNob2ljZUlkOnIuY2hvaWNlSWQsZ3JvdXBJZDpyLmdyb3VwSWQsdmFsdWU6ci52YWx1ZSxsYWJlbDpyLmxhYmVsLGFjdGl2ZTohMCxoaWdobGlnaHRlZDohMSxjdXN0b21Qcm9wZXJ0aWVzOnIuY3VzdG9tUHJvcGVydGllcyxwbGFjZWhvbGRlcjpyLnBsYWNlaG9sZGVyfHwhMSxrZXlDb2RlOm51bGx9XSkubWFwKChmdW5jdGlvbihlKXt2YXIgdD1lO3JldHVybiB0LmhpZ2hsaWdodGVkPSExLHR9KSk7Y2FzZVwiUkVNT1ZFX0lURU1cIjpyZXR1cm4gZS5tYXAoKGZ1bmN0aW9uKGUpe3ZhciB0PWU7cmV0dXJuIHQuaWQ9PT1pLmlkJiYodC5hY3RpdmU9ITEpLHR9KSk7Y2FzZVwiSElHSExJR0hUX0lURU1cIjp2YXIgbz1pO3JldHVybiBlLm1hcCgoZnVuY3Rpb24oZSl7dmFyIHQ9ZTtyZXR1cm4gdC5pZD09PW8uaWQmJih0LmhpZ2hsaWdodGVkPW8uaGlnaGxpZ2h0ZWQpLHR9KSk7ZGVmYXVsdDpyZXR1cm4gZX19fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dGhpcyYmdGhpcy5fX3NwcmVhZEFycmF5c3x8ZnVuY3Rpb24oKXtmb3IodmFyIGU9MCx0PTAsaT1hcmd1bWVudHMubGVuZ3RoO3Q8aTt0KyspZSs9YXJndW1lbnRzW3RdLmxlbmd0aDt2YXIgbj1BcnJheShlKSxyPTA7Zm9yKHQ9MDt0PGk7dCsrKWZvcih2YXIgbz1hcmd1bWVudHNbdF0scz0wLGE9by5sZW5ndGg7czxhO3MrKyxyKyspbltyXT1vW3NdO3JldHVybiBufTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmRlZmF1bHRTdGF0ZT1bXSx0LmRlZmF1bHQ9ZnVuY3Rpb24oZSxpKXtzd2l0Y2godm9pZCAwPT09ZSYmKGU9dC5kZWZhdWx0U3RhdGUpLGkudHlwZSl7Y2FzZVwiQUREX0dST1VQXCI6dmFyIHI9aTtyZXR1cm4gbihlLFt7aWQ6ci5pZCx2YWx1ZTpyLnZhbHVlLGFjdGl2ZTpyLmFjdGl2ZSxkaXNhYmxlZDpyLmRpc2FibGVkfV0pO2Nhc2VcIkNMRUFSX0NIT0lDRVNcIjpyZXR1cm5bXTtkZWZhdWx0OnJldHVybiBlfX19LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9fc3ByZWFkQXJyYXlzfHxmdW5jdGlvbigpe2Zvcih2YXIgZT0wLHQ9MCxpPWFyZ3VtZW50cy5sZW5ndGg7dDxpO3QrKyllKz1hcmd1bWVudHNbdF0ubGVuZ3RoO3ZhciBuPUFycmF5KGUpLHI9MDtmb3IodD0wO3Q8aTt0KyspZm9yKHZhciBvPWFyZ3VtZW50c1t0XSxzPTAsYT1vLmxlbmd0aDtzPGE7cysrLHIrKyluW3JdPW9bc107cmV0dXJuIG59O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZGVmYXVsdFN0YXRlPVtdLHQuZGVmYXVsdD1mdW5jdGlvbihlLGkpe3N3aXRjaCh2b2lkIDA9PT1lJiYoZT10LmRlZmF1bHRTdGF0ZSksaS50eXBlKXtjYXNlXCJBRERfQ0hPSUNFXCI6dmFyIHI9aSxvPXtpZDpyLmlkLGVsZW1lbnRJZDpyLmVsZW1lbnRJZCxncm91cElkOnIuZ3JvdXBJZCx2YWx1ZTpyLnZhbHVlLGxhYmVsOnIubGFiZWx8fHIudmFsdWUsZGlzYWJsZWQ6ci5kaXNhYmxlZHx8ITEsc2VsZWN0ZWQ6ITEsYWN0aXZlOiEwLHNjb3JlOjk5OTksY3VzdG9tUHJvcGVydGllczpyLmN1c3RvbVByb3BlcnRpZXMscGxhY2Vob2xkZXI6ci5wbGFjZWhvbGRlcnx8ITF9O3JldHVybiBuKGUsW29dKTtjYXNlXCJBRERfSVRFTVwiOnZhciBzPWk7cmV0dXJuIHMuY2hvaWNlSWQ+LTE/ZS5tYXAoKGZ1bmN0aW9uKGUpe3ZhciB0PWU7cmV0dXJuIHQuaWQ9PT1wYXJzZUludChcIlwiK3MuY2hvaWNlSWQsMTApJiYodC5zZWxlY3RlZD0hMCksdH0pKTplO2Nhc2VcIlJFTU9WRV9JVEVNXCI6dmFyIGE9aTtyZXR1cm4gYS5jaG9pY2VJZCYmYS5jaG9pY2VJZD4tMT9lLm1hcCgoZnVuY3Rpb24oZSl7dmFyIHQ9ZTtyZXR1cm4gdC5pZD09PXBhcnNlSW50KFwiXCIrYS5jaG9pY2VJZCwxMCkmJih0LnNlbGVjdGVkPSExKSx0fSkpOmU7Y2FzZVwiRklMVEVSX0NIT0lDRVNcIjp2YXIgYz1pO3JldHVybiBlLm1hcCgoZnVuY3Rpb24oZSl7dmFyIHQ9ZTtyZXR1cm4gdC5hY3RpdmU9Yy5yZXN1bHRzLnNvbWUoKGZ1bmN0aW9uKGUpe3ZhciBpPWUuaXRlbSxuPWUuc2NvcmU7cmV0dXJuIGkuaWQ9PT10LmlkJiYodC5zY29yZT1uLCEwKX0pKSx0fSkpO2Nhc2VcIkFDVElWQVRFX0NIT0lDRVNcIjp2YXIgbD1pO3JldHVybiBlLm1hcCgoZnVuY3Rpb24oZSl7dmFyIHQ9ZTtyZXR1cm4gdC5hY3RpdmU9bC5hY3RpdmUsdH0pKTtjYXNlXCJDTEVBUl9DSE9JQ0VTXCI6cmV0dXJuIHQuZGVmYXVsdFN0YXRlO2RlZmF1bHQ6cmV0dXJuIGV9fX0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZGVmYXVsdFN0YXRlPSExO3QuZGVmYXVsdD1mdW5jdGlvbihlLGkpe3N3aXRjaCh2b2lkIDA9PT1lJiYoZT10LmRlZmF1bHRTdGF0ZSksaS50eXBlKXtjYXNlXCJTRVRfSVNfTE9BRElOR1wiOnJldHVybiBpLmlzTG9hZGluZztkZWZhdWx0OnJldHVybiBlfX19LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjt2YXIgbj10aGlzJiZ0aGlzLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcj1uKGkoMTkpKTt0LkRyb3Bkb3duPXIuZGVmYXVsdDt2YXIgbz1uKGkoMjApKTt0LkNvbnRhaW5lcj1vLmRlZmF1bHQ7dmFyIHM9bihpKDIxKSk7dC5JbnB1dD1zLmRlZmF1bHQ7dmFyIGE9bihpKDIyKSk7dC5MaXN0PWEuZGVmYXVsdDt2YXIgYz1uKGkoMjMpKTt0LldyYXBwZWRJbnB1dD1jLmRlZmF1bHQ7dmFyIGw9bihpKDI0KSk7dC5XcmFwcGVkU2VsZWN0PWwuZGVmYXVsdH0sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt2YXIgdD1lLmVsZW1lbnQsaT1lLnR5cGUsbj1lLmNsYXNzTmFtZXM7dGhpcy5lbGVtZW50PXQsdGhpcy5jbGFzc05hbWVzPW4sdGhpcy50eXBlPWksdGhpcy5pc0FjdGl2ZT0hMX1yZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwiZGlzdGFuY2VGcm9tVG9wV2luZG93XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGUucHJvdG90eXBlLmdldENoaWxkPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihlKX0sZS5wcm90b3R5cGUuc2hvdz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZXMuYWN0aXZlU3RhdGUpLHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsXCJ0cnVlXCIpLHRoaXMuaXNBY3RpdmU9ITAsdGhpc30sZS5wcm90b3R5cGUuaGlkZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzTmFtZXMuYWN0aXZlU3RhdGUpLHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsXCJmYWxzZVwiKSx0aGlzLmlzQWN0aXZlPSExLHRoaXN9LGV9KCk7dC5kZWZhdWx0PW59LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1pKDEpLHI9aSgwKSxvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt2YXIgdD1lLmVsZW1lbnQsaT1lLnR5cGUsbj1lLmNsYXNzTmFtZXMscj1lLnBvc2l0aW9uO3RoaXMuZWxlbWVudD10LHRoaXMuY2xhc3NOYW1lcz1uLHRoaXMudHlwZT1pLHRoaXMucG9zaXRpb249cix0aGlzLmlzT3Blbj0hMSx0aGlzLmlzRmxpcHBlZD0hMSx0aGlzLmlzRm9jdXNzZWQ9ITEsdGhpcy5pc0Rpc2FibGVkPSExLHRoaXMuaXNMb2FkaW5nPSExLHRoaXMuX29uRm9jdXM9dGhpcy5fb25Gb2N1cy5iaW5kKHRoaXMpLHRoaXMuX29uQmx1cj10aGlzLl9vbkJsdXIuYmluZCh0aGlzKX1yZXR1cm4gZS5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcnM9ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsdGhpcy5fb25Gb2N1cyksdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsdGhpcy5fb25CbHVyKX0sZS5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lcnM9ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsdGhpcy5fb25Gb2N1cyksdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJibHVyXCIsdGhpcy5fb25CbHVyKX0sZS5wcm90b3R5cGUuc2hvdWxkRmxpcD1mdW5jdGlvbihlKXtpZihcIm51bWJlclwiIT10eXBlb2YgZSlyZXR1cm4hMTt2YXIgdD0hMTtyZXR1cm5cImF1dG9cIj09PXRoaXMucG9zaXRpb24/dD0hd2luZG93Lm1hdGNoTWVkaWEoXCIobWluLWhlaWdodDogXCIrKGUrMSkrXCJweClcIikubWF0Y2hlczpcInRvcFwiPT09dGhpcy5wb3NpdGlvbiYmKHQ9ITApLHR9LGUucHJvdG90eXBlLnNldEFjdGl2ZURlc2NlbmRhbnQ9ZnVuY3Rpb24oZSl7dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiLGUpfSxlLnByb3RvdHlwZS5yZW1vdmVBY3RpdmVEZXNjZW5kYW50PWZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiKX0sZS5wcm90b3R5cGUub3Blbj1mdW5jdGlvbihlKXt0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZXMub3BlblN0YXRlKSx0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLFwidHJ1ZVwiKSx0aGlzLmlzT3Blbj0hMCx0aGlzLnNob3VsZEZsaXAoZSkmJih0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZXMuZmxpcHBlZFN0YXRlKSx0aGlzLmlzRmxpcHBlZD0hMCl9LGUucHJvdG90eXBlLmNsb3NlPWZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5jbGFzc05hbWVzLm9wZW5TdGF0ZSksdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIixcImZhbHNlXCIpLHRoaXMucmVtb3ZlQWN0aXZlRGVzY2VuZGFudCgpLHRoaXMuaXNPcGVuPSExLHRoaXMuaXNGbGlwcGVkJiYodGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5jbGFzc05hbWVzLmZsaXBwZWRTdGF0ZSksdGhpcy5pc0ZsaXBwZWQ9ITEpfSxlLnByb3RvdHlwZS5mb2N1cz1mdW5jdGlvbigpe3RoaXMuaXNGb2N1c3NlZHx8dGhpcy5lbGVtZW50LmZvY3VzKCl9LGUucHJvdG90eXBlLmFkZEZvY3VzU3RhdGU9ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLmNsYXNzTmFtZXMuZm9jdXNTdGF0ZSl9LGUucHJvdG90eXBlLnJlbW92ZUZvY3VzU3RhdGU9ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNsYXNzTmFtZXMuZm9jdXNTdGF0ZSl9LGUucHJvdG90eXBlLmVuYWJsZT1mdW5jdGlvbigpe3RoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY2xhc3NOYW1lcy5kaXNhYmxlZFN0YXRlKSx0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1kaXNhYmxlZFwiKSx0aGlzLnR5cGU9PT1yLlNFTEVDVF9PTkVfVFlQRSYmdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsXCIwXCIpLHRoaXMuaXNEaXNhYmxlZD0hMX0sZS5wcm90b3R5cGUuZGlzYWJsZT1mdW5jdGlvbigpe3RoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuY2xhc3NOYW1lcy5kaXNhYmxlZFN0YXRlKSx0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1kaXNhYmxlZFwiLFwidHJ1ZVwiKSx0aGlzLnR5cGU9PT1yLlNFTEVDVF9PTkVfVFlQRSYmdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsXCItMVwiKSx0aGlzLmlzRGlzYWJsZWQ9ITB9LGUucHJvdG90eXBlLndyYXA9ZnVuY3Rpb24oZSl7bi53cmFwKGUsdGhpcy5lbGVtZW50KX0sZS5wcm90b3R5cGUudW53cmFwPWZ1bmN0aW9uKGUpe3RoaXMuZWxlbWVudC5wYXJlbnROb2RlJiYodGhpcy5lbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGUsdGhpcy5lbGVtZW50KSx0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpKX0sZS5wcm90b3R5cGUuYWRkTG9hZGluZ1N0YXRlPWZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5jbGFzc05hbWVzLmxvYWRpbmdTdGF0ZSksdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtYnVzeVwiLFwidHJ1ZVwiKSx0aGlzLmlzTG9hZGluZz0hMH0sZS5wcm90b3R5cGUucmVtb3ZlTG9hZGluZ1N0YXRlPWZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5jbGFzc05hbWVzLmxvYWRpbmdTdGF0ZSksdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtYnVzeVwiKSx0aGlzLmlzTG9hZGluZz0hMX0sZS5wcm90b3R5cGUuX29uRm9jdXM9ZnVuY3Rpb24oKXt0aGlzLmlzRm9jdXNzZWQ9ITB9LGUucHJvdG90eXBlLl9vbkJsdXI9ZnVuY3Rpb24oKXt0aGlzLmlzRm9jdXNzZWQ9ITF9LGV9KCk7dC5kZWZhdWx0PW99LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1pKDEpLHI9aSgwKSxvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt2YXIgdD1lLmVsZW1lbnQsaT1lLnR5cGUsbj1lLmNsYXNzTmFtZXMscj1lLnByZXZlbnRQYXN0ZTt0aGlzLmVsZW1lbnQ9dCx0aGlzLnR5cGU9aSx0aGlzLmNsYXNzTmFtZXM9bix0aGlzLnByZXZlbnRQYXN0ZT1yLHRoaXMuaXNGb2N1c3NlZD10aGlzLmVsZW1lbnQuaXNFcXVhbE5vZGUoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCksdGhpcy5pc0Rpc2FibGVkPXQuZGlzYWJsZWQsdGhpcy5fb25QYXN0ZT10aGlzLl9vblBhc3RlLmJpbmQodGhpcyksdGhpcy5fb25JbnB1dD10aGlzLl9vbklucHV0LmJpbmQodGhpcyksdGhpcy5fb25Gb2N1cz10aGlzLl9vbkZvY3VzLmJpbmQodGhpcyksdGhpcy5fb25CbHVyPXRoaXMuX29uQmx1ci5iaW5kKHRoaXMpfXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsXCJwbGFjZWhvbGRlclwiLHtzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5lbGVtZW50LnBsYWNlaG9sZGVyPWV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUucHJvdG90eXBlLFwidmFsdWVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG4uc2FuaXRpc2UodGhpcy5lbGVtZW50LnZhbHVlKX0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuZWxlbWVudC52YWx1ZT1lfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLGUucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXJzPWZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJwYXN0ZVwiLHRoaXMuX29uUGFzdGUpLHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIix0aGlzLl9vbklucHV0LHtwYXNzaXZlOiEwfSksdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLHRoaXMuX29uRm9jdXMse3Bhc3NpdmU6ITB9KSx0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIix0aGlzLl9vbkJsdXIse3Bhc3NpdmU6ITB9KX0sZS5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lcnM9ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsdGhpcy5fb25JbnB1dCksdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwYXN0ZVwiLHRoaXMuX29uUGFzdGUpLHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiZm9jdXNcIix0aGlzLl9vbkZvY3VzKSx0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImJsdXJcIix0aGlzLl9vbkJsdXIpfSxlLnByb3RvdHlwZS5lbmFibGU9ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIiksdGhpcy5pc0Rpc2FibGVkPSExfSxlLnByb3RvdHlwZS5kaXNhYmxlPWZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsXCJcIiksdGhpcy5pc0Rpc2FibGVkPSEwfSxlLnByb3RvdHlwZS5mb2N1cz1mdW5jdGlvbigpe3RoaXMuaXNGb2N1c3NlZHx8dGhpcy5lbGVtZW50LmZvY3VzKCl9LGUucHJvdG90eXBlLmJsdXI9ZnVuY3Rpb24oKXt0aGlzLmlzRm9jdXNzZWQmJnRoaXMuZWxlbWVudC5ibHVyKCl9LGUucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT0hMCksdGhpcy5lbGVtZW50LnZhbHVlJiYodGhpcy5lbGVtZW50LnZhbHVlPVwiXCIpLGUmJnRoaXMuc2V0V2lkdGgoKSx0aGlzfSxlLnByb3RvdHlwZS5zZXRXaWR0aD1mdW5jdGlvbigpe3ZhciBlPXRoaXMuZWxlbWVudCx0PWUuc3R5bGUsaT1lLnZhbHVlLG49ZS5wbGFjZWhvbGRlcjt0Lm1pbldpZHRoPW4ubGVuZ3RoKzErXCJjaFwiLHQud2lkdGg9aS5sZW5ndGgrMStcImNoXCJ9LGUucHJvdG90eXBlLnNldEFjdGl2ZURlc2NlbmRhbnQ9ZnVuY3Rpb24oZSl7dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiLGUpfSxlLnByb3RvdHlwZS5yZW1vdmVBY3RpdmVEZXNjZW5kYW50PWZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiKX0sZS5wcm90b3R5cGUuX29uSW5wdXQ9ZnVuY3Rpb24oKXt0aGlzLnR5cGUhPT1yLlNFTEVDVF9PTkVfVFlQRSYmdGhpcy5zZXRXaWR0aCgpfSxlLnByb3RvdHlwZS5fb25QYXN0ZT1mdW5jdGlvbihlKXt0aGlzLnByZXZlbnRQYXN0ZSYmZS5wcmV2ZW50RGVmYXVsdCgpfSxlLnByb3RvdHlwZS5fb25Gb2N1cz1mdW5jdGlvbigpe3RoaXMuaXNGb2N1c3NlZD0hMH0sZS5wcm90b3R5cGUuX29uQmx1cj1mdW5jdGlvbigpe3RoaXMuaXNGb2N1c3NlZD0hMX0sZX0oKTt0LmRlZmF1bHQ9b30sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWkoMCkscj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dmFyIHQ9ZS5lbGVtZW50O3RoaXMuZWxlbWVudD10LHRoaXMuc2Nyb2xsUG9zPXRoaXMuZWxlbWVudC5zY3JvbGxUb3AsdGhpcy5oZWlnaHQ9dGhpcy5lbGVtZW50Lm9mZnNldEhlaWdodH1yZXR1cm4gZS5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQuaW5uZXJIVE1MPVwiXCJ9LGUucHJvdG90eXBlLmFwcGVuZD1mdW5jdGlvbihlKXt0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoZSl9LGUucHJvdG90eXBlLmdldENoaWxkPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihlKX0sZS5wcm90b3R5cGUuaGFzQ2hpbGRyZW49ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbGVtZW50Lmhhc0NoaWxkTm9kZXMoKX0sZS5wcm90b3R5cGUuc2Nyb2xsVG9Ub3A9ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQuc2Nyb2xsVG9wPTB9LGUucHJvdG90eXBlLnNjcm9sbFRvQ2hpbGRFbGVtZW50PWZ1bmN0aW9uKGUsdCl7dmFyIGk9dGhpcztpZihlKXt2YXIgbj10aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0LHI9dGhpcy5lbGVtZW50LnNjcm9sbFRvcCtuLG89ZS5vZmZzZXRIZWlnaHQscz1lLm9mZnNldFRvcCtvLGE9dD4wP3RoaXMuZWxlbWVudC5zY3JvbGxUb3Arcy1yOmUub2Zmc2V0VG9wO3JlcXVlc3RBbmltYXRpb25GcmFtZSgoZnVuY3Rpb24oKXtpLl9hbmltYXRlU2Nyb2xsKGEsdCl9KSl9fSxlLnByb3RvdHlwZS5fc2Nyb2xsRG93bj1mdW5jdGlvbihlLHQsaSl7dmFyIG49KGktZSkvdCxyPW4+MT9uOjE7dGhpcy5lbGVtZW50LnNjcm9sbFRvcD1lK3J9LGUucHJvdG90eXBlLl9zY3JvbGxVcD1mdW5jdGlvbihlLHQsaSl7dmFyIG49KGUtaSkvdCxyPW4+MT9uOjE7dGhpcy5lbGVtZW50LnNjcm9sbFRvcD1lLXJ9LGUucHJvdG90eXBlLl9hbmltYXRlU2Nyb2xsPWZ1bmN0aW9uKGUsdCl7dmFyIGk9dGhpcyxyPW4uU0NST0xMSU5HX1NQRUVELG89dGhpcy5lbGVtZW50LnNjcm9sbFRvcCxzPSExO3Q+MD8odGhpcy5fc2Nyb2xsRG93bihvLHIsZSksbzxlJiYocz0hMCkpOih0aGlzLl9zY3JvbGxVcChvLHIsZSksbz5lJiYocz0hMCkpLHMmJnJlcXVlc3RBbmltYXRpb25GcmFtZSgoZnVuY3Rpb24oKXtpLl9hbmltYXRlU2Nyb2xsKGUsdCl9KSl9LGV9KCk7dC5kZWZhdWx0PXJ9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjt2YXIgbixyPXRoaXMmJnRoaXMuX19leHRlbmRzfHwobj1mdW5jdGlvbihlLHQpe3JldHVybihuPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihlLHQpe2UuX19wcm90b19fPXR9fHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgaSBpbiB0KXQuaGFzT3duUHJvcGVydHkoaSkmJihlW2ldPXRbaV0pfSkoZSx0KX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBpKCl7dGhpcy5jb25zdHJ1Y3Rvcj1lfW4oZSx0KSxlLnByb3RvdHlwZT1udWxsPT09dD9PYmplY3QuY3JlYXRlKHQpOihpLnByb3RvdHlwZT10LnByb3RvdHlwZSxuZXcgaSl9KSxvPXRoaXMmJnRoaXMuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBzPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7dmFyIGk9dC5lbGVtZW50LG49dC5jbGFzc05hbWVzLHI9dC5kZWxpbWl0ZXIsbz1lLmNhbGwodGhpcyx7ZWxlbWVudDppLGNsYXNzTmFtZXM6bn0pfHx0aGlzO3JldHVybiBvLmRlbGltaXRlcj1yLG99cmV0dXJuIHIodCxlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJ2YWx1ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbGVtZW50LnZhbHVlfSxzZXQ6ZnVuY3Rpb24oZSl7dGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcInZhbHVlXCIsZSksdGhpcy5lbGVtZW50LnZhbHVlPWV9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdH0obyhpKDUpKS5kZWZhdWx0KTt0LmRlZmF1bHQ9c30sZnVuY3Rpb24oZSx0LGkpe1widXNlIHN0cmljdFwiO3ZhciBuLHI9dGhpcyYmdGhpcy5fX2V4dGVuZHN8fChuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuKG49T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKGUsdCl7ZS5fX3Byb3RvX189dH18fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBpIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShpKSYmKGVbaV09dFtpXSl9KShlLHQpfSxmdW5jdGlvbihlLHQpe2Z1bmN0aW9uIGkoKXt0aGlzLmNvbnN0cnVjdG9yPWV9bihlLHQpLGUucHJvdG90eXBlPW51bGw9PT10P09iamVjdC5jcmVhdGUodCk6KGkucHJvdG90eXBlPXQucHJvdG90eXBlLG5ldyBpKX0pLG89dGhpcyYmdGhpcy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHM9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXt2YXIgaT10LmVsZW1lbnQsbj10LmNsYXNzTmFtZXMscj10LnRlbXBsYXRlLG89ZS5jYWxsKHRoaXMse2VsZW1lbnQ6aSxjbGFzc05hbWVzOm59KXx8dGhpcztyZXR1cm4gby50ZW1wbGF0ZT1yLG99cmV0dXJuIHIodCxlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJwbGFjZWhvbGRlck9wdGlvblwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ29wdGlvblt2YWx1ZT1cIlwiXScpfHx0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcIm9wdGlvbltwbGFjZWhvbGRlcl1cIil9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwib3B0aW9uR3JvdXBzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBBcnJheS5mcm9tKHRoaXMuZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIk9QVEdST1VQXCIpKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJvcHRpb25zXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBBcnJheS5mcm9tKHRoaXMuZWxlbWVudC5vcHRpb25zKX0sc2V0OmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsaT1kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7ZS5mb3JFYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gbj1lLHI9dC50ZW1wbGF0ZShuKSx2b2lkIGkuYXBwZW5kQ2hpbGQocik7dmFyIG4scn0pKSx0aGlzLmFwcGVuZERvY0ZyYWdtZW50KGkpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLmFwcGVuZERvY0ZyYWdtZW50PWZ1bmN0aW9uKGUpe3RoaXMuZWxlbWVudC5pbm5lckhUTUw9XCJcIix0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoZSl9LHR9KG8oaSg1KSkuZGVmYXVsdCk7dC5kZWZhdWx0PXN9LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj17Y29udGFpbmVyT3V0ZXI6ZnVuY3Rpb24oZSx0LGksbixyLG8pe3ZhciBzPWUuY29udGFpbmVyT3V0ZXIsYT1PYmplY3QuYXNzaWduKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikse2NsYXNzTmFtZTpzfSk7cmV0dXJuIGEuZGF0YXNldC50eXBlPW8sdCYmKGEuZGlyPXQpLG4mJihhLnRhYkluZGV4PTApLGkmJihhLnNldEF0dHJpYnV0ZShcInJvbGVcIixyP1wiY29tYm9ib3hcIjpcImxpc3Rib3hcIiksciYmYS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWF1dG9jb21wbGV0ZVwiLFwibGlzdFwiKSksYS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhhc3BvcHVwXCIsXCJ0cnVlXCIpLGEuc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLFwiZmFsc2VcIiksYX0sY29udGFpbmVySW5uZXI6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5jb250YWluZXJJbm5lcjtyZXR1cm4gT2JqZWN0LmFzc2lnbihkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHtjbGFzc05hbWU6dH0pfSxpdGVtTGlzdDpmdW5jdGlvbihlLHQpe3ZhciBpPWUubGlzdCxuPWUubGlzdFNpbmdsZSxyPWUubGlzdEl0ZW1zO3JldHVybiBPYmplY3QuYXNzaWduKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikse2NsYXNzTmFtZTppK1wiIFwiKyh0P246cil9KX0scGxhY2Vob2xkZXI6ZnVuY3Rpb24oZSx0KXt2YXIgaT1lLnBsYWNlaG9sZGVyO3JldHVybiBPYmplY3QuYXNzaWduKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikse2NsYXNzTmFtZTppLGlubmVySFRNTDp0fSl9LGl0ZW06ZnVuY3Rpb24oZSx0LGkpe3ZhciBuPWUuaXRlbSxyPWUuYnV0dG9uLG89ZS5oaWdobGlnaHRlZFN0YXRlLHM9ZS5pdGVtU2VsZWN0YWJsZSxhPWUucGxhY2Vob2xkZXIsYz10LmlkLGw9dC52YWx1ZSx1PXQubGFiZWwsaD10LmN1c3RvbVByb3BlcnRpZXMsZD10LmFjdGl2ZSxwPXQuZGlzYWJsZWQsZj10LmhpZ2hsaWdodGVkLG09dC5wbGFjZWhvbGRlcix2PU9iamVjdC5hc3NpZ24oZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx7Y2xhc3NOYW1lOm4saW5uZXJIVE1MOnV9KTtpZihPYmplY3QuYXNzaWduKHYuZGF0YXNldCx7aXRlbTpcIlwiLGlkOmMsdmFsdWU6bCxjdXN0b21Qcm9wZXJ0aWVzOmh9KSxkJiZ2LnNldEF0dHJpYnV0ZShcImFyaWEtc2VsZWN0ZWRcIixcInRydWVcIikscCYmdi5zZXRBdHRyaWJ1dGUoXCJhcmlhLWRpc2FibGVkXCIsXCJ0cnVlXCIpLG0mJnYuY2xhc3NMaXN0LmFkZChhKSx2LmNsYXNzTGlzdC5hZGQoZj9vOnMpLGkpe3AmJnYuY2xhc3NMaXN0LnJlbW92ZShzKSx2LmRhdGFzZXQuZGVsZXRhYmxlPVwiXCI7dmFyIF89T2JqZWN0LmFzc2lnbihkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpLHt0eXBlOlwiYnV0dG9uXCIsY2xhc3NOYW1lOnIsaW5uZXJIVE1MOlwiUmVtb3ZlIGl0ZW1cIn0pO18uc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLFwiUmVtb3ZlIGl0ZW06ICdcIitsK1wiJ1wiKSxfLmRhdGFzZXQuYnV0dG9uPVwiXCIsdi5hcHBlbmRDaGlsZChfKX1yZXR1cm4gdn0sY2hvaWNlTGlzdDpmdW5jdGlvbihlLHQpe3ZhciBpPWUubGlzdCxuPU9iamVjdC5hc3NpZ24oZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx7Y2xhc3NOYW1lOml9KTtyZXR1cm4gdHx8bi5zZXRBdHRyaWJ1dGUoXCJhcmlhLW11bHRpc2VsZWN0YWJsZVwiLFwidHJ1ZVwiKSxuLnNldEF0dHJpYnV0ZShcInJvbGVcIixcImxpc3Rib3hcIiksbn0sY2hvaWNlR3JvdXA6ZnVuY3Rpb24oZSx0KXt2YXIgaT1lLmdyb3VwLG49ZS5ncm91cEhlYWRpbmcscj1lLml0ZW1EaXNhYmxlZCxvPXQuaWQscz10LnZhbHVlLGE9dC5kaXNhYmxlZCxjPU9iamVjdC5hc3NpZ24oZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx7Y2xhc3NOYW1lOmkrXCIgXCIrKGE/cjpcIlwiKX0pO3JldHVybiBjLnNldEF0dHJpYnV0ZShcInJvbGVcIixcImdyb3VwXCIpLE9iamVjdC5hc3NpZ24oYy5kYXRhc2V0LHtncm91cDpcIlwiLGlkOm8sdmFsdWU6c30pLGEmJmMuc2V0QXR0cmlidXRlKFwiYXJpYS1kaXNhYmxlZFwiLFwidHJ1ZVwiKSxjLmFwcGVuZENoaWxkKE9iamVjdC5hc3NpZ24oZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx7Y2xhc3NOYW1lOm4saW5uZXJIVE1MOnN9KSksY30sY2hvaWNlOmZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1lLml0ZW0scj1lLml0ZW1DaG9pY2Usbz1lLml0ZW1TZWxlY3RhYmxlLHM9ZS5zZWxlY3RlZFN0YXRlLGE9ZS5pdGVtRGlzYWJsZWQsYz1lLnBsYWNlaG9sZGVyLGw9dC5pZCx1PXQudmFsdWUsaD10LmxhYmVsLGQ9dC5ncm91cElkLHA9dC5lbGVtZW50SWQsZj10LmRpc2FibGVkLG09dC5zZWxlY3RlZCx2PXQucGxhY2Vob2xkZXIsXz1PYmplY3QuYXNzaWduKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikse2lkOnAsaW5uZXJIVE1MOmgsY2xhc3NOYW1lOm4rXCIgXCIrcn0pO3JldHVybiBtJiZfLmNsYXNzTGlzdC5hZGQocyksdiYmXy5jbGFzc0xpc3QuYWRkKGMpLF8uc2V0QXR0cmlidXRlKFwicm9sZVwiLGQmJmQ+MD9cInRyZWVpdGVtXCI6XCJvcHRpb25cIiksT2JqZWN0LmFzc2lnbihfLmRhdGFzZXQse2Nob2ljZTpcIlwiLGlkOmwsdmFsdWU6dSxzZWxlY3RUZXh0Oml9KSxmPyhfLmNsYXNzTGlzdC5hZGQoYSksXy5kYXRhc2V0LmNob2ljZURpc2FibGVkPVwiXCIsXy5zZXRBdHRyaWJ1dGUoXCJhcmlhLWRpc2FibGVkXCIsXCJ0cnVlXCIpKTooXy5jbGFzc0xpc3QuYWRkKG8pLF8uZGF0YXNldC5jaG9pY2VTZWxlY3RhYmxlPVwiXCIpLF99LGlucHV0OmZ1bmN0aW9uKGUsdCl7dmFyIGk9ZS5pbnB1dCxuPWUuaW5wdXRDbG9uZWQscj1PYmplY3QuYXNzaWduKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSx7dHlwZTpcInRleHRcIixjbGFzc05hbWU6aStcIiBcIituLGF1dG9jb21wbGV0ZTpcIm9mZlwiLGF1dG9jYXBpdGFsaXplOlwib2ZmXCIsc3BlbGxjaGVjazohMX0pO3JldHVybiByLnNldEF0dHJpYnV0ZShcInJvbGVcIixcInRleHRib3hcIiksci5zZXRBdHRyaWJ1dGUoXCJhcmlhLWF1dG9jb21wbGV0ZVwiLFwibGlzdFwiKSxyLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIix0KSxyfSxkcm9wZG93bjpmdW5jdGlvbihlKXt2YXIgdD1lLmxpc3QsaT1lLmxpc3REcm9wZG93bixuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7cmV0dXJuIG4uY2xhc3NMaXN0LmFkZCh0LGkpLG4uc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLFwiZmFsc2VcIiksbn0sbm90aWNlOmZ1bmN0aW9uKGUsdCxpKXt2YXIgbj1lLml0ZW0scj1lLml0ZW1DaG9pY2Usbz1lLm5vUmVzdWx0cyxzPWUubm9DaG9pY2VzO3ZvaWQgMD09PWkmJihpPVwiXCIpO3ZhciBhPVtuLHJdO3JldHVyblwibm8tY2hvaWNlc1wiPT09aT9hLnB1c2gocyk6XCJuby1yZXN1bHRzXCI9PT1pJiZhLnB1c2gobyksT2JqZWN0LmFzc2lnbihkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHtpbm5lckhUTUw6dCxjbGFzc05hbWU6YS5qb2luKFwiIFwiKX0pfSxvcHRpb246ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5sYWJlbCxpPWUudmFsdWUsbj1lLmN1c3RvbVByb3BlcnRpZXMscj1lLmFjdGl2ZSxvPWUuZGlzYWJsZWQscz1uZXcgT3B0aW9uKHQsaSwhMSxyKTtyZXR1cm4gbiYmKHMuZGF0YXNldC5jdXN0b21Qcm9wZXJ0aWVzPVwiXCIrbikscy5kaXNhYmxlZD0hIW8sc319O3QuZGVmYXVsdD1ufSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49aSgwKTt0LmFkZENob2ljZT1mdW5jdGlvbihlKXt2YXIgdD1lLnZhbHVlLGk9ZS5sYWJlbCxyPWUuaWQsbz1lLmdyb3VwSWQscz1lLmRpc2FibGVkLGE9ZS5lbGVtZW50SWQsYz1lLmN1c3RvbVByb3BlcnRpZXMsbD1lLnBsYWNlaG9sZGVyLHU9ZS5rZXlDb2RlO3JldHVybnt0eXBlOm4uQUNUSU9OX1RZUEVTLkFERF9DSE9JQ0UsdmFsdWU6dCxsYWJlbDppLGlkOnIsZ3JvdXBJZDpvLGRpc2FibGVkOnMsZWxlbWVudElkOmEsY3VzdG9tUHJvcGVydGllczpjLHBsYWNlaG9sZGVyOmwsa2V5Q29kZTp1fX0sdC5maWx0ZXJDaG9pY2VzPWZ1bmN0aW9uKGUpe3JldHVybnt0eXBlOm4uQUNUSU9OX1RZUEVTLkZJTFRFUl9DSE9JQ0VTLHJlc3VsdHM6ZX19LHQuYWN0aXZhdGVDaG9pY2VzPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT0hMCkse3R5cGU6bi5BQ1RJT05fVFlQRVMuQUNUSVZBVEVfQ0hPSUNFUyxhY3RpdmU6ZX19LHQuY2xlYXJDaG9pY2VzPWZ1bmN0aW9uKCl7cmV0dXJue3R5cGU6bi5BQ1RJT05fVFlQRVMuQ0xFQVJfQ0hPSUNFU319fSxmdW5jdGlvbihlLHQsaSl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG49aSgwKTt0LmFkZEl0ZW09ZnVuY3Rpb24oZSl7dmFyIHQ9ZS52YWx1ZSxpPWUubGFiZWwscj1lLmlkLG89ZS5jaG9pY2VJZCxzPWUuZ3JvdXBJZCxhPWUuY3VzdG9tUHJvcGVydGllcyxjPWUucGxhY2Vob2xkZXIsbD1lLmtleUNvZGU7cmV0dXJue3R5cGU6bi5BQ1RJT05fVFlQRVMuQUREX0lURU0sdmFsdWU6dCxsYWJlbDppLGlkOnIsY2hvaWNlSWQ6byxncm91cElkOnMsY3VzdG9tUHJvcGVydGllczphLHBsYWNlaG9sZGVyOmMsa2V5Q29kZTpsfX0sdC5yZW1vdmVJdGVtPWZ1bmN0aW9uKGUsdCl7cmV0dXJue3R5cGU6bi5BQ1RJT05fVFlQRVMuUkVNT1ZFX0lURU0saWQ6ZSxjaG9pY2VJZDp0fX0sdC5oaWdobGlnaHRJdGVtPWZ1bmN0aW9uKGUsdCl7cmV0dXJue3R5cGU6bi5BQ1RJT05fVFlQRVMuSElHSExJR0hUX0lURU0saWQ6ZSxoaWdobGlnaHRlZDp0fX19LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1pKDApO3QuYWRkR3JvdXA9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS52YWx1ZSxpPWUuaWQscj1lLmFjdGl2ZSxvPWUuZGlzYWJsZWQ7cmV0dXJue3R5cGU6bi5BQ1RJT05fVFlQRVMuQUREX0dST1VQLHZhbHVlOnQsaWQ6aSxhY3RpdmU6cixkaXNhYmxlZDpvfX19LGZ1bmN0aW9uKGUsdCxpKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1pKDApO3QuY2xlYXJBbGw9ZnVuY3Rpb24oKXtyZXR1cm57dHlwZTpuLkFDVElPTl9UWVBFUy5DTEVBUl9BTEx9fSx0LnJlc2V0VG89ZnVuY3Rpb24oZSl7cmV0dXJue3R5cGU6bi5BQ1RJT05fVFlQRVMuUkVTRVRfVE8sc3RhdGU6ZX19LHQuc2V0SXNMb2FkaW5nPWZ1bmN0aW9uKGUpe3JldHVybnt0eXBlOm4uQUNUSU9OX1RZUEVTLlNFVF9JU19MT0FESU5HLGlzTG9hZGluZzplfX19XSkuZGVmYXVsdDsiLCIvLyBpbXBvcnQgaW5wdXRtYXNrIGZyb20gJ2lucHV0bWFzayc7XHJcbi8vIGltcG9ydCBub1VpU2xpZGVyIGZyb20gJ25vdWlzbGlkZXInO1xyXG5cclxuXHJcbi8vc3dpcGVyc1xyXG5jb25zdCB1c2VmdWxTd2lwZXIgPSBuZXcgU3dpcGVyKFwiLmpzLXVzZWZ1bC1zd2lwZXJcIiwge1xyXG4gIHJlc2l6ZU9ic2VydmVyOiB0cnVlLFxyXG4gIHVwZGF0ZU9uV2luZG93UmVzaXplOiB0cnVlLFxyXG4gIGRpcmVjdGlvbjogXCJob3Jpem9udGFsXCIsXHJcbiAgc2xpZGVzUGVyQ29sdW1uOiAxLFxyXG4gIHNsaWRlc1BlclZpZXc6IFwiYXV0b1wiLFxyXG4gIHNwYWNlQmV0d2VlbjogMzIsXHJcblxyXG4gIG5hdmlnYXRpb246IHtcclxuICAgIG5leHRFbDogXCIuanMtdXNlZnVsLW5leHRcIixcclxuICAgIHByZXZFbDogXCIuanMtdXNlZnVsLXByZXZcIixcclxuICB9LFxyXG4gIHBhZ2luYXRpb246IHtcclxuICAgIGVsOiAnLnN3aXBlci1wYWdpbmF0aW9uJyxcclxuICAgIHR5cGU6ICdidWxsZXRzJyxcclxuICAgIGNsaWNrYWJsZTogdHJ1ZVxyXG4gIH0sXHJcblxyXG4gIGJyZWFrcG9pbnRzOiB7XHJcbiAgICAzMjA6IHtcclxuICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXHJcbiAgICAgIHNwYWNlQmV0d2VlbjogMTYsXHJcbiAgICB9LFxyXG4gICAgNTcwOiB7XHJcbiAgICAgIHNsaWRlc1Blckdyb3VwOiAyLFxyXG4gICAgICBzcGFjZUJldHdlZW46IDMyLFxyXG4gICAgfSxcclxuICAgIDEwMjM6IHtcclxuICAgICAgc2xpZGVzUGVyR3JvdXA6IDMsXHJcbiAgICB9LFxyXG4gIH0sXHJcbn0pO1xyXG5cclxuY29uc3Qgc3dpcGVyID0gbmV3IFN3aXBlcignLmpzLXByb21vLXN3aXBlcicsIHtcclxuICBzbGlkZXNQZXJWaWV3OiAxLFxyXG4gIGxvb3A6IHRydWUsXHJcbiAgbmF2aWdhdGlvbjoge1xyXG4gICAgbmV4dEVsOiAnLnN3aXBlci1idXR0b24tbmV4dCcsXHJcbiAgICBwcmV2RWw6ICcuc3dpcGVyLWJ1dHRvbi1wcmV2JyxcclxuICB9LFxyXG4gIHBhZ2luYXRpb246IHtcclxuICAgIGVsOiAnLnN3aXBlci1wYWdpbmF0aW9uJyxcclxuICAgIHR5cGU6ICdidWxsZXRzJyxcclxuICAgIGNsaWNrYWJsZTogdHJ1ZVxyXG4gIH1cclxufSk7XHJcblxyXG5jb25zdCBvZmZlcnNTd2lwZXIgPSBuZXcgU3dpcGVyKFwiLmpzLXNwZWNpYWwtb2ZmZXJzLXN3aXBlclwiLCB7XHJcbiAgcmVzaXplT2JzZXJ2ZXI6IHRydWUsXHJcbiAgdXBkYXRlT25XaW5kb3dSZXNpemU6IHRydWUsXHJcbiAgZGlyZWN0aW9uOiBcImhvcml6b250YWxcIixcclxuICBzbGlkZXNQZXJDb2x1bW46IDEsXHJcbiAgc2xpZGVzUGVyVmlldzogXCJhdXRvXCIsXHJcbiAgc3BhY2VCZXR3ZWVuOiAzMixcclxuICBhdXRvSGVpZ2h0OiB0cnVlLFxyXG5cclxuICBuYXZpZ2F0aW9uOiB7XHJcbiAgICBuZXh0RWw6IFwiLmpzLXNwZWNpYWwtb2ZmZXJzLW5leHRcIixcclxuICAgIHByZXZFbDogXCIuanMtc3BlY2lhbC1vZmZlcnMtcHJldlwiLFxyXG4gIH0sXHJcblxyXG4gIGJyZWFrcG9pbnRzOiB7XHJcbiAgICAzMjA6IHtcclxuICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXHJcbiAgICB9LFxyXG4gICAgNTcwOiB7XHJcbiAgICAgIHNsaWRlc1Blckdyb3VwOiAyLFxyXG4gICAgfSxcclxuICAgIDEwMjM6IHtcclxuICAgICAgc2xpZGVzUGVyR3JvdXA6IDMsXHJcbiAgICB9LFxyXG4gIH0sXHJcbn0pO1xyXG5cclxuXHJcbi8vbmV3IHNlbGVjdCBcclxuY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjaXR5LXNlbGVjdCcpO1xyXG4gIGNvbnN0IGNob2ljZXMgPSBuZXcgQ2hvaWNlcyhlbGVtZW50LHtcclxuICAgIGFsbG93SFRNTDogdHJ1ZSxcclxuICAgIHNlYXJjaEVuYWJsZWQ6IGZhbHNlLFxyXG4gICAgcGxhY2Vob2xkZXI6IHRydWUsXHJcbiAgICBpdGVtU2VsZWN0VGV4dDogJycsXHJcbiAgfSk7XHJcbi8vZW5kIG5ldyBzZWxlY3RcclxuXHJcblxyXG4vLyBjb25zdCBjaG9pY2VzID0gbmV3IENob2ljZXMoXCJbZGF0YS10cmlnZ2VyXVwiLCB7XHJcbi8vICBzZWFyY2hFbmFibGVkOiBmYWxzZSxcclxuLy8gIGl0ZW1TZWxlY3RUZXh0OiBcIlwiLFxyXG4vLyB9KTtcclxuXHJcbmNvbnN0IHNlbGVjdGNob2ljZXMgPSBuZXcgQ2hvaWNlcyhcIiNoZWFkZXItYm90dG9tX19zZWxlY3RcIiwge1xyXG5zZWFyY2hFbmFibGVkOiBmYWxzZSxcclxuIGl0ZW1TZWxlY3RUZXh0OiBcIlwiLFxyXG59KTtcclxuXHJcblxyXG5cclxuXHJcblxyXG4vL2J1cmdlclxyXG5jb25zdCBidXJnZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmpzLWJ1cmdlclwiKTtcclxuY29uc3QgaGVhZGVyTmF2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5oZWFkZXJfX25hdlwiKTtcclxuXHJcbmZ1bmN0aW9uIGNsb3NlTWVudSgpIHtcclxuICBidXJnZXIuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxuICBoZWFkZXJOYXYuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxufVxyXG5cclxuZnVuY3Rpb24gb3Blbk1lbnUoKSB7XHJcbiAgYnVyZ2VyLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgaGVhZGVyTmF2LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbn1cclxuXHJcbmlmIChidXJnZXIpIHtcclxuICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQuY2xvc2VzdChcIi5hY3RpdmVcIikpIHtcclxuICAgICAgY2xvc2VNZW51KCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIGJ1cmdlci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgaWYgKGJ1cmdlci5jbGFzc0xpc3QuY29udGFpbnMoXCJhY3RpdmVcIikpIHtcclxuICAgICAgY2xvc2VNZW51KCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBvcGVuTWVudSgpO1xyXG4gIH0pO1xyXG5cclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCAoKSA9PiB7XHJcbiAgICBjbG9zZU1lbnUoKTtcclxuICB9KTtcclxufVxyXG5cclxuXHJcblxyXG5cclxuLy92YWxpZGF0aW9uXHJcblxyXG4vLyBjb25zdCB2YWxpZGF0aW9uID0gbmV3IEp1c3RWYWxpZGF0ZSgnLmpzLWZvcm0nKTtcclxuLy8gICAgICAgICBjb25zdCBzZWxlY3RvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFt0eXBlPSd0ZWwnXVwiKTtcclxuLy8gICAgICAgICBjb25zdCBpbSA9IG5ldyBJbnB1dG1hc2soXCIrNyAoOTk5KS05OTktOTktOTlcIik7XHJcbi8vICAgICAgICAgaW0ubWFzayhzZWxlY3Rvcik7XHJcbiAgICAgIFxyXG4vLyAgICAgICAgIHZhbGlkYXRpb25cclxuLy8gICAgICAgICAgIC5hZGRGaWVsZCgnLm5hbWUnLCBbe1xyXG4vLyAgICAgICAgICAgICAgIHJ1bGU6ICdtaW5MZW5ndGgnLFxyXG4vLyAgICAgICAgICAgICAgIHZhbHVlOiAyLFxyXG4vLyAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogXCLQktGLINC90LUg0LLQstC10LvQuCDQuNC80Y9cIlxyXG4vLyAgICAgICAgICAgICB9LFxyXG4vLyAgICAgICAgICAgICB7XHJcbi8vICAgICAgICAgICAgICAgcnVsZTogJ21heExlbmd0aCcsXHJcbi8vICAgICAgICAgICAgICAgdmFsdWU6IDI1LFxyXG4vLyAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogXCLQktGLINC90LUg0LLQstC10LvQuCDQuNC80Y9cIlxyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICBdKVxyXG4vLyAgICAgICAgICAgLmFkZEZpZWxkKCcubWFpbCcsIFt7XHJcbi8vICAgICAgICAgICAgICAgcnVsZTogJ3JlcXVpcmVkJyxcclxuLy8gICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6ICfQktGLINC90LUg0LLQstC10LvQuCBlLW1haWwnLFxyXG4vLyAgICAgICAgICAgICB9LFxyXG4vLyAgICAgICAgICAgICB7XHJcbi8vICAgICAgICAgICAgICAgcnVsZTogJ2VtYWlsJyxcclxuLy8gICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6ICfQktGLINC90LUg0LLQstC10LvQuCBlLW1haWwnLFxyXG4vLyAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICBdKVxyXG4vLyAgICAgICAgICAgLmFkZEZpZWxkKCcudGVsJywgW3tcclxuLy8gICAgICAgICAgICAgcnVsZTogXCJmdW5jdGlvblwiLFxyXG4vLyAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG4vLyAgICAgICAgICAgICAgIGNvbnN0IHBob25lID0gc2VsZWN0b3IuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKTtcclxuICAgICAgICAgICAgICBcclxuLy8gICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyKHBob25lKSAmJiBwaG9uZS5sZW5ndGggPT09IDEwO1xyXG4vLyAgICAgICAgICAgICB9LFxyXG4vLyAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6ICfQktGLINC90LUg0LLQstC10LvQuCDRgtC10LvQtdGE0L7QvScsXHJcbi8vICAgICAgICAgICB9XSk7XHJcblxyXG4gICAgICAgICAgY29uc3QgcGhvbmVJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGVsXCIpO1xyXG5cclxuICAgICAgICAgIGlmIChwaG9uZUlucHV0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGltID0gbmV3IElucHV0bWFzayhcIis3ICg5OTkpLTk5OS05OS05OVwiKTtcclxuICAgICAgICAgICAgaW0ubWFzayhwaG9uZUlucHV0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuanMtZm9ybVwiKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgaWYgKGZvcm0pIHtcclxuICAgICAgICAgICAgY29uc3QgcG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmpzLXBvcHVwLWNhbGxcIik7XHJcbiAgICAgICAgICAgIG5ldyBKdXN0VmFsaWRhdGUoXCIuanMtZm9ybVwiLCB7XHJcbiAgICAgICAgICAgICAgcnVsZXM6IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IHtcclxuICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgIG1pbkxlbmd0aDogMixcclxuICAgICAgICAgICAgICAgICAgbWF4TGVuZ3RoOiAyMCxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB0ZWw6IHtcclxuICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGhvbmUgPSBwaG9uZUlucHV0LmlucHV0bWFzay51bm1hc2tlZHZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE51bWJlcihwaG9uZSkgJiYgcGhvbmUubGVuZ3RoID09PSAxMDtcclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBtYWlsOiB7XHJcbiAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICBlbWFpbDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjaGVja2JveDoge1xyXG4gICAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICBmb2N1c1dyb25nRmllbGQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgbWVzc2FnZXM6IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IHtcclxuICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6ICdcItCY0LzRj1wiINC+0LHRj9C30LDRgtC10LvRjNC90L4g0LTQu9GPINC30LDQv9C+0LvQvdC10L3QuNGPJyxcclxuICAgICAgICAgICAgICAgICAgbWluTGVuZ3RoOiAnXCLQmNC80Y9cIiDQstCy0LXQtNC10L3QviDQvdC10LrQvtGA0YDQtdC60YLQvdC+LCDQvNC40L3QuNC80YPQvCAyINC30L3QsNC60LAnLFxyXG4gICAgICAgICAgICAgICAgICBtYXhMZW5ndGg6ICdcItCY0LzRj1wiINCy0LLQtdC00LXQvdC+INC90LXQutC+0YDRgNC10LrRgtC90L4sINC80LDQutGB0LjQvNGD0LwgMjAg0LfQvdCw0LrQvtCyJyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB0ZWw6IHtcclxuICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6ICdcItCi0LXQu9C10YTQvtC9XCIg0L7QsdGP0LfQsNGC0LXQu9GM0L3QviDQtNC70Y8g0LfQsNC/0L7Qu9C90LXQvdC40Y8nLFxyXG4gICAgICAgICAgICAgICAgICBmdW5jdGlvbjogJ9CX0LDQv9C+0LvQvdC40YLQtSBcItCi0LXQu9C10YTQvtC9XCInLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVtYWlsOiB7XHJcbiAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiAnXCJFbWFpbFwiINC+0LHRj9C30LDRgtC10LvRjNC90L4g0LTQu9GPINC30LDQv9C+0LvQvdC10L3QuNGPJyxcclxuICAgICAgICAgICAgICAgICAgZW1haWw6ICfQndC10LTQvtC/0YPRgdGC0LjQvNGL0Lkg0YTQvtGA0LzQsNGCIFwiRW1haWxcIicsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY2hlY2tib3g6IHtcclxuICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6ICfQndC10L7QsdGF0L7QtNC40LzQviDQv9GA0LjQvdGP0YLRjCBcItCf0L7Qu9GM0LfQvtCy0LDRgtC10LvRjNGB0LrQvtC1INGB0L7Qs9C70LDRiNC10L3QuNC1XCInLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICBzdWJtaXRIYW5kbGVyOiAoZm9ybSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keVwiKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgYm9keS5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICBwb3B1cC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICBmb3JtLnJlc2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvcHVwRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuanMtcG9wdXAtZm9ybVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgIGlmKHBvcHVwRm9ybSkgcG9wdXBGb3JtLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgeGhyLm9wZW4oXCJQT1NUXCIsIFwiaHR0cHM6Ly9cIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtdHlwZVwiLCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKTtcclxuICAgICAgICAgICAgICAgIHhoci5zZW5kKG5ldyBVUkxTZWFyY2hQYXJhbXMoZm9ybURhdGEpLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IGlucHV0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZmVlZGJhY2tfX2lucHV0XCIpO1xyXG4gICAgICAgICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmpzLXN1Ym1pdFwiKTtcclxuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgaW5wdXRzLmZvckVhY2goKGVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWVsLmNsYXNzTGlzdC5jb250YWlucyhcImpzLXZhbGlkYXRlLWVycm9yLWZpZWxkXCIpKVxyXG4gICAgICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKFwianMtdmFsaWRhdGUtc3VjY2Vzcy1maWVsZFwiKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy9zaG93LW1vcmVcclxuICAgICAgICAgICBjb25zdCBmYWRlSW4gPSAoZWwsIHRpbWVvdXQsIGNsYXNzTmFtZSkgPT4ge1xyXG4gICAgICAgICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gMDtcclxuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xyXG4gICAgICAgICAgICAvL2VsLnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5IHx8ICdibG9jayc7XHJcbiAgICAgICAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb24gPSBgb3BhY2l0eSAke3RpbWVvdXR9bXNgO1xyXG4gICAgICAgICAgIFxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gMTtcclxuICAgICAgICAgICAgfSwgMTApO1xyXG4gICAgICAgICAgIH07XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgY29uc3QgZmFkZU91dCA9IChlbCwgdGltZW91dCwgY2xhc3NOYW1lKSA9PiB7XHJcbiAgICAgICAgICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gMTtcclxuICAgICAgICAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb24gPSBgb3BhY2l0eSAke3RpbWVvdXR9bXNgO1xyXG4gICAgICAgICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IDA7XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgLy9lbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XHJcbiAgICAgICAgICAgICB9LCB0aW1lb3V0KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICBcclxuICAgICAgICAgICAvL3Nob3cgbW9yZSBpbmRleC5odG1sIFxyXG4gICAgICAgICAgIGNvbnN0IHNob3dNb3JlQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5qcy1zaG93LW1vcmVcIik7XHJcbmNvbnN0IGFsbFJhdGluZ0NhcmRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5yYXRpbmdfX2l0ZW1cIik7XHJcblxyXG5pZiAoc2hvd01vcmVCdG4pIHtcclxuICBzaG93TW9yZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgaWYgKHNob3dNb3JlQnRuLmNsYXNzTGlzdC5jb250YWlucyhcImpzLWFjdGl2ZVwiKSkge1xyXG4gICAgICBhbGxSYXRpbmdDYXJkcy5mb3JFYWNoKChlbCkgPT4ge1xyXG4gICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoXCJzaG93LWNhcmRcIik7XHJcbiAgICAgICAgLy9mYWRlT3V0KGVsLCAxMDAwLCBcInNob3ctY2FyZFwiKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBzaG93TW9yZUJ0bi5jbGFzc0xpc3QucmVtb3ZlKFwianMtYWN0aXZlXCIpO1xyXG4gICAgICBzaG93TW9yZUJ0bi50ZXh0Q29udGVudCA9IFwi0KHQvNC+0YLRgNC10YLRjCDQsdC+0LvRjNGI0LUg0YLQvtCy0LDRgNC+0LJcIjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFsbFJhdGluZ0NhcmRzLmZvckVhY2goKGVsKSA9PiB7XHJcbiAgICAgICAgLy9lbC5jbGFzc0xpc3QuYWRkKFwic2hvdy1jYXJkXCIpO1xyXG4gICAgICAgIGZhZGVJbihlbCwgMTAwMCwgXCJzaG93LWNhcmRcIik7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgc2hvd01vcmVCdG4uY2xhc3NMaXN0LmFkZChcImpzLWFjdGl2ZVwiKTtcclxuICAgICAgc2hvd01vcmVCdG4udGV4dENvbnRlbnQgPSBcItCh0LLQtdGA0L3Rg9GC0YxcIjtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG4vL2VuZCBzaG93IG1vcmUgaW5kZXguaHRtbFxyXG5cclxuLy9zaG93IG1vcmUgY2F0YWxvZyBcclxuICAgICAgICBcclxuICAgICAgICAgIGNvbnN0IGxpbWl0U2hvd0l0ZW1zID0gOTtcclxuXHJcbiAgICAgICAgICBjb25zdCBzaG93TW9yZSA9IChlbCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBzaG93TW9yZUJ0biA9IGVsLnRhcmdldDtcclxuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gc2hvd01vcmVCdG4uY2xvc2VzdChcIi5qcy1pdGVtcy1jb250YWluZXJcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY2F0YWxvZy1maWx0ZXJfX2l0ZW1cIik7XHJcblxyXG4gIGlmIChzaG93TW9yZUJ0bi5jbGFzc0xpc3QuY29udGFpbnMoXCJqcy1hY3RpdmVcIikpIHtcclxuICAgIGlmIChjb250YWluZXIpIHtcclxuICAgICAgaXRlbXMuZm9yRWFjaCgoZWwpID0+IHtcclxuICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKFwic2hvdy1pdGVtXCIpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHNob3dNb3JlQnRuLmNsYXNzTGlzdC5yZW1vdmUoXCJqcy1hY3RpdmVcIik7XHJcbiAgICAgIHNob3dNb3JlQnRuLnRleHRDb250ZW50ID0gYNC10YnQtSArJHtpdGVtcy5sZW5ndGggLSBsaW1pdFNob3dJdGVtc31gO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBpdGVtcy5mb3JFYWNoKChlbCkgPT4ge1xyXG4gICAgICBmYWRlSW4oZWwsIDEwMDAsIFwic2hvdy1pdGVtXCIpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgc2hvd01vcmVCdG4uY2xhc3NMaXN0LmFkZChcImpzLWFjdGl2ZVwiKTtcclxuICAgIHNob3dNb3JlQnRuLnRleHRDb250ZW50ID0gXCLQodC60YDRi9GC0YxcIjtcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBhbGxJdGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuanMtY2F0YWxvZy1tb3JlXCIpO1xyXG5hbGxJdGVtcy5mb3JFYWNoKChlbCkgPT4ge1xyXG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZWwpID0+IHNob3dNb3JlKGVsKSk7XHJcbn0pO1xyXG5cclxuLy9lbmQgc2hvd19tb3JlIGNhdGFsb2dcclxuXHJcblxyXG4vL3NsaWRlcnMgcHJvZHVjdHNcclxuY29uc3QgcHJvZHVjdFNsaWRlck5hdiA9IG5ldyBTd2lwZXIoXCIuc2xpZGVyLW5hdlwiLCB7XHJcbiAgcmVzaXplT2JzZXJ2ZXI6IHRydWUsXHJcbiAgdXBkYXRlT25XaW5kb3dSZXNpemU6IHRydWUsXHJcbiAgc2xpZGVDbGFzczogXCJzbGlkZXItbmF2X19pdGVtXCIsXHJcbiAgZGlyZWN0aW9uOiBcImhvcml6b250YWxcIixcclxuICBmcmVlTW9kZTogdHJ1ZSxcclxuICBicmVha3BvaW50czoge1xyXG4gICAgMTAyNToge1xyXG4gICAgICBkaXJlY3Rpb246IFwiaG9yaXpvbnRhbFwiLFxyXG4gICAgICBzbGlkZXNQZXJWaWV3OiA0LFxyXG4gICAgICBzcGFjZUJldHdlZW46IDIwLFxyXG4gICAgfSxcclxuICAgIDg5MDoge1xyXG4gICAgICBkaXJlY3Rpb246IFwidmVydGljYWxcIixcclxuICAgICAgc3BhY2VCZXR3ZWVuOiAyMCxcclxuICAgICAgc2xpZGVzUGVyVmlldzogNCxcclxuICAgIH0sXHJcbiAgICA2OTU6IHtcclxuICAgICAgc2xpZGVzUGVyVmlldzogNCxcclxuICAgICAgZGlyZWN0aW9uOiBcInZlcnRpY2FsXCIsXHJcbiAgICAgIHNwYWNlQmV0d2VlbjogMjAsXHJcbiAgICB9LFxyXG4gICAgMzIwOiB7XHJcbiAgICAgIGRpcmVjdGlvbjogXCJob3Jpem9udGFsXCIsXHJcbiAgICAgIHNsaWRlc1BlclZpZXc6IFwiYXV0b1wiLFxyXG4gICAgICBzcGFjZUJldHdlZW46IDUsXHJcbiAgICB9LFxyXG4gIH0sXHJcbn0pO1xyXG5cclxuY29uc3QgcHJvZHVjdFNsaWRlciA9IG5ldyBTd2lwZXIoXCIucHJvZHVjdC1zbGlkZXJcIiwge1xyXG4gIHJlc2l6ZU9ic2VydmVyOiB0cnVlLFxyXG4gIHVwZGF0ZU9uV2luZG93UmVzaXplOiB0cnVlLFxyXG4gIHNsaWRlQ2xhc3M6IFwicHJvZHVjdC1zbGlkZXJfX2l0ZW1cIixcclxuICBzbGlkZXNQZXJWaWV3OiAxLFxyXG4gIGluaXRpYWxTbGlkZTogNCxcclxuICBzcGFjZUJldHdlZW46IDEwLFxyXG4gIG1vdXNld2hlZWw6IHRydWUsXHJcbiAgZ3JhYkN1cnNvcjogdHJ1ZSxcclxuICB0aHVtYnM6IHtcclxuICAgIHN3aXBlcjogcHJvZHVjdFNsaWRlck5hdixcclxuICB9LFxyXG59KTtcclxuXHJcbmNvbnN0IHNsaWRlclRodW1icyA9IG5ldyBTd2lwZXIoJy5tb2RhbC10aHVtYnNfX3NsaWRlci1jb250YWluZXInLCB7XHJcbiAgcmVzaXplT2JzZXJ2ZXI6IHRydWUsXHJcbiAgdXBkYXRlT25XaW5kb3dSZXNpemU6IHRydWUsXHJcbiAgc2xpZGVDbGFzczogJ21vZGFsLXRodW1ic19fc2xpZGUnLFxyXG4gIHNwYWNlQmV0d2VlbjogMTAsXHJcbiAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsXHJcbiAgZnJlZU1vZGU6IHRydWUsXHJcbiAgYnJlYWtwb2ludHM6IHtcclxuICAgIDEwMjU6IHtcclxuICAgICAgc2xpZGVzUGVyVmlldzogNCxcclxuICAgIH0sXHJcbiAgICA3Njk6IHtcclxuICAgICAgc2xpZGVzUGVyVmlldzogMyxcclxuICAgIH0sXHJcbiAgICA2OTU6IHtcclxuICAgICAgc2xpZGVzUGVyVmlldzogMixcclxuICAgIH0sXHJcbiAgICAzMjA6IHtcclxuICAgICAgc2xpZGVzUGVyVmlldzogMSxcclxuICAgIH0sXHJcbiAgfSxcclxuICBuYXZpZ2F0aW9uOiB7XHJcbiAgICBwcmV2RWw6IFwiLmpzLXNsaWRlci1uZXh0XCIsXHJcbiAgICBuZXh0RWw6IFwiLmpzLXNsaWRlci1wcmV2XCIsXHJcbiAgfSxcclxufSk7XHJcblxyXG5jb25zdCBzbGlkZXJJbWFnZXMgPSBuZXcgU3dpcGVyKCcubW9kYWwtc2xpZGVyX19jb250YWluZXInLCB7XHJcbiAgcmVzaXplT2JzZXJ2ZXI6IHRydWUsXHJcbiAgdXBkYXRlT25XaW5kb3dSZXNpemU6IHRydWUsXHJcbiAgc2xpZGVDbGFzczogJ21vZGFsLXNsaWRlcl9faXRlbScsXHJcbiAgc2xpZGVzUGVyVmlldzogMSxcclxuICBpbml0aWFsU2xpZGU6IDQsXHJcbiAgc3BhY2VCZXR3ZWVuOiAxMCxcclxuICBtb3VzZXdoZWVsOiB0cnVlLFxyXG4gIG5hdmlnYXRpb246IHtcclxuICAgIG5leHRFbDogJy5tb2RhbC10aHVtYnNfX2J0bi1uZXh0JyxcclxuICAgIHByZXZFbDogJy5tb2RhbC10aHVtYnNfX2J0bi1wcmV2JyxcclxuICB9LFxyXG4gIGdyYWJDdXJzb3I6IHRydWUsXHJcbiAgdGh1bWJzOiB7XHJcbiAgICBzd2lwZXI6IHNsaWRlclRodW1ic1xyXG4gIH0sXHJcbn0pO1xyXG5cclxuY29uc3QgcHJvZHVjdFN3aXBlciA9IG5ldyBTd2lwZXIoXCIuanMtcHJvZHVjdC1zd2lwZXJcIiwge1xyXG4gIHJlc2l6ZU9ic2VydmVyOiB0cnVlLFxyXG4gIHVwZGF0ZU9uV2luZG93UmVzaXplOiB0cnVlLFxyXG4gIGRpcmVjdGlvbjogXCJob3Jpem9udGFsXCIsXHJcbiAgXHJcbiAgYnJlYWtwb2ludHM6IHtcclxuICAgIDMwMDoge1xyXG4gICAgICBzbGlkZXNQZXJHcm91cDogMixcclxuICAgICAgc2xpZGVzUGVyQ29sdW1uOiAxLFxyXG4gICAgICBzbGlkZXNQZXJWaWV3OiBcImF1dG9cIixcclxuICAgICAgc3BhY2VCZXR3ZWVuOiAxNixcclxuICAgIH0sXHJcblxyXG4gICAgNzY3OiB7XHJcbiAgICAgIHNsaWRlc1Blckdyb3VwOiAyLFxyXG4gICAgICBzbGlkZXNQZXJDb2x1bW46IDEsXHJcbiAgICAgIHNsaWRlc1BlclZpZXc6IFwiYXV0b1wiLFxyXG4gICAgICBzcGFjZUJldHdlZW46IDMyLFxyXG4gICAgfSxcclxuICB9LFxyXG5cclxuICBuYXZpZ2F0aW9uOiB7XHJcbiAgICBuZXh0RWw6IFwiLmpzLXByb2R1Y3QtbmV4dFwiLFxyXG4gICAgcHJldkVsOiBcIi5qcy1wcm9kdWN0LXByZXZcIixcclxuICB9LFxyXG59KTtcclxuXHJcbi8vc3dpcGVyIGNhdGFsb2dcclxuXHJcbmNvbnN0IGNhdGFsb2dTd2lwZXIgPSBuZXcgU3dpcGVyKFwiLmpzLWNhdGFsb2ctcHJvZHVjdHMtc3dpcGVyXCIsIHtcclxuICAvLyByZXNpemVPYnNlcnZlcjogdHJ1ZSxcclxuICAvLyB1cGRhdGVPbldpbmRvd1Jlc2l6ZTogdHJ1ZSxcclxuICBzbGlkZXNQZXJWaWV3OiAzLFxyXG4gICBncmlkOiB7XHJcbiAgIHJvd3M6IDMsXHJcbiAgIH0sXHJcbiAgLy8gZGlyZWN0aW9uOiBcImhvcml6b250YWxcIixcclxuICAvLyBzbGlkZXNQZXJDb2x1bW5GaWxsOiBcInJvd1wiLFxyXG4gIFxyXG4gIGJyZWFrcG9pbnRzOiB7XHJcbiAgICAxOiB7XHJcbiAgICAgIC8vIHNsaWRlc1Blckdyb3VwOiAyLFxyXG4gICAgICAvLyBzbGlkZXNQZXJDb2x1bW46IDMsXHJcbiAgICAgIHNwYWNlQmV0d2VlbjogMTYsXHJcbiAgICAgIHNsaWRlc1BlclZpZXc6IDIsXHJcbiAgICAgXHJcbiAgICB9LFxyXG4gICAgNzY4OiB7XHJcbiAgICAgIC8vIHNsaWRlc1Blckdyb3VwOiAzLFxyXG4gICAgICAvLyBzbGlkZXNQZXJDb2x1bW46IDMsXHJcbiAgICAgIHNwYWNlQmV0d2VlbjogMzIsXHJcbiAgICAgIHNsaWRlc1BlclZpZXc6IDJcclxuICAgIH0sXHJcbiAgICAxMDMwOiB7XHJcbiAgICAgIC8vIHNsaWRlc1Blckdyb3VwOiAzLFxyXG4gICAgICAvLyBzbGlkZXNQZXJDb2x1bW46IDMsXHJcbiAgICAgIHNsaWRlc1BlclZpZXc6IDMsXHJcbiAgICAgIHNwYWNlQmV0d2VlbjogMzJcclxuICAgIH0sXHJcbiAgICAxMDgwOiB7XHJcbiAgICAgIC8vIHNsaWRlc1Blckdyb3VwOiAzLFxyXG4gICAgICAvLyBzbGlkZXNQZXJDb2x1bW46IDMsXHJcbiAgICAgIHNwYWNlQmV0d2VlbjogMzIsXHJcbiAgICAgIHNsaWRlc1BlclZpZXc6IDMsXHJcbiAgICAgIGdyaWQ6IHtcclxuICAgICAgICByb3dzOiAzLFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICAgIDE5MjA6IHtcclxuICAgICAgLy8gc2xpZGVzUGVyR3JvdXA6IDMsXHJcbiAgICAgIC8vIHNsaWRlc1BlckNvbHVtbjogMyxcclxuICAgICAgc2xpZGVzUGVyVmlldzogMyxcclxuICAgICAgc3BhY2VCZXR3ZWVuOiAzMixcclxuICAgICAgZ3JpZDoge1xyXG4gICAgICAgIHJvd3M6IDMsXHJcbiAgICAgIH0sXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgcGFnaW5hdGlvbjoge1xyXG4gICAgZWw6IFwiLmNhdGFsb2ctcGFnaW5hdGlvbi5zd2lwZXItcGFnaW5hdGlvblwiLFxyXG4gICAgY2xpY2thYmxlOiB0cnVlLFxyXG4gICAgcmVuZGVyQnVsbGV0OiBmdW5jdGlvbiAoaW5kZXgsIGNsYXNzTmFtZSkge1xyXG4gICAgICByZXR1cm4gJzxzcGFuIGNsYXNzPVwiJyArIGNsYXNzTmFtZSArICdcIj4nICsgKGluZGV4ICsgMSkgKyBcIjwvc3Bhbj5cIjtcclxuICAgIH0sXHJcbiAgfSxcclxufSk7XHJcbi8vcmFuZ2Utc2xpZGVyIGNhdGFsb2cgcGFnZVxyXG4vLyBpbXBvcnQge2Zvcm1hdE1vbmV5fSBmcm9tIFwiLi91dGlscy9mb3JtYXQuanNcIjtcclxuXHJcbmNvbnN0IGZvcm1hdE1vbmV5ID0gKG1vbmV5KSA9PiB7XHJcbiAgcmV0dXJuIG5ldyBJbnRsLk51bWJlckZvcm1hdChcInJ1LVJVXCIpLmZvcm1hdChtb25leSk7XHJcbn07XHJcbmNvbnN0IGNyZWF0ZUNob2ljZUl0ZW0gPSAodGV4dCwgZGF0YUNvbG9yKSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIGBcclxuICAgIDxidXR0b24gc3R5bGU9XCJiYWNrZ3JvdW5kOiAke2RhdGFDb2xvcn1cIiBjbGFzcz1cImJ0bi1yZXNldCBjYXRhbG9nLWNob2ljZV9faXRlbVwiIGRhdGEtY2hvaWNlLXRleHQ9XCIke3RleHR9XCI+JHt0ZXh0fVxyXG4gICAgICA8c3ZnIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxyXG4gICAgICAgICAgPHBhdGggZD1cIk0xIDFMOC4yIDguMlwiICBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIi8+XHJcbiAgICAgICAgICA8cGF0aCBkPVwiTTguMiAxTDEgOC4yXCIgIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiLz4gICAgIFxyXG4gICAgICA8L3N2Zz5cclxuICAgIDwvYnV0dG9uPlxyXG4gIGBcclxuICApO1xyXG59O1xyXG5cclxubGV0IHJhbmdlU2xpZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JhbmdlLXNsaWRlcicpO1xyXG5pZiAocmFuZ2VTbGlkZXIpIHtcclxuICBub1VpU2xpZGVyLmNyZWF0ZShyYW5nZVNsaWRlciwge1xyXG4gICAgc3RhcnQ6IFsyMDAwLCAxNTAwMDBdLFxyXG4gICAgY29ubmVjdDogdHJ1ZSxcclxuICAgIHN0ZXA6IDEsXHJcbiAgICByYW5nZToge1xyXG4gICAgICAnbWluJzogWzBdLFxyXG4gICAgICAnbWF4JzogWzIyNTAwMF1cclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgY29uc3QgaW5wdXQwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lucHV0LTAnKTtcclxuICBjb25zdCBpbnB1dDEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXQtMScpO1xyXG4gIGNvbnN0IGlucHV0cyA9IFtpbnB1dDAsIGlucHV0MV07XHJcbiAgY29uc3QgY29ubmVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ub1VpLWNvbm5lY3QnKTtcclxuXHJcbiAgcmFuZ2VTbGlkZXIubm9VaVNsaWRlci5vbigndXBkYXRlJywgZnVuY3Rpb24gKHZhbHVlcywgaGFuZGxlKSB7XHJcbiAgICBpbnB1dHNbaGFuZGxlXS52YWx1ZSA9IE1hdGgucm91bmQodmFsdWVzW2hhbmRsZV0pO1xyXG4gIH0pO1xyXG5cclxuICByYW5nZVNsaWRlci5ub1VpU2xpZGVyLm9uKCdzbGlkZScsIGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbm5lY3Quc3R5bGUuYmFja2dyb3VuZCA9ICcjNzAzM2FjJztcclxuICB9KTtcclxuXHJcbiAgcmFuZ2VTbGlkZXIubm9VaVNsaWRlci5vbignZW5kJywgZnVuY3Rpb24gKCkge1xyXG4gICAgY29ubmVjdC5zdHlsZS5iYWNrZ3JvdW5kID0gJyNhNjVjZjAnO1xyXG4gIH0pO1xyXG5cclxuICBjb25zdCBzZXRSYW5nZVNsaWRlciA9IChpLCB2YWx1ZSkgPT4ge1xyXG4gICAgbGV0IGFyciA9IFtudWxsLCBudWxsXTtcclxuICAgIGFycltpXSA9IHZhbHVlO1xyXG4gICAgcmFuZ2VTbGlkZXIubm9VaVNsaWRlci5zZXQoYXJyKTtcclxuICB9O1xyXG5cclxuICBpbnB1dHMuZm9yRWFjaCgoZWwsIGluZGV4KSA9PiB7XHJcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4ge1xyXG4gICAgICBzZXRSYW5nZVNsaWRlcihpbmRleCwgZS5jdXJyZW50VGFyZ2V0LnZhbHVlKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBsZXQgb2xkVmFsdWUgPSBudWxsO1xyXG5cclxuICBmdW5jdGlvbiBjcmVhdGVSYW5nZUNob2ljZUl0ZW0oaXRlbSkge1xyXG4gICAgY29uc3QgY2hvaWNlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtY2hvaWNlLXRleHQ9XCIke29sZFZhbHVlfVwiXWApO1xyXG4gICAgaWYoY2hvaWNlKSB7XHJcbiAgICAgICAgY2hvaWNlLnJlbW92ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB0ZXh0ID0gXCLQlNC+IFwiICsgZm9ybWF0TW9uZXkoaXRlbS52YWx1ZSk7XHJcbiBcclxuXHJcbiAgICBvbGRWYWx1ZSA9IHRleHQ7XHJcblxyXG4gICAgbGV0IGRhdGFDb2xvciA9IGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWNvbG9yJyk7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2F0YWxvZy1jaG9pY2VfX2xpc3QnKS5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGNyZWF0ZUNob2ljZUl0ZW0odGV4dCwgZGF0YUNvbG9yKSk7XHJcbiAgfVxyXG5cclxuICByYW5nZVNsaWRlci5ub1VpU2xpZGVyLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBjcmVhdGVSYW5nZUNob2ljZUl0ZW0oaW5wdXQxKTtcclxuICB9KTtcclxuXHJcbiAgaW5wdXQxLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uIChlbCkge1xyXG4gICAgY3JlYXRlUmFuZ2VDaG9pY2VJdGVtKGlucHV0MSk7XHJcbiAgfSlcclxufVxyXG5cclxuLy8gcmFuZ2Ugc2xpZGVyIDJcclxuXHJcbmNvbnN0IHJhbmdlU2xpZGVyMiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZmlsdGVyc19fcmFuZ2VcIik7XHJcbmNvbnN0IHJhbmdlSW5wdXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5pbnB1dC1udW1iZXJcIik7XHJcblxyXG5pZiAocmFuZ2VTbGlkZXIyKSB7XHJcbiAgbm9VaVNsaWRlci5jcmVhdGUocmFuZ2VTbGlkZXIyLCB7XHJcbiAgICBzdGFydDogWzIwMDAsIDI1MDAwMF0sXHJcbiAgICBjb25uZWN0OiB0cnVlLFxyXG4gICAgc3RlcDogMjUwMDAsXHJcbiAgICBrZXlib2FyZFN1cHBvcnQ6IHRydWUsXHJcbiAgICByYW5nZToge1xyXG4gICAgICBtaW46IFsyMDAwXSxcclxuICAgICAgbWF4OiBbMjUwMDAwXSxcclxuICAgIH0sXHJcbiAgfSk7XHJcblxyXG4gIHJhbmdlU2xpZGVyMi5ub1VpU2xpZGVyLm9uKFwidXBkYXRlXCIsICh2YWx1ZXMsIGhhbmRsZSkgPT4ge1xyXG4gICAgcmFuZ2VJbnB1dHNbaGFuZGxlXS52YWx1ZSA9IE1hdGgucm91bmQodmFsdWVzW2hhbmRsZV0pO1xyXG4gIH0pO1xyXG5cclxuICBjb25zdCBzZXRyYW5nZVNsaWRlcjIgPSAoaW5kZXgsIHZhbHVlKSA9PiB7XHJcbiAgICBsZXQgYXJyID0gW251bGwsIG51bGxdO1xyXG4gICAgYXJyW2luZGV4XSA9IHZhbHVlO1xyXG5cclxuICAgIHJhbmdlU2xpZGVyMi5ub1VpU2xpZGVyLnNldChhcnIpO1xyXG4gIH07XHJcblxyXG4gIHJhbmdlSW5wdXRzLmZvckVhY2goKGl0ZW0sIGkpID0+IHtcclxuICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoZSkgPT4ge1xyXG4gICAgICBzZXRyYW5nZVNsaWRlcjIoaSwgZS5jdXJyZW50VGFyZ2V0LnZhbHVlKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59XHJcblxyXG5jb25zdCBoYW5kbGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5ub1VpLWhhbmRsZVwiKTtcclxuY29uc3Qgbm9VaUxpbmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5vVWktY29ubmVjdFwiKTtcclxuXHJcbmhhbmRsZXMuZm9yRWFjaCgoZWwpID0+IHtcclxuICBlbC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgKCkgPT4ge1xyXG4gICAgbm9VaUxpbmUuc3R5bGUuYmFja2dyb3VuZCA9IFwiIzcwMzNhY1wiO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcbmhhbmRsZXMuZm9yRWFjaCgoZWwpID0+IHtcclxuICBlbC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCAoKSA9PiB7XHJcbiAgICBub1VpTGluZS5zdHlsZS5iYWNrZ3JvdW5kID0gXCIjYTY1Y2YwXCI7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuLy9wb3AgdXBcclxuXHJcbmNvbnN0IHBvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5qcy1wb3B1cC1jYWxsXCIpO1xyXG5jb25zdCBjbG9zZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuanMtY2xvc2UtYnRuXCIpO1xyXG5jb25zdCBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIik7XHJcblxyXG5jb25zdCBoaWRlUG9wdXAgPSAocG9wdXApID0+IHtcclxuICBib2R5LnN0eWxlLm92ZXJmbG93ID0gXCJhdXRvXCI7XHJcbiAgcG9wdXAuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxufTtcclxuXHJcbmNvbnN0IHNob3dQb3B1cCA9IChwb3B1cCkgPT4ge1xyXG4gIGJvZHkuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xyXG4gIHBvcHVwLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbn07XHJcblxyXG5jb25zdCBoYW5kbGVyQWN0aXZlID0gKGV2ZW50LCBwb3B1cCkgPT4ge1xyXG4gIGlmICghZXZlbnQudGFyZ2V0LmNsb3Nlc3QoXCIuanMtY29udGVudFwiKSkge1xyXG4gICAgaGlkZVBvcHVwKHBvcHVwKTtcclxuICB9XHJcbn07XHJcblxyXG5pZiAocG9wdXAgJiYgY2xvc2VCdG4pIHtcclxuICBwb3B1cC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IGhhbmRsZXJBY3RpdmUoZSwgcG9wdXApKTtcclxuICBjbG9zZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gaGlkZVBvcHVwKHBvcHVwKSk7XHJcbn1cclxuXHJcbi8vIEZvcm0gcG9wdXBcclxuY29uc3QgcG9wdXBGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5qcy1wb3B1cC1mb3JtXCIpO1xyXG5jb25zdCBjbG9zZUJ0bkZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmpzLWNsb3NlLWJ0bi1mb3JtXCIpO1xyXG5jb25zdCBidXlCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmpzLWJ0bi1idXlcIik7XHJcblxyXG5pZiAoYnV5QnRuICYmIHBvcHVwRm9ybSAmJiBjbG9zZUJ0bkZvcm0pIHtcclxuICBidXlCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHNob3dQb3B1cChwb3B1cEZvcm0pKTtcclxuXHJcbiAgcG9wdXBGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4gaGFuZGxlckFjdGl2ZShlLCBwb3B1cEZvcm0pKTtcclxuICBjbG9zZUJ0bkZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IGhpZGVQb3B1cChwb3B1cEZvcm0pKTtcclxufVxyXG5cclxuLy8gU2xpZGVyIHBvcHVwXHJcbmNvbnN0IHBvcHVwU2xpZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5qcy1wb3B1cC1zbGlkZXJcIik7XHJcbmNvbnN0IGNsb3NlQnRuU2xpZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5qcy1jbG9zZS1idG4tc2xpZGVyXCIpO1xyXG5jb25zdCBpbml0aWFsU2xpZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9kdWN0LXNsaWRlclwiKTtcclxuXHJcbmlmIChpbml0aWFsU2xpZGVyICYmIHBvcHVwU2xpZGVyICYmIGNsb3NlQnRuU2xpZGVyKSB7XHJcbiAgaW5pdGlhbFNsaWRlci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gc2hvd1BvcHVwKHBvcHVwU2xpZGVyKSk7XHJcblxyXG4gIHBvcHVwU2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4gaGFuZGxlckFjdGl2ZShlLCBwb3B1cFNsaWRlcikpO1xyXG4gIGNsb3NlQnRuU2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiBoaWRlUG9wdXAocG9wdXBTbGlkZXIpKTtcclxufVxyXG5cclxuIiwiLyohXG4gKiBkaXN0L2lucHV0bWFzay5taW5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Sb2JpbkhlcmJvdHMvSW5wdXRtYXNrXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTAgLSAyMDIwIFJvYmluIEhlcmJvdHNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogVmVyc2lvbjogNS4wLjYtYmV0YS4xNlxuICovXG4hZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCxmYWN0b3J5KXtpZihcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSltb2R1bGUuZXhwb3J0cz1mYWN0b3J5KCk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQpZGVmaW5lKFtdLGZhY3RvcnkpO2Vsc2V7dmFyIGE9ZmFjdG9yeSgpO2Zvcih2YXIgaSBpbiBhKShcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzOnJvb3QpW2ldPWFbaV19fSh3aW5kb3csZnVuY3Rpb24oKXtyZXR1cm4gbW9kdWxlcz1bZnVuY3Rpb24obW9kdWxlKXttb2R1bGUuZXhwb3J0cz1KU09OLnBhcnNlKCd7XCJCQUNLU1BBQ0VcIjo4LFwiQkFDS1NQQUNFX1NBRkFSSVwiOjEyNyxcIkRFTEVURVwiOjQ2LFwiRE9XTlwiOjQwLFwiRU5EXCI6MzUsXCJFTlRFUlwiOjEzLFwiRVNDQVBFXCI6MjcsXCJIT01FXCI6MzYsXCJJTlNFUlRcIjo0NSxcIkxFRlRcIjozNyxcIlBBR0VfRE9XTlwiOjM0LFwiUEFHRV9VUFwiOjMzLFwiUklHSFRcIjozOSxcIlNQQUNFXCI6MzIsXCJUQUJcIjo5LFwiVVBcIjozOCxcIlhcIjo4OCxcIkNPTlRST0xcIjoxNyxcIktFWV8yMjlcIjoyMjl9Jyl9LGZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGV4cG9ydHMuY2FyZXQ9Y2FyZXQsZXhwb3J0cy5kZXRlcm1pbmVMYXN0UmVxdWlyZWRQb3NpdGlvbj1kZXRlcm1pbmVMYXN0UmVxdWlyZWRQb3NpdGlvbixleHBvcnRzLmRldGVybWluZU5ld0NhcmV0UG9zaXRpb249ZGV0ZXJtaW5lTmV3Q2FyZXRQb3NpdGlvbixleHBvcnRzLmdldEJ1ZmZlcj1nZXRCdWZmZXIsZXhwb3J0cy5nZXRCdWZmZXJUZW1wbGF0ZT1nZXRCdWZmZXJUZW1wbGF0ZSxleHBvcnRzLmdldExhc3RWYWxpZFBvc2l0aW9uPWdldExhc3RWYWxpZFBvc2l0aW9uLGV4cG9ydHMuaXNNYXNrPWlzTWFzayxleHBvcnRzLnJlc2V0TWFza1NldD1yZXNldE1hc2tTZXQsZXhwb3J0cy5zZWVrTmV4dD1zZWVrTmV4dCxleHBvcnRzLnNlZWtQcmV2aW91cz1zZWVrUHJldmlvdXMsZXhwb3J0cy50cmFuc2xhdGVQb3NpdGlvbj10cmFuc2xhdGVQb3NpdGlvbjt2YXIgX3ZhbGlkYXRpb25UZXN0cz1fX3dlYnBhY2tfcmVxdWlyZV9fKDMpLF92YWxpZGF0aW9uPV9fd2VicGFja19yZXF1aXJlX18oNCksX21hc2s9X193ZWJwYWNrX3JlcXVpcmVfXygxMCk7ZnVuY3Rpb24gY2FyZXQoaW5wdXQsYmVnaW4sZW5kLG5vdHJhbnNsYXRlLGlzRGVsZXRlKXt2YXIgaW5wdXRtYXNrPXRoaXMsb3B0cz10aGlzLm9wdHMscmFuZ2U7aWYodm9pZCAwPT09YmVnaW4pcmV0dXJuXCJzZWxlY3Rpb25TdGFydFwiaW4gaW5wdXQmJlwic2VsZWN0aW9uRW5kXCJpbiBpbnB1dD8oYmVnaW49aW5wdXQuc2VsZWN0aW9uU3RhcnQsZW5kPWlucHV0LnNlbGVjdGlvbkVuZCk6d2luZG93LmdldFNlbGVjdGlvbj8ocmFuZ2U9d2luZG93LmdldFNlbGVjdGlvbigpLmdldFJhbmdlQXQoMCkscmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXIucGFyZW50Tm9kZSE9PWlucHV0JiZyYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lciE9PWlucHV0fHwoYmVnaW49cmFuZ2Uuc3RhcnRPZmZzZXQsZW5kPXJhbmdlLmVuZE9mZnNldCkpOmRvY3VtZW50LnNlbGVjdGlvbiYmZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlJiYocmFuZ2U9ZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCksYmVnaW49MC1yYW5nZS5kdXBsaWNhdGUoKS5tb3ZlU3RhcnQoXCJjaGFyYWN0ZXJcIiwtaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aCksZW5kPWJlZ2luK3JhbmdlLnRleHQubGVuZ3RoKSx7YmVnaW46bm90cmFuc2xhdGU/YmVnaW46dHJhbnNsYXRlUG9zaXRpb24uY2FsbCh0aGlzLGJlZ2luKSxlbmQ6bm90cmFuc2xhdGU/ZW5kOnRyYW5zbGF0ZVBvc2l0aW9uLmNhbGwodGhpcyxlbmQpfTtpZihBcnJheS5pc0FycmF5KGJlZ2luKSYmKGVuZD10aGlzLmlzUlRMP2JlZ2luWzBdOmJlZ2luWzFdLGJlZ2luPXRoaXMuaXNSVEw/YmVnaW5bMV06YmVnaW5bMF0pLHZvaWQgMCE9PWJlZ2luLmJlZ2luJiYoZW5kPXRoaXMuaXNSVEw/YmVnaW4uYmVnaW46YmVnaW4uZW5kLGJlZ2luPXRoaXMuaXNSVEw/YmVnaW4uZW5kOmJlZ2luLmJlZ2luKSxcIm51bWJlclwiPT10eXBlb2YgYmVnaW4pe2JlZ2luPW5vdHJhbnNsYXRlP2JlZ2luOnRyYW5zbGF0ZVBvc2l0aW9uLmNhbGwodGhpcyxiZWdpbiksZW5kPW5vdHJhbnNsYXRlP2VuZDp0cmFuc2xhdGVQb3NpdGlvbi5jYWxsKHRoaXMsZW5kKSxlbmQ9XCJudW1iZXJcIj09dHlwZW9mIGVuZD9lbmQ6YmVnaW47dmFyIHNjcm9sbENhbGM9cGFyc2VJbnQoKChpbnB1dC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldENvbXB1dGVkU3R5bGU/KGlucHV0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0Q29tcHV0ZWRTdHlsZShpbnB1dCxudWxsKTppbnB1dC5jdXJyZW50U3R5bGUpLmZvbnRTaXplKSplbmQ7aWYoaW5wdXQuc2Nyb2xsTGVmdD1zY3JvbGxDYWxjPmlucHV0LnNjcm9sbFdpZHRoP3Njcm9sbENhbGM6MCxpbnB1dC5pbnB1dG1hc2suY2FyZXRQb3M9e2JlZ2luOmJlZ2luLGVuZDplbmR9LG9wdHMuaW5zZXJ0TW9kZVZpc3VhbCYmITE9PT1vcHRzLmluc2VydE1vZGUmJmJlZ2luPT09ZW5kJiYoaXNEZWxldGV8fGVuZCsrKSxpbnB1dD09PShpbnB1dC5pbnB1dG1hc2suc2hhZG93Um9vdHx8ZG9jdW1lbnQpLmFjdGl2ZUVsZW1lbnQpaWYoXCJzZXRTZWxlY3Rpb25SYW5nZVwiaW4gaW5wdXQpaW5wdXQuc2V0U2VsZWN0aW9uUmFuZ2UoYmVnaW4sZW5kKTtlbHNlIGlmKHdpbmRvdy5nZXRTZWxlY3Rpb24pe2lmKHJhbmdlPWRvY3VtZW50LmNyZWF0ZVJhbmdlKCksdm9pZCAwPT09aW5wdXQuZmlyc3RDaGlsZHx8bnVsbD09PWlucHV0LmZpcnN0Q2hpbGQpe3ZhciB0ZXh0Tm9kZT1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKTtpbnB1dC5hcHBlbmRDaGlsZCh0ZXh0Tm9kZSl9cmFuZ2Uuc2V0U3RhcnQoaW5wdXQuZmlyc3RDaGlsZCxiZWdpbjxpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoP2JlZ2luOmlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKS5sZW5ndGgpLHJhbmdlLnNldEVuZChpbnB1dC5maXJzdENoaWxkLGVuZDxpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoP2VuZDppbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoKSxyYW5nZS5jb2xsYXBzZSghMCk7dmFyIHNlbD13aW5kb3cuZ2V0U2VsZWN0aW9uKCk7c2VsLnJlbW92ZUFsbFJhbmdlcygpLHNlbC5hZGRSYW5nZShyYW5nZSl9ZWxzZSBpbnB1dC5jcmVhdGVUZXh0UmFuZ2UmJihyYW5nZT1pbnB1dC5jcmVhdGVUZXh0UmFuZ2UoKSxyYW5nZS5jb2xsYXBzZSghMCkscmFuZ2UubW92ZUVuZChcImNoYXJhY3RlclwiLGVuZCkscmFuZ2UubW92ZVN0YXJ0KFwiY2hhcmFjdGVyXCIsYmVnaW4pLHJhbmdlLnNlbGVjdCgpKX19ZnVuY3Rpb24gZGV0ZXJtaW5lTGFzdFJlcXVpcmVkUG9zaXRpb24ocmV0dXJuRGVmaW5pdGlvbil7dmFyIGlucHV0bWFzaz10aGlzLG1hc2tzZXQ9dGhpcy5tYXNrc2V0LCQ9dGhpcy5kZXBlbmRlbmN5TGliLGJ1ZmZlcj1fdmFsaWRhdGlvblRlc3RzLmdldE1hc2tUZW1wbGF0ZS5jYWxsKHRoaXMsITAsZ2V0TGFzdFZhbGlkUG9zaXRpb24uY2FsbCh0aGlzKSwhMCwhMCksYmw9YnVmZmVyLmxlbmd0aCxwb3MsbHZwPWdldExhc3RWYWxpZFBvc2l0aW9uLmNhbGwodGhpcykscG9zaXRpb25zPXt9LGx2VGVzdD1tYXNrc2V0LnZhbGlkUG9zaXRpb25zW2x2cF0sbmR4SW50bHpyPXZvaWQgMCE9PWx2VGVzdD9sdlRlc3QubG9jYXRvci5zbGljZSgpOnZvaWQgMCx0ZXN0UG9zO2Zvcihwb3M9bHZwKzE7cG9zPGJ1ZmZlci5sZW5ndGg7cG9zKyspdGVzdFBvcz1fdmFsaWRhdGlvblRlc3RzLmdldFRlc3RUZW1wbGF0ZS5jYWxsKHRoaXMscG9zLG5keEludGx6cixwb3MtMSksbmR4SW50bHpyPXRlc3RQb3MubG9jYXRvci5zbGljZSgpLHBvc2l0aW9uc1twb3NdPSQuZXh0ZW5kKCEwLHt9LHRlc3RQb3MpO3ZhciBsdlRlc3RBbHQ9bHZUZXN0JiZ2b2lkIDAhPT1sdlRlc3QuYWx0ZXJuYXRpb24/bHZUZXN0LmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXTp2b2lkIDA7Zm9yKHBvcz1ibC0xO2x2cDxwb3MmJih0ZXN0UG9zPXBvc2l0aW9uc1twb3NdLCh0ZXN0UG9zLm1hdGNoLm9wdGlvbmFsaXR5fHx0ZXN0UG9zLm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciYmdGVzdFBvcy5tYXRjaC5uZXdCbG9ja01hcmtlcnx8bHZUZXN0QWx0JiYobHZUZXN0QWx0IT09cG9zaXRpb25zW3Bvc10ubG9jYXRvcltsdlRlc3QuYWx0ZXJuYXRpb25dJiYxIT10ZXN0UG9zLm1hdGNoLnN0YXRpY3x8ITA9PT10ZXN0UG9zLm1hdGNoLnN0YXRpYyYmdGVzdFBvcy5sb2NhdG9yW2x2VGVzdC5hbHRlcm5hdGlvbl0mJl92YWxpZGF0aW9uLmNoZWNrQWx0ZXJuYXRpb25NYXRjaC5jYWxsKHRoaXMsdGVzdFBvcy5sb2NhdG9yW2x2VGVzdC5hbHRlcm5hdGlvbl0udG9TdHJpbmcoKS5zcGxpdChcIixcIiksbHZUZXN0QWx0LnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpKSYmXCJcIiE9PV92YWxpZGF0aW9uVGVzdHMuZ2V0VGVzdHMuY2FsbCh0aGlzLHBvcylbMF0uZGVmKSkmJmJ1ZmZlcltwb3NdPT09X3ZhbGlkYXRpb25UZXN0cy5nZXRQbGFjZWhvbGRlci5jYWxsKHRoaXMscG9zLHRlc3RQb3MubWF0Y2gpKTtwb3MtLSlibC0tO3JldHVybiByZXR1cm5EZWZpbml0aW9uP3tsOmJsLGRlZjpwb3NpdGlvbnNbYmxdP3Bvc2l0aW9uc1tibF0ubWF0Y2g6dm9pZCAwfTpibH1mdW5jdGlvbiBkZXRlcm1pbmVOZXdDYXJldFBvc2l0aW9uKHNlbGVjdGVkQ2FyZXQsdGFiYmVkKXt2YXIgaW5wdXRtYXNrPXRoaXMsbWFza3NldD10aGlzLm1hc2tzZXQsb3B0cz10aGlzLm9wdHM7ZnVuY3Rpb24gZG9SYWRpeEZvY3VzKGNsaWNrUG9zKXtpZihcIlwiIT09b3B0cy5yYWRpeFBvaW50JiYwIT09b3B0cy5kaWdpdHMpe3ZhciB2cHM9bWFza3NldC52YWxpZFBvc2l0aW9ucztpZih2b2lkIDA9PT12cHNbY2xpY2tQb3NdfHx2cHNbY2xpY2tQb3NdLmlucHV0PT09X3ZhbGlkYXRpb25UZXN0cy5nZXRQbGFjZWhvbGRlci5jYWxsKGlucHV0bWFzayxjbGlja1Bvcykpe2lmKGNsaWNrUG9zPHNlZWtOZXh0LmNhbGwoaW5wdXRtYXNrLC0xKSlyZXR1cm4hMDt2YXIgcmFkaXhQb3M9Z2V0QnVmZmVyLmNhbGwoaW5wdXRtYXNrKS5pbmRleE9mKG9wdHMucmFkaXhQb2ludCk7aWYoLTEhPT1yYWRpeFBvcyl7Zm9yKHZhciB2cCBpbiB2cHMpaWYodnBzW3ZwXSYmcmFkaXhQb3M8dnAmJnZwc1t2cF0uaW5wdXQhPT1fdmFsaWRhdGlvblRlc3RzLmdldFBsYWNlaG9sZGVyLmNhbGwoaW5wdXRtYXNrLHZwKSlyZXR1cm4hMTtyZXR1cm4hMH19fXJldHVybiExfWlmKHRhYmJlZCYmKGlucHV0bWFzay5pc1JUTD9zZWxlY3RlZENhcmV0LmVuZD1zZWxlY3RlZENhcmV0LmJlZ2luOnNlbGVjdGVkQ2FyZXQuYmVnaW49c2VsZWN0ZWRDYXJldC5lbmQpLHNlbGVjdGVkQ2FyZXQuYmVnaW49PT1zZWxlY3RlZENhcmV0LmVuZCl7c3dpdGNoKG9wdHMucG9zaXRpb25DYXJldE9uQ2xpY2spe2Nhc2VcIm5vbmVcIjpicmVhaztjYXNlXCJzZWxlY3RcIjpzZWxlY3RlZENhcmV0PXtiZWdpbjowLGVuZDpnZXRCdWZmZXIuY2FsbChpbnB1dG1hc2spLmxlbmd0aH07YnJlYWs7Y2FzZVwiaWdub3JlXCI6c2VsZWN0ZWRDYXJldC5lbmQ9c2VsZWN0ZWRDYXJldC5iZWdpbj1zZWVrTmV4dC5jYWxsKGlucHV0bWFzayxnZXRMYXN0VmFsaWRQb3NpdGlvbi5jYWxsKGlucHV0bWFzaykpO2JyZWFrO2Nhc2VcInJhZGl4Rm9jdXNcIjppZihkb1JhZGl4Rm9jdXMoc2VsZWN0ZWRDYXJldC5iZWdpbikpe3ZhciByYWRpeFBvcz1nZXRCdWZmZXIuY2FsbChpbnB1dG1hc2spLmpvaW4oXCJcIikuaW5kZXhPZihvcHRzLnJhZGl4UG9pbnQpO3NlbGVjdGVkQ2FyZXQuZW5kPXNlbGVjdGVkQ2FyZXQuYmVnaW49b3B0cy5udW1lcmljSW5wdXQ/c2Vla05leHQuY2FsbChpbnB1dG1hc2sscmFkaXhQb3MpOnJhZGl4UG9zO2JyZWFrfWRlZmF1bHQ6dmFyIGNsaWNrUG9zaXRpb249c2VsZWN0ZWRDYXJldC5iZWdpbixsdmNsaWNrUG9zaXRpb249Z2V0TGFzdFZhbGlkUG9zaXRpb24uY2FsbChpbnB1dG1hc2ssY2xpY2tQb3NpdGlvbiwhMCksbGFzdFBvc2l0aW9uPXNlZWtOZXh0LmNhbGwoaW5wdXRtYXNrLC0xIT09bHZjbGlja1Bvc2l0aW9ufHxpc01hc2suY2FsbChpbnB1dG1hc2ssMCk/bHZjbGlja1Bvc2l0aW9uOi0xKTtpZihjbGlja1Bvc2l0aW9uPD1sYXN0UG9zaXRpb24pc2VsZWN0ZWRDYXJldC5lbmQ9c2VsZWN0ZWRDYXJldC5iZWdpbj1pc01hc2suY2FsbChpbnB1dG1hc2ssY2xpY2tQb3NpdGlvbiwhMSwhMCk/Y2xpY2tQb3NpdGlvbjpzZWVrTmV4dC5jYWxsKGlucHV0bWFzayxjbGlja1Bvc2l0aW9uKTtlbHNle3ZhciBsdnA9bWFza3NldC52YWxpZFBvc2l0aW9uc1tsdmNsaWNrUG9zaXRpb25dLHR0PV92YWxpZGF0aW9uVGVzdHMuZ2V0VGVzdFRlbXBsYXRlLmNhbGwoaW5wdXRtYXNrLGxhc3RQb3NpdGlvbixsdnA/bHZwLm1hdGNoLmxvY2F0b3I6dm9pZCAwLGx2cCkscGxhY2Vob2xkZXI9X3ZhbGlkYXRpb25UZXN0cy5nZXRQbGFjZWhvbGRlci5jYWxsKGlucHV0bWFzayxsYXN0UG9zaXRpb24sdHQubWF0Y2gpO2lmKFwiXCIhPT1wbGFjZWhvbGRlciYmZ2V0QnVmZmVyLmNhbGwoaW5wdXRtYXNrKVtsYXN0UG9zaXRpb25dIT09cGxhY2Vob2xkZXImJiEwIT09dHQubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyJiYhMCE9PXR0Lm1hdGNoLm5ld0Jsb2NrTWFya2VyfHwhaXNNYXNrLmNhbGwoaW5wdXRtYXNrLGxhc3RQb3NpdGlvbixvcHRzLmtlZXBTdGF0aWMsITApJiZ0dC5tYXRjaC5kZWY9PT1wbGFjZWhvbGRlcil7dmFyIG5ld1Bvcz1zZWVrTmV4dC5jYWxsKGlucHV0bWFzayxsYXN0UG9zaXRpb24pOyhuZXdQb3M8PWNsaWNrUG9zaXRpb258fGNsaWNrUG9zaXRpb249PT1sYXN0UG9zaXRpb24pJiYobGFzdFBvc2l0aW9uPW5ld1Bvcyl9c2VsZWN0ZWRDYXJldC5lbmQ9c2VsZWN0ZWRDYXJldC5iZWdpbj1sYXN0UG9zaXRpb259fXJldHVybiBzZWxlY3RlZENhcmV0fX1mdW5jdGlvbiBnZXRCdWZmZXIobm9DYWNoZSl7dmFyIGlucHV0bWFzaz10aGlzLG1hc2tzZXQ9dGhpcy5tYXNrc2V0O3JldHVybiB2b2lkIDAhPT1tYXNrc2V0LmJ1ZmZlciYmITAhPT1ub0NhY2hlfHwobWFza3NldC5idWZmZXI9X3ZhbGlkYXRpb25UZXN0cy5nZXRNYXNrVGVtcGxhdGUuY2FsbCh0aGlzLCEwLGdldExhc3RWYWxpZFBvc2l0aW9uLmNhbGwodGhpcyksITApLHZvaWQgMD09PW1hc2tzZXQuX2J1ZmZlciYmKG1hc2tzZXQuX2J1ZmZlcj1tYXNrc2V0LmJ1ZmZlci5zbGljZSgpKSksbWFza3NldC5idWZmZXJ9ZnVuY3Rpb24gZ2V0QnVmZmVyVGVtcGxhdGUoKXt2YXIgaW5wdXRtYXNrPXRoaXMsbWFza3NldD10aGlzLm1hc2tzZXQ7cmV0dXJuIHZvaWQgMD09PW1hc2tzZXQuX2J1ZmZlciYmKG1hc2tzZXQuX2J1ZmZlcj1fdmFsaWRhdGlvblRlc3RzLmdldE1hc2tUZW1wbGF0ZS5jYWxsKHRoaXMsITEsMSksdm9pZCAwPT09bWFza3NldC5idWZmZXImJihtYXNrc2V0LmJ1ZmZlcj1tYXNrc2V0Ll9idWZmZXIuc2xpY2UoKSkpLG1hc2tzZXQuX2J1ZmZlcn1mdW5jdGlvbiBnZXRMYXN0VmFsaWRQb3NpdGlvbihjbG9zZXN0VG8sc3RyaWN0LHZhbGlkUG9zaXRpb25zKXt2YXIgbWFza3NldD10aGlzLm1hc2tzZXQsYmVmb3JlPS0xLGFmdGVyPS0xLHZhbGlkcz12YWxpZFBvc2l0aW9uc3x8bWFza3NldC52YWxpZFBvc2l0aW9ucztmb3IodmFyIHBvc05keCBpbiB2b2lkIDA9PT1jbG9zZXN0VG8mJihjbG9zZXN0VG89LTEpLHZhbGlkcyl7dmFyIHBzTmR4PXBhcnNlSW50KHBvc05keCk7dmFsaWRzW3BzTmR4XSYmKHN0cmljdHx8ITAhPT12YWxpZHNbcHNOZHhdLmdlbmVyYXRlZElucHV0KSYmKHBzTmR4PD1jbG9zZXN0VG8mJihiZWZvcmU9cHNOZHgpLGNsb3Nlc3RUbzw9cHNOZHgmJihhZnRlcj1wc05keCkpfXJldHVybi0xPT09YmVmb3JlfHxiZWZvcmU9PWNsb3Nlc3RUbz9hZnRlcjotMT09YWZ0ZXI/YmVmb3JlOmNsb3Nlc3RUby1iZWZvcmU8YWZ0ZXItY2xvc2VzdFRvP2JlZm9yZTphZnRlcn1mdW5jdGlvbiBpc01hc2socG9zLHN0cmljdCxmdXp6eSl7dmFyIGlucHV0bWFzaz10aGlzLG1hc2tzZXQ9dGhpcy5tYXNrc2V0LHRlc3Q9X3ZhbGlkYXRpb25UZXN0cy5nZXRUZXN0VGVtcGxhdGUuY2FsbCh0aGlzLHBvcykubWF0Y2g7aWYoXCJcIj09PXRlc3QuZGVmJiYodGVzdD1fdmFsaWRhdGlvblRlc3RzLmdldFRlc3QuY2FsbCh0aGlzLHBvcykubWF0Y2gpLCEwIT09dGVzdC5zdGF0aWMpcmV0dXJuIHRlc3QuZm47aWYoITA9PT1mdXp6eSYmdm9pZCAwIT09bWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdJiYhMCE9PW1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXS5nZW5lcmF0ZWRJbnB1dClyZXR1cm4hMDtpZighMCE9PXN0cmljdCYmLTE8cG9zKXtpZihmdXp6eSl7dmFyIHRlc3RzPV92YWxpZGF0aW9uVGVzdHMuZ2V0VGVzdHMuY2FsbCh0aGlzLHBvcyk7cmV0dXJuIHRlc3RzLmxlbmd0aD4xKyhcIlwiPT09dGVzdHNbdGVzdHMubGVuZ3RoLTFdLm1hdGNoLmRlZj8xOjApfXZhciB0ZXN0VGVtcGxhdGU9X3ZhbGlkYXRpb25UZXN0cy5kZXRlcm1pbmVUZXN0VGVtcGxhdGUuY2FsbCh0aGlzLHBvcyxfdmFsaWRhdGlvblRlc3RzLmdldFRlc3RzLmNhbGwodGhpcyxwb3MpKSx0ZXN0UGxhY2VIb2xkZXI9X3ZhbGlkYXRpb25UZXN0cy5nZXRQbGFjZWhvbGRlci5jYWxsKHRoaXMscG9zLHRlc3RUZW1wbGF0ZS5tYXRjaCk7cmV0dXJuIHRlc3RUZW1wbGF0ZS5tYXRjaC5kZWYhPT10ZXN0UGxhY2VIb2xkZXJ9cmV0dXJuITF9ZnVuY3Rpb24gcmVzZXRNYXNrU2V0KHNvZnQpe3ZhciBtYXNrc2V0PXRoaXMubWFza3NldDttYXNrc2V0LmJ1ZmZlcj12b2lkIDAsITAhPT1zb2Z0JiYobWFza3NldC52YWxpZFBvc2l0aW9ucz17fSxtYXNrc2V0LnA9MCl9ZnVuY3Rpb24gc2Vla05leHQocG9zLG5ld0Jsb2NrLGZ1enp5KXt2YXIgaW5wdXRtYXNrPXRoaXM7dm9pZCAwPT09ZnV6enkmJihmdXp6eT0hMCk7Zm9yKHZhciBwb3NpdGlvbj1wb3MrMTtcIlwiIT09X3ZhbGlkYXRpb25UZXN0cy5nZXRUZXN0LmNhbGwodGhpcyxwb3NpdGlvbikubWF0Y2guZGVmJiYoITA9PT1uZXdCbG9jayYmKCEwIT09X3ZhbGlkYXRpb25UZXN0cy5nZXRUZXN0LmNhbGwodGhpcyxwb3NpdGlvbikubWF0Y2gubmV3QmxvY2tNYXJrZXJ8fCFpc01hc2suY2FsbCh0aGlzLHBvc2l0aW9uLHZvaWQgMCwhMCkpfHwhMCE9PW5ld0Jsb2NrJiYhaXNNYXNrLmNhbGwodGhpcyxwb3NpdGlvbix2b2lkIDAsZnV6enkpKTspcG9zaXRpb24rKztyZXR1cm4gcG9zaXRpb259ZnVuY3Rpb24gc2Vla1ByZXZpb3VzKHBvcyxuZXdCbG9jayl7dmFyIGlucHV0bWFzaz10aGlzLHBvc2l0aW9uPXBvcy0xO2lmKHBvczw9MClyZXR1cm4gMDtmb3IoOzA8cG9zaXRpb24mJighMD09PW5ld0Jsb2NrJiYoITAhPT1fdmFsaWRhdGlvblRlc3RzLmdldFRlc3QuY2FsbCh0aGlzLHBvc2l0aW9uKS5tYXRjaC5uZXdCbG9ja01hcmtlcnx8IWlzTWFzay5jYWxsKHRoaXMscG9zaXRpb24sdm9pZCAwLCEwKSl8fCEwIT09bmV3QmxvY2smJiFpc01hc2suY2FsbCh0aGlzLHBvc2l0aW9uLHZvaWQgMCwhMCkpOylwb3NpdGlvbi0tO3JldHVybiBwb3NpdGlvbn1mdW5jdGlvbiB0cmFuc2xhdGVQb3NpdGlvbihwb3Mpe3ZhciBpbnB1dG1hc2s9dGhpcyxvcHRzPXRoaXMub3B0cyxlbD10aGlzLmVsO3JldHVybiF0aGlzLmlzUlRMfHxcIm51bWJlclwiIT10eXBlb2YgcG9zfHxvcHRzLmdyZWVkeSYmXCJcIj09PW9wdHMucGxhY2Vob2xkZXJ8fCFlbHx8KHBvcz1NYXRoLmFicyh0aGlzLl92YWx1ZUdldCgpLmxlbmd0aC1wb3MpKSxwb3N9fSxmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwLF9fd2VicGFja19yZXF1aXJlX18oMTYpLF9fd2VicGFja19yZXF1aXJlX18oMTcpO3ZhciBfbWFzaz1fX3dlYnBhY2tfcmVxdWlyZV9fKDEwKSxfaW5wdXRtYXNrPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg5KSksX3dpbmRvdz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oNikpLF9tYXNrTGV4ZXI9X193ZWJwYWNrX3JlcXVpcmVfXygyMCksX3ZhbGlkYXRpb25UZXN0cz1fX3dlYnBhY2tfcmVxdWlyZV9fKDMpLF9wb3NpdGlvbmluZz1fX3dlYnBhY2tfcmVxdWlyZV9fKDEpLF92YWxpZGF0aW9uPV9fd2VicGFja19yZXF1aXJlX18oNCksX2lucHV0SGFuZGxpbmc9X193ZWJwYWNrX3JlcXVpcmVfXyg1KSxfZXZlbnRydWxlcj1fX3dlYnBhY2tfcmVxdWlyZV9fKDExKSxfZGVmaW5pdGlvbnM9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKSksX2RlZmF1bHRzPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygyMikpO2Z1bmN0aW9uIF90eXBlb2Yob2JqKXtyZXR1cm4gX3R5cGVvZj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24gX3R5cGVvZihvYmope3JldHVybiB0eXBlb2Ygb2JqfTpmdW5jdGlvbiBfdHlwZW9mKG9iail7cmV0dXJuIG9iaiYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZvYmouY29uc3RydWN0b3I9PT1TeW1ib2wmJm9iaiE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2Ygb2JqfSxfdHlwZW9mKG9iail9ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7ZGVmYXVsdDpvYmp9fXZhciBkb2N1bWVudD1fd2luZG93LmRlZmF1bHQuZG9jdW1lbnQsZGF0YUtleT1cIl9pbnB1dG1hc2tfb3B0c1wiO2Z1bmN0aW9uIElucHV0bWFzayhhbGlhcyxvcHRpb25zLGludGVybmFsKXtpZighKHRoaXMgaW5zdGFuY2VvZiBJbnB1dG1hc2spKXJldHVybiBuZXcgSW5wdXRtYXNrKGFsaWFzLG9wdGlvbnMsaW50ZXJuYWwpO3RoaXMuZGVwZW5kZW5jeUxpYj1faW5wdXRtYXNrLmRlZmF1bHQsdGhpcy5lbD12b2lkIDAsdGhpcy5ldmVudHM9e30sdGhpcy5tYXNrc2V0PXZvaWQgMCwhMCE9PWludGVybmFsJiYoXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhbGlhcyk/b3B0aW9ucz1hbGlhczoob3B0aW9ucz1vcHRpb25zfHx7fSxhbGlhcyYmKG9wdGlvbnMuYWxpYXM9YWxpYXMpKSx0aGlzLm9wdHM9X2lucHV0bWFzay5kZWZhdWx0LmV4dGVuZCghMCx7fSx0aGlzLmRlZmF1bHRzLG9wdGlvbnMpLHRoaXMubm9NYXNrc0NhY2hlPW9wdGlvbnMmJnZvaWQgMCE9PW9wdGlvbnMuZGVmaW5pdGlvbnMsdGhpcy51c2VyT3B0aW9ucz1vcHRpb25zfHx7fSxyZXNvbHZlQWxpYXModGhpcy5vcHRzLmFsaWFzLG9wdGlvbnMsdGhpcy5vcHRzKSksdGhpcy5yZWZyZXNoVmFsdWU9ITEsdGhpcy51bmRvVmFsdWU9dm9pZCAwLHRoaXMuJGVsPXZvaWQgMCx0aGlzLnNraXBLZXlQcmVzc0V2ZW50PSExLHRoaXMuc2tpcElucHV0RXZlbnQ9ITEsdGhpcy52YWxpZGF0aW9uRXZlbnQ9ITEsdGhpcy5pZ25vcmFibGU9ITEsdGhpcy5tYXhMZW5ndGgsdGhpcy5tb3VzZUVudGVyPSExLHRoaXMub3JpZ2luYWxQbGFjZWhvbGRlcj12b2lkIDAsdGhpcy5pc0NvbXBvc2luZz0hMX1mdW5jdGlvbiByZXNvbHZlQWxpYXMoYWxpYXNTdHIsb3B0aW9ucyxvcHRzKXt2YXIgYWxpYXNEZWZpbml0aW9uPUlucHV0bWFzay5wcm90b3R5cGUuYWxpYXNlc1thbGlhc1N0cl07cmV0dXJuIGFsaWFzRGVmaW5pdGlvbj8oYWxpYXNEZWZpbml0aW9uLmFsaWFzJiZyZXNvbHZlQWxpYXMoYWxpYXNEZWZpbml0aW9uLmFsaWFzLHZvaWQgMCxvcHRzKSxfaW5wdXRtYXNrLmRlZmF1bHQuZXh0ZW5kKCEwLG9wdHMsYWxpYXNEZWZpbml0aW9uKSxfaW5wdXRtYXNrLmRlZmF1bHQuZXh0ZW5kKCEwLG9wdHMsb3B0aW9ucyksITApOihudWxsPT09b3B0cy5tYXNrJiYob3B0cy5tYXNrPWFsaWFzU3RyKSwhMSl9ZnVuY3Rpb24gaW1wb3J0QXR0cmlidXRlT3B0aW9ucyhucHQsb3B0cyx1c2VyT3B0aW9ucyxkYXRhQXR0cmlidXRlKXtmdW5jdGlvbiBpbXBvcnRPcHRpb24ob3B0aW9uLG9wdGlvbkRhdGEpe3ZhciBhdHRyT3B0aW9uPVwiXCI9PT1kYXRhQXR0cmlidXRlP29wdGlvbjpkYXRhQXR0cmlidXRlK1wiLVwiK29wdGlvbjtvcHRpb25EYXRhPXZvaWQgMCE9PW9wdGlvbkRhdGE/b3B0aW9uRGF0YTpucHQuZ2V0QXR0cmlidXRlKGF0dHJPcHRpb24pLG51bGwhPT1vcHRpb25EYXRhJiYoXCJzdHJpbmdcIj09dHlwZW9mIG9wdGlvbkRhdGEmJigwPT09b3B0aW9uLmluZGV4T2YoXCJvblwiKT9vcHRpb25EYXRhPV93aW5kb3cuZGVmYXVsdFtvcHRpb25EYXRhXTpcImZhbHNlXCI9PT1vcHRpb25EYXRhP29wdGlvbkRhdGE9ITE6XCJ0cnVlXCI9PT1vcHRpb25EYXRhJiYob3B0aW9uRGF0YT0hMCkpLHVzZXJPcHRpb25zW29wdGlvbl09b3B0aW9uRGF0YSl9aWYoITA9PT1vcHRzLmltcG9ydERhdGFBdHRyaWJ1dGVzKXt2YXIgYXR0ck9wdGlvbnM9bnB0LmdldEF0dHJpYnV0ZShkYXRhQXR0cmlidXRlKSxvcHRpb24sZGF0YW9wdGlvbnMsb3B0aW9uRGF0YSxwO2lmKGF0dHJPcHRpb25zJiZcIlwiIT09YXR0ck9wdGlvbnMmJihhdHRyT3B0aW9ucz1hdHRyT3B0aW9ucy5yZXBsYWNlKC8nL2csJ1wiJyksZGF0YW9wdGlvbnM9SlNPTi5wYXJzZShcIntcIithdHRyT3B0aW9ucytcIn1cIikpLGRhdGFvcHRpb25zKWZvcihwIGluIG9wdGlvbkRhdGE9dm9pZCAwLGRhdGFvcHRpb25zKWlmKFwiYWxpYXNcIj09PXAudG9Mb3dlckNhc2UoKSl7b3B0aW9uRGF0YT1kYXRhb3B0aW9uc1twXTticmVha31mb3Iob3B0aW9uIGluIGltcG9ydE9wdGlvbihcImFsaWFzXCIsb3B0aW9uRGF0YSksdXNlck9wdGlvbnMuYWxpYXMmJnJlc29sdmVBbGlhcyh1c2VyT3B0aW9ucy5hbGlhcyx1c2VyT3B0aW9ucyxvcHRzKSxvcHRzKXtpZihkYXRhb3B0aW9ucylmb3IocCBpbiBvcHRpb25EYXRhPXZvaWQgMCxkYXRhb3B0aW9ucylpZihwLnRvTG93ZXJDYXNlKCk9PT1vcHRpb24udG9Mb3dlckNhc2UoKSl7b3B0aW9uRGF0YT1kYXRhb3B0aW9uc1twXTticmVha31pbXBvcnRPcHRpb24ob3B0aW9uLG9wdGlvbkRhdGEpfX1yZXR1cm4gX2lucHV0bWFzay5kZWZhdWx0LmV4dGVuZCghMCxvcHRzLHVzZXJPcHRpb25zKSxcInJ0bFwiIT09bnB0LmRpciYmIW9wdHMucmlnaHRBbGlnbnx8KG5wdC5zdHlsZS50ZXh0QWxpZ249XCJyaWdodFwiKSxcInJ0bFwiIT09bnB0LmRpciYmIW9wdHMubnVtZXJpY0lucHV0fHwobnB0LmRpcj1cImx0clwiLG5wdC5yZW1vdmVBdHRyaWJ1dGUoXCJkaXJcIiksb3B0cy5pc1JUTD0hMCksT2JqZWN0LmtleXModXNlck9wdGlvbnMpLmxlbmd0aH1JbnB1dG1hc2sucHJvdG90eXBlPXtkYXRhQXR0cmlidXRlOlwiZGF0YS1pbnB1dG1hc2tcIixkZWZhdWx0czpfZGVmYXVsdHMuZGVmYXVsdCxkZWZpbml0aW9uczpfZGVmaW5pdGlvbnMuZGVmYXVsdCxhbGlhc2VzOnt9LG1hc2tzQ2FjaGU6e30sZ2V0IGlzUlRMKCl7cmV0dXJuIHRoaXMub3B0cy5pc1JUTHx8dGhpcy5vcHRzLm51bWVyaWNJbnB1dH0sbWFzazpmdW5jdGlvbiBtYXNrKGVsZW1zKXt2YXIgdGhhdD10aGlzO3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlbGVtcyYmKGVsZW1zPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1zKXx8ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbGVtcykpLGVsZW1zPWVsZW1zLm5vZGVOYW1lP1tlbGVtc106QXJyYXkuaXNBcnJheShlbGVtcyk/ZWxlbXM6QXJyYXkuZnJvbShlbGVtcyksZWxlbXMuZm9yRWFjaChmdW5jdGlvbihlbCxuZHgpe3ZhciBzY29wZWRPcHRzPV9pbnB1dG1hc2suZGVmYXVsdC5leHRlbmQoITAse30sdGhhdC5vcHRzKTtpZihpbXBvcnRBdHRyaWJ1dGVPcHRpb25zKGVsLHNjb3BlZE9wdHMsX2lucHV0bWFzay5kZWZhdWx0LmV4dGVuZCghMCx7fSx0aGF0LnVzZXJPcHRpb25zKSx0aGF0LmRhdGFBdHRyaWJ1dGUpKXt2YXIgbWFza3NldD0oMCxfbWFza0xleGVyLmdlbmVyYXRlTWFza1NldCkoc2NvcGVkT3B0cyx0aGF0Lm5vTWFza3NDYWNoZSk7dm9pZCAwIT09bWFza3NldCYmKHZvaWQgMCE9PWVsLmlucHV0bWFzayYmKGVsLmlucHV0bWFzay5vcHRzLmF1dG9Vbm1hc2s9ITAsZWwuaW5wdXRtYXNrLnJlbW92ZSgpKSxlbC5pbnB1dG1hc2s9bmV3IElucHV0bWFzayh2b2lkIDAsdm9pZCAwLCEwKSxlbC5pbnB1dG1hc2sub3B0cz1zY29wZWRPcHRzLGVsLmlucHV0bWFzay5ub01hc2tzQ2FjaGU9dGhhdC5ub01hc2tzQ2FjaGUsZWwuaW5wdXRtYXNrLnVzZXJPcHRpb25zPV9pbnB1dG1hc2suZGVmYXVsdC5leHRlbmQoITAse30sdGhhdC51c2VyT3B0aW9ucyksZWwuaW5wdXRtYXNrLmVsPWVsLGVsLmlucHV0bWFzay4kZWw9KDAsX2lucHV0bWFzay5kZWZhdWx0KShlbCksZWwuaW5wdXRtYXNrLm1hc2tzZXQ9bWFza3NldCxfaW5wdXRtYXNrLmRlZmF1bHQuZGF0YShlbCxkYXRhS2V5LHRoYXQudXNlck9wdGlvbnMpLF9tYXNrLm1hc2suY2FsbChlbC5pbnB1dG1hc2spKX19KSxlbGVtcyYmZWxlbXNbMF0mJmVsZW1zWzBdLmlucHV0bWFza3x8dGhpc30sb3B0aW9uOmZ1bmN0aW9uIG9wdGlvbihvcHRpb25zLG5vcmVtYXNrKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2Ygb3B0aW9ucz90aGlzLm9wdHNbb3B0aW9uc106XCJvYmplY3RcIj09PV90eXBlb2Yob3B0aW9ucyk/KF9pbnB1dG1hc2suZGVmYXVsdC5leHRlbmQodGhpcy51c2VyT3B0aW9ucyxvcHRpb25zKSx0aGlzLmVsJiYhMCE9PW5vcmVtYXNrJiZ0aGlzLm1hc2sodGhpcy5lbCksdGhpcyk6dm9pZCAwfSx1bm1hc2tlZHZhbHVlOmZ1bmN0aW9uIHVubWFza2VkdmFsdWUodmFsdWUpe2lmKHRoaXMubWFza3NldD10aGlzLm1hc2tzZXR8fCgwLF9tYXNrTGV4ZXIuZ2VuZXJhdGVNYXNrU2V0KSh0aGlzLm9wdHMsdGhpcy5ub01hc2tzQ2FjaGUpLHZvaWQgMD09PXRoaXMuZWx8fHZvaWQgMCE9PXZhbHVlKXt2YXIgdmFsdWVCdWZmZXI9KFwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMub3B0cy5vbkJlZm9yZU1hc2smJnRoaXMub3B0cy5vbkJlZm9yZU1hc2suY2FsbCh0aGlzLHZhbHVlLHRoaXMub3B0cyl8fHZhbHVlKS5zcGxpdChcIlwiKTtfaW5wdXRIYW5kbGluZy5jaGVja1ZhbC5jYWxsKHRoaXMsdm9pZCAwLCExLCExLHZhbHVlQnVmZmVyKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLm9wdHMub25CZWZvcmVXcml0ZSYmdGhpcy5vcHRzLm9uQmVmb3JlV3JpdGUuY2FsbCh0aGlzLHZvaWQgMCxfcG9zaXRpb25pbmcuZ2V0QnVmZmVyLmNhbGwodGhpcyksMCx0aGlzLm9wdHMpfXJldHVybiBfaW5wdXRIYW5kbGluZy51bm1hc2tlZHZhbHVlLmNhbGwodGhpcyx0aGlzLmVsKX0scmVtb3ZlOmZ1bmN0aW9uIHJlbW92ZSgpe2lmKHRoaXMuZWwpe19pbnB1dG1hc2suZGVmYXVsdC5kYXRhKHRoaXMuZWwsZGF0YUtleSxudWxsKTt2YXIgY3Y9dGhpcy5vcHRzLmF1dG9Vbm1hc2s/KDAsX2lucHV0SGFuZGxpbmcudW5tYXNrZWR2YWx1ZSkodGhpcy5lbCk6dGhpcy5fdmFsdWVHZXQodGhpcy5vcHRzLmF1dG9Vbm1hc2spLHZhbHVlUHJvcGVydHk7Y3YhPT1fcG9zaXRpb25pbmcuZ2V0QnVmZmVyVGVtcGxhdGUuY2FsbCh0aGlzKS5qb2luKFwiXCIpP3RoaXMuX3ZhbHVlU2V0KGN2LHRoaXMub3B0cy5hdXRvVW5tYXNrKTp0aGlzLl92YWx1ZVNldChcIlwiKSxfZXZlbnRydWxlci5FdmVudFJ1bGVyLm9mZih0aGlzLmVsKSxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJiZPYmplY3QuZ2V0UHJvdG90eXBlT2Y/KHZhbHVlUHJvcGVydHk9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcy5lbCksXCJ2YWx1ZVwiKSx2YWx1ZVByb3BlcnR5JiZ0aGlzLl9fdmFsdWVHZXQmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLmVsLFwidmFsdWVcIix7Z2V0OnRoaXMuX192YWx1ZUdldCxzZXQ6dGhpcy5fX3ZhbHVlU2V0LGNvbmZpZ3VyYWJsZTohMH0pKTpkb2N1bWVudC5fX2xvb2t1cEdldHRlcl9fJiZ0aGlzLmVsLl9fbG9va3VwR2V0dGVyX18oXCJ2YWx1ZVwiKSYmdGhpcy5fX3ZhbHVlR2V0JiYodGhpcy5lbC5fX2RlZmluZUdldHRlcl9fKFwidmFsdWVcIix0aGlzLl9fdmFsdWVHZXQpLHRoaXMuZWwuX19kZWZpbmVTZXR0ZXJfXyhcInZhbHVlXCIsdGhpcy5fX3ZhbHVlU2V0KSksdGhpcy5lbC5pbnB1dG1hc2s9dm9pZCAwfXJldHVybiB0aGlzLmVsfSxnZXRlbXB0eW1hc2s6ZnVuY3Rpb24gZ2V0ZW1wdHltYXNrKCl7cmV0dXJuIHRoaXMubWFza3NldD10aGlzLm1hc2tzZXR8fCgwLF9tYXNrTGV4ZXIuZ2VuZXJhdGVNYXNrU2V0KSh0aGlzLm9wdHMsdGhpcy5ub01hc2tzQ2FjaGUpLF9wb3NpdGlvbmluZy5nZXRCdWZmZXJUZW1wbGF0ZS5jYWxsKHRoaXMpLmpvaW4oXCJcIil9LGhhc01hc2tlZFZhbHVlOmZ1bmN0aW9uIGhhc01hc2tlZFZhbHVlKCl7cmV0dXJuIXRoaXMub3B0cy5hdXRvVW5tYXNrfSxpc0NvbXBsZXRlOmZ1bmN0aW9uIGlzQ29tcGxldGUoKXtyZXR1cm4gdGhpcy5tYXNrc2V0PXRoaXMubWFza3NldHx8KDAsX21hc2tMZXhlci5nZW5lcmF0ZU1hc2tTZXQpKHRoaXMub3B0cyx0aGlzLm5vTWFza3NDYWNoZSksX3ZhbGlkYXRpb24uaXNDb21wbGV0ZS5jYWxsKHRoaXMsX3Bvc2l0aW9uaW5nLmdldEJ1ZmZlci5jYWxsKHRoaXMpKX0sZ2V0bWV0YWRhdGE6ZnVuY3Rpb24gZ2V0bWV0YWRhdGEoKXtpZih0aGlzLm1hc2tzZXQ9dGhpcy5tYXNrc2V0fHwoMCxfbWFza0xleGVyLmdlbmVyYXRlTWFza1NldCkodGhpcy5vcHRzLHRoaXMubm9NYXNrc0NhY2hlKSxBcnJheS5pc0FycmF5KHRoaXMubWFza3NldC5tZXRhZGF0YSkpe3ZhciBtYXNrVGFyZ2V0PV92YWxpZGF0aW9uVGVzdHMuZ2V0TWFza1RlbXBsYXRlLmNhbGwodGhpcywhMCwwLCExKS5qb2luKFwiXCIpO3JldHVybiB0aGlzLm1hc2tzZXQubWV0YWRhdGEuZm9yRWFjaChmdW5jdGlvbihtdGR0KXtyZXR1cm4gbXRkdC5tYXNrIT09bWFza1RhcmdldHx8KG1hc2tUYXJnZXQ9bXRkdCwhMSl9KSxtYXNrVGFyZ2V0fXJldHVybiB0aGlzLm1hc2tzZXQubWV0YWRhdGF9LGlzVmFsaWQ6ZnVuY3Rpb24gaXNWYWxpZCh2YWx1ZSl7aWYodGhpcy5tYXNrc2V0PXRoaXMubWFza3NldHx8KDAsX21hc2tMZXhlci5nZW5lcmF0ZU1hc2tTZXQpKHRoaXMub3B0cyx0aGlzLm5vTWFza3NDYWNoZSksdmFsdWUpe3ZhciB2YWx1ZUJ1ZmZlcj0oXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5vcHRzLm9uQmVmb3JlTWFzayYmdGhpcy5vcHRzLm9uQmVmb3JlTWFzay5jYWxsKHRoaXMsdmFsdWUsdGhpcy5vcHRzKXx8dmFsdWUpLnNwbGl0KFwiXCIpO19pbnB1dEhhbmRsaW5nLmNoZWNrVmFsLmNhbGwodGhpcyx2b2lkIDAsITAsITEsdmFsdWVCdWZmZXIpfWVsc2UgdmFsdWU9dGhpcy5pc1JUTD9fcG9zaXRpb25pbmcuZ2V0QnVmZmVyLmNhbGwodGhpcykuc2xpY2UoKS5yZXZlcnNlKCkuam9pbihcIlwiKTpfcG9zaXRpb25pbmcuZ2V0QnVmZmVyLmNhbGwodGhpcykuam9pbihcIlwiKTtmb3IodmFyIGJ1ZmZlcj1fcG9zaXRpb25pbmcuZ2V0QnVmZmVyLmNhbGwodGhpcykscmw9X3Bvc2l0aW9uaW5nLmRldGVybWluZUxhc3RSZXF1aXJlZFBvc2l0aW9uLmNhbGwodGhpcyksbG1pYj1idWZmZXIubGVuZ3RoLTE7cmw8bG1pYiYmIV9wb3NpdGlvbmluZy5pc01hc2suY2FsbCh0aGlzLGxtaWIpO2xtaWItLSk7cmV0dXJuIGJ1ZmZlci5zcGxpY2UocmwsbG1pYisxLXJsKSxfdmFsaWRhdGlvbi5pc0NvbXBsZXRlLmNhbGwodGhpcyxidWZmZXIpJiZ2YWx1ZT09PSh0aGlzLmlzUlRMP19wb3NpdGlvbmluZy5nZXRCdWZmZXIuY2FsbCh0aGlzKS5zbGljZSgpLnJldmVyc2UoKS5qb2luKFwiXCIpOl9wb3NpdGlvbmluZy5nZXRCdWZmZXIuY2FsbCh0aGlzKS5qb2luKFwiXCIpKX0sZm9ybWF0OmZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSxtZXRhZGF0YSl7dGhpcy5tYXNrc2V0PXRoaXMubWFza3NldHx8KDAsX21hc2tMZXhlci5nZW5lcmF0ZU1hc2tTZXQpKHRoaXMub3B0cyx0aGlzLm5vTWFza3NDYWNoZSk7dmFyIHZhbHVlQnVmZmVyPShcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLm9wdHMub25CZWZvcmVNYXNrJiZ0aGlzLm9wdHMub25CZWZvcmVNYXNrLmNhbGwodGhpcyx2YWx1ZSx0aGlzLm9wdHMpfHx2YWx1ZSkuc3BsaXQoXCJcIik7X2lucHV0SGFuZGxpbmcuY2hlY2tWYWwuY2FsbCh0aGlzLHZvaWQgMCwhMCwhMSx2YWx1ZUJ1ZmZlcik7dmFyIGZvcm1hdHRlZFZhbHVlPXRoaXMuaXNSVEw/X3Bvc2l0aW9uaW5nLmdldEJ1ZmZlci5jYWxsKHRoaXMpLnNsaWNlKCkucmV2ZXJzZSgpLmpvaW4oXCJcIik6X3Bvc2l0aW9uaW5nLmdldEJ1ZmZlci5jYWxsKHRoaXMpLmpvaW4oXCJcIik7cmV0dXJuIG1ldGFkYXRhP3t2YWx1ZTpmb3JtYXR0ZWRWYWx1ZSxtZXRhZGF0YTp0aGlzLmdldG1ldGFkYXRhKCl9OmZvcm1hdHRlZFZhbHVlfSxzZXRWYWx1ZTpmdW5jdGlvbiBzZXRWYWx1ZSh2YWx1ZSl7dGhpcy5lbCYmKDAsX2lucHV0bWFzay5kZWZhdWx0KSh0aGlzLmVsKS50cmlnZ2VyKFwic2V0dmFsdWVcIixbdmFsdWVdKX0sYW5hbHlzZU1hc2s6X21hc2tMZXhlci5hbmFseXNlTWFza30sSW5wdXRtYXNrLmV4dGVuZERlZmF1bHRzPWZ1bmN0aW9uKG9wdGlvbnMpe19pbnB1dG1hc2suZGVmYXVsdC5leHRlbmQoITAsSW5wdXRtYXNrLnByb3RvdHlwZS5kZWZhdWx0cyxvcHRpb25zKX0sSW5wdXRtYXNrLmV4dGVuZERlZmluaXRpb25zPWZ1bmN0aW9uKGRlZmluaXRpb24pe19pbnB1dG1hc2suZGVmYXVsdC5leHRlbmQoITAsSW5wdXRtYXNrLnByb3RvdHlwZS5kZWZpbml0aW9ucyxkZWZpbml0aW9uKX0sSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXM9ZnVuY3Rpb24oYWxpYXMpe19pbnB1dG1hc2suZGVmYXVsdC5leHRlbmQoITAsSW5wdXRtYXNrLnByb3RvdHlwZS5hbGlhc2VzLGFsaWFzKX0sSW5wdXRtYXNrLmZvcm1hdD1mdW5jdGlvbih2YWx1ZSxvcHRpb25zLG1ldGFkYXRhKXtyZXR1cm4gSW5wdXRtYXNrKG9wdGlvbnMpLmZvcm1hdCh2YWx1ZSxtZXRhZGF0YSl9LElucHV0bWFzay51bm1hc2s9ZnVuY3Rpb24odmFsdWUsb3B0aW9ucyl7cmV0dXJuIElucHV0bWFzayhvcHRpb25zKS51bm1hc2tlZHZhbHVlKHZhbHVlKX0sSW5wdXRtYXNrLmlzVmFsaWQ9ZnVuY3Rpb24odmFsdWUsb3B0aW9ucyl7cmV0dXJuIElucHV0bWFzayhvcHRpb25zKS5pc1ZhbGlkKHZhbHVlKX0sSW5wdXRtYXNrLnJlbW92ZT1mdW5jdGlvbihlbGVtcyl7XCJzdHJpbmdcIj09dHlwZW9mIGVsZW1zJiYoZWxlbXM9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbXMpfHxkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsZW1zKSksZWxlbXM9ZWxlbXMubm9kZU5hbWU/W2VsZW1zXTplbGVtcyxlbGVtcy5mb3JFYWNoKGZ1bmN0aW9uKGVsKXtlbC5pbnB1dG1hc2smJmVsLmlucHV0bWFzay5yZW1vdmUoKX0pfSxJbnB1dG1hc2suc2V0VmFsdWU9ZnVuY3Rpb24oZWxlbXMsdmFsdWUpe1wic3RyaW5nXCI9PXR5cGVvZiBlbGVtcyYmKGVsZW1zPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1zKXx8ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbGVtcykpLGVsZW1zPWVsZW1zLm5vZGVOYW1lP1tlbGVtc106ZWxlbXMsZWxlbXMuZm9yRWFjaChmdW5jdGlvbihlbCl7ZWwuaW5wdXRtYXNrP2VsLmlucHV0bWFzay5zZXRWYWx1ZSh2YWx1ZSk6KDAsX2lucHV0bWFzay5kZWZhdWx0KShlbCkudHJpZ2dlcihcInNldHZhbHVlXCIsW3ZhbHVlXSl9KX0sSW5wdXRtYXNrLmRlcGVuZGVuY3lMaWI9X2lucHV0bWFzay5kZWZhdWx0LF93aW5kb3cuZGVmYXVsdC5JbnB1dG1hc2s9SW5wdXRtYXNrO3ZhciBfZGVmYXVsdD1JbnB1dG1hc2s7ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0fSxmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBnZXRMb2NhdG9yKHRzdCxhbGlnbil7dmFyIGxvY2F0b3I9KG51bGwhPXRzdC5hbHRlcm5hdGlvbj90c3QubWxvY1tnZXREZWNpc2lvblRha2VyKHRzdCldOnRzdC5sb2NhdG9yKS5qb2luKFwiXCIpO2lmKFwiXCIhPT1sb2NhdG9yKWZvcig7bG9jYXRvci5sZW5ndGg8YWxpZ247KWxvY2F0b3IrPVwiMFwiO3JldHVybiBsb2NhdG9yfWZ1bmN0aW9uIGdldERlY2lzaW9uVGFrZXIodHN0KXt2YXIgZGVjaXNpb25UYWtlcj10c3QubG9jYXRvclt0c3QuYWx0ZXJuYXRpb25dO3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBkZWNpc2lvblRha2VyJiYwPGRlY2lzaW9uVGFrZXIubGVuZ3RoJiYoZGVjaXNpb25UYWtlcj1kZWNpc2lvblRha2VyLnNwbGl0KFwiLFwiKVswXSksdm9pZCAwIT09ZGVjaXNpb25UYWtlcj9kZWNpc2lvblRha2VyLnRvU3RyaW5nKCk6XCJcIn1mdW5jdGlvbiBnZXRQbGFjZWhvbGRlcihwb3MsdGVzdCxyZXR1cm5QTCl7dmFyIGlucHV0bWFzaz10aGlzLG9wdHM9dGhpcy5vcHRzLG1hc2tzZXQ9dGhpcy5tYXNrc2V0O2lmKHRlc3Q9dGVzdHx8Z2V0VGVzdC5jYWxsKHRoaXMscG9zKS5tYXRjaCx2b2lkIDAhPT10ZXN0LnBsYWNlaG9sZGVyfHwhMD09PXJldHVyblBMKXJldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHRlc3QucGxhY2Vob2xkZXI/dGVzdC5wbGFjZWhvbGRlcihvcHRzKTp0ZXN0LnBsYWNlaG9sZGVyO2lmKCEwIT09dGVzdC5zdGF0aWMpcmV0dXJuIG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KHBvcyVvcHRzLnBsYWNlaG9sZGVyLmxlbmd0aCk7aWYoLTE8cG9zJiZ2b2lkIDA9PT1tYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10pe3ZhciB0ZXN0cz1nZXRUZXN0cy5jYWxsKHRoaXMscG9zKSxzdGF0aWNBbHRlcm5hdGlvbnM9W10scHJldlRlc3Q7aWYodGVzdHMubGVuZ3RoPjErKFwiXCI9PT10ZXN0c1t0ZXN0cy5sZW5ndGgtMV0ubWF0Y2guZGVmPzE6MCkpZm9yKHZhciBpPTA7aTx0ZXN0cy5sZW5ndGg7aSsrKWlmKFwiXCIhPT10ZXN0c1tpXS5tYXRjaC5kZWYmJiEwIT09dGVzdHNbaV0ubWF0Y2gub3B0aW9uYWxpdHkmJiEwIT09dGVzdHNbaV0ubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyJiYoITA9PT10ZXN0c1tpXS5tYXRjaC5zdGF0aWN8fHZvaWQgMD09PXByZXZUZXN0fHwhMSE9PXRlc3RzW2ldLm1hdGNoLmZuLnRlc3QocHJldlRlc3QubWF0Y2guZGVmLG1hc2tzZXQscG9zLCEwLG9wdHMpKSYmKHN0YXRpY0FsdGVybmF0aW9ucy5wdXNoKHRlc3RzW2ldKSwhMD09PXRlc3RzW2ldLm1hdGNoLnN0YXRpYyYmKHByZXZUZXN0PXRlc3RzW2ldKSwxPHN0YXRpY0FsdGVybmF0aW9ucy5sZW5ndGgmJi9bMC05YS1iQS1aXS8udGVzdChzdGF0aWNBbHRlcm5hdGlvbnNbMF0ubWF0Y2guZGVmKSkpcmV0dXJuIG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KHBvcyVvcHRzLnBsYWNlaG9sZGVyLmxlbmd0aCl9cmV0dXJuIHRlc3QuZGVmfWZ1bmN0aW9uIGdldE1hc2tUZW1wbGF0ZShiYXNlT25JbnB1dCxtaW5pbWFsUG9zLGluY2x1ZGVNb2RlLG5vSml0LGNsZWFyT3B0aW9uYWxUYWlsKXt2YXIgaW5wdXRtYXNrPXRoaXMsb3B0cz10aGlzLm9wdHMsbWFza3NldD10aGlzLm1hc2tzZXQsZ3JlZWR5PW9wdHMuZ3JlZWR5O2NsZWFyT3B0aW9uYWxUYWlsJiYob3B0cy5ncmVlZHk9ITEpLG1pbmltYWxQb3M9bWluaW1hbFBvc3x8MDt2YXIgbWFza1RlbXBsYXRlPVtdLG5keEludGx6cixwb3M9MCx0ZXN0LHRlc3RQb3Msaml0UmVuZGVyU3RhdGljO2Rve2lmKCEwPT09YmFzZU9uSW5wdXQmJm1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXSl0ZXN0UG9zPWNsZWFyT3B0aW9uYWxUYWlsJiYhMD09PW1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXS5tYXRjaC5vcHRpb25hbGl0eSYmdm9pZCAwPT09bWFza3NldC52YWxpZFBvc2l0aW9uc1twb3MrMV0mJighMD09PW1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXS5nZW5lcmF0ZWRJbnB1dHx8bWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdLmlucHV0PT1vcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXImJjA8cG9zKT9kZXRlcm1pbmVUZXN0VGVtcGxhdGUuY2FsbCh0aGlzLHBvcyxnZXRUZXN0cy5jYWxsKHRoaXMscG9zLG5keEludGx6cixwb3MtMSkpOm1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXSx0ZXN0PXRlc3RQb3MubWF0Y2gsbmR4SW50bHpyPXRlc3RQb3MubG9jYXRvci5zbGljZSgpLG1hc2tUZW1wbGF0ZS5wdXNoKCEwPT09aW5jbHVkZU1vZGU/dGVzdFBvcy5pbnB1dDohMT09PWluY2x1ZGVNb2RlP3Rlc3QubmF0aXZlRGVmOmdldFBsYWNlaG9sZGVyLmNhbGwodGhpcyxwb3MsdGVzdCkpO2Vsc2V7dGVzdFBvcz1nZXRUZXN0VGVtcGxhdGUuY2FsbCh0aGlzLHBvcyxuZHhJbnRsenIscG9zLTEpLHRlc3Q9dGVzdFBvcy5tYXRjaCxuZHhJbnRsenI9dGVzdFBvcy5sb2NhdG9yLnNsaWNlKCk7dmFyIGppdE1hc2tpbmc9ITAhPT1ub0ppdCYmKCExIT09b3B0cy5qaXRNYXNraW5nP29wdHMuaml0TWFza2luZzp0ZXN0LmppdCk7aml0UmVuZGVyU3RhdGljPWppdFJlbmRlclN0YXRpYyYmdGVzdC5zdGF0aWMmJnRlc3QuZGVmIT09b3B0cy5ncm91cFNlcGFyYXRvciYmbnVsbD09PXRlc3QuZm58fG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zLTFdJiZ0ZXN0LnN0YXRpYyYmdGVzdC5kZWYhPT1vcHRzLmdyb3VwU2VwYXJhdG9yJiZudWxsPT09dGVzdC5mbixqaXRSZW5kZXJTdGF0aWN8fCExPT09aml0TWFza2luZ3x8dm9pZCAwPT09aml0TWFza2luZ3x8XCJudW1iZXJcIj09dHlwZW9mIGppdE1hc2tpbmcmJmlzRmluaXRlKGppdE1hc2tpbmcpJiZwb3M8aml0TWFza2luZz9tYXNrVGVtcGxhdGUucHVzaCghMT09PWluY2x1ZGVNb2RlP3Rlc3QubmF0aXZlRGVmOmdldFBsYWNlaG9sZGVyLmNhbGwodGhpcyxwb3MsdGVzdCkpOmppdFJlbmRlclN0YXRpYz0hMX1wb3MrK313aGlsZSgodm9pZCAwPT09dGhpcy5tYXhMZW5ndGh8fHBvczx0aGlzLm1heExlbmd0aCkmJighMCE9PXRlc3Quc3RhdGljfHxcIlwiIT09dGVzdC5kZWYpfHxwb3M8bWluaW1hbFBvcyk7cmV0dXJuXCJcIj09PW1hc2tUZW1wbGF0ZVttYXNrVGVtcGxhdGUubGVuZ3RoLTFdJiZtYXNrVGVtcGxhdGUucG9wKCksITE9PT1pbmNsdWRlTW9kZSYmdm9pZCAwIT09bWFza3NldC5tYXNrTGVuZ3RofHwobWFza3NldC5tYXNrTGVuZ3RoPXBvcy0xKSxvcHRzLmdyZWVkeT1ncmVlZHksbWFza1RlbXBsYXRlfWZ1bmN0aW9uIGdldFRlc3RUZW1wbGF0ZShwb3MsbmR4SW50bHpyLHRzdFBzKXt2YXIgaW5wdXRtYXNrPXRoaXMsbWFza3NldD10aGlzLm1hc2tzZXQ7cmV0dXJuIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXXx8ZGV0ZXJtaW5lVGVzdFRlbXBsYXRlLmNhbGwodGhpcyxwb3MsZ2V0VGVzdHMuY2FsbCh0aGlzLHBvcyxuZHhJbnRsenI/bmR4SW50bHpyLnNsaWNlKCk6bmR4SW50bHpyLHRzdFBzKSl9ZnVuY3Rpb24gZGV0ZXJtaW5lVGVzdFRlbXBsYXRlKHBvcyx0ZXN0cyl7dmFyIGlucHV0bWFzaz10aGlzLG9wdHM9dGhpcy5vcHRzO3Bvcz0wPHBvcz9wb3MtMTowO2Zvcih2YXIgYWx0VGVzdD1nZXRUZXN0LmNhbGwodGhpcyxwb3MpLHRhcmdldExvY2F0b3I9Z2V0TG9jYXRvcihhbHRUZXN0KSx0c3RMb2NhdG9yLGNsb3Nlc3QsYmVzdE1hdGNoLG5keD0wO25keDx0ZXN0cy5sZW5ndGg7bmR4Kyspe3ZhciB0c3Q9dGVzdHNbbmR4XTt0c3RMb2NhdG9yPWdldExvY2F0b3IodHN0LHRhcmdldExvY2F0b3IubGVuZ3RoKTt2YXIgZGlzdGFuY2U9TWF0aC5hYnModHN0TG9jYXRvci10YXJnZXRMb2NhdG9yKTsodm9pZCAwPT09Y2xvc2VzdHx8XCJcIiE9PXRzdExvY2F0b3ImJmRpc3RhbmNlPGNsb3Nlc3R8fGJlc3RNYXRjaCYmIW9wdHMuZ3JlZWR5JiZiZXN0TWF0Y2gubWF0Y2gub3B0aW9uYWxpdHkmJlwibWFzdGVyXCI9PT1iZXN0TWF0Y2gubWF0Y2gubmV3QmxvY2tNYXJrZXImJighdHN0Lm1hdGNoLm9wdGlvbmFsaXR5fHwhdHN0Lm1hdGNoLm5ld0Jsb2NrTWFya2VyKXx8YmVzdE1hdGNoJiZiZXN0TWF0Y2gubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyJiYhdHN0Lm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllcikmJihjbG9zZXN0PWRpc3RhbmNlLGJlc3RNYXRjaD10c3QpfXJldHVybiBiZXN0TWF0Y2h9ZnVuY3Rpb24gZ2V0VGVzdChwb3MsdGVzdHMpe3ZhciBpbnB1dG1hc2s9dGhpcyxtYXNrc2V0PXRoaXMubWFza3NldDtyZXR1cm4gbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdP21hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXToodGVzdHN8fGdldFRlc3RzLmNhbGwodGhpcyxwb3MpKVswXX1mdW5jdGlvbiBnZXRUZXN0cyhwb3MsbmR4SW50bHpyLHRzdFBzKXt2YXIgaW5wdXRtYXNrPXRoaXMsJD10aGlzLmRlcGVuZGVuY3lMaWIsbWFza3NldD10aGlzLm1hc2tzZXQsb3B0cz10aGlzLm9wdHMsZWw9dGhpcy5lbCxtYXNrVG9rZW5zPW1hc2tzZXQubWFza1Rva2VuLHRlc3RQb3M9bmR4SW50bHpyP3RzdFBzOjAsbmR4SW5pdGlhbGl6ZXI9bmR4SW50bHpyP25keEludGx6ci5zbGljZSgpOlswXSxtYXRjaGVzPVtdLGluc2VydFN0b3A9ITEsbGF0ZXN0TWF0Y2gsY2FjaGVEZXBlbmRlbmN5PW5keEludGx6cj9uZHhJbnRsenIuam9pbihcIlwiKTpcIlwiO2Z1bmN0aW9uIHJlc29sdmVUZXN0RnJvbVRva2VuKG1hc2tUb2tlbixuZHhJbml0aWFsaXplcixsb29wTmR4LHF1YW50aWZpZXJSZWN1cnNlKXtmdW5jdGlvbiBoYW5kbGVNYXRjaChtYXRjaCxsb29wTmR4LHF1YW50aWZpZXJSZWN1cnNlKXtmdW5jdGlvbiBpc0ZpcnN0TWF0Y2gobGF0ZXN0TWF0Y2gsdG9rZW5Hcm91cCl7dmFyIGZpcnN0TWF0Y2g9MD09PXRva2VuR3JvdXAubWF0Y2hlcy5pbmRleE9mKGxhdGVzdE1hdGNoKTtyZXR1cm4gZmlyc3RNYXRjaHx8dG9rZW5Hcm91cC5tYXRjaGVzLmV2ZXJ5KGZ1bmN0aW9uKG1hdGNoLG5keCl7cmV0dXJuITA9PT1tYXRjaC5pc1F1YW50aWZpZXI/Zmlyc3RNYXRjaD1pc0ZpcnN0TWF0Y2gobGF0ZXN0TWF0Y2gsdG9rZW5Hcm91cC5tYXRjaGVzW25keC0xXSk6T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1hdGNoLFwibWF0Y2hlc1wiKSYmKGZpcnN0TWF0Y2g9aXNGaXJzdE1hdGNoKGxhdGVzdE1hdGNoLG1hdGNoKSksIWZpcnN0TWF0Y2h9KSxmaXJzdE1hdGNofWZ1bmN0aW9uIHJlc29sdmVOZHhJbml0aWFsaXplcihwb3MsYWx0ZXJuYXRlTmR4LHRhcmdldEFsdGVybmF0aW9uKXt2YXIgYmVzdE1hdGNoLGluZGV4UG9zO2lmKChtYXNrc2V0LnRlc3RzW3Bvc118fG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXSkmJihtYXNrc2V0LnRlc3RzW3Bvc118fFttYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc11dKS5ldmVyeShmdW5jdGlvbihsbW50LG5keCl7aWYobG1udC5tbG9jW2FsdGVybmF0ZU5keF0pcmV0dXJuIGJlc3RNYXRjaD1sbW50LCExO3ZhciBhbHRlcm5hdGlvbj12b2lkIDAhPT10YXJnZXRBbHRlcm5hdGlvbj90YXJnZXRBbHRlcm5hdGlvbjpsbW50LmFsdGVybmF0aW9uLG5keFBvcz12b2lkIDAhPT1sbW50LmxvY2F0b3JbYWx0ZXJuYXRpb25dP2xtbnQubG9jYXRvclthbHRlcm5hdGlvbl0udG9TdHJpbmcoKS5pbmRleE9mKGFsdGVybmF0ZU5keCk6LTE7cmV0dXJuKHZvaWQgMD09PWluZGV4UG9zfHxuZHhQb3M8aW5kZXhQb3MpJiYtMSE9PW5keFBvcyYmKGJlc3RNYXRjaD1sbW50LGluZGV4UG9zPW5keFBvcyksITB9KSxiZXN0TWF0Y2gpe3ZhciBiZXN0TWF0Y2hBbHRJbmRleD1iZXN0TWF0Y2gubG9jYXRvcltiZXN0TWF0Y2guYWx0ZXJuYXRpb25dLGxvY2F0b3I9YmVzdE1hdGNoLm1sb2NbYWx0ZXJuYXRlTmR4XXx8YmVzdE1hdGNoLm1sb2NbYmVzdE1hdGNoQWx0SW5kZXhdfHxiZXN0TWF0Y2gubG9jYXRvcjtyZXR1cm4gbG9jYXRvci5zbGljZSgodm9pZCAwIT09dGFyZ2V0QWx0ZXJuYXRpb24/dGFyZ2V0QWx0ZXJuYXRpb246YmVzdE1hdGNoLmFsdGVybmF0aW9uKSsxKX1yZXR1cm4gdm9pZCAwIT09dGFyZ2V0QWx0ZXJuYXRpb24/cmVzb2x2ZU5keEluaXRpYWxpemVyKHBvcyxhbHRlcm5hdGVOZHgpOnZvaWQgMH1mdW5jdGlvbiBpc1N1YnNldE9mKHNvdXJjZSx0YXJnZXQpe2Z1bmN0aW9uIGV4cGFuZChwYXR0ZXJuKXtmb3IodmFyIGV4cGFuZGVkPVtdLHN0YXJ0PS0xLGVuZCxpPTAsbD1wYXR0ZXJuLmxlbmd0aDtpPGw7aSsrKWlmKFwiLVwiPT09cGF0dGVybi5jaGFyQXQoaSkpZm9yKGVuZD1wYXR0ZXJuLmNoYXJDb2RlQXQoaSsxKTsrK3N0YXJ0PGVuZDspZXhwYW5kZWQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKHN0YXJ0KSk7ZWxzZSBzdGFydD1wYXR0ZXJuLmNoYXJDb2RlQXQoaSksZXhwYW5kZWQucHVzaChwYXR0ZXJuLmNoYXJBdChpKSk7cmV0dXJuIGV4cGFuZGVkLmpvaW4oXCJcIil9cmV0dXJuIHNvdXJjZS5tYXRjaC5kZWY9PT10YXJnZXQubWF0Y2gubmF0aXZlRGVmfHwhKCEob3B0cy5yZWdleHx8c291cmNlLm1hdGNoLmZuIGluc3RhbmNlb2YgUmVnRXhwJiZ0YXJnZXQubWF0Y2guZm4gaW5zdGFuY2VvZiBSZWdFeHApfHwhMD09PXNvdXJjZS5tYXRjaC5zdGF0aWN8fCEwPT09dGFyZ2V0Lm1hdGNoLnN0YXRpYykmJi0xIT09ZXhwYW5kKHRhcmdldC5tYXRjaC5mbi50b1N0cmluZygpLnJlcGxhY2UoL1tbXFxdL10vZyxcIlwiKSkuaW5kZXhPZihleHBhbmQoc291cmNlLm1hdGNoLmZuLnRvU3RyaW5nKCkucmVwbGFjZSgvW1tcXF0vXS9nLFwiXCIpKSl9ZnVuY3Rpb24gc3RhdGljQ2FuTWF0Y2hEZWZpbml0aW9uKHNvdXJjZSx0YXJnZXQpe3JldHVybiEwPT09c291cmNlLm1hdGNoLnN0YXRpYyYmITAhPT10YXJnZXQubWF0Y2guc3RhdGljJiZ0YXJnZXQubWF0Y2guZm4udGVzdChzb3VyY2UubWF0Y2guZGVmLG1hc2tzZXQscG9zLCExLG9wdHMsITEpfWZ1bmN0aW9uIHNldE1lcmdlTG9jYXRvcnModGFyZ2V0TWF0Y2gsYWx0TWF0Y2gpe3ZhciBhbHRlcm5hdGlvbk5keD10YXJnZXRNYXRjaC5hbHRlcm5hdGlvbixzaG91bGRNZXJnZT12b2lkIDA9PT1hbHRNYXRjaHx8YWx0ZXJuYXRpb25OZHg9PT1hbHRNYXRjaC5hbHRlcm5hdGlvbiYmLTE9PT10YXJnZXRNYXRjaC5sb2NhdG9yW2FsdGVybmF0aW9uTmR4XS50b1N0cmluZygpLmluZGV4T2YoYWx0TWF0Y2gubG9jYXRvclthbHRlcm5hdGlvbk5keF0pO2lmKCFzaG91bGRNZXJnZSYmYWx0ZXJuYXRpb25OZHg+YWx0TWF0Y2guYWx0ZXJuYXRpb24pZm9yKHZhciBpPWFsdE1hdGNoLmFsdGVybmF0aW9uO2k8YWx0ZXJuYXRpb25OZHg7aSsrKWlmKHRhcmdldE1hdGNoLmxvY2F0b3JbaV0hPT1hbHRNYXRjaC5sb2NhdG9yW2ldKXthbHRlcm5hdGlvbk5keD1pLHNob3VsZE1lcmdlPSEwO2JyZWFrfWlmKHNob3VsZE1lcmdlKXt0YXJnZXRNYXRjaC5tbG9jPXRhcmdldE1hdGNoLm1sb2N8fHt9O3ZhciBsb2NOZHg9dGFyZ2V0TWF0Y2gubG9jYXRvclthbHRlcm5hdGlvbk5keF07aWYodm9pZCAwIT09bG9jTmR4KXtpZihcInN0cmluZ1wiPT10eXBlb2YgbG9jTmR4JiYobG9jTmR4PWxvY05keC5zcGxpdChcIixcIilbMF0pLHZvaWQgMD09PXRhcmdldE1hdGNoLm1sb2NbbG9jTmR4XSYmKHRhcmdldE1hdGNoLm1sb2NbbG9jTmR4XT10YXJnZXRNYXRjaC5sb2NhdG9yLnNsaWNlKCkpLHZvaWQgMCE9PWFsdE1hdGNoKXtmb3IodmFyIG5keCBpbiBhbHRNYXRjaC5tbG9jKVwic3RyaW5nXCI9PXR5cGVvZiBuZHgmJihuZHg9bmR4LnNwbGl0KFwiLFwiKVswXSksdm9pZCAwPT09dGFyZ2V0TWF0Y2gubWxvY1tuZHhdJiYodGFyZ2V0TWF0Y2gubWxvY1tuZHhdPWFsdE1hdGNoLm1sb2NbbmR4XSk7dGFyZ2V0TWF0Y2gubG9jYXRvclthbHRlcm5hdGlvbk5keF09T2JqZWN0LmtleXModGFyZ2V0TWF0Y2gubWxvYykuam9pbihcIixcIil9cmV0dXJuITB9dGFyZ2V0TWF0Y2guYWx0ZXJuYXRpb249dm9pZCAwfXJldHVybiExfWZ1bmN0aW9uIGlzU2FtZUxldmVsKHRhcmdldE1hdGNoLGFsdE1hdGNoKXtpZih0YXJnZXRNYXRjaC5sb2NhdG9yLmxlbmd0aCE9PWFsdE1hdGNoLmxvY2F0b3IubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgbG9jTmR4PXRhcmdldE1hdGNoLmFsdGVybmF0aW9uKzE7bG9jTmR4PHRhcmdldE1hdGNoLmxvY2F0b3IubGVuZ3RoO2xvY05keCsrKWlmKHRhcmdldE1hdGNoLmxvY2F0b3JbbG9jTmR4XSE9PWFsdE1hdGNoLmxvY2F0b3JbbG9jTmR4XSlyZXR1cm4hMTtyZXR1cm4hMH1pZih0ZXN0UG9zPnBvcytvcHRzLl9tYXhUZXN0UG9zKXRocm93XCJJbnB1dG1hc2s6IFRoZXJlIGlzIHByb2JhYmx5IGFuIGVycm9yIGluIHlvdXIgbWFzayBkZWZpbml0aW9uIG9yIGluIHRoZSBjb2RlLiBDcmVhdGUgYW4gaXNzdWUgb24gZ2l0aHViIHdpdGggYW4gZXhhbXBsZSBvZiB0aGUgbWFzayB5b3UgYXJlIHVzaW5nLiBcIittYXNrc2V0Lm1hc2s7aWYodGVzdFBvcz09PXBvcyYmdm9pZCAwPT09bWF0Y2gubWF0Y2hlcylyZXR1cm4gbWF0Y2hlcy5wdXNoKHttYXRjaDptYXRjaCxsb2NhdG9yOmxvb3BOZHgucmV2ZXJzZSgpLGNkOmNhY2hlRGVwZW5kZW5jeSxtbG9jOnt9fSksITA7aWYodm9pZCAwIT09bWF0Y2gubWF0Y2hlcyl7aWYobWF0Y2guaXNHcm91cCYmcXVhbnRpZmllclJlY3Vyc2UhPT1tYXRjaCl7aWYobWF0Y2g9aGFuZGxlTWF0Y2gobWFza1Rva2VuLm1hdGNoZXNbbWFza1Rva2VuLm1hdGNoZXMuaW5kZXhPZihtYXRjaCkrMV0sbG9vcE5keCxxdWFudGlmaWVyUmVjdXJzZSksbWF0Y2gpcmV0dXJuITB9ZWxzZSBpZihtYXRjaC5pc09wdGlvbmFsKXt2YXIgb3B0aW9uYWxUb2tlbj1tYXRjaCxtdGNoc05keD1tYXRjaGVzLmxlbmd0aDtpZihtYXRjaD1yZXNvbHZlVGVzdEZyb21Ub2tlbihtYXRjaCxuZHhJbml0aWFsaXplcixsb29wTmR4LHF1YW50aWZpZXJSZWN1cnNlKSxtYXRjaCl7aWYobWF0Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uKG10Y2gsbmR4KXttdGNoc05keDw9bmR4JiYobXRjaC5tYXRjaC5vcHRpb25hbGl0eT0hMCl9KSxsYXRlc3RNYXRjaD1tYXRjaGVzW21hdGNoZXMubGVuZ3RoLTFdLm1hdGNoLHZvaWQgMCE9PXF1YW50aWZpZXJSZWN1cnNlfHwhaXNGaXJzdE1hdGNoKGxhdGVzdE1hdGNoLG9wdGlvbmFsVG9rZW4pKXJldHVybiEwO2luc2VydFN0b3A9ITAsdGVzdFBvcz1wb3N9fWVsc2UgaWYobWF0Y2guaXNBbHRlcm5hdG9yKXt2YXIgYWx0ZXJuYXRlVG9rZW49bWF0Y2gsbWFsdGVybmF0ZU1hdGNoZXM9W10sbWFsdE1hdGNoZXMsY3VycmVudE1hdGNoZXM9bWF0Y2hlcy5zbGljZSgpLGxvb3BOZHhDbnQ9bG9vcE5keC5sZW5ndGgsYWx0SW5kZXg9MDxuZHhJbml0aWFsaXplci5sZW5ndGg/bmR4SW5pdGlhbGl6ZXIuc2hpZnQoKTotMTtpZigtMT09PWFsdEluZGV4fHxcInN0cmluZ1wiPT10eXBlb2YgYWx0SW5kZXgpe3ZhciBjdXJyZW50UG9zPXRlc3RQb3MsbmR4SW5pdGlhbGl6ZXJDbG9uZT1uZHhJbml0aWFsaXplci5zbGljZSgpLGFsdEluZGV4QXJyPVtdLGFtbmR4O2lmKFwic3RyaW5nXCI9PXR5cGVvZiBhbHRJbmRleClhbHRJbmRleEFycj1hbHRJbmRleC5zcGxpdChcIixcIik7ZWxzZSBmb3IoYW1uZHg9MDthbW5keDxhbHRlcm5hdGVUb2tlbi5tYXRjaGVzLmxlbmd0aDthbW5keCsrKWFsdEluZGV4QXJyLnB1c2goYW1uZHgudG9TdHJpbmcoKSk7aWYodm9pZCAwIT09bWFza3NldC5leGNsdWRlc1twb3NdKXtmb3IodmFyIGFsdEluZGV4QXJyQ2xvbmU9YWx0SW5kZXhBcnIuc2xpY2UoKSxpPTAsZXhsPW1hc2tzZXQuZXhjbHVkZXNbcG9zXS5sZW5ndGg7aTxleGw7aSsrKXt2YXIgZXhjbHVkZVNldD1tYXNrc2V0LmV4Y2x1ZGVzW3Bvc11baV0udG9TdHJpbmcoKS5zcGxpdChcIjpcIik7bG9vcE5keC5sZW5ndGg9PWV4Y2x1ZGVTZXRbMV0mJmFsdEluZGV4QXJyLnNwbGljZShhbHRJbmRleEFyci5pbmRleE9mKGV4Y2x1ZGVTZXRbMF0pLDEpfTA9PT1hbHRJbmRleEFyci5sZW5ndGgmJihkZWxldGUgbWFza3NldC5leGNsdWRlc1twb3NdLGFsdEluZGV4QXJyPWFsdEluZGV4QXJyQ2xvbmUpfSghMD09PW9wdHMua2VlcFN0YXRpY3x8aXNGaW5pdGUocGFyc2VJbnQob3B0cy5rZWVwU3RhdGljKSkmJmN1cnJlbnRQb3M+PW9wdHMua2VlcFN0YXRpYykmJihhbHRJbmRleEFycj1hbHRJbmRleEFyci5zbGljZSgwLDEpKTtmb3IodmFyIHVuTWF0Y2hlZEFsdGVybmF0aW9uPSExLG5keD0wO25keDxhbHRJbmRleEFyci5sZW5ndGg7bmR4Kyspe2FtbmR4PXBhcnNlSW50KGFsdEluZGV4QXJyW25keF0pLG1hdGNoZXM9W10sbmR4SW5pdGlhbGl6ZXI9XCJzdHJpbmdcIj09dHlwZW9mIGFsdEluZGV4JiZyZXNvbHZlTmR4SW5pdGlhbGl6ZXIodGVzdFBvcyxhbW5keCxsb29wTmR4Q250KXx8bmR4SW5pdGlhbGl6ZXJDbG9uZS5zbGljZSgpLGFsdGVybmF0ZVRva2VuLm1hdGNoZXNbYW1uZHhdJiZoYW5kbGVNYXRjaChhbHRlcm5hdGVUb2tlbi5tYXRjaGVzW2FtbmR4XSxbYW1uZHhdLmNvbmNhdChsb29wTmR4KSxxdWFudGlmaWVyUmVjdXJzZSk/bWF0Y2g9ITA6MD09PW5keCYmKHVuTWF0Y2hlZEFsdGVybmF0aW9uPSEwKSxtYWx0TWF0Y2hlcz1tYXRjaGVzLnNsaWNlKCksdGVzdFBvcz1jdXJyZW50UG9zLG1hdGNoZXM9W107Zm9yKHZhciBuZHgxPTA7bmR4MTxtYWx0TWF0Y2hlcy5sZW5ndGg7bmR4MSsrKXt2YXIgYWx0TWF0Y2g9bWFsdE1hdGNoZXNbbmR4MV0sZHJvcE1hdGNoPSExO2FsdE1hdGNoLm1hdGNoLmppdD1hbHRNYXRjaC5tYXRjaC5qaXR8fHVuTWF0Y2hlZEFsdGVybmF0aW9uLGFsdE1hdGNoLmFsdGVybmF0aW9uPWFsdE1hdGNoLmFsdGVybmF0aW9ufHxsb29wTmR4Q250LHNldE1lcmdlTG9jYXRvcnMoYWx0TWF0Y2gpO2Zvcih2YXIgbmR4Mj0wO25keDI8bWFsdGVybmF0ZU1hdGNoZXMubGVuZ3RoO25keDIrKyl7dmFyIGFsdE1hdGNoMj1tYWx0ZXJuYXRlTWF0Y2hlc1tuZHgyXTtpZihcInN0cmluZ1wiIT10eXBlb2YgYWx0SW5kZXh8fHZvaWQgMCE9PWFsdE1hdGNoLmFsdGVybmF0aW9uJiZhbHRJbmRleEFyci5pbmNsdWRlcyhhbHRNYXRjaC5sb2NhdG9yW2FsdE1hdGNoLmFsdGVybmF0aW9uXS50b1N0cmluZygpKSl7aWYoYWx0TWF0Y2gubWF0Y2gubmF0aXZlRGVmPT09YWx0TWF0Y2gyLm1hdGNoLm5hdGl2ZURlZil7ZHJvcE1hdGNoPSEwLHNldE1lcmdlTG9jYXRvcnMoYWx0TWF0Y2gyLGFsdE1hdGNoKTticmVha31pZihpc1N1YnNldE9mKGFsdE1hdGNoLGFsdE1hdGNoMikpe3NldE1lcmdlTG9jYXRvcnMoYWx0TWF0Y2gsYWx0TWF0Y2gyKSYmKGRyb3BNYXRjaD0hMCxtYWx0ZXJuYXRlTWF0Y2hlcy5zcGxpY2UobWFsdGVybmF0ZU1hdGNoZXMuaW5kZXhPZihhbHRNYXRjaDIpLDAsYWx0TWF0Y2gpKTticmVha31pZihpc1N1YnNldE9mKGFsdE1hdGNoMixhbHRNYXRjaCkpe3NldE1lcmdlTG9jYXRvcnMoYWx0TWF0Y2gyLGFsdE1hdGNoKTticmVha31pZihzdGF0aWNDYW5NYXRjaERlZmluaXRpb24oYWx0TWF0Y2gsYWx0TWF0Y2gyKSl7aXNTYW1lTGV2ZWwoYWx0TWF0Y2gsYWx0TWF0Y2gyKXx8dm9pZCAwIT09ZWwuaW5wdXRtYXNrLnVzZXJPcHRpb25zLmtlZXBTdGF0aWM/c2V0TWVyZ2VMb2NhdG9ycyhhbHRNYXRjaCxhbHRNYXRjaDIpJiYoZHJvcE1hdGNoPSEwLG1hbHRlcm5hdGVNYXRjaGVzLnNwbGljZShtYWx0ZXJuYXRlTWF0Y2hlcy5pbmRleE9mKGFsdE1hdGNoMiksMCxhbHRNYXRjaCkpOm9wdHMua2VlcFN0YXRpYz0hMDticmVha319fWRyb3BNYXRjaHx8bWFsdGVybmF0ZU1hdGNoZXMucHVzaChhbHRNYXRjaCl9fW1hdGNoZXM9Y3VycmVudE1hdGNoZXMuY29uY2F0KG1hbHRlcm5hdGVNYXRjaGVzKSx0ZXN0UG9zPXBvcyxpbnNlcnRTdG9wPTA8bWF0Y2hlcy5sZW5ndGgsbWF0Y2g9MDxtYWx0ZXJuYXRlTWF0Y2hlcy5sZW5ndGgsbmR4SW5pdGlhbGl6ZXI9bmR4SW5pdGlhbGl6ZXJDbG9uZS5zbGljZSgpfWVsc2UgbWF0Y2g9aGFuZGxlTWF0Y2goYWx0ZXJuYXRlVG9rZW4ubWF0Y2hlc1thbHRJbmRleF18fG1hc2tUb2tlbi5tYXRjaGVzW2FsdEluZGV4XSxbYWx0SW5kZXhdLmNvbmNhdChsb29wTmR4KSxxdWFudGlmaWVyUmVjdXJzZSk7aWYobWF0Y2gpcmV0dXJuITB9ZWxzZSBpZihtYXRjaC5pc1F1YW50aWZpZXImJnF1YW50aWZpZXJSZWN1cnNlIT09bWFza1Rva2VuLm1hdGNoZXNbbWFza1Rva2VuLm1hdGNoZXMuaW5kZXhPZihtYXRjaCktMV0pZm9yKHZhciBxdD1tYXRjaCxxbmR4PTA8bmR4SW5pdGlhbGl6ZXIubGVuZ3RoP25keEluaXRpYWxpemVyLnNoaWZ0KCk6MDtxbmR4PChpc05hTihxdC5xdWFudGlmaWVyLm1heCk/cW5keCsxOnF0LnF1YW50aWZpZXIubWF4KSYmdGVzdFBvczw9cG9zO3FuZHgrKyl7dmFyIHRva2VuR3JvdXA9bWFza1Rva2VuLm1hdGNoZXNbbWFza1Rva2VuLm1hdGNoZXMuaW5kZXhPZihxdCktMV07aWYobWF0Y2g9aGFuZGxlTWF0Y2godG9rZW5Hcm91cCxbcW5keF0uY29uY2F0KGxvb3BOZHgpLHRva2VuR3JvdXApLG1hdGNoKXtpZihsYXRlc3RNYXRjaD1tYXRjaGVzW21hdGNoZXMubGVuZ3RoLTFdLm1hdGNoLGxhdGVzdE1hdGNoLm9wdGlvbmFsUXVhbnRpZmllcj1xbmR4Pj1xdC5xdWFudGlmaWVyLm1pbixsYXRlc3RNYXRjaC5qaXQ9KHFuZHh8fDEpKnRva2VuR3JvdXAubWF0Y2hlcy5pbmRleE9mKGxhdGVzdE1hdGNoKT49cXQucXVhbnRpZmllci5qaXQsbGF0ZXN0TWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyJiZpc0ZpcnN0TWF0Y2gobGF0ZXN0TWF0Y2gsdG9rZW5Hcm91cCkpe2luc2VydFN0b3A9ITAsdGVzdFBvcz1wb3M7YnJlYWt9cmV0dXJuIGxhdGVzdE1hdGNoLmppdCYmKG1hc2tzZXQuaml0T2Zmc2V0W3Bvc109dG9rZW5Hcm91cC5tYXRjaGVzLmxlbmd0aC10b2tlbkdyb3VwLm1hdGNoZXMuaW5kZXhPZihsYXRlc3RNYXRjaCkpLCEwfX1lbHNlIGlmKG1hdGNoPXJlc29sdmVUZXN0RnJvbVRva2VuKG1hdGNoLG5keEluaXRpYWxpemVyLGxvb3BOZHgscXVhbnRpZmllclJlY3Vyc2UpLG1hdGNoKXJldHVybiEwfWVsc2UgdGVzdFBvcysrfWZvcih2YXIgdG5keD0wPG5keEluaXRpYWxpemVyLmxlbmd0aD9uZHhJbml0aWFsaXplci5zaGlmdCgpOjA7dG5keDxtYXNrVG9rZW4ubWF0Y2hlcy5sZW5ndGg7dG5keCsrKWlmKCEwIT09bWFza1Rva2VuLm1hdGNoZXNbdG5keF0uaXNRdWFudGlmaWVyKXt2YXIgbWF0Y2g9aGFuZGxlTWF0Y2gobWFza1Rva2VuLm1hdGNoZXNbdG5keF0sW3RuZHhdLmNvbmNhdChsb29wTmR4KSxxdWFudGlmaWVyUmVjdXJzZSk7aWYobWF0Y2gmJnRlc3RQb3M9PT1wb3MpcmV0dXJuIG1hdGNoO2lmKHBvczx0ZXN0UG9zKWJyZWFrfX1mdW5jdGlvbiBtZXJnZUxvY2F0b3JzKHBvcyx0ZXN0cyl7dmFyIGxvY2F0b3I9W10sYWx0ZXJuYXRpb247cmV0dXJuIEFycmF5LmlzQXJyYXkodGVzdHMpfHwodGVzdHM9W3Rlc3RzXSksMDx0ZXN0cy5sZW5ndGgmJih2b2lkIDA9PT10ZXN0c1swXS5hbHRlcm5hdGlvbnx8ITA9PT1vcHRzLmtlZXBTdGF0aWM/KGxvY2F0b3I9ZGV0ZXJtaW5lVGVzdFRlbXBsYXRlLmNhbGwoaW5wdXRtYXNrLHBvcyx0ZXN0cy5zbGljZSgpKS5sb2NhdG9yLnNsaWNlKCksMD09PWxvY2F0b3IubGVuZ3RoJiYobG9jYXRvcj10ZXN0c1swXS5sb2NhdG9yLnNsaWNlKCkpKTp0ZXN0cy5mb3JFYWNoKGZ1bmN0aW9uKHRzdCl7XCJcIiE9PXRzdC5kZWYmJigwPT09bG9jYXRvci5sZW5ndGg/KGFsdGVybmF0aW9uPXRzdC5hbHRlcm5hdGlvbixsb2NhdG9yPXRzdC5sb2NhdG9yLnNsaWNlKCkpOnRzdC5sb2NhdG9yW2FsdGVybmF0aW9uXSYmLTE9PT1sb2NhdG9yW2FsdGVybmF0aW9uXS50b1N0cmluZygpLmluZGV4T2YodHN0LmxvY2F0b3JbYWx0ZXJuYXRpb25dKSYmKGxvY2F0b3JbYWx0ZXJuYXRpb25dKz1cIixcIit0c3QubG9jYXRvclthbHRlcm5hdGlvbl0pKX0pKSxsb2NhdG9yfWlmKC0xPHBvcyYmKHZvaWQgMD09PWlucHV0bWFzay5tYXhMZW5ndGh8fHBvczxpbnB1dG1hc2subWF4TGVuZ3RoKSl7aWYodm9pZCAwPT09bmR4SW50bHpyKXtmb3IodmFyIHByZXZpb3VzUG9zPXBvcy0xLHRlc3Q7dm9pZCAwPT09KHRlc3Q9bWFza3NldC52YWxpZFBvc2l0aW9uc1twcmV2aW91c1Bvc118fG1hc2tzZXQudGVzdHNbcHJldmlvdXNQb3NdKSYmLTE8cHJldmlvdXNQb3M7KXByZXZpb3VzUG9zLS07dm9pZCAwIT09dGVzdCYmLTE8cHJldmlvdXNQb3MmJihuZHhJbml0aWFsaXplcj1tZXJnZUxvY2F0b3JzKHByZXZpb3VzUG9zLHRlc3QpLGNhY2hlRGVwZW5kZW5jeT1uZHhJbml0aWFsaXplci5qb2luKFwiXCIpLHRlc3RQb3M9cHJldmlvdXNQb3MpfWlmKG1hc2tzZXQudGVzdHNbcG9zXSYmbWFza3NldC50ZXN0c1twb3NdWzBdLmNkPT09Y2FjaGVEZXBlbmRlbmN5KXJldHVybiBtYXNrc2V0LnRlc3RzW3Bvc107Zm9yKHZhciBtdG5keD1uZHhJbml0aWFsaXplci5zaGlmdCgpO210bmR4PG1hc2tUb2tlbnMubGVuZ3RoO210bmR4Kyspe3ZhciBtYXRjaD1yZXNvbHZlVGVzdEZyb21Ub2tlbihtYXNrVG9rZW5zW210bmR4XSxuZHhJbml0aWFsaXplcixbbXRuZHhdKTtpZihtYXRjaCYmdGVzdFBvcz09PXBvc3x8cG9zPHRlc3RQb3MpYnJlYWt9fXJldHVybiAwIT09bWF0Y2hlcy5sZW5ndGgmJiFpbnNlcnRTdG9wfHxtYXRjaGVzLnB1c2goe21hdGNoOntmbjpudWxsLHN0YXRpYzohMCxvcHRpb25hbGl0eTohMSxjYXNpbmc6bnVsbCxkZWY6XCJcIixwbGFjZWhvbGRlcjpcIlwifSxsb2NhdG9yOltdLG1sb2M6e30sY2Q6Y2FjaGVEZXBlbmRlbmN5fSksdm9pZCAwIT09bmR4SW50bHpyJiZtYXNrc2V0LnRlc3RzW3Bvc10/JC5leHRlbmQoITAsW10sbWF0Y2hlcyk6KG1hc2tzZXQudGVzdHNbcG9zXT0kLmV4dGVuZCghMCxbXSxtYXRjaGVzKSxtYXNrc2V0LnRlc3RzW3Bvc10pfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGV4cG9ydHMuZGV0ZXJtaW5lVGVzdFRlbXBsYXRlPWRldGVybWluZVRlc3RUZW1wbGF0ZSxleHBvcnRzLmdldERlY2lzaW9uVGFrZXI9Z2V0RGVjaXNpb25UYWtlcixleHBvcnRzLmdldE1hc2tUZW1wbGF0ZT1nZXRNYXNrVGVtcGxhdGUsZXhwb3J0cy5nZXRQbGFjZWhvbGRlcj1nZXRQbGFjZWhvbGRlcixleHBvcnRzLmdldFRlc3Q9Z2V0VGVzdCxleHBvcnRzLmdldFRlc3RzPWdldFRlc3RzLGV4cG9ydHMuZ2V0VGVzdFRlbXBsYXRlPWdldFRlc3RUZW1wbGF0ZX0sZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZXhwb3J0cy5hbHRlcm5hdGU9YWx0ZXJuYXRlLGV4cG9ydHMuY2hlY2tBbHRlcm5hdGlvbk1hdGNoPWNoZWNrQWx0ZXJuYXRpb25NYXRjaCxleHBvcnRzLmlzQ29tcGxldGU9aXNDb21wbGV0ZSxleHBvcnRzLmlzVmFsaWQ9aXNWYWxpZCxleHBvcnRzLnJlZnJlc2hGcm9tQnVmZmVyPXJlZnJlc2hGcm9tQnVmZmVyLGV4cG9ydHMucmV2YWxpZGF0ZU1hc2s9cmV2YWxpZGF0ZU1hc2ssZXhwb3J0cy5oYW5kbGVSZW1vdmU9aGFuZGxlUmVtb3ZlO3ZhciBfdmFsaWRhdGlvblRlc3RzPV9fd2VicGFja19yZXF1aXJlX18oMyksX2tleWNvZGU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKSxfcG9zaXRpb25pbmc9X193ZWJwYWNrX3JlcXVpcmVfXygxKSxfZXZlbnRoYW5kbGVycz1fX3dlYnBhY2tfcmVxdWlyZV9fKDcpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e2RlZmF1bHQ6b2JqfX1mdW5jdGlvbiBhbHRlcm5hdGUobWFza1BvcyxjLHN0cmljdCxmcm9tSXNWYWxpZCxyQWx0UG9zLHNlbGVjdGlvbil7dmFyIGlucHV0bWFzaz10aGlzLCQ9dGhpcy5kZXBlbmRlbmN5TGliLG9wdHM9dGhpcy5vcHRzLG1hc2tzZXQ9dGhpcy5tYXNrc2V0LHZhbGlkUHNDbG9uZT0kLmV4dGVuZCghMCx7fSxtYXNrc2V0LnZhbGlkUG9zaXRpb25zKSx0c3RDbG9uZT0kLmV4dGVuZCghMCx7fSxtYXNrc2V0LnRlc3RzKSxsYXN0QWx0LGFsdGVybmF0aW9uLGlzVmFsaWRSc2x0PSExLHJldHVyblJzbHQ9ITEsYWx0UG9zLHByZXZBbHRQb3MsaSx2YWxpZFBvcyxkZWNpc2lvblBvcyxsQWx0UG9zPXZvaWQgMCE9PXJBbHRQb3M/ckFsdFBvczpfcG9zaXRpb25pbmcuZ2V0TGFzdFZhbGlkUG9zaXRpb24uY2FsbCh0aGlzKSxuZXh0UG9zLGlucHV0LGJlZ2luLGVuZDtpZihzZWxlY3Rpb24mJihiZWdpbj1zZWxlY3Rpb24uYmVnaW4sZW5kPXNlbGVjdGlvbi5lbmQsc2VsZWN0aW9uLmJlZ2luPnNlbGVjdGlvbi5lbmQmJihiZWdpbj1zZWxlY3Rpb24uZW5kLGVuZD1zZWxlY3Rpb24uYmVnaW4pKSwtMT09PWxBbHRQb3MmJnZvaWQgMD09PXJBbHRQb3MpbGFzdEFsdD0wLHByZXZBbHRQb3M9X3ZhbGlkYXRpb25UZXN0cy5nZXRUZXN0LmNhbGwodGhpcyxsYXN0QWx0KSxhbHRlcm5hdGlvbj1wcmV2QWx0UG9zLmFsdGVybmF0aW9uO2Vsc2UgZm9yKDswPD1sQWx0UG9zO2xBbHRQb3MtLSlpZihhbHRQb3M9bWFza3NldC52YWxpZFBvc2l0aW9uc1tsQWx0UG9zXSxhbHRQb3MmJnZvaWQgMCE9PWFsdFBvcy5hbHRlcm5hdGlvbil7aWYocHJldkFsdFBvcyYmcHJldkFsdFBvcy5sb2NhdG9yW2FsdFBvcy5hbHRlcm5hdGlvbl0hPT1hbHRQb3MubG9jYXRvclthbHRQb3MuYWx0ZXJuYXRpb25dKWJyZWFrO2xhc3RBbHQ9bEFsdFBvcyxhbHRlcm5hdGlvbj1tYXNrc2V0LnZhbGlkUG9zaXRpb25zW2xhc3RBbHRdLmFsdGVybmF0aW9uLHByZXZBbHRQb3M9YWx0UG9zfWlmKHZvaWQgMCE9PWFsdGVybmF0aW9uKXtkZWNpc2lvblBvcz1wYXJzZUludChsYXN0QWx0KSxtYXNrc2V0LmV4Y2x1ZGVzW2RlY2lzaW9uUG9zXT1tYXNrc2V0LmV4Y2x1ZGVzW2RlY2lzaW9uUG9zXXx8W10sITAhPT1tYXNrUG9zJiZtYXNrc2V0LmV4Y2x1ZGVzW2RlY2lzaW9uUG9zXS5wdXNoKCgwLF92YWxpZGF0aW9uVGVzdHMuZ2V0RGVjaXNpb25UYWtlcikocHJldkFsdFBvcykrXCI6XCIrcHJldkFsdFBvcy5hbHRlcm5hdGlvbik7dmFyIHZhbGlkSW5wdXRzPVtdLHJlc3VsdFBvcz0tMTtmb3IoaT1kZWNpc2lvblBvcztpPF9wb3NpdGlvbmluZy5nZXRMYXN0VmFsaWRQb3NpdGlvbi5jYWxsKHRoaXMsdm9pZCAwLCEwKSsxO2krKyktMT09PXJlc3VsdFBvcyYmbWFza1Bvczw9aSYmdm9pZCAwIT09YyYmKHZhbGlkSW5wdXRzLnB1c2goYykscmVzdWx0UG9zPXZhbGlkSW5wdXRzLmxlbmd0aC0xKSx2YWxpZFBvcz1tYXNrc2V0LnZhbGlkUG9zaXRpb25zW2ldLHZhbGlkUG9zJiYhMCE9PXZhbGlkUG9zLmdlbmVyYXRlZElucHV0JiYodm9pZCAwPT09c2VsZWN0aW9ufHxpPGJlZ2lufHxlbmQ8PWkpJiZ2YWxpZElucHV0cy5wdXNoKHZhbGlkUG9zLmlucHV0KSxkZWxldGUgbWFza3NldC52YWxpZFBvc2l0aW9uc1tpXTtmb3IoLTE9PT1yZXN1bHRQb3MmJnZvaWQgMCE9PWMmJih2YWxpZElucHV0cy5wdXNoKGMpLHJlc3VsdFBvcz12YWxpZElucHV0cy5sZW5ndGgtMSk7dm9pZCAwIT09bWFza3NldC5leGNsdWRlc1tkZWNpc2lvblBvc10mJm1hc2tzZXQuZXhjbHVkZXNbZGVjaXNpb25Qb3NdLmxlbmd0aDwxMDspe2ZvcihtYXNrc2V0LnRlc3RzPXt9LF9wb3NpdGlvbmluZy5yZXNldE1hc2tTZXQuY2FsbCh0aGlzLCEwKSxpc1ZhbGlkUnNsdD0hMCxpPTA7aTx2YWxpZElucHV0cy5sZW5ndGgmJihuZXh0UG9zPWlzVmFsaWRSc2x0LmNhcmV0fHxfcG9zaXRpb25pbmcuZ2V0TGFzdFZhbGlkUG9zaXRpb24uY2FsbCh0aGlzLHZvaWQgMCwhMCkrMSxpbnB1dD12YWxpZElucHV0c1tpXSxpc1ZhbGlkUnNsdD1pc1ZhbGlkLmNhbGwodGhpcyxuZXh0UG9zLGlucHV0LCExLGZyb21Jc1ZhbGlkLCEwKSk7aSsrKWk9PT1yZXN1bHRQb3MmJihyZXR1cm5Sc2x0PWlzVmFsaWRSc2x0KSwxPT1tYXNrUG9zJiZpc1ZhbGlkUnNsdCYmKHJldHVyblJzbHQ9e2NhcmV0UG9zOml9KTtpZihpc1ZhbGlkUnNsdClicmVhaztpZihfcG9zaXRpb25pbmcucmVzZXRNYXNrU2V0LmNhbGwodGhpcykscHJldkFsdFBvcz1fdmFsaWRhdGlvblRlc3RzLmdldFRlc3QuY2FsbCh0aGlzLGRlY2lzaW9uUG9zKSxtYXNrc2V0LnZhbGlkUG9zaXRpb25zPSQuZXh0ZW5kKCEwLHt9LHZhbGlkUHNDbG9uZSksbWFza3NldC50ZXN0cz0kLmV4dGVuZCghMCx7fSx0c3RDbG9uZSksIW1hc2tzZXQuZXhjbHVkZXNbZGVjaXNpb25Qb3NdKXtyZXR1cm5Sc2x0PWFsdGVybmF0ZS5jYWxsKHRoaXMsbWFza1BvcyxjLHN0cmljdCxmcm9tSXNWYWxpZCxkZWNpc2lvblBvcy0xLHNlbGVjdGlvbik7YnJlYWt9dmFyIGRlY2lzaW9uVGFrZXI9KDAsX3ZhbGlkYXRpb25UZXN0cy5nZXREZWNpc2lvblRha2VyKShwcmV2QWx0UG9zKTtpZigtMSE9PW1hc2tzZXQuZXhjbHVkZXNbZGVjaXNpb25Qb3NdLmluZGV4T2YoZGVjaXNpb25UYWtlcitcIjpcIitwcmV2QWx0UG9zLmFsdGVybmF0aW9uKSl7cmV0dXJuUnNsdD1hbHRlcm5hdGUuY2FsbCh0aGlzLG1hc2tQb3MsYyxzdHJpY3QsZnJvbUlzVmFsaWQsZGVjaXNpb25Qb3MtMSxzZWxlY3Rpb24pO2JyZWFrfWZvcihtYXNrc2V0LmV4Y2x1ZGVzW2RlY2lzaW9uUG9zXS5wdXNoKGRlY2lzaW9uVGFrZXIrXCI6XCIrcHJldkFsdFBvcy5hbHRlcm5hdGlvbiksaT1kZWNpc2lvblBvcztpPF9wb3NpdGlvbmluZy5nZXRMYXN0VmFsaWRQb3NpdGlvbi5jYWxsKHRoaXMsdm9pZCAwLCEwKSsxO2krKylkZWxldGUgbWFza3NldC52YWxpZFBvc2l0aW9uc1tpXX19cmV0dXJuIHJldHVyblJzbHQmJiExPT09b3B0cy5rZWVwU3RhdGljfHxkZWxldGUgbWFza3NldC5leGNsdWRlc1tkZWNpc2lvblBvc10scmV0dXJuUnNsdH1mdW5jdGlvbiBjYXNpbmcoZWxlbSx0ZXN0LHBvcyl7dmFyIG9wdHM9dGhpcy5vcHRzLG1hc2tzZXQ9dGhpcy5tYXNrc2V0O3N3aXRjaChvcHRzLmNhc2luZ3x8dGVzdC5jYXNpbmcpe2Nhc2VcInVwcGVyXCI6ZWxlbT1lbGVtLnRvVXBwZXJDYXNlKCk7YnJlYWs7Y2FzZVwibG93ZXJcIjplbGVtPWVsZW0udG9Mb3dlckNhc2UoKTticmVhaztjYXNlXCJ0aXRsZVwiOnZhciBwb3NCZWZvcmU9bWFza3NldC52YWxpZFBvc2l0aW9uc1twb3MtMV07ZWxlbT0wPT09cG9zfHxwb3NCZWZvcmUmJnBvc0JlZm9yZS5pbnB1dD09PVN0cmluZy5mcm9tQ2hhckNvZGUoX2tleWNvZGUuZGVmYXVsdC5TUEFDRSk/ZWxlbS50b1VwcGVyQ2FzZSgpOmVsZW0udG9Mb3dlckNhc2UoKTticmVhaztkZWZhdWx0OmlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG9wdHMuY2FzaW5nKXt2YXIgYXJncz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO2FyZ3MucHVzaChtYXNrc2V0LnZhbGlkUG9zaXRpb25zKSxlbGVtPW9wdHMuY2FzaW5nLmFwcGx5KHRoaXMsYXJncyl9fXJldHVybiBlbGVtfWZ1bmN0aW9uIGNoZWNrQWx0ZXJuYXRpb25NYXRjaChhbHRBcnIxLGFsdEFycjIsbmEpe2Zvcih2YXIgb3B0cz10aGlzLm9wdHMsYWx0QXJyQz1vcHRzLmdyZWVkeT9hbHRBcnIyOmFsdEFycjIuc2xpY2UoMCwxKSxpc01hdGNoPSExLG5hQXJyPXZvaWQgMCE9PW5hP25hLnNwbGl0KFwiLFwiKTpbXSxuYU5keCxpPTA7aTxuYUFyci5sZW5ndGg7aSsrKS0xIT09KG5hTmR4PWFsdEFycjEuaW5kZXhPZihuYUFycltpXSkpJiZhbHRBcnIxLnNwbGljZShuYU5keCwxKTtmb3IodmFyIGFsbmR4PTA7YWxuZHg8YWx0QXJyMS5sZW5ndGg7YWxuZHgrKylpZihhbHRBcnJDLmluY2x1ZGVzKGFsdEFycjFbYWxuZHhdKSl7aXNNYXRjaD0hMDticmVha31yZXR1cm4gaXNNYXRjaH1mdW5jdGlvbiBoYW5kbGVSZW1vdmUoaW5wdXQsayxwb3Msc3RyaWN0LGZyb21Jc1ZhbGlkKXt2YXIgaW5wdXRtYXNrPXRoaXMsbWFza3NldD10aGlzLm1hc2tzZXQsb3B0cz10aGlzLm9wdHM7aWYoKG9wdHMubnVtZXJpY0lucHV0fHx0aGlzLmlzUlRMKSYmKGs9PT1fa2V5Y29kZS5kZWZhdWx0LkJBQ0tTUEFDRT9rPV9rZXljb2RlLmRlZmF1bHQuREVMRVRFOms9PT1fa2V5Y29kZS5kZWZhdWx0LkRFTEVURSYmKGs9X2tleWNvZGUuZGVmYXVsdC5CQUNLU1BBQ0UpLHRoaXMuaXNSVEwpKXt2YXIgcGVuZD1wb3MuZW5kO3Bvcy5lbmQ9cG9zLmJlZ2luLHBvcy5iZWdpbj1wZW5kfXZhciBsdnA9X3Bvc2l0aW9uaW5nLmdldExhc3RWYWxpZFBvc2l0aW9uLmNhbGwodGhpcyx2b2lkIDAsITApLG9mZnNldDtpZihwb3MuZW5kPj1fcG9zaXRpb25pbmcuZ2V0QnVmZmVyLmNhbGwodGhpcykubGVuZ3RoJiZsdnA+PXBvcy5lbmQmJihwb3MuZW5kPWx2cCsxKSxrPT09X2tleWNvZGUuZGVmYXVsdC5CQUNLU1BBQ0U/cG9zLmVuZC1wb3MuYmVnaW48MSYmKHBvcy5iZWdpbj1fcG9zaXRpb25pbmcuc2Vla1ByZXZpb3VzLmNhbGwodGhpcyxwb3MuYmVnaW4pKTprPT09X2tleWNvZGUuZGVmYXVsdC5ERUxFVEUmJnBvcy5iZWdpbj09PXBvcy5lbmQmJihwb3MuZW5kPV9wb3NpdGlvbmluZy5pc01hc2suY2FsbCh0aGlzLHBvcy5lbmQsITAsITApP3Bvcy5lbmQrMTpfcG9zaXRpb25pbmcuc2Vla05leHQuY2FsbCh0aGlzLHBvcy5lbmQpKzEpLCExIT09KG9mZnNldD1yZXZhbGlkYXRlTWFzay5jYWxsKHRoaXMscG9zKSkpe2lmKCEwIT09c3RyaWN0JiYhMSE9PW9wdHMua2VlcFN0YXRpY3x8bnVsbCE9PW9wdHMucmVnZXgmJi0xIT09X3ZhbGlkYXRpb25UZXN0cy5nZXRUZXN0LmNhbGwodGhpcyxwb3MuYmVnaW4pLm1hdGNoLmRlZi5pbmRleE9mKFwifFwiKSl7dmFyIHJlc3VsdD1hbHRlcm5hdGUuY2FsbCh0aGlzLCEwKTtpZihyZXN1bHQpe3ZhciBuZXdQb3M9dm9pZCAwIT09cmVzdWx0LmNhcmV0P3Jlc3VsdC5jYXJldDpyZXN1bHQucG9zP19wb3NpdGlvbmluZy5zZWVrTmV4dC5jYWxsKHRoaXMscmVzdWx0LnBvcy5iZWdpbj9yZXN1bHQucG9zLmJlZ2luOnJlc3VsdC5wb3MpOl9wb3NpdGlvbmluZy5nZXRMYXN0VmFsaWRQb3NpdGlvbi5jYWxsKHRoaXMsLTEsITApOyhrIT09X2tleWNvZGUuZGVmYXVsdC5ERUxFVEV8fHBvcy5iZWdpbj5uZXdQb3MpJiZwb3MuYmVnaW59fSEwIT09c3RyaWN0JiYobWFza3NldC5wPWs9PT1fa2V5Y29kZS5kZWZhdWx0LkRFTEVURT9wb3MuYmVnaW4rb2Zmc2V0OnBvcy5iZWdpbil9fWZ1bmN0aW9uIGlzQ29tcGxldGUoYnVmZmVyKXt2YXIgaW5wdXRtYXNrPXRoaXMsb3B0cz10aGlzLm9wdHMsbWFza3NldD10aGlzLm1hc2tzZXQ7aWYoXCJmdW5jdGlvblwiPT10eXBlb2Ygb3B0cy5pc0NvbXBsZXRlKXJldHVybiBvcHRzLmlzQ29tcGxldGUoYnVmZmVyLG9wdHMpO2lmKFwiKlwiIT09b3B0cy5yZXBlYXQpe3ZhciBjb21wbGV0ZT0hMSxscnA9X3Bvc2l0aW9uaW5nLmRldGVybWluZUxhc3RSZXF1aXJlZFBvc2l0aW9uLmNhbGwodGhpcywhMCksYW1sPV9wb3NpdGlvbmluZy5zZWVrUHJldmlvdXMuY2FsbCh0aGlzLGxycC5sKTtpZih2b2lkIDA9PT1scnAuZGVmfHxscnAuZGVmLm5ld0Jsb2NrTWFya2VyfHxscnAuZGVmLm9wdGlvbmFsaXR5fHxscnAuZGVmLm9wdGlvbmFsUXVhbnRpZmllcil7Y29tcGxldGU9ITA7Zm9yKHZhciBpPTA7aTw9YW1sO2krKyl7dmFyIHRlc3Q9X3ZhbGlkYXRpb25UZXN0cy5nZXRUZXN0VGVtcGxhdGUuY2FsbCh0aGlzLGkpLm1hdGNoO2lmKCEwIT09dGVzdC5zdGF0aWMmJnZvaWQgMD09PW1hc2tzZXQudmFsaWRQb3NpdGlvbnNbaV0mJiEwIT09dGVzdC5vcHRpb25hbGl0eSYmITAhPT10ZXN0Lm9wdGlvbmFsUXVhbnRpZmllcnx8ITA9PT10ZXN0LnN0YXRpYyYmYnVmZmVyW2ldIT09X3ZhbGlkYXRpb25UZXN0cy5nZXRQbGFjZWhvbGRlci5jYWxsKHRoaXMsaSx0ZXN0KSl7Y29tcGxldGU9ITE7YnJlYWt9fX1yZXR1cm4gY29tcGxldGV9fWZ1bmN0aW9uIGlzVmFsaWQocG9zLGMsc3RyaWN0LGZyb21Jc1ZhbGlkLGZyb21BbHRlcm5hdGUsdmFsaWRhdGVPbmx5LGZyb21DaGVja3ZhbCl7dmFyIGlucHV0bWFzaz10aGlzLCQ9dGhpcy5kZXBlbmRlbmN5TGliLG9wdHM9dGhpcy5vcHRzLGVsPWlucHV0bWFzay5lbCxtYXNrc2V0PWlucHV0bWFzay5tYXNrc2V0O2Z1bmN0aW9uIGlzU2VsZWN0aW9uKHBvc09iail7cmV0dXJuIGlucHV0bWFzay5pc1JUTD8xPHBvc09iai5iZWdpbi1wb3NPYmouZW5kfHxwb3NPYmouYmVnaW4tcG9zT2JqLmVuZD09MToxPHBvc09iai5lbmQtcG9zT2JqLmJlZ2lufHxwb3NPYmouZW5kLXBvc09iai5iZWdpbj09MX1zdHJpY3Q9ITA9PT1zdHJpY3Q7dmFyIG1hc2tQb3M9cG9zO2Z1bmN0aW9uIHByb2Nlc3NDb21tYW5kT2JqZWN0KGNvbW1hbmRPYmope2lmKHZvaWQgMCE9PWNvbW1hbmRPYmope2lmKHZvaWQgMCE9PWNvbW1hbmRPYmoucmVtb3ZlJiYoQXJyYXkuaXNBcnJheShjb21tYW5kT2JqLnJlbW92ZSl8fChjb21tYW5kT2JqLnJlbW92ZT1bY29tbWFuZE9iai5yZW1vdmVdKSxjb21tYW5kT2JqLnJlbW92ZS5zb3J0KGZ1bmN0aW9uKGEsYil7cmV0dXJuIGIucG9zLWEucG9zfSkuZm9yRWFjaChmdW5jdGlvbihsbW50KXtyZXZhbGlkYXRlTWFzay5jYWxsKGlucHV0bWFzayx7YmVnaW46bG1udCxlbmQ6bG1udCsxfSl9KSxjb21tYW5kT2JqLnJlbW92ZT12b2lkIDApLHZvaWQgMCE9PWNvbW1hbmRPYmouaW5zZXJ0JiYoQXJyYXkuaXNBcnJheShjb21tYW5kT2JqLmluc2VydCl8fChjb21tYW5kT2JqLmluc2VydD1bY29tbWFuZE9iai5pbnNlcnRdKSxjb21tYW5kT2JqLmluc2VydC5zb3J0KGZ1bmN0aW9uKGEsYil7cmV0dXJuIGEucG9zLWIucG9zfSkuZm9yRWFjaChmdW5jdGlvbihsbW50KXtcIlwiIT09bG1udC5jJiZpc1ZhbGlkLmNhbGwoaW5wdXRtYXNrLGxtbnQucG9zLGxtbnQuYyx2b2lkIDA9PT1sbW50LnN0cmljdHx8bG1udC5zdHJpY3Qsdm9pZCAwIT09bG1udC5mcm9tSXNWYWxpZD9sbW50LmZyb21Jc1ZhbGlkOmZyb21Jc1ZhbGlkKX0pLGNvbW1hbmRPYmouaW5zZXJ0PXZvaWQgMCksY29tbWFuZE9iai5yZWZyZXNoRnJvbUJ1ZmZlciYmY29tbWFuZE9iai5idWZmZXIpe3ZhciByZWZyZXNoPWNvbW1hbmRPYmoucmVmcmVzaEZyb21CdWZmZXI7cmVmcmVzaEZyb21CdWZmZXIuY2FsbChpbnB1dG1hc2ssITA9PT1yZWZyZXNoP3JlZnJlc2g6cmVmcmVzaC5zdGFydCxyZWZyZXNoLmVuZCxjb21tYW5kT2JqLmJ1ZmZlciksY29tbWFuZE9iai5yZWZyZXNoRnJvbUJ1ZmZlcj12b2lkIDB9dm9pZCAwIT09Y29tbWFuZE9iai5yZXdyaXRlUG9zaXRpb24mJihtYXNrUG9zPWNvbW1hbmRPYmoucmV3cml0ZVBvc2l0aW9uLGNvbW1hbmRPYmo9ITApfXJldHVybiBjb21tYW5kT2JqfWZ1bmN0aW9uIF9pc1ZhbGlkKHBvc2l0aW9uLGMsc3RyaWN0KXt2YXIgcnNsdD0hMTtyZXR1cm4gX3ZhbGlkYXRpb25UZXN0cy5nZXRUZXN0cy5jYWxsKGlucHV0bWFzayxwb3NpdGlvbikuZXZlcnkoZnVuY3Rpb24odHN0LG5keCl7dmFyIHRlc3Q9dHN0Lm1hdGNoO2lmKF9wb3NpdGlvbmluZy5nZXRCdWZmZXIuY2FsbChpbnB1dG1hc2ssITApLHJzbHQ9bnVsbCE9dGVzdC5mbj90ZXN0LmZuLnRlc3QoYyxtYXNrc2V0LHBvc2l0aW9uLHN0cmljdCxvcHRzLGlzU2VsZWN0aW9uKHBvcykpOihjPT09dGVzdC5kZWZ8fGM9PT1vcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIpJiZcIlwiIT09dGVzdC5kZWYmJntjOl92YWxpZGF0aW9uVGVzdHMuZ2V0UGxhY2Vob2xkZXIuY2FsbChpbnB1dG1hc2sscG9zaXRpb24sdGVzdCwhMCl8fHRlc3QuZGVmLHBvczpwb3NpdGlvbn0sITE9PT1yc2x0KXJldHVybiEwO3ZhciBlbGVtPXZvaWQgMCE9PXJzbHQuYz9yc2x0LmM6Yyx2YWxpZGF0ZWRQb3M9cG9zaXRpb247cmV0dXJuIGVsZW09ZWxlbT09PW9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlciYmITA9PT10ZXN0LnN0YXRpYz9fdmFsaWRhdGlvblRlc3RzLmdldFBsYWNlaG9sZGVyLmNhbGwoaW5wdXRtYXNrLHBvc2l0aW9uLHRlc3QsITApfHx0ZXN0LmRlZjplbGVtLHJzbHQ9cHJvY2Vzc0NvbW1hbmRPYmplY3QocnNsdCksITAhPT1yc2x0JiZ2b2lkIDAhPT1yc2x0LnBvcyYmcnNsdC5wb3MhPT1wb3NpdGlvbiYmKHZhbGlkYXRlZFBvcz1yc2x0LnBvcyksITAhPT1yc2x0JiZ2b2lkIDA9PT1yc2x0LnBvcyYmdm9pZCAwPT09cnNsdC5jfHwhMT09PXJldmFsaWRhdGVNYXNrLmNhbGwoaW5wdXRtYXNrLHBvcywkLmV4dGVuZCh7fSx0c3Qse2lucHV0OmNhc2luZy5jYWxsKGlucHV0bWFzayxlbGVtLHRlc3QsdmFsaWRhdGVkUG9zKX0pLGZyb21Jc1ZhbGlkLHZhbGlkYXRlZFBvcykmJihyc2x0PSExKSwhMX0pLHJzbHR9dm9pZCAwIT09cG9zLmJlZ2luJiYobWFza1Bvcz1pbnB1dG1hc2suaXNSVEw/cG9zLmVuZDpwb3MuYmVnaW4pO3ZhciByZXN1bHQ9ITAscG9zaXRpb25zQ2xvbmU9JC5leHRlbmQoITAse30sbWFza3NldC52YWxpZFBvc2l0aW9ucyk7aWYoITE9PT1vcHRzLmtlZXBTdGF0aWMmJnZvaWQgMCE9PW1hc2tzZXQuZXhjbHVkZXNbbWFza1Bvc10mJiEwIT09ZnJvbUFsdGVybmF0ZSYmITAhPT1mcm9tSXNWYWxpZClmb3IodmFyIGk9bWFza1BvcztpPChpbnB1dG1hc2suaXNSVEw/cG9zLmJlZ2luOnBvcy5lbmQpO2krKyl2b2lkIDAhPT1tYXNrc2V0LmV4Y2x1ZGVzW2ldJiYobWFza3NldC5leGNsdWRlc1tpXT12b2lkIDAsZGVsZXRlIG1hc2tzZXQudGVzdHNbaV0pO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG9wdHMucHJlVmFsaWRhdGlvbiYmITAhPT1mcm9tSXNWYWxpZCYmITAhPT12YWxpZGF0ZU9ubHkmJihyZXN1bHQ9b3B0cy5wcmVWYWxpZGF0aW9uLmNhbGwoaW5wdXRtYXNrLF9wb3NpdGlvbmluZy5nZXRCdWZmZXIuY2FsbChpbnB1dG1hc2spLG1hc2tQb3MsYyxpc1NlbGVjdGlvbihwb3MpLG9wdHMsbWFza3NldCxwb3Msc3RyaWN0fHxmcm9tQWx0ZXJuYXRlKSxyZXN1bHQ9cHJvY2Vzc0NvbW1hbmRPYmplY3QocmVzdWx0KSksITA9PT1yZXN1bHQpe2lmKHZvaWQgMD09PWlucHV0bWFzay5tYXhMZW5ndGh8fG1hc2tQb3M8X3Bvc2l0aW9uaW5nLnRyYW5zbGF0ZVBvc2l0aW9uLmNhbGwoaW5wdXRtYXNrLGlucHV0bWFzay5tYXhMZW5ndGgpKXtpZihyZXN1bHQ9X2lzVmFsaWQobWFza1BvcyxjLHN0cmljdCksKCFzdHJpY3R8fCEwPT09ZnJvbUlzVmFsaWQpJiYhMT09PXJlc3VsdCYmITAhPT12YWxpZGF0ZU9ubHkpe3ZhciBjdXJyZW50UG9zVmFsaWQ9bWFza3NldC52YWxpZFBvc2l0aW9uc1ttYXNrUG9zXTtpZighY3VycmVudFBvc1ZhbGlkfHwhMCE9PWN1cnJlbnRQb3NWYWxpZC5tYXRjaC5zdGF0aWN8fGN1cnJlbnRQb3NWYWxpZC5tYXRjaC5kZWYhPT1jJiZjIT09b3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyKXtpZihvcHRzLmluc2VydE1vZGV8fHZvaWQgMD09PW1hc2tzZXQudmFsaWRQb3NpdGlvbnNbX3Bvc2l0aW9uaW5nLnNlZWtOZXh0LmNhbGwoaW5wdXRtYXNrLG1hc2tQb3MpXXx8cG9zLmVuZD5tYXNrUG9zKXt2YXIgc2tpcD0hMTtpZihtYXNrc2V0LmppdE9mZnNldFttYXNrUG9zXSYmdm9pZCAwPT09bWFza3NldC52YWxpZFBvc2l0aW9uc1tfcG9zaXRpb25pbmcuc2Vla05leHQuY2FsbChpbnB1dG1hc2ssbWFza1BvcyldJiYocmVzdWx0PWlzVmFsaWQuY2FsbChpbnB1dG1hc2ssbWFza1BvcyttYXNrc2V0LmppdE9mZnNldFttYXNrUG9zXSxjLCEwKSwhMSE9PXJlc3VsdCYmKCEwIT09ZnJvbUFsdGVybmF0ZSYmKHJlc3VsdC5jYXJldD1tYXNrUG9zKSxza2lwPSEwKSkscG9zLmVuZD5tYXNrUG9zJiYobWFza3NldC52YWxpZFBvc2l0aW9uc1ttYXNrUG9zXT12b2lkIDApLCFza2lwJiYhX3Bvc2l0aW9uaW5nLmlzTWFzay5jYWxsKGlucHV0bWFzayxtYXNrUG9zLG9wdHMua2VlcFN0YXRpYyYmMD09PW1hc2tQb3MpKWZvcih2YXIgblBvcz1tYXNrUG9zKzEsc25Qb3M9X3Bvc2l0aW9uaW5nLnNlZWtOZXh0LmNhbGwoaW5wdXRtYXNrLG1hc2tQb3MsITEsMCE9PW1hc2tQb3MpO25Qb3M8PXNuUG9zO25Qb3MrKylpZihyZXN1bHQ9X2lzVmFsaWQoblBvcyxjLHN0cmljdCksITEhPT1yZXN1bHQpe3Jlc3VsdD10cmFja2JhY2tQb3NpdGlvbnMuY2FsbChpbnB1dG1hc2ssbWFza1Bvcyx2b2lkIDAhPT1yZXN1bHQucG9zP3Jlc3VsdC5wb3M6blBvcyl8fHJlc3VsdCxtYXNrUG9zPW5Qb3M7YnJlYWt9fX1lbHNlIHJlc3VsdD17Y2FyZXQ6X3Bvc2l0aW9uaW5nLnNlZWtOZXh0LmNhbGwoaW5wdXRtYXNrLG1hc2tQb3MpfX19ZWxzZSByZXN1bHQ9ITE7ITEhPT1yZXN1bHR8fCFvcHRzLmtlZXBTdGF0aWN8fCFpc0NvbXBsZXRlLmNhbGwoaW5wdXRtYXNrLF9wb3NpdGlvbmluZy5nZXRCdWZmZXIuY2FsbChpbnB1dG1hc2spKSYmMCE9PW1hc2tQb3N8fHN0cmljdHx8ITA9PT1mcm9tQWx0ZXJuYXRlP2lzU2VsZWN0aW9uKHBvcykmJm1hc2tzZXQudGVzdHNbbWFza1Bvc10mJjE8bWFza3NldC50ZXN0c1ttYXNrUG9zXS5sZW5ndGgmJm9wdHMua2VlcFN0YXRpYyYmIXN0cmljdCYmITAhPT1mcm9tQWx0ZXJuYXRlJiYocmVzdWx0PWFsdGVybmF0ZS5jYWxsKGlucHV0bWFzaywhMCkpOnJlc3VsdD1hbHRlcm5hdGUuY2FsbChpbnB1dG1hc2ssbWFza1BvcyxjLHN0cmljdCxmcm9tSXNWYWxpZCx2b2lkIDAscG9zKSwhMD09PXJlc3VsdCYmKHJlc3VsdD17cG9zOm1hc2tQb3N9KX1pZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBvcHRzLnBvc3RWYWxpZGF0aW9uJiYhMCE9PWZyb21Jc1ZhbGlkJiYhMCE9PXZhbGlkYXRlT25seSl7dmFyIHBvc3RSZXN1bHQ9b3B0cy5wb3N0VmFsaWRhdGlvbi5jYWxsKGlucHV0bWFzayxfcG9zaXRpb25pbmcuZ2V0QnVmZmVyLmNhbGwoaW5wdXRtYXNrLCEwKSx2b2lkIDAhPT1wb3MuYmVnaW4/aW5wdXRtYXNrLmlzUlRMP3Bvcy5lbmQ6cG9zLmJlZ2luOnBvcyxjLHJlc3VsdCxvcHRzLG1hc2tzZXQsc3RyaWN0LGZyb21DaGVja3ZhbCk7dm9pZCAwIT09cG9zdFJlc3VsdCYmKHJlc3VsdD0hMD09PXBvc3RSZXN1bHQ/cmVzdWx0OnBvc3RSZXN1bHQpfXJlc3VsdCYmdm9pZCAwPT09cmVzdWx0LnBvcyYmKHJlc3VsdC5wb3M9bWFza1BvcyksITE9PT1yZXN1bHR8fCEwPT09dmFsaWRhdGVPbmx5PyhfcG9zaXRpb25pbmcucmVzZXRNYXNrU2V0LmNhbGwoaW5wdXRtYXNrLCEwKSxtYXNrc2V0LnZhbGlkUG9zaXRpb25zPSQuZXh0ZW5kKCEwLHt9LHBvc2l0aW9uc0Nsb25lKSk6dHJhY2tiYWNrUG9zaXRpb25zLmNhbGwoaW5wdXRtYXNrLHZvaWQgMCxtYXNrUG9zLCEwKTt2YXIgZW5kUmVzdWx0PXByb2Nlc3NDb21tYW5kT2JqZWN0KHJlc3VsdCk7cmV0dXJuIGVuZFJlc3VsdH1mdW5jdGlvbiBwb3NpdGlvbkNhbk1hdGNoRGVmaW5pdGlvbihwb3MsdGVzdERlZmluaXRpb24sb3B0cyl7Zm9yKHZhciBpbnB1dG1hc2s9dGhpcyxtYXNrc2V0PXRoaXMubWFza3NldCx2YWxpZD0hMSx0ZXN0cz1fdmFsaWRhdGlvblRlc3RzLmdldFRlc3RzLmNhbGwodGhpcyxwb3MpLHRuZHg9MDt0bmR4PHRlc3RzLmxlbmd0aDt0bmR4Kyspe2lmKHRlc3RzW3RuZHhdLm1hdGNoJiYoISh0ZXN0c1t0bmR4XS5tYXRjaC5uYXRpdmVEZWYhPT10ZXN0RGVmaW5pdGlvbi5tYXRjaFtvcHRzLnNoaWZ0UG9zaXRpb25zP1wiZGVmXCI6XCJuYXRpdmVEZWZcIl18fG9wdHMuc2hpZnRQb3NpdGlvbnMmJnRlc3REZWZpbml0aW9uLm1hdGNoLnN0YXRpYyl8fHRlc3RzW3RuZHhdLm1hdGNoLm5hdGl2ZURlZj09PXRlc3REZWZpbml0aW9uLm1hdGNoLm5hdGl2ZURlZikpe3ZhbGlkPSEwO2JyZWFrfWlmKHRlc3RzW3RuZHhdLm1hdGNoJiZ0ZXN0c1t0bmR4XS5tYXRjaC5kZWY9PT10ZXN0RGVmaW5pdGlvbi5tYXRjaC5uYXRpdmVEZWYpe3ZhbGlkPXZvaWQgMDticmVha319cmV0dXJuITE9PT12YWxpZCYmdm9pZCAwIT09bWFza3NldC5qaXRPZmZzZXRbcG9zXSYmKHZhbGlkPXBvc2l0aW9uQ2FuTWF0Y2hEZWZpbml0aW9uLmNhbGwodGhpcyxwb3MrbWFza3NldC5qaXRPZmZzZXRbcG9zXSx0ZXN0RGVmaW5pdGlvbixvcHRzKSksdmFsaWR9ZnVuY3Rpb24gcmVmcmVzaEZyb21CdWZmZXIoc3RhcnQsZW5kLGJ1ZmZlcil7dmFyIGlucHV0bWFzaz10aGlzLG1hc2tzZXQ9dGhpcy5tYXNrc2V0LG9wdHM9dGhpcy5vcHRzLCQ9dGhpcy5kZXBlbmRlbmN5TGliLGVsPXRoaXMuZWwsaSxwLHNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXI9b3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyLGJmZnI9dGhpcy5pc1JUTD9idWZmZXIuc2xpY2UoKS5yZXZlcnNlKCk6YnVmZmVyO2lmKG9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3Rlcj1cIlwiLCEwPT09c3RhcnQpX3Bvc2l0aW9uaW5nLnJlc2V0TWFza1NldC5jYWxsKHRoaXMpLG1hc2tzZXQudGVzdHM9e30sc3RhcnQ9MCxlbmQ9YnVmZmVyLmxlbmd0aCxwPV9wb3NpdGlvbmluZy5kZXRlcm1pbmVOZXdDYXJldFBvc2l0aW9uLmNhbGwodGhpcyx7YmVnaW46MCxlbmQ6MH0sITEpLmJlZ2luO2Vsc2V7Zm9yKGk9c3RhcnQ7aTxlbmQ7aSsrKWRlbGV0ZSBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW2ldO3A9c3RhcnR9dmFyIGtleXByZXNzPW5ldyAkLkV2ZW50KFwia2V5cHJlc3NcIik7Zm9yKGk9c3RhcnQ7aTxlbmQ7aSsrKXtrZXlwcmVzcy53aGljaD1iZmZyW2ldLnRvU3RyaW5nKCkuY2hhckNvZGVBdCgwKSx0aGlzLmlnbm9yYWJsZT0hMTt2YXIgdmFsUmVzdWx0PV9ldmVudGhhbmRsZXJzLkV2ZW50SGFuZGxlcnMua2V5cHJlc3NFdmVudC5jYWxsKGVsLGtleXByZXNzLCEwLCExLCExLHApOyExIT09dmFsUmVzdWx0JiYocD12YWxSZXN1bHQuZm9yd2FyZFBvc2l0aW9uKX1vcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXI9c2tpcE9wdGlvbmFsUGFydENoYXJhY3Rlcn1mdW5jdGlvbiB0cmFja2JhY2tQb3NpdGlvbnMob3JpZ2luYWxQb3MsbmV3UG9zLGZpbGxPbmx5KXt2YXIgaW5wdXRtYXNrPXRoaXMsbWFza3NldD10aGlzLm1hc2tzZXQsJD10aGlzLmRlcGVuZGVuY3lMaWI7aWYodm9pZCAwPT09b3JpZ2luYWxQb3MpZm9yKG9yaWdpbmFsUG9zPW5ld1Bvcy0xOzA8b3JpZ2luYWxQb3MmJiFtYXNrc2V0LnZhbGlkUG9zaXRpb25zW29yaWdpbmFsUG9zXTtvcmlnaW5hbFBvcy0tKTtmb3IodmFyIHBzPW9yaWdpbmFsUG9zO3BzPG5ld1BvcztwcysrKWlmKHZvaWQgMD09PW1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcHNdJiYhX3Bvc2l0aW9uaW5nLmlzTWFzay5jYWxsKHRoaXMscHMsITApKXt2YXIgdnA9MD09cHM/X3ZhbGlkYXRpb25UZXN0cy5nZXRUZXN0LmNhbGwodGhpcyxwcyk6bWFza3NldC52YWxpZFBvc2l0aW9uc1twcy0xXTtpZih2cCl7dmFyIHRlc3RzPV92YWxpZGF0aW9uVGVzdHMuZ2V0VGVzdHMuY2FsbCh0aGlzLHBzKS5zbGljZSgpO1wiXCI9PT10ZXN0c1t0ZXN0cy5sZW5ndGgtMV0ubWF0Y2guZGVmJiZ0ZXN0cy5wb3AoKTt2YXIgYmVzdE1hdGNoPV92YWxpZGF0aW9uVGVzdHMuZGV0ZXJtaW5lVGVzdFRlbXBsYXRlLmNhbGwodGhpcyxwcyx0ZXN0cyksbnA7aWYoYmVzdE1hdGNoJiYoITAhPT1iZXN0TWF0Y2gubWF0Y2guaml0fHxcIm1hc3RlclwiPT09YmVzdE1hdGNoLm1hdGNoLm5ld0Jsb2NrTWFya2VyJiYobnA9bWFza3NldC52YWxpZFBvc2l0aW9uc1twcysxXSkmJiEwPT09bnAubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyKSYmKGJlc3RNYXRjaD0kLmV4dGVuZCh7fSxiZXN0TWF0Y2gse2lucHV0Ol92YWxpZGF0aW9uVGVzdHMuZ2V0UGxhY2Vob2xkZXIuY2FsbCh0aGlzLHBzLGJlc3RNYXRjaC5tYXRjaCwhMCl8fGJlc3RNYXRjaC5tYXRjaC5kZWZ9KSxiZXN0TWF0Y2guZ2VuZXJhdGVkSW5wdXQ9ITAscmV2YWxpZGF0ZU1hc2suY2FsbCh0aGlzLHBzLGJlc3RNYXRjaCwhMCksITAhPT1maWxsT25seSkpe3ZhciBjdnBJbnB1dD1tYXNrc2V0LnZhbGlkUG9zaXRpb25zW25ld1Bvc10uaW5wdXQ7cmV0dXJuIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbbmV3UG9zXT12b2lkIDAsaXNWYWxpZC5jYWxsKHRoaXMsbmV3UG9zLGN2cElucHV0LCEwLCEwKX19fX1mdW5jdGlvbiByZXZhbGlkYXRlTWFzayhwb3MsdmFsaWRUZXN0LGZyb21Jc1ZhbGlkLHZhbGlkYXRlZFBvcyl7dmFyIGlucHV0bWFzaz10aGlzLG1hc2tzZXQ9dGhpcy5tYXNrc2V0LG9wdHM9dGhpcy5vcHRzLCQ9dGhpcy5kZXBlbmRlbmN5TGliO2Z1bmN0aW9uIElzRW5jbG9zZWRTdGF0aWMocG9zLHZhbGlkcyxzZWxlY3Rpb24pe3ZhciBwb3NNYXRjaD12YWxpZHNbcG9zXTtpZih2b2lkIDA9PT1wb3NNYXRjaHx8ITAhPT1wb3NNYXRjaC5tYXRjaC5zdGF0aWN8fCEwPT09cG9zTWF0Y2gubWF0Y2gub3B0aW9uYWxpdHl8fHZvaWQgMCE9PXZhbGlkc1swXSYmdm9pZCAwIT09dmFsaWRzWzBdLmFsdGVybmF0aW9uKXJldHVybiExO3ZhciBwcmV2TWF0Y2g9c2VsZWN0aW9uLmJlZ2luPD1wb3MtMT92YWxpZHNbcG9zLTFdJiYhMD09PXZhbGlkc1twb3MtMV0ubWF0Y2guc3RhdGljJiZ2YWxpZHNbcG9zLTFdOnZhbGlkc1twb3MtMV0sbmV4dE1hdGNoPXNlbGVjdGlvbi5lbmQ+cG9zKzE/dmFsaWRzW3BvcysxXSYmITA9PT12YWxpZHNbcG9zKzFdLm1hdGNoLnN0YXRpYyYmdmFsaWRzW3BvcysxXTp2YWxpZHNbcG9zKzFdO3JldHVybiBwcmV2TWF0Y2gmJm5leHRNYXRjaH12YXIgb2Zmc2V0PTAsYmVnaW49dm9pZCAwIT09cG9zLmJlZ2luP3Bvcy5iZWdpbjpwb3MsZW5kPXZvaWQgMCE9PXBvcy5lbmQ/cG9zLmVuZDpwb3M7aWYocG9zLmJlZ2luPnBvcy5lbmQmJihiZWdpbj1wb3MuZW5kLGVuZD1wb3MuYmVnaW4pLHZhbGlkYXRlZFBvcz12b2lkIDAhPT12YWxpZGF0ZWRQb3M/dmFsaWRhdGVkUG9zOmJlZ2luLGJlZ2luIT09ZW5kfHxvcHRzLmluc2VydE1vZGUmJnZvaWQgMCE9PW1hc2tzZXQudmFsaWRQb3NpdGlvbnNbdmFsaWRhdGVkUG9zXSYmdm9pZCAwPT09ZnJvbUlzVmFsaWR8fHZvaWQgMD09PXZhbGlkVGVzdCl7dmFyIHBvc2l0aW9uc0Nsb25lPSQuZXh0ZW5kKCEwLHt9LG1hc2tzZXQudmFsaWRQb3NpdGlvbnMpLGx2cD1fcG9zaXRpb25pbmcuZ2V0TGFzdFZhbGlkUG9zaXRpb24uY2FsbCh0aGlzLHZvaWQgMCwhMCksaTtmb3IobWFza3NldC5wPWJlZ2luLGk9bHZwO2JlZ2luPD1pO2ktLSlkZWxldGUgbWFza3NldC52YWxpZFBvc2l0aW9uc1tpXSx2b2lkIDA9PT12YWxpZFRlc3QmJmRlbGV0ZSBtYXNrc2V0LnRlc3RzW2krMV07dmFyIHZhbGlkPSEwLGo9dmFsaWRhdGVkUG9zLHBvc01hdGNoPWosdCxjYW5NYXRjaDtmb3IodmFsaWRUZXN0JiYobWFza3NldC52YWxpZFBvc2l0aW9uc1t2YWxpZGF0ZWRQb3NdPSQuZXh0ZW5kKCEwLHt9LHZhbGlkVGVzdCkscG9zTWF0Y2grKyxqKyspLGk9dmFsaWRUZXN0P2VuZDplbmQtMTtpPD1sdnA7aSsrKXtpZih2b2lkIDAhPT0odD1wb3NpdGlvbnNDbG9uZVtpXSkmJiEwIT09dC5nZW5lcmF0ZWRJbnB1dCYmKGVuZDw9aXx8YmVnaW48PWkmJklzRW5jbG9zZWRTdGF0aWMoaSxwb3NpdGlvbnNDbG9uZSx7YmVnaW46YmVnaW4sZW5kOmVuZH0pKSl7Zm9yKDtcIlwiIT09X3ZhbGlkYXRpb25UZXN0cy5nZXRUZXN0LmNhbGwodGhpcyxwb3NNYXRjaCkubWF0Y2guZGVmOyl7aWYoITEhPT0oY2FuTWF0Y2g9cG9zaXRpb25DYW5NYXRjaERlZmluaXRpb24uY2FsbCh0aGlzLHBvc01hdGNoLHQsb3B0cykpfHxcIitcIj09PXQubWF0Y2guZGVmKXtcIitcIj09PXQubWF0Y2guZGVmJiZfcG9zaXRpb25pbmcuZ2V0QnVmZmVyLmNhbGwodGhpcywhMCk7dmFyIHJlc3VsdD1pc1ZhbGlkLmNhbGwodGhpcyxwb3NNYXRjaCx0LmlucHV0LFwiK1wiIT09dC5tYXRjaC5kZWYsXCIrXCIhPT10Lm1hdGNoLmRlZik7aWYodmFsaWQ9ITEhPT1yZXN1bHQsaj0ocmVzdWx0LnBvc3x8cG9zTWF0Y2gpKzEsIXZhbGlkJiZjYW5NYXRjaClicmVha31lbHNlIHZhbGlkPSExO2lmKHZhbGlkKXt2b2lkIDA9PT12YWxpZFRlc3QmJnQubWF0Y2guc3RhdGljJiZpPT09cG9zLmJlZ2luJiZvZmZzZXQrKzticmVha31pZighdmFsaWQmJnBvc01hdGNoPm1hc2tzZXQubWFza0xlbmd0aClicmVhaztwb3NNYXRjaCsrfVwiXCI9PV92YWxpZGF0aW9uVGVzdHMuZ2V0VGVzdC5jYWxsKHRoaXMscG9zTWF0Y2gpLm1hdGNoLmRlZiYmKHZhbGlkPSExKSxwb3NNYXRjaD1qfWlmKCF2YWxpZClicmVha31pZighdmFsaWQpcmV0dXJuIG1hc2tzZXQudmFsaWRQb3NpdGlvbnM9JC5leHRlbmQoITAse30scG9zaXRpb25zQ2xvbmUpLF9wb3NpdGlvbmluZy5yZXNldE1hc2tTZXQuY2FsbCh0aGlzLCEwKSwhMX1lbHNlIHZhbGlkVGVzdCYmX3ZhbGlkYXRpb25UZXN0cy5nZXRUZXN0LmNhbGwodGhpcyx2YWxpZGF0ZWRQb3MpLm1hdGNoLmNkPT09dmFsaWRUZXN0Lm1hdGNoLmNkJiYobWFza3NldC52YWxpZFBvc2l0aW9uc1t2YWxpZGF0ZWRQb3NdPSQuZXh0ZW5kKCEwLHt9LHZhbGlkVGVzdCkpO3JldHVybiBfcG9zaXRpb25pbmcucmVzZXRNYXNrU2V0LmNhbGwodGhpcywhMCksb2Zmc2V0fX0sZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZXhwb3J0cy5hcHBseUlucHV0VmFsdWU9YXBwbHlJbnB1dFZhbHVlLGV4cG9ydHMuY2xlYXJPcHRpb25hbFRhaWw9Y2xlYXJPcHRpb25hbFRhaWwsZXhwb3J0cy5jaGVja1ZhbD1jaGVja1ZhbCxleHBvcnRzLkhhbmRsZU5hdGl2ZVBsYWNlaG9sZGVyPUhhbmRsZU5hdGl2ZVBsYWNlaG9sZGVyLGV4cG9ydHMudW5tYXNrZWR2YWx1ZT11bm1hc2tlZHZhbHVlLGV4cG9ydHMud3JpdGVCdWZmZXI9d3JpdGVCdWZmZXI7dmFyIF9rZXljb2RlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygwKSksX3ZhbGlkYXRpb25UZXN0cz1fX3dlYnBhY2tfcmVxdWlyZV9fKDMpLF9wb3NpdGlvbmluZz1fX3dlYnBhY2tfcmVxdWlyZV9fKDEpLF92YWxpZGF0aW9uPV9fd2VicGFja19yZXF1aXJlX18oNCksX2Vudmlyb25tZW50PV9fd2VicGFja19yZXF1aXJlX18oOCksX2V2ZW50aGFuZGxlcnM9X193ZWJwYWNrX3JlcXVpcmVfXyg3KTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntkZWZhdWx0Om9ian19ZnVuY3Rpb24gYXBwbHlJbnB1dFZhbHVlKGlucHV0LHZhbHVlKXt2YXIgaW5wdXRtYXNrPWlucHV0P2lucHV0LmlucHV0bWFzazp0aGlzLG9wdHM9aW5wdXRtYXNrLm9wdHM7aW5wdXQuaW5wdXRtYXNrLnJlZnJlc2hWYWx1ZT0hMSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBvcHRzLm9uQmVmb3JlTWFzayYmKHZhbHVlPW9wdHMub25CZWZvcmVNYXNrLmNhbGwoaW5wdXRtYXNrLHZhbHVlLG9wdHMpfHx2YWx1ZSksdmFsdWU9dmFsdWUudG9TdHJpbmcoKS5zcGxpdChcIlwiKSxjaGVja1ZhbChpbnB1dCwhMCwhMSx2YWx1ZSksaW5wdXRtYXNrLnVuZG9WYWx1ZT1fcG9zaXRpb25pbmcuZ2V0QnVmZmVyLmNhbGwoaW5wdXRtYXNrKS5qb2luKFwiXCIpLChvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzfHxvcHRzLmNsZWFySW5jb21wbGV0ZSkmJmlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKT09PV9wb3NpdGlvbmluZy5nZXRCdWZmZXJUZW1wbGF0ZS5jYWxsKGlucHV0bWFzaykuam9pbihcIlwiKSYmLTE9PT1fcG9zaXRpb25pbmcuZ2V0TGFzdFZhbGlkUG9zaXRpb24uY2FsbChpbnB1dG1hc2spJiZpbnB1dC5pbnB1dG1hc2suX3ZhbHVlU2V0KFwiXCIpfWZ1bmN0aW9uIGNsZWFyT3B0aW9uYWxUYWlsKGJ1ZmZlcil7dmFyIGlucHV0bWFzaz10aGlzO2J1ZmZlci5sZW5ndGg9MDtmb3IodmFyIHRlbXBsYXRlPV92YWxpZGF0aW9uVGVzdHMuZ2V0TWFza1RlbXBsYXRlLmNhbGwodGhpcywhMCwwLCEwLHZvaWQgMCwhMCksbG1udDt2b2lkIDAhPT0obG1udD10ZW1wbGF0ZS5zaGlmdCgpKTspYnVmZmVyLnB1c2gobG1udCk7cmV0dXJuIGJ1ZmZlcn1mdW5jdGlvbiBjaGVja1ZhbChpbnB1dCx3cml0ZU91dCxzdHJpY3QsbnB0dmwsaW5pdGlhdGluZ0V2ZW50KXt2YXIgaW5wdXRtYXNrPWlucHV0P2lucHV0LmlucHV0bWFzazp0aGlzLG1hc2tzZXQ9aW5wdXRtYXNrLm1hc2tzZXQsb3B0cz1pbnB1dG1hc2sub3B0cywkPWlucHV0bWFzay5kZXBlbmRlbmN5TGliLGlucHV0VmFsdWU9bnB0dmwuc2xpY2UoKSxjaGFyQ29kZXM9XCJcIixpbml0aWFsTmR4PS0xLHJlc3VsdD12b2lkIDAsc2tpcE9wdGlvbmFsUGFydENoYXJhY3Rlcj1vcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXI7ZnVuY3Rpb24gaXNUZW1wbGF0ZU1hdGNoKG5keCxjaGFyQ29kZXMpe2Zvcih2YXIgdGFyZ2V0VGVtcGxhdGU9X3ZhbGlkYXRpb25UZXN0cy5nZXRNYXNrVGVtcGxhdGUuY2FsbChpbnB1dG1hc2ssITAsMCkuc2xpY2UobmR4LF9wb3NpdGlvbmluZy5zZWVrTmV4dC5jYWxsKGlucHV0bWFzayxuZHgsITEsITEpKS5qb2luKFwiXCIpLnJlcGxhY2UoLycvZyxcIlwiKSxjaGFyQ29kZU5keD10YXJnZXRUZW1wbGF0ZS5pbmRleE9mKGNoYXJDb2Rlcyk7MDxjaGFyQ29kZU5keCYmXCIgXCI9PT10YXJnZXRUZW1wbGF0ZVtjaGFyQ29kZU5keC0xXTspY2hhckNvZGVOZHgtLTt2YXIgbWF0Y2g9MD09PWNoYXJDb2RlTmR4JiYhX3Bvc2l0aW9uaW5nLmlzTWFzay5jYWxsKGlucHV0bWFzayxuZHgpJiYoX3ZhbGlkYXRpb25UZXN0cy5nZXRUZXN0LmNhbGwoaW5wdXRtYXNrLG5keCkubWF0Y2gubmF0aXZlRGVmPT09Y2hhckNvZGVzLmNoYXJBdCgwKXx8ITA9PT1fdmFsaWRhdGlvblRlc3RzLmdldFRlc3QuY2FsbChpbnB1dG1hc2ssbmR4KS5tYXRjaC5zdGF0aWMmJl92YWxpZGF0aW9uVGVzdHMuZ2V0VGVzdC5jYWxsKGlucHV0bWFzayxuZHgpLm1hdGNoLm5hdGl2ZURlZj09PVwiJ1wiK2NoYXJDb2Rlcy5jaGFyQXQoMCl8fFwiIFwiPT09X3ZhbGlkYXRpb25UZXN0cy5nZXRUZXN0LmNhbGwoaW5wdXRtYXNrLG5keCkubWF0Y2gubmF0aXZlRGVmJiYoX3ZhbGlkYXRpb25UZXN0cy5nZXRUZXN0LmNhbGwoaW5wdXRtYXNrLG5keCsxKS5tYXRjaC5uYXRpdmVEZWY9PT1jaGFyQ29kZXMuY2hhckF0KDApfHwhMD09PV92YWxpZGF0aW9uVGVzdHMuZ2V0VGVzdC5jYWxsKGlucHV0bWFzayxuZHgrMSkubWF0Y2guc3RhdGljJiZfdmFsaWRhdGlvblRlc3RzLmdldFRlc3QuY2FsbChpbnB1dG1hc2ssbmR4KzEpLm1hdGNoLm5hdGl2ZURlZj09PVwiJ1wiK2NoYXJDb2Rlcy5jaGFyQXQoMCkpKTtpZighbWF0Y2gmJjA8Y2hhckNvZGVOZHgmJiFfcG9zaXRpb25pbmcuaXNNYXNrLmNhbGwoaW5wdXRtYXNrLG5keCwhMSwhMCkpe3ZhciBuZXh0UG9zPV9wb3NpdGlvbmluZy5zZWVrTmV4dC5jYWxsKGlucHV0bWFzayxuZHgpO2lucHV0bWFzay5jYXJldFBvcy5iZWdpbjxuZXh0UG9zJiYoaW5wdXRtYXNrLmNhcmV0UG9zPXtiZWdpbjpuZXh0UG9zfSl9cmV0dXJuIG1hdGNofW9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3Rlcj1cIlwiLF9wb3NpdGlvbmluZy5yZXNldE1hc2tTZXQuY2FsbChpbnB1dG1hc2spLG1hc2tzZXQudGVzdHM9e30saW5pdGlhbE5keD1vcHRzLnJhZGl4UG9pbnQ/X3Bvc2l0aW9uaW5nLmRldGVybWluZU5ld0NhcmV0UG9zaXRpb24uY2FsbChpbnB1dG1hc2sse2JlZ2luOjAsZW5kOjB9KS5iZWdpbjowLG1hc2tzZXQucD1pbml0aWFsTmR4LGlucHV0bWFzay5jYXJldFBvcz17YmVnaW46aW5pdGlhbE5keH07dmFyIHN0YXRpY01hdGNoZXM9W10scHJldkNhcmV0UG9zPWlucHV0bWFzay5jYXJldFBvcztpZihpbnB1dFZhbHVlLmZvckVhY2goZnVuY3Rpb24oY2hhckNvZGUsbmR4KXtpZih2b2lkIDAhPT1jaGFyQ29kZSlpZih2b2lkIDA9PT1tYXNrc2V0LnZhbGlkUG9zaXRpb25zW25keF0mJmlucHV0VmFsdWVbbmR4XT09PV92YWxpZGF0aW9uVGVzdHMuZ2V0UGxhY2Vob2xkZXIuY2FsbChpbnB1dG1hc2ssbmR4KSYmX3Bvc2l0aW9uaW5nLmlzTWFzay5jYWxsKGlucHV0bWFzayxuZHgsITApJiYhMT09PV92YWxpZGF0aW9uLmlzVmFsaWQuY2FsbChpbnB1dG1hc2ssbmR4LGlucHV0VmFsdWVbbmR4XSwhMCx2b2lkIDAsdm9pZCAwLCEwKSltYXNrc2V0LnArKztlbHNle3ZhciBrZXlwcmVzcz1uZXcgJC5FdmVudChcIl9jaGVja3ZhbFwiKTtrZXlwcmVzcy53aGljaD1jaGFyQ29kZS50b1N0cmluZygpLmNoYXJDb2RlQXQoMCksY2hhckNvZGVzKz1jaGFyQ29kZTt2YXIgbHZwPV9wb3NpdGlvbmluZy5nZXRMYXN0VmFsaWRQb3NpdGlvbi5jYWxsKGlucHV0bWFzayx2b2lkIDAsITApO2lzVGVtcGxhdGVNYXRjaChpbml0aWFsTmR4LGNoYXJDb2Rlcyk/cmVzdWx0PV9ldmVudGhhbmRsZXJzLkV2ZW50SGFuZGxlcnMua2V5cHJlc3NFdmVudC5jYWxsKGlucHV0bWFzayxrZXlwcmVzcywhMCwhMSxzdHJpY3QsbHZwKzEpOihyZXN1bHQ9X2V2ZW50aGFuZGxlcnMuRXZlbnRIYW5kbGVycy5rZXlwcmVzc0V2ZW50LmNhbGwoaW5wdXRtYXNrLGtleXByZXNzLCEwLCExLHN0cmljdCxpbnB1dG1hc2suY2FyZXRQb3MuYmVnaW4pLHJlc3VsdCYmKGluaXRpYWxOZHg9aW5wdXRtYXNrLmNhcmV0UG9zLmJlZ2luKzEsY2hhckNvZGVzPVwiXCIpKSxyZXN1bHQ/KHZvaWQgMCE9PXJlc3VsdC5wb3MmJm1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcmVzdWx0LnBvc10mJiEwPT09bWFza3NldC52YWxpZFBvc2l0aW9uc1tyZXN1bHQucG9zXS5tYXRjaC5zdGF0aWMmJnZvaWQgMD09PW1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcmVzdWx0LnBvc10uYWx0ZXJuYXRpb24mJihzdGF0aWNNYXRjaGVzLnB1c2gocmVzdWx0LnBvcyksaW5wdXRtYXNrLmlzUlRMfHwocmVzdWx0LmZvcndhcmRQb3NpdGlvbj1yZXN1bHQucG9zKzEpKSx3cml0ZUJ1ZmZlci5jYWxsKGlucHV0bWFzayx2b2lkIDAsX3Bvc2l0aW9uaW5nLmdldEJ1ZmZlci5jYWxsKGlucHV0bWFzaykscmVzdWx0LmZvcndhcmRQb3NpdGlvbixrZXlwcmVzcywhMSksaW5wdXRtYXNrLmNhcmV0UG9zPXtiZWdpbjpyZXN1bHQuZm9yd2FyZFBvc2l0aW9uLGVuZDpyZXN1bHQuZm9yd2FyZFBvc2l0aW9ufSxwcmV2Q2FyZXRQb3M9aW5wdXRtYXNrLmNhcmV0UG9zKTppbnB1dG1hc2suY2FyZXRQb3M9cHJldkNhcmV0UG9zfX0pLDA8c3RhdGljTWF0Y2hlcy5sZW5ndGgpe3ZhciBzbmR4LHZhbGlkUG9zLG5leHRWYWxpZD1fcG9zaXRpb25pbmcuc2Vla05leHQuY2FsbChpbnB1dG1hc2ssLTEsdm9pZCAwLCExKTtpZighX3ZhbGlkYXRpb24uaXNDb21wbGV0ZS5jYWxsKGlucHV0bWFzayxfcG9zaXRpb25pbmcuZ2V0QnVmZmVyLmNhbGwoaW5wdXRtYXNrKSkmJnN0YXRpY01hdGNoZXMubGVuZ3RoPD1uZXh0VmFsaWR8fF92YWxpZGF0aW9uLmlzQ29tcGxldGUuY2FsbChpbnB1dG1hc2ssX3Bvc2l0aW9uaW5nLmdldEJ1ZmZlci5jYWxsKGlucHV0bWFzaykpJiYwPHN0YXRpY01hdGNoZXMubGVuZ3RoJiZzdGF0aWNNYXRjaGVzLmxlbmd0aCE9PW5leHRWYWxpZCYmMD09PXN0YXRpY01hdGNoZXNbMF0pZm9yKHZhciBuZXh0U25keD1uZXh0VmFsaWQ7dm9pZCAwIT09KHNuZHg9c3RhdGljTWF0Y2hlcy5zaGlmdCgpKTspe3ZhciBrZXlwcmVzcz1uZXcgJC5FdmVudChcIl9jaGVja3ZhbFwiKTtpZih2YWxpZFBvcz1tYXNrc2V0LnZhbGlkUG9zaXRpb25zW3NuZHhdLHZhbGlkUG9zLmdlbmVyYXRlZElucHV0PSEwLGtleXByZXNzLndoaWNoPXZhbGlkUG9zLmlucHV0LmNoYXJDb2RlQXQoMCkscmVzdWx0PV9ldmVudGhhbmRsZXJzLkV2ZW50SGFuZGxlcnMua2V5cHJlc3NFdmVudC5jYWxsKGlucHV0bWFzayxrZXlwcmVzcywhMCwhMSxzdHJpY3QsbmV4dFNuZHgpLHJlc3VsdCYmdm9pZCAwIT09cmVzdWx0LnBvcyYmcmVzdWx0LnBvcyE9PXNuZHgmJm1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcmVzdWx0LnBvc10mJiEwPT09bWFza3NldC52YWxpZFBvc2l0aW9uc1tyZXN1bHQucG9zXS5tYXRjaC5zdGF0aWMpc3RhdGljTWF0Y2hlcy5wdXNoKHJlc3VsdC5wb3MpO2Vsc2UgaWYoIXJlc3VsdClicmVhaztuZXh0U25keCsrfX13cml0ZU91dCYmd3JpdGVCdWZmZXIuY2FsbChpbnB1dG1hc2ssaW5wdXQsX3Bvc2l0aW9uaW5nLmdldEJ1ZmZlci5jYWxsKGlucHV0bWFzaykscmVzdWx0P3Jlc3VsdC5mb3J3YXJkUG9zaXRpb246aW5wdXRtYXNrLmNhcmV0UG9zLmJlZ2luLGluaXRpYXRpbmdFdmVudHx8bmV3ICQuRXZlbnQoXCJjaGVja3ZhbFwiKSxpbml0aWF0aW5nRXZlbnQmJlwiaW5wdXRcIj09PWluaXRpYXRpbmdFdmVudC50eXBlJiZpbnB1dG1hc2sudW5kb1ZhbHVlIT09X3Bvc2l0aW9uaW5nLmdldEJ1ZmZlci5jYWxsKGlucHV0bWFzaykuam9pbihcIlwiKSksb3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyPXNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXJ9ZnVuY3Rpb24gSGFuZGxlTmF0aXZlUGxhY2Vob2xkZXIobnB0LHZhbHVlKXt2YXIgaW5wdXRtYXNrPW5wdD9ucHQuaW5wdXRtYXNrOnRoaXM7aWYoX2Vudmlyb25tZW50LmllKXtpZihucHQuaW5wdXRtYXNrLl92YWx1ZUdldCgpIT09dmFsdWUmJihucHQucGxhY2Vob2xkZXIhPT12YWx1ZXx8XCJcIj09PW5wdC5wbGFjZWhvbGRlcikpe3ZhciBidWZmZXI9X3Bvc2l0aW9uaW5nLmdldEJ1ZmZlci5jYWxsKGlucHV0bWFzaykuc2xpY2UoKSxucHRWYWx1ZT1ucHQuaW5wdXRtYXNrLl92YWx1ZUdldCgpO2lmKG5wdFZhbHVlIT09dmFsdWUpe3ZhciBsdnA9X3Bvc2l0aW9uaW5nLmdldExhc3RWYWxpZFBvc2l0aW9uLmNhbGwoaW5wdXRtYXNrKTstMT09PWx2cCYmbnB0VmFsdWU9PT1fcG9zaXRpb25pbmcuZ2V0QnVmZmVyVGVtcGxhdGUuY2FsbChpbnB1dG1hc2spLmpvaW4oXCJcIik/YnVmZmVyPVtdOi0xIT09bHZwJiZjbGVhck9wdGlvbmFsVGFpbC5jYWxsKGlucHV0bWFzayxidWZmZXIpLHdyaXRlQnVmZmVyKG5wdCxidWZmZXIpfX19ZWxzZSBucHQucGxhY2Vob2xkZXIhPT12YWx1ZSYmKG5wdC5wbGFjZWhvbGRlcj12YWx1ZSxcIlwiPT09bnB0LnBsYWNlaG9sZGVyJiZucHQucmVtb3ZlQXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIikpfWZ1bmN0aW9uIHVubWFza2VkdmFsdWUoaW5wdXQpe3ZhciBpbnB1dG1hc2s9aW5wdXQ/aW5wdXQuaW5wdXRtYXNrOnRoaXMsb3B0cz1pbnB1dG1hc2sub3B0cyxtYXNrc2V0PWlucHV0bWFzay5tYXNrc2V0O2lmKGlucHV0KXtpZih2b2lkIDA9PT1pbnB1dC5pbnB1dG1hc2spcmV0dXJuIGlucHV0LnZhbHVlO2lucHV0LmlucHV0bWFzayYmaW5wdXQuaW5wdXRtYXNrLnJlZnJlc2hWYWx1ZSYmYXBwbHlJbnB1dFZhbHVlKGlucHV0LGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoITApKX12YXIgdW1WYWx1ZT1bXSx2cHM9bWFza3NldC52YWxpZFBvc2l0aW9ucztmb3IodmFyIHBuZHggaW4gdnBzKXZwc1twbmR4XSYmdnBzW3BuZHhdLm1hdGNoJiYoMSE9dnBzW3BuZHhdLm1hdGNoLnN0YXRpY3x8QXJyYXkuaXNBcnJheShtYXNrc2V0Lm1ldGFkYXRhKSYmITAhPT12cHNbcG5keF0uZ2VuZXJhdGVkSW5wdXQpJiZ1bVZhbHVlLnB1c2godnBzW3BuZHhdLmlucHV0KTt2YXIgdW5tYXNrZWRWYWx1ZT0wPT09dW1WYWx1ZS5sZW5ndGg/XCJcIjooaW5wdXRtYXNrLmlzUlRMP3VtVmFsdWUucmV2ZXJzZSgpOnVtVmFsdWUpLmpvaW4oXCJcIik7aWYoXCJmdW5jdGlvblwiPT10eXBlb2Ygb3B0cy5vblVuTWFzayl7dmFyIGJ1ZmZlclZhbHVlPShpbnB1dG1hc2suaXNSVEw/X3Bvc2l0aW9uaW5nLmdldEJ1ZmZlci5jYWxsKGlucHV0bWFzaykuc2xpY2UoKS5yZXZlcnNlKCk6X3Bvc2l0aW9uaW5nLmdldEJ1ZmZlci5jYWxsKGlucHV0bWFzaykpLmpvaW4oXCJcIik7dW5tYXNrZWRWYWx1ZT1vcHRzLm9uVW5NYXNrLmNhbGwoaW5wdXRtYXNrLGJ1ZmZlclZhbHVlLHVubWFza2VkVmFsdWUsb3B0cyl9cmV0dXJuIHVubWFza2VkVmFsdWV9ZnVuY3Rpb24gd3JpdGVCdWZmZXIoaW5wdXQsYnVmZmVyLGNhcmV0UG9zLGV2ZW50LHRyaWdnZXJFdmVudHMpe3ZhciBpbnB1dG1hc2s9aW5wdXQ/aW5wdXQuaW5wdXRtYXNrOnRoaXMsb3B0cz1pbnB1dG1hc2sub3B0cywkPWlucHV0bWFzay5kZXBlbmRlbmN5TGliO2lmKGV2ZW50JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBvcHRzLm9uQmVmb3JlV3JpdGUpe3ZhciByZXN1bHQ9b3B0cy5vbkJlZm9yZVdyaXRlLmNhbGwoaW5wdXRtYXNrLGV2ZW50LGJ1ZmZlcixjYXJldFBvcyxvcHRzKTtpZihyZXN1bHQpe2lmKHJlc3VsdC5yZWZyZXNoRnJvbUJ1ZmZlcil7dmFyIHJlZnJlc2g9cmVzdWx0LnJlZnJlc2hGcm9tQnVmZmVyO192YWxpZGF0aW9uLnJlZnJlc2hGcm9tQnVmZmVyLmNhbGwoaW5wdXRtYXNrLCEwPT09cmVmcmVzaD9yZWZyZXNoOnJlZnJlc2guc3RhcnQscmVmcmVzaC5lbmQscmVzdWx0LmJ1ZmZlcnx8YnVmZmVyKSxidWZmZXI9X3Bvc2l0aW9uaW5nLmdldEJ1ZmZlci5jYWxsKGlucHV0bWFzaywhMCl9dm9pZCAwIT09Y2FyZXRQb3MmJihjYXJldFBvcz12b2lkIDAhPT1yZXN1bHQuY2FyZXQ/cmVzdWx0LmNhcmV0OmNhcmV0UG9zKX19aWYodm9pZCAwIT09aW5wdXQmJihpbnB1dC5pbnB1dG1hc2suX3ZhbHVlU2V0KGJ1ZmZlci5qb2luKFwiXCIpKSx2b2lkIDA9PT1jYXJldFBvc3x8dm9pZCAwIT09ZXZlbnQmJlwiYmx1clwiPT09ZXZlbnQudHlwZXx8X3Bvc2l0aW9uaW5nLmNhcmV0LmNhbGwoaW5wdXRtYXNrLGlucHV0LGNhcmV0UG9zLHZvaWQgMCx2b2lkIDAsdm9pZCAwIT09ZXZlbnQmJlwia2V5ZG93blwiPT09ZXZlbnQudHlwZSYmKGV2ZW50LmtleUNvZGU9PT1fa2V5Y29kZS5kZWZhdWx0LkRFTEVURXx8ZXZlbnQua2V5Q29kZT09PV9rZXljb2RlLmRlZmF1bHQuQkFDS1NQQUNFKSksITA9PT10cmlnZ2VyRXZlbnRzKSl7dmFyICRpbnB1dD0kKGlucHV0KSxucHRWYWw9aW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpO2lucHV0LmlucHV0bWFzay5za2lwSW5wdXRFdmVudD0hMCwkaW5wdXQudHJpZ2dlcihcImlucHV0XCIpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtucHRWYWw9PT1fcG9zaXRpb25pbmcuZ2V0QnVmZmVyVGVtcGxhdGUuY2FsbChpbnB1dG1hc2spLmpvaW4oXCJcIik/JGlucHV0LnRyaWdnZXIoXCJjbGVhcmVkXCIpOiEwPT09X3ZhbGlkYXRpb24uaXNDb21wbGV0ZS5jYWxsKGlucHV0bWFzayxidWZmZXIpJiYkaW5wdXQudHJpZ2dlcihcImNvbXBsZXRlXCIpfSwwKX19fSxmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfZGVmYXVsdD1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzpuZXcoZXZhbChcInJlcXVpcmUoJ2pzZG9tJykuSlNET01cIikpKFwiXCIpLndpbmRvdztleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHR9LGZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGV4cG9ydHMuRXZlbnRIYW5kbGVycz12b2lkIDA7dmFyIF9wb3NpdGlvbmluZz1fX3dlYnBhY2tfcmVxdWlyZV9fKDEpLF9rZXljb2RlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygwKSksX2Vudmlyb25tZW50PV9fd2VicGFja19yZXF1aXJlX18oOCksX3ZhbGlkYXRpb249X193ZWJwYWNrX3JlcXVpcmVfXyg0KSxfaW5wdXRIYW5kbGluZz1fX3dlYnBhY2tfcmVxdWlyZV9fKDUpLF92YWxpZGF0aW9uVGVzdHM9X193ZWJwYWNrX3JlcXVpcmVfXygzKTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntkZWZhdWx0Om9ian19dmFyIEV2ZW50SGFuZGxlcnM9e2tleWRvd25FdmVudDpmdW5jdGlvbiBrZXlkb3duRXZlbnQoZSl7dmFyIGlucHV0bWFzaz10aGlzLmlucHV0bWFzayxvcHRzPWlucHV0bWFzay5vcHRzLCQ9aW5wdXRtYXNrLmRlcGVuZGVuY3lMaWIsbWFza3NldD1pbnB1dG1hc2subWFza3NldCxpbnB1dD10aGlzLCRpbnB1dD0kKGlucHV0KSxrPWUua2V5Q29kZSxwb3M9X3Bvc2l0aW9uaW5nLmNhcmV0LmNhbGwoaW5wdXRtYXNrLGlucHV0KSxrZFJlc3VsdD1vcHRzLm9uS2V5RG93bi5jYWxsKHRoaXMsZSxfcG9zaXRpb25pbmcuZ2V0QnVmZmVyLmNhbGwoaW5wdXRtYXNrKSxwb3Msb3B0cyk7aWYodm9pZCAwIT09a2RSZXN1bHQpcmV0dXJuIGtkUmVzdWx0O2lmKGs9PT1fa2V5Y29kZS5kZWZhdWx0LkJBQ0tTUEFDRXx8az09PV9rZXljb2RlLmRlZmF1bHQuREVMRVRFfHxfZW52aXJvbm1lbnQuaXBob25lJiZrPT09X2tleWNvZGUuZGVmYXVsdC5CQUNLU1BBQ0VfU0FGQVJJfHxlLmN0cmxLZXkmJms9PT1fa2V5Y29kZS5kZWZhdWx0LlgmJiEoXCJvbmN1dFwiaW4gaW5wdXQpKWUucHJldmVudERlZmF1bHQoKSxfdmFsaWRhdGlvbi5oYW5kbGVSZW1vdmUuY2FsbChpbnB1dG1hc2ssaW5wdXQsayxwb3MpLCgwLF9pbnB1dEhhbmRsaW5nLndyaXRlQnVmZmVyKShpbnB1dCxfcG9zaXRpb25pbmcuZ2V0QnVmZmVyLmNhbGwoaW5wdXRtYXNrLCEwKSxtYXNrc2V0LnAsZSxpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkhPT1fcG9zaXRpb25pbmcuZ2V0QnVmZmVyLmNhbGwoaW5wdXRtYXNrKS5qb2luKFwiXCIpKTtlbHNlIGlmKGs9PT1fa2V5Y29kZS5kZWZhdWx0LkVORHx8az09PV9rZXljb2RlLmRlZmF1bHQuUEFHRV9ET1dOKXtlLnByZXZlbnREZWZhdWx0KCk7dmFyIGNhcmV0UG9zPV9wb3NpdGlvbmluZy5zZWVrTmV4dC5jYWxsKGlucHV0bWFzayxfcG9zaXRpb25pbmcuZ2V0TGFzdFZhbGlkUG9zaXRpb24uY2FsbChpbnB1dG1hc2spKTtfcG9zaXRpb25pbmcuY2FyZXQuY2FsbChpbnB1dG1hc2ssaW5wdXQsZS5zaGlmdEtleT9wb3MuYmVnaW46Y2FyZXRQb3MsY2FyZXRQb3MsITApfWVsc2Ugaz09PV9rZXljb2RlLmRlZmF1bHQuSE9NRSYmIWUuc2hpZnRLZXl8fGs9PT1fa2V5Y29kZS5kZWZhdWx0LlBBR0VfVVA/KGUucHJldmVudERlZmF1bHQoKSxfcG9zaXRpb25pbmcuY2FyZXQuY2FsbChpbnB1dG1hc2ssaW5wdXQsMCxlLnNoaWZ0S2V5P3Bvcy5iZWdpbjowLCEwKSk6KG9wdHMudW5kb09uRXNjYXBlJiZrPT09X2tleWNvZGUuZGVmYXVsdC5FU0NBUEV8fDkwPT09ayYmZS5jdHJsS2V5KSYmITAhPT1lLmFsdEtleT8oKDAsX2lucHV0SGFuZGxpbmcuY2hlY2tWYWwpKGlucHV0LCEwLCExLGlucHV0bWFzay51bmRvVmFsdWUuc3BsaXQoXCJcIikpLCRpbnB1dC50cmlnZ2VyKFwiY2xpY2tcIikpOiEwPT09b3B0cy50YWJUaHJvdWdoJiZrPT09X2tleWNvZGUuZGVmYXVsdC5UQUI/ITA9PT1lLnNoaWZ0S2V5Pyhwb3MuZW5kPV9wb3NpdGlvbmluZy5zZWVrUHJldmlvdXMuY2FsbChpbnB1dG1hc2sscG9zLmVuZCwhMCksITA9PT1fdmFsaWRhdGlvblRlc3RzLmdldFRlc3QuY2FsbChpbnB1dG1hc2sscG9zLmVuZC0xKS5tYXRjaC5zdGF0aWMmJnBvcy5lbmQtLSxwb3MuYmVnaW49X3Bvc2l0aW9uaW5nLnNlZWtQcmV2aW91cy5jYWxsKGlucHV0bWFzayxwb3MuZW5kLCEwKSwwPD1wb3MuYmVnaW4mJjA8cG9zLmVuZCYmKGUucHJldmVudERlZmF1bHQoKSxfcG9zaXRpb25pbmcuY2FyZXQuY2FsbChpbnB1dG1hc2ssaW5wdXQscG9zLmJlZ2luLHBvcy5lbmQpKSk6KHBvcy5iZWdpbj1fcG9zaXRpb25pbmcuc2Vla05leHQuY2FsbChpbnB1dG1hc2sscG9zLmJlZ2luLCEwKSxwb3MuZW5kPV9wb3NpdGlvbmluZy5zZWVrTmV4dC5jYWxsKGlucHV0bWFzayxwb3MuYmVnaW4sITApLHBvcy5lbmQ8bWFza3NldC5tYXNrTGVuZ3RoJiZwb3MuZW5kLS0scG9zLmJlZ2luPD1tYXNrc2V0Lm1hc2tMZW5ndGgmJihlLnByZXZlbnREZWZhdWx0KCksX3Bvc2l0aW9uaW5nLmNhcmV0LmNhbGwoaW5wdXRtYXNrLGlucHV0LHBvcy5iZWdpbixwb3MuZW5kKSkpOmUuc2hpZnRLZXl8fG9wdHMuaW5zZXJ0TW9kZVZpc3VhbCYmITE9PT1vcHRzLmluc2VydE1vZGUmJihrPT09X2tleWNvZGUuZGVmYXVsdC5SSUdIVD9zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dmFyIGNhcmV0UG9zPV9wb3NpdGlvbmluZy5jYXJldC5jYWxsKGlucHV0bWFzayxpbnB1dCk7X3Bvc2l0aW9uaW5nLmNhcmV0LmNhbGwoaW5wdXRtYXNrLGlucHV0LGNhcmV0UG9zLmJlZ2luKX0sMCk6az09PV9rZXljb2RlLmRlZmF1bHQuTEVGVCYmc2V0VGltZW91dChmdW5jdGlvbigpe3ZhciBjYXJldFBvc19iZWdpbj1fcG9zaXRpb25pbmcudHJhbnNsYXRlUG9zaXRpb24uY2FsbChpbnB1dG1hc2ssaW5wdXQuaW5wdXRtYXNrLmNhcmV0UG9zLmJlZ2luKSxjYXJldFBvc19lbmQ9X3Bvc2l0aW9uaW5nLnRyYW5zbGF0ZVBvc2l0aW9uLmNhbGwoaW5wdXRtYXNrLGlucHV0LmlucHV0bWFzay5jYXJldFBvcy5lbmQpO2lucHV0bWFzay5pc1JUTD9fcG9zaXRpb25pbmcuY2FyZXQuY2FsbChpbnB1dG1hc2ssaW5wdXQsY2FyZXRQb3NfYmVnaW4rKGNhcmV0UG9zX2JlZ2luPT09bWFza3NldC5tYXNrTGVuZ3RoPzA6MSkpOl9wb3NpdGlvbmluZy5jYXJldC5jYWxsKGlucHV0bWFzayxpbnB1dCxjYXJldFBvc19iZWdpbi0oMD09PWNhcmV0UG9zX2JlZ2luPzA6MSkpfSwwKSk7aW5wdXRtYXNrLmlnbm9yYWJsZT1vcHRzLmlnbm9yYWJsZXMuaW5jbHVkZXMoayl9LGtleXByZXNzRXZlbnQ6ZnVuY3Rpb24ga2V5cHJlc3NFdmVudChlLGNoZWNrdmFsLHdyaXRlT3V0LHN0cmljdCxuZHgpe3ZhciBpbnB1dG1hc2s9dGhpcy5pbnB1dG1hc2t8fHRoaXMsb3B0cz1pbnB1dG1hc2sub3B0cywkPWlucHV0bWFzay5kZXBlbmRlbmN5TGliLG1hc2tzZXQ9aW5wdXRtYXNrLm1hc2tzZXQsaW5wdXQ9aW5wdXRtYXNrLmVsLCRpbnB1dD0kKGlucHV0KSxrPWUud2hpY2h8fGUuY2hhckNvZGV8fGUua2V5Q29kZTtpZighKCEwPT09Y2hlY2t2YWx8fGUuY3RybEtleSYmZS5hbHRLZXkpJiYoZS5jdHJsS2V5fHxlLm1ldGFLZXl8fGlucHV0bWFzay5pZ25vcmFibGUpKXJldHVybiBrPT09X2tleWNvZGUuZGVmYXVsdC5FTlRFUiYmaW5wdXRtYXNrLnVuZG9WYWx1ZSE9PV9wb3NpdGlvbmluZy5nZXRCdWZmZXIuY2FsbChpbnB1dG1hc2spLmpvaW4oXCJcIikmJihpbnB1dG1hc2sudW5kb1ZhbHVlPV9wb3NpdGlvbmluZy5nZXRCdWZmZXIuY2FsbChpbnB1dG1hc2spLmpvaW4oXCJcIiksc2V0VGltZW91dChmdW5jdGlvbigpeyRpbnB1dC50cmlnZ2VyKFwiY2hhbmdlXCIpfSwwKSksaW5wdXRtYXNrLnNraXBJbnB1dEV2ZW50PSEwLCEwO2lmKGspezQ0IT09ayYmNDYhPT1rfHwzIT09ZS5sb2NhdGlvbnx8XCJcIj09PW9wdHMucmFkaXhQb2ludHx8KGs9b3B0cy5yYWRpeFBvaW50LmNoYXJDb2RlQXQoMCkpO3ZhciBwb3M9Y2hlY2t2YWw/e2JlZ2luOm5keCxlbmQ6bmR4fTpfcG9zaXRpb25pbmcuY2FyZXQuY2FsbChpbnB1dG1hc2ssaW5wdXQpLGZvcndhcmRQb3NpdGlvbixjPVN0cmluZy5mcm9tQ2hhckNvZGUoayk7bWFza3NldC53cml0ZU91dEJ1ZmZlcj0hMDt2YXIgdmFsUmVzdWx0PV92YWxpZGF0aW9uLmlzVmFsaWQuY2FsbChpbnB1dG1hc2sscG9zLGMsc3RyaWN0LHZvaWQgMCx2b2lkIDAsdm9pZCAwLGNoZWNrdmFsKTtpZighMSE9PXZhbFJlc3VsdCYmKF9wb3NpdGlvbmluZy5yZXNldE1hc2tTZXQuY2FsbChpbnB1dG1hc2ssITApLGZvcndhcmRQb3NpdGlvbj12b2lkIDAhPT12YWxSZXN1bHQuY2FyZXQ/dmFsUmVzdWx0LmNhcmV0Ol9wb3NpdGlvbmluZy5zZWVrTmV4dC5jYWxsKGlucHV0bWFzayx2YWxSZXN1bHQucG9zLmJlZ2luP3ZhbFJlc3VsdC5wb3MuYmVnaW46dmFsUmVzdWx0LnBvcyksbWFza3NldC5wPWZvcndhcmRQb3NpdGlvbiksZm9yd2FyZFBvc2l0aW9uPW9wdHMubnVtZXJpY0lucHV0JiZ2b2lkIDA9PT12YWxSZXN1bHQuY2FyZXQ/X3Bvc2l0aW9uaW5nLnNlZWtQcmV2aW91cy5jYWxsKGlucHV0bWFzayxmb3J3YXJkUG9zaXRpb24pOmZvcndhcmRQb3NpdGlvbiwhMSE9PXdyaXRlT3V0JiYoc2V0VGltZW91dChmdW5jdGlvbigpe29wdHMub25LZXlWYWxpZGF0aW9uLmNhbGwoaW5wdXQsayx2YWxSZXN1bHQpfSwwKSxtYXNrc2V0LndyaXRlT3V0QnVmZmVyJiYhMSE9PXZhbFJlc3VsdCkpe3ZhciBidWZmZXI9X3Bvc2l0aW9uaW5nLmdldEJ1ZmZlci5jYWxsKGlucHV0bWFzayk7KDAsX2lucHV0SGFuZGxpbmcud3JpdGVCdWZmZXIpKGlucHV0LGJ1ZmZlcixmb3J3YXJkUG9zaXRpb24sZSwhMCE9PWNoZWNrdmFsKX1pZihlLnByZXZlbnREZWZhdWx0KCksY2hlY2t2YWwpcmV0dXJuITEhPT12YWxSZXN1bHQmJih2YWxSZXN1bHQuZm9yd2FyZFBvc2l0aW9uPWZvcndhcmRQb3NpdGlvbiksdmFsUmVzdWx0fX0sa2V5dXBFdmVudDpmdW5jdGlvbiBrZXl1cEV2ZW50KGUpe3ZhciBpbnB1dG1hc2s9dGhpcy5pbnB1dG1hc2s7IWlucHV0bWFzay5pc0NvbXBvc2luZ3x8ZS5rZXlDb2RlIT09X2tleWNvZGUuZGVmYXVsdC5LRVlfMjI5JiZlLmtleUNvZGUhPT1fa2V5Y29kZS5kZWZhdWx0LkVOVEVSfHxpbnB1dG1hc2suJGVsLnRyaWdnZXIoXCJpbnB1dFwiKX0scGFzdGVFdmVudDpmdW5jdGlvbiBwYXN0ZUV2ZW50KGUpe3ZhciBpbnB1dG1hc2s9dGhpcy5pbnB1dG1hc2ssb3B0cz1pbnB1dG1hc2sub3B0cyxpbnB1dD10aGlzLGlucHV0VmFsdWU9aW5wdXRtYXNrLl92YWx1ZUdldCghMCksY2FyZXRQb3M9X3Bvc2l0aW9uaW5nLmNhcmV0LmNhbGwoaW5wdXRtYXNrLHRoaXMpLHRlbXBWYWx1ZTtpbnB1dG1hc2suaXNSVEwmJih0ZW1wVmFsdWU9Y2FyZXRQb3MuZW5kLGNhcmV0UG9zLmVuZD1jYXJldFBvcy5iZWdpbixjYXJldFBvcy5iZWdpbj10ZW1wVmFsdWUpO3ZhciB2YWx1ZUJlZm9yZUNhcmV0PWlucHV0VmFsdWUuc3Vic3RyKDAsY2FyZXRQb3MuYmVnaW4pLHZhbHVlQWZ0ZXJDYXJldD1pbnB1dFZhbHVlLnN1YnN0cihjYXJldFBvcy5lbmQsaW5wdXRWYWx1ZS5sZW5ndGgpO2lmKHZhbHVlQmVmb3JlQ2FyZXQ9PShpbnB1dG1hc2suaXNSVEw/X3Bvc2l0aW9uaW5nLmdldEJ1ZmZlclRlbXBsYXRlLmNhbGwoaW5wdXRtYXNrKS5zbGljZSgpLnJldmVyc2UoKTpfcG9zaXRpb25pbmcuZ2V0QnVmZmVyVGVtcGxhdGUuY2FsbChpbnB1dG1hc2spKS5zbGljZSgwLGNhcmV0UG9zLmJlZ2luKS5qb2luKFwiXCIpJiYodmFsdWVCZWZvcmVDYXJldD1cIlwiKSx2YWx1ZUFmdGVyQ2FyZXQ9PShpbnB1dG1hc2suaXNSVEw/X3Bvc2l0aW9uaW5nLmdldEJ1ZmZlclRlbXBsYXRlLmNhbGwoaW5wdXRtYXNrKS5zbGljZSgpLnJldmVyc2UoKTpfcG9zaXRpb25pbmcuZ2V0QnVmZmVyVGVtcGxhdGUuY2FsbChpbnB1dG1hc2spKS5zbGljZShjYXJldFBvcy5lbmQpLmpvaW4oXCJcIikmJih2YWx1ZUFmdGVyQ2FyZXQ9XCJcIiksd2luZG93LmNsaXBib2FyZERhdGEmJndpbmRvdy5jbGlwYm9hcmREYXRhLmdldERhdGEpaW5wdXRWYWx1ZT12YWx1ZUJlZm9yZUNhcmV0K3dpbmRvdy5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJUZXh0XCIpK3ZhbHVlQWZ0ZXJDYXJldDtlbHNle2lmKCFlLmNsaXBib2FyZERhdGF8fCFlLmNsaXBib2FyZERhdGEuZ2V0RGF0YSlyZXR1cm4hMDtpbnB1dFZhbHVlPXZhbHVlQmVmb3JlQ2FyZXQrZS5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJ0ZXh0L3BsYWluXCIpK3ZhbHVlQWZ0ZXJDYXJldH12YXIgcGFzdGVWYWx1ZT1pbnB1dFZhbHVlO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG9wdHMub25CZWZvcmVQYXN0ZSl7aWYocGFzdGVWYWx1ZT1vcHRzLm9uQmVmb3JlUGFzdGUuY2FsbChpbnB1dG1hc2ssaW5wdXRWYWx1ZSxvcHRzKSwhMT09PXBhc3RlVmFsdWUpcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtwYXN0ZVZhbHVlPXBhc3RlVmFsdWV8fGlucHV0VmFsdWV9cmV0dXJuKDAsX2lucHV0SGFuZGxpbmcuY2hlY2tWYWwpKHRoaXMsITAsITEscGFzdGVWYWx1ZS50b1N0cmluZygpLnNwbGl0KFwiXCIpLGUpLGUucHJldmVudERlZmF1bHQoKX0saW5wdXRGYWxsQmFja0V2ZW50OmZ1bmN0aW9uIGlucHV0RmFsbEJhY2tFdmVudChlKXt2YXIgaW5wdXRtYXNrPXRoaXMuaW5wdXRtYXNrLG9wdHM9aW5wdXRtYXNrLm9wdHMsJD1pbnB1dG1hc2suZGVwZW5kZW5jeUxpYjtmdW5jdGlvbiBpZU1vYmlsZUhhbmRsZXIoaW5wdXQsaW5wdXRWYWx1ZSxjYXJldFBvcyl7aWYoX2Vudmlyb25tZW50LmllbW9iaWxlKXt2YXIgaW5wdXRDaGFyPWlucHV0VmFsdWUucmVwbGFjZShfcG9zaXRpb25pbmcuZ2V0QnVmZmVyLmNhbGwoaW5wdXRtYXNrKS5qb2luKFwiXCIpLFwiXCIpO2lmKDE9PT1pbnB1dENoYXIubGVuZ3RoKXt2YXIgaXY9aW5wdXRWYWx1ZS5zcGxpdChcIlwiKTtpdi5zcGxpY2UoY2FyZXRQb3MuYmVnaW4sMCxpbnB1dENoYXIpLGlucHV0VmFsdWU9aXYuam9pbihcIlwiKX19cmV0dXJuIGlucHV0VmFsdWV9ZnVuY3Rpb24gYW5hbHlzZUNoYW5nZXMoaW5wdXRWYWx1ZSxidWZmZXIsY2FyZXRQb3Mpe2Zvcih2YXIgZnJvbnRQYXJ0PWlucHV0VmFsdWUuc3Vic3RyKDAsY2FyZXRQb3MuYmVnaW4pLnNwbGl0KFwiXCIpLGJhY2tQYXJ0PWlucHV0VmFsdWUuc3Vic3RyKGNhcmV0UG9zLmJlZ2luKS5zcGxpdChcIlwiKSxmcm9udEJ1ZmZlclBhcnQ9YnVmZmVyLnN1YnN0cigwLGNhcmV0UG9zLmJlZ2luKS5zcGxpdChcIlwiKSxiYWNrQnVmZmVyUGFydD1idWZmZXIuc3Vic3RyKGNhcmV0UG9zLmJlZ2luKS5zcGxpdChcIlwiKSxmcGw9ZnJvbnRQYXJ0Lmxlbmd0aD49ZnJvbnRCdWZmZXJQYXJ0Lmxlbmd0aD9mcm9udFBhcnQubGVuZ3RoOmZyb250QnVmZmVyUGFydC5sZW5ndGgsYnBsPWJhY2tQYXJ0Lmxlbmd0aD49YmFja0J1ZmZlclBhcnQubGVuZ3RoP2JhY2tQYXJ0Lmxlbmd0aDpiYWNrQnVmZmVyUGFydC5sZW5ndGgsYmwsaSxhY3Rpb249XCJcIixkYXRhPVtdLG1hcmtlcj1cIn5cIixwbGFjZWhvbGRlcjtmcm9udFBhcnQubGVuZ3RoPGZwbDspZnJvbnRQYXJ0LnB1c2goXCJ+XCIpO2Zvcig7ZnJvbnRCdWZmZXJQYXJ0Lmxlbmd0aDxmcGw7KWZyb250QnVmZmVyUGFydC5wdXNoKFwiflwiKTtmb3IoO2JhY2tQYXJ0Lmxlbmd0aDxicGw7KWJhY2tQYXJ0LnVuc2hpZnQoXCJ+XCIpO2Zvcig7YmFja0J1ZmZlclBhcnQubGVuZ3RoPGJwbDspYmFja0J1ZmZlclBhcnQudW5zaGlmdChcIn5cIik7dmFyIG5ld0J1ZmZlcj1mcm9udFBhcnQuY29uY2F0KGJhY2tQYXJ0KSxvbGRCdWZmZXI9ZnJvbnRCdWZmZXJQYXJ0LmNvbmNhdChiYWNrQnVmZmVyUGFydCk7Zm9yKGk9MCxibD1uZXdCdWZmZXIubGVuZ3RoO2k8Ymw7aSsrKXN3aXRjaChwbGFjZWhvbGRlcj1fdmFsaWRhdGlvblRlc3RzLmdldFBsYWNlaG9sZGVyLmNhbGwoaW5wdXRtYXNrLF9wb3NpdGlvbmluZy50cmFuc2xhdGVQb3NpdGlvbi5jYWxsKGlucHV0bWFzayxpKSksYWN0aW9uKXtjYXNlXCJpbnNlcnRUZXh0XCI6b2xkQnVmZmVyW2ktMV09PT1uZXdCdWZmZXJbaV0mJmNhcmV0UG9zLmJlZ2luPT1uZXdCdWZmZXIubGVuZ3RoLTEmJmRhdGEucHVzaChuZXdCdWZmZXJbaV0pLGk9Ymw7YnJlYWs7Y2FzZVwiaW5zZXJ0UmVwbGFjZW1lbnRUZXh0XCI6XCJ+XCI9PT1uZXdCdWZmZXJbaV0/Y2FyZXRQb3MuZW5kKys6aT1ibDticmVhaztjYXNlXCJkZWxldGVDb250ZW50QmFja3dhcmRcIjpcIn5cIj09PW5ld0J1ZmZlcltpXT9jYXJldFBvcy5lbmQrKzppPWJsO2JyZWFrO2RlZmF1bHQ6bmV3QnVmZmVyW2ldIT09b2xkQnVmZmVyW2ldJiYoXCJ+XCIhPT1uZXdCdWZmZXJbaSsxXSYmbmV3QnVmZmVyW2krMV0hPT1wbGFjZWhvbGRlciYmdm9pZCAwIT09bmV3QnVmZmVyW2krMV18fChvbGRCdWZmZXJbaV0hPT1wbGFjZWhvbGRlcnx8XCJ+XCIhPT1vbGRCdWZmZXJbaSsxXSkmJlwiflwiIT09b2xkQnVmZmVyW2ldP1wiflwiPT09b2xkQnVmZmVyW2krMV0mJm9sZEJ1ZmZlcltpXT09PW5ld0J1ZmZlcltpKzFdPyhhY3Rpb249XCJpbnNlcnRUZXh0XCIsZGF0YS5wdXNoKG5ld0J1ZmZlcltpXSksY2FyZXRQb3MuYmVnaW4tLSxjYXJldFBvcy5lbmQtLSk6bmV3QnVmZmVyW2ldIT09cGxhY2Vob2xkZXImJlwiflwiIT09bmV3QnVmZmVyW2ldJiYoXCJ+XCI9PT1uZXdCdWZmZXJbaSsxXXx8b2xkQnVmZmVyW2ldIT09bmV3QnVmZmVyW2ldJiZvbGRCdWZmZXJbaSsxXT09PW5ld0J1ZmZlcltpKzFdKT8oYWN0aW9uPVwiaW5zZXJ0UmVwbGFjZW1lbnRUZXh0XCIsZGF0YS5wdXNoKG5ld0J1ZmZlcltpXSksY2FyZXRQb3MuYmVnaW4tLSk6XCJ+XCI9PT1uZXdCdWZmZXJbaV0/KGFjdGlvbj1cImRlbGV0ZUNvbnRlbnRCYWNrd2FyZFwiLCFfcG9zaXRpb25pbmcuaXNNYXNrLmNhbGwoaW5wdXRtYXNrLF9wb3NpdGlvbmluZy50cmFuc2xhdGVQb3NpdGlvbi5jYWxsKGlucHV0bWFzayxpKSwhMCkmJm9sZEJ1ZmZlcltpXSE9PW9wdHMucmFkaXhQb2ludHx8Y2FyZXRQb3MuZW5kKyspOmk9Ymw6KGFjdGlvbj1cImluc2VydFRleHRcIixkYXRhLnB1c2gobmV3QnVmZmVyW2ldKSxjYXJldFBvcy5iZWdpbi0tLGNhcmV0UG9zLmVuZC0tKSk7YnJlYWt9cmV0dXJue2FjdGlvbjphY3Rpb24sZGF0YTpkYXRhLGNhcmV0OmNhcmV0UG9zfX12YXIgaW5wdXQ9dGhpcyxpbnB1dFZhbHVlPWlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoITApLGJ1ZmZlcj0oaW5wdXRtYXNrLmlzUlRMP19wb3NpdGlvbmluZy5nZXRCdWZmZXIuY2FsbChpbnB1dG1hc2spLnNsaWNlKCkucmV2ZXJzZSgpOl9wb3NpdGlvbmluZy5nZXRCdWZmZXIuY2FsbChpbnB1dG1hc2spKS5qb2luKFwiXCIpLGNhcmV0UG9zPV9wb3NpdGlvbmluZy5jYXJldC5jYWxsKGlucHV0bWFzayxpbnB1dCx2b2lkIDAsdm9pZCAwLCEwKTtpZihidWZmZXIhPT1pbnB1dFZhbHVlKXtpbnB1dFZhbHVlPWllTW9iaWxlSGFuZGxlcihpbnB1dCxpbnB1dFZhbHVlLGNhcmV0UG9zKTt2YXIgY2hhbmdlcz1hbmFseXNlQ2hhbmdlcyhpbnB1dFZhbHVlLGJ1ZmZlcixjYXJldFBvcyk7c3dpdGNoKChpbnB1dC5pbnB1dG1hc2suc2hhZG93Um9vdHx8ZG9jdW1lbnQpLmFjdGl2ZUVsZW1lbnQhPT1pbnB1dCYmaW5wdXQuZm9jdXMoKSwoMCxfaW5wdXRIYW5kbGluZy53cml0ZUJ1ZmZlcikoaW5wdXQsX3Bvc2l0aW9uaW5nLmdldEJ1ZmZlci5jYWxsKGlucHV0bWFzaykpLF9wb3NpdGlvbmluZy5jYXJldC5jYWxsKGlucHV0bWFzayxpbnB1dCxjYXJldFBvcy5iZWdpbixjYXJldFBvcy5lbmQsITApLGNoYW5nZXMuYWN0aW9uKXtjYXNlXCJpbnNlcnRUZXh0XCI6Y2FzZVwiaW5zZXJ0UmVwbGFjZW1lbnRUZXh0XCI6Y2hhbmdlcy5kYXRhLmZvckVhY2goZnVuY3Rpb24oZW50cnksbmR4KXt2YXIga2V5cHJlc3M9bmV3ICQuRXZlbnQoXCJrZXlwcmVzc1wiKTtrZXlwcmVzcy53aGljaD1lbnRyeS5jaGFyQ29kZUF0KDApLGlucHV0bWFzay5pZ25vcmFibGU9ITEsRXZlbnRIYW5kbGVycy5rZXlwcmVzc0V2ZW50LmNhbGwoaW5wdXQsa2V5cHJlc3MpfSksc2V0VGltZW91dChmdW5jdGlvbigpe2lucHV0bWFzay4kZWwudHJpZ2dlcihcImtleXVwXCIpfSwwKTticmVhaztjYXNlXCJkZWxldGVDb250ZW50QmFja3dhcmRcIjp2YXIga2V5ZG93bj1uZXcgJC5FdmVudChcImtleWRvd25cIik7a2V5ZG93bi5rZXlDb2RlPV9rZXljb2RlLmRlZmF1bHQuQkFDS1NQQUNFLEV2ZW50SGFuZGxlcnMua2V5ZG93bkV2ZW50LmNhbGwoaW5wdXQsa2V5ZG93bik7YnJlYWs7ZGVmYXVsdDooMCxfaW5wdXRIYW5kbGluZy5hcHBseUlucHV0VmFsdWUpKGlucHV0LGlucHV0VmFsdWUpO2JyZWFrfWUucHJldmVudERlZmF1bHQoKX19LGNvbXBvc2l0aW9uZW5kRXZlbnQ6ZnVuY3Rpb24gY29tcG9zaXRpb25lbmRFdmVudChlKXt2YXIgaW5wdXRtYXNrPXRoaXMuaW5wdXRtYXNrO2lucHV0bWFzay5pc0NvbXBvc2luZz0hMSxpbnB1dG1hc2suJGVsLnRyaWdnZXIoXCJpbnB1dFwiKX0sc2V0VmFsdWVFdmVudDpmdW5jdGlvbiBzZXRWYWx1ZUV2ZW50KGUsYXJndW1lbnRfMSxhcmd1bWVudF8yKXt2YXIgaW5wdXRtYXNrPXRoaXMuaW5wdXRtYXNrLGlucHV0PXRoaXMsdmFsdWU9ZSYmZS5kZXRhaWw/ZS5kZXRhaWxbMF06YXJndW1lbnRfMTt2b2lkIDA9PT12YWx1ZSYmKHZhbHVlPXRoaXMuaW5wdXRtYXNrLl92YWx1ZUdldCghMCkpLCgwLF9pbnB1dEhhbmRsaW5nLmFwcGx5SW5wdXRWYWx1ZSkodGhpcyx2YWx1ZSksKGUuZGV0YWlsJiZ2b2lkIDAhPT1lLmRldGFpbFsxXXx8dm9pZCAwIT09YXJndW1lbnRfMikmJl9wb3NpdGlvbmluZy5jYXJldC5jYWxsKGlucHV0bWFzayx0aGlzLGUuZGV0YWlsP2UuZGV0YWlsWzFdOmFyZ3VtZW50XzIpfSxmb2N1c0V2ZW50OmZ1bmN0aW9uIGZvY3VzRXZlbnQoZSl7dmFyIGlucHV0bWFzaz10aGlzLmlucHV0bWFzayxvcHRzPWlucHV0bWFzay5vcHRzLGlucHV0PXRoaXMsbnB0VmFsdWU9dGhpcy5pbnB1dG1hc2suX3ZhbHVlR2V0KCk7b3B0cy5zaG93TWFza09uRm9jdXMmJm5wdFZhbHVlIT09X3Bvc2l0aW9uaW5nLmdldEJ1ZmZlci5jYWxsKGlucHV0bWFzaykuam9pbihcIlwiKSYmKDAsX2lucHV0SGFuZGxpbmcud3JpdGVCdWZmZXIpKHRoaXMsX3Bvc2l0aW9uaW5nLmdldEJ1ZmZlci5jYWxsKGlucHV0bWFzayksX3Bvc2l0aW9uaW5nLnNlZWtOZXh0LmNhbGwoaW5wdXRtYXNrLF9wb3NpdGlvbmluZy5nZXRMYXN0VmFsaWRQb3NpdGlvbi5jYWxsKGlucHV0bWFzaykpKSwhMCE9PW9wdHMucG9zaXRpb25DYXJldE9uVGFifHwhMSE9PWlucHV0bWFzay5tb3VzZUVudGVyfHxfdmFsaWRhdGlvbi5pc0NvbXBsZXRlLmNhbGwoaW5wdXRtYXNrLF9wb3NpdGlvbmluZy5nZXRCdWZmZXIuY2FsbChpbnB1dG1hc2spKSYmLTEhPT1fcG9zaXRpb25pbmcuZ2V0TGFzdFZhbGlkUG9zaXRpb24uY2FsbChpbnB1dG1hc2spfHxFdmVudEhhbmRsZXJzLmNsaWNrRXZlbnQuYXBwbHkodGhpcyxbZSwhMF0pLGlucHV0bWFzay51bmRvVmFsdWU9X3Bvc2l0aW9uaW5nLmdldEJ1ZmZlci5jYWxsKGlucHV0bWFzaykuam9pbihcIlwiKX0saW52YWxpZEV2ZW50OmZ1bmN0aW9uIGludmFsaWRFdmVudChlKXt0aGlzLmlucHV0bWFzay52YWxpZGF0aW9uRXZlbnQ9ITB9LG1vdXNlbGVhdmVFdmVudDpmdW5jdGlvbiBtb3VzZWxlYXZlRXZlbnQoKXt2YXIgaW5wdXRtYXNrPXRoaXMuaW5wdXRtYXNrLG9wdHM9aW5wdXRtYXNrLm9wdHMsaW5wdXQ9dGhpcztpbnB1dG1hc2subW91c2VFbnRlcj0hMSxvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzJiYodGhpcy5pbnB1dG1hc2suc2hhZG93Um9vdHx8ZG9jdW1lbnQpLmFjdGl2ZUVsZW1lbnQhPT10aGlzJiYoMCxfaW5wdXRIYW5kbGluZy5IYW5kbGVOYXRpdmVQbGFjZWhvbGRlcikodGhpcyxpbnB1dG1hc2sub3JpZ2luYWxQbGFjZWhvbGRlcil9LGNsaWNrRXZlbnQ6ZnVuY3Rpb24gY2xpY2tFdmVudChlLHRhYmJlZCl7dmFyIGlucHV0bWFzaz10aGlzLmlucHV0bWFzayxpbnB1dD10aGlzO2lmKCh0aGlzLmlucHV0bWFzay5zaGFkb3dSb290fHxkb2N1bWVudCkuYWN0aXZlRWxlbWVudD09PXRoaXMpe3ZhciBuZXdDYXJldFBvc2l0aW9uPV9wb3NpdGlvbmluZy5kZXRlcm1pbmVOZXdDYXJldFBvc2l0aW9uLmNhbGwoaW5wdXRtYXNrLF9wb3NpdGlvbmluZy5jYXJldC5jYWxsKGlucHV0bWFzayx0aGlzKSx0YWJiZWQpO3ZvaWQgMCE9PW5ld0NhcmV0UG9zaXRpb24mJl9wb3NpdGlvbmluZy5jYXJldC5jYWxsKGlucHV0bWFzayx0aGlzLG5ld0NhcmV0UG9zaXRpb24pfX0sY3V0RXZlbnQ6ZnVuY3Rpb24gY3V0RXZlbnQoZSl7dmFyIGlucHV0bWFzaz10aGlzLmlucHV0bWFzayxtYXNrc2V0PWlucHV0bWFzay5tYXNrc2V0LGlucHV0PXRoaXMscG9zPV9wb3NpdGlvbmluZy5jYXJldC5jYWxsKGlucHV0bWFzayx0aGlzKSxjbGlwYm9hcmREYXRhPXdpbmRvdy5jbGlwYm9hcmREYXRhfHxlLmNsaXBib2FyZERhdGEsY2xpcERhdGE9aW5wdXRtYXNrLmlzUlRMP19wb3NpdGlvbmluZy5nZXRCdWZmZXIuY2FsbChpbnB1dG1hc2spLnNsaWNlKHBvcy5lbmQscG9zLmJlZ2luKTpfcG9zaXRpb25pbmcuZ2V0QnVmZmVyLmNhbGwoaW5wdXRtYXNrKS5zbGljZShwb3MuYmVnaW4scG9zLmVuZCk7Y2xpcGJvYXJkRGF0YS5zZXREYXRhKFwidGV4dFwiLGlucHV0bWFzay5pc1JUTD9jbGlwRGF0YS5yZXZlcnNlKCkuam9pbihcIlwiKTpjbGlwRGF0YS5qb2luKFwiXCIpKSxkb2N1bWVudC5leGVjQ29tbWFuZCYmZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJjb3B5XCIpLF92YWxpZGF0aW9uLmhhbmRsZVJlbW92ZS5jYWxsKGlucHV0bWFzayx0aGlzLF9rZXljb2RlLmRlZmF1bHQuREVMRVRFLHBvcyksKDAsX2lucHV0SGFuZGxpbmcud3JpdGVCdWZmZXIpKHRoaXMsX3Bvc2l0aW9uaW5nLmdldEJ1ZmZlci5jYWxsKGlucHV0bWFzayksbWFza3NldC5wLGUsaW5wdXRtYXNrLnVuZG9WYWx1ZSE9PV9wb3NpdGlvbmluZy5nZXRCdWZmZXIuY2FsbChpbnB1dG1hc2spLmpvaW4oXCJcIikpfSxibHVyRXZlbnQ6ZnVuY3Rpb24gYmx1ckV2ZW50KGUpe3ZhciBpbnB1dG1hc2s9dGhpcy5pbnB1dG1hc2ssb3B0cz1pbnB1dG1hc2sub3B0cywkPWlucHV0bWFzay5kZXBlbmRlbmN5TGliLCRpbnB1dD0kKHRoaXMpLGlucHV0PXRoaXM7aWYodGhpcy5pbnB1dG1hc2speygwLF9pbnB1dEhhbmRsaW5nLkhhbmRsZU5hdGl2ZVBsYWNlaG9sZGVyKSh0aGlzLGlucHV0bWFzay5vcmlnaW5hbFBsYWNlaG9sZGVyKTt2YXIgbnB0VmFsdWU9dGhpcy5pbnB1dG1hc2suX3ZhbHVlR2V0KCksYnVmZmVyPV9wb3NpdGlvbmluZy5nZXRCdWZmZXIuY2FsbChpbnB1dG1hc2spLnNsaWNlKCk7XCJcIiE9PW5wdFZhbHVlJiYob3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyYmKC0xPT09X3Bvc2l0aW9uaW5nLmdldExhc3RWYWxpZFBvc2l0aW9uLmNhbGwoaW5wdXRtYXNrKSYmbnB0VmFsdWU9PT1fcG9zaXRpb25pbmcuZ2V0QnVmZmVyVGVtcGxhdGUuY2FsbChpbnB1dG1hc2spLmpvaW4oXCJcIik/YnVmZmVyPVtdOl9pbnB1dEhhbmRsaW5nLmNsZWFyT3B0aW9uYWxUYWlsLmNhbGwoaW5wdXRtYXNrLGJ1ZmZlcikpLCExPT09X3ZhbGlkYXRpb24uaXNDb21wbGV0ZS5jYWxsKGlucHV0bWFzayxidWZmZXIpJiYoc2V0VGltZW91dChmdW5jdGlvbigpeyRpbnB1dC50cmlnZ2VyKFwiaW5jb21wbGV0ZVwiKX0sMCksb3B0cy5jbGVhckluY29tcGxldGUmJihfcG9zaXRpb25pbmcucmVzZXRNYXNrU2V0LmNhbGwoaW5wdXRtYXNrKSxidWZmZXI9b3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cz9bXTpfcG9zaXRpb25pbmcuZ2V0QnVmZmVyVGVtcGxhdGUuY2FsbChpbnB1dG1hc2spLnNsaWNlKCkpKSwoMCxfaW5wdXRIYW5kbGluZy53cml0ZUJ1ZmZlcikodGhpcyxidWZmZXIsdm9pZCAwLGUpKSxpbnB1dG1hc2sudW5kb1ZhbHVlIT09X3Bvc2l0aW9uaW5nLmdldEJ1ZmZlci5jYWxsKGlucHV0bWFzaykuam9pbihcIlwiKSYmKGlucHV0bWFzay51bmRvVmFsdWU9X3Bvc2l0aW9uaW5nLmdldEJ1ZmZlci5jYWxsKGlucHV0bWFzaykuam9pbihcIlwiKSwkaW5wdXQudHJpZ2dlcihcImNoYW5nZVwiKSl9fSxtb3VzZWVudGVyRXZlbnQ6ZnVuY3Rpb24gbW91c2VlbnRlckV2ZW50KCl7dmFyIGlucHV0bWFzaz10aGlzLmlucHV0bWFzayxvcHRzPWlucHV0bWFzay5vcHRzLGlucHV0PXRoaXM7aW5wdXRtYXNrLm1vdXNlRW50ZXI9ITAsKHRoaXMuaW5wdXRtYXNrLnNoYWRvd1Jvb3R8fGRvY3VtZW50KS5hY3RpdmVFbGVtZW50IT09dGhpcyYmKG51bGw9PWlucHV0bWFzay5vcmlnaW5hbFBsYWNlaG9sZGVyJiZ0aGlzLnBsYWNlaG9sZGVyIT09aW5wdXRtYXNrLm9yaWdpbmFsUGxhY2Vob2xkZXImJihpbnB1dG1hc2sub3JpZ2luYWxQbGFjZWhvbGRlcj10aGlzLnBsYWNlaG9sZGVyKSxvcHRzLnNob3dNYXNrT25Ib3ZlciYmKDAsX2lucHV0SGFuZGxpbmcuSGFuZGxlTmF0aXZlUGxhY2Vob2xkZXIpKHRoaXMsKGlucHV0bWFzay5pc1JUTD9fcG9zaXRpb25pbmcuZ2V0QnVmZmVyVGVtcGxhdGUuY2FsbChpbnB1dG1hc2spLnNsaWNlKCkucmV2ZXJzZSgpOl9wb3NpdGlvbmluZy5nZXRCdWZmZXJUZW1wbGF0ZS5jYWxsKGlucHV0bWFzaykpLmpvaW4oXCJcIikpKX0sc3VibWl0RXZlbnQ6ZnVuY3Rpb24gc3VibWl0RXZlbnQoKXt2YXIgaW5wdXRtYXNrPXRoaXMuaW5wdXRtYXNrLG9wdHM9aW5wdXRtYXNrLm9wdHM7aW5wdXRtYXNrLnVuZG9WYWx1ZSE9PV9wb3NpdGlvbmluZy5nZXRCdWZmZXIuY2FsbChpbnB1dG1hc2spLmpvaW4oXCJcIikmJmlucHV0bWFzay4kZWwudHJpZ2dlcihcImNoYW5nZVwiKSxvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzJiYtMT09PV9wb3NpdGlvbmluZy5nZXRMYXN0VmFsaWRQb3NpdGlvbi5jYWxsKGlucHV0bWFzaykmJmlucHV0bWFzay5fdmFsdWVHZXQmJmlucHV0bWFzay5fdmFsdWVHZXQoKT09PV9wb3NpdGlvbmluZy5nZXRCdWZmZXJUZW1wbGF0ZS5jYWxsKGlucHV0bWFzaykuam9pbihcIlwiKSYmaW5wdXRtYXNrLl92YWx1ZVNldChcIlwiKSxvcHRzLmNsZWFySW5jb21wbGV0ZSYmITE9PT1fdmFsaWRhdGlvbi5pc0NvbXBsZXRlLmNhbGwoaW5wdXRtYXNrLF9wb3NpdGlvbmluZy5nZXRCdWZmZXIuY2FsbChpbnB1dG1hc2spKSYmaW5wdXRtYXNrLl92YWx1ZVNldChcIlwiKSxvcHRzLnJlbW92ZU1hc2tPblN1Ym1pdCYmKGlucHV0bWFzay5fdmFsdWVTZXQoaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKSwhMCksc2V0VGltZW91dChmdW5jdGlvbigpeygwLF9pbnB1dEhhbmRsaW5nLndyaXRlQnVmZmVyKShpbnB1dG1hc2suZWwsX3Bvc2l0aW9uaW5nLmdldEJ1ZmZlci5jYWxsKGlucHV0bWFzaykpfSwwKSl9LHJlc2V0RXZlbnQ6ZnVuY3Rpb24gcmVzZXRFdmVudCgpe3ZhciBpbnB1dG1hc2s9dGhpcy5pbnB1dG1hc2s7aW5wdXRtYXNrLnJlZnJlc2hWYWx1ZT0hMCxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7KDAsX2lucHV0SGFuZGxpbmcuYXBwbHlJbnB1dFZhbHVlKShpbnB1dG1hc2suZWwsaW5wdXRtYXNrLl92YWx1ZUdldCghMCkpfSwwKX19O2V4cG9ydHMuRXZlbnRIYW5kbGVycz1FdmVudEhhbmRsZXJzfSxmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxleHBvcnRzLmlwaG9uZT1leHBvcnRzLmllbW9iaWxlPWV4cG9ydHMubW9iaWxlPWV4cG9ydHMuaWU9ZXhwb3J0cy51YT12b2lkIDA7dmFyIHVhPXdpbmRvdy5uYXZpZ2F0b3ImJndpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50fHxcIlwiLGllPTA8dWEuaW5kZXhPZihcIk1TSUUgXCIpfHwwPHVhLmluZGV4T2YoXCJUcmlkZW50L1wiKSxtb2JpbGU9XCJvbnRvdWNoc3RhcnRcImluIHdpbmRvdyxpZW1vYmlsZT0vaWVtb2JpbGUvaS50ZXN0KHVhKSxpcGhvbmU9L2lwaG9uZS9pLnRlc3QodWEpJiYhaWVtb2JpbGU7ZXhwb3J0cy5pcGhvbmU9aXBob25lLGV4cG9ydHMuaWVtb2JpbGU9aWVtb2JpbGUsZXhwb3J0cy5tb2JpbGU9bW9iaWxlLGV4cG9ydHMuaWU9aWUsZXhwb3J0cy51YT11YX0sZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZXhwb3J0cy5kZWZhdWx0PXZvaWQgMDt2YXIgX2V4dGVuZD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMTIpKSxfd2luZG93PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg2KSksX2RhdGE9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KSksX2V2ZW50cz1fX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntkZWZhdWx0Om9ian19dmFyIGRvY3VtZW50PV93aW5kb3cuZGVmYXVsdC5kb2N1bWVudDtmdW5jdGlvbiBEZXBlbmRlbmN5TGliKGVsZW0pe3JldHVybiBlbGVtIGluc3RhbmNlb2YgRGVwZW5kZW5jeUxpYj9lbGVtOnRoaXMgaW5zdGFuY2VvZiBEZXBlbmRlbmN5TGliP3ZvaWQobnVsbCE9ZWxlbSYmZWxlbSE9PV93aW5kb3cuZGVmYXVsdCYmKHRoaXNbMF09ZWxlbS5ub2RlTmFtZT9lbGVtOnZvaWQgMCE9PWVsZW1bMF0mJmVsZW1bMF0ubm9kZU5hbWU/ZWxlbVswXTpkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW0pLHZvaWQgMCE9PXRoaXNbMF0mJm51bGwhPT10aGlzWzBdJiYodGhpc1swXS5ldmVudFJlZ2lzdHJ5PXRoaXNbMF0uZXZlbnRSZWdpc3RyeXx8e30pKSk6bmV3IERlcGVuZGVuY3lMaWIoZWxlbSl9RGVwZW5kZW5jeUxpYi5wcm90b3R5cGU9e29uOl9ldmVudHMub24sb2ZmOl9ldmVudHMub2ZmLHRyaWdnZXI6X2V2ZW50cy50cmlnZ2VyfSxEZXBlbmRlbmN5TGliLmV4dGVuZD1fZXh0ZW5kLmRlZmF1bHQsRGVwZW5kZW5jeUxpYi5kYXRhPV9kYXRhLmRlZmF1bHQsRGVwZW5kZW5jeUxpYi5FdmVudD1fZXZlbnRzLkV2ZW50O3ZhciBfZGVmYXVsdD1EZXBlbmRlbmN5TGliO2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdH0sZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZXhwb3J0cy5tYXNrPW1hc2s7dmFyIF9rZXljb2RlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygwKSksX3Bvc2l0aW9uaW5nPV9fd2VicGFja19yZXF1aXJlX18oMSksX2lucHV0SGFuZGxpbmc9X193ZWJwYWNrX3JlcXVpcmVfXyg1KSxfZXZlbnRydWxlcj1fX3dlYnBhY2tfcmVxdWlyZV9fKDExKSxfZW52aXJvbm1lbnQ9X193ZWJwYWNrX3JlcXVpcmVfXyg4KSxfdmFsaWRhdGlvbj1fX3dlYnBhY2tfcmVxdWlyZV9fKDQpLF9ldmVudGhhbmRsZXJzPV9fd2VicGFja19yZXF1aXJlX18oNyk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7ZGVmYXVsdDpvYmp9fWZ1bmN0aW9uIG1hc2soKXt2YXIgaW5wdXRtYXNrPXRoaXMsb3B0cz10aGlzLm9wdHMsZWw9dGhpcy5lbCwkPXRoaXMuZGVwZW5kZW5jeUxpYjtmdW5jdGlvbiBpc0VsZW1lbnRUeXBlU3VwcG9ydGVkKGlucHV0LG9wdHMpe2Z1bmN0aW9uIHBhdGNoVmFsdWVQcm9wZXJ0eShucHQpe3ZhciB2YWx1ZUdldCx2YWx1ZVNldDtmdW5jdGlvbiBwYXRjaFZhbGhvb2sodHlwZSl7aWYoJC52YWxIb29rcyYmKHZvaWQgMD09PSQudmFsSG9va3NbdHlwZV18fCEwIT09JC52YWxIb29rc1t0eXBlXS5pbnB1dG1hc2twYXRjaCkpe3ZhciB2YWxob29rR2V0PSQudmFsSG9va3NbdHlwZV0mJiQudmFsSG9va3NbdHlwZV0uZ2V0PyQudmFsSG9va3NbdHlwZV0uZ2V0OmZ1bmN0aW9uKGVsZW0pe3JldHVybiBlbGVtLnZhbHVlfSx2YWxob29rU2V0PSQudmFsSG9va3NbdHlwZV0mJiQudmFsSG9va3NbdHlwZV0uc2V0PyQudmFsSG9va3NbdHlwZV0uc2V0OmZ1bmN0aW9uKGVsZW0sdmFsdWUpe3JldHVybiBlbGVtLnZhbHVlPXZhbHVlLGVsZW19OyQudmFsSG9va3NbdHlwZV09e2dldDpmdW5jdGlvbiBnZXQoZWxlbSl7aWYoZWxlbS5pbnB1dG1hc2spe2lmKGVsZW0uaW5wdXRtYXNrLm9wdHMuYXV0b1VubWFzaylyZXR1cm4gZWxlbS5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpO3ZhciByZXN1bHQ9dmFsaG9va0dldChlbGVtKTtyZXR1cm4tMSE9PV9wb3NpdGlvbmluZy5nZXRMYXN0VmFsaWRQb3NpdGlvbi5jYWxsKGlucHV0bWFzayx2b2lkIDAsdm9pZCAwLGVsZW0uaW5wdXRtYXNrLm1hc2tzZXQudmFsaWRQb3NpdGlvbnMpfHwhMCE9PW9wdHMubnVsbGFibGU/cmVzdWx0OlwiXCJ9cmV0dXJuIHZhbGhvb2tHZXQoZWxlbSl9LHNldDpmdW5jdGlvbiBzZXQoZWxlbSx2YWx1ZSl7dmFyIHJlc3VsdD12YWxob29rU2V0KGVsZW0sdmFsdWUpO3JldHVybiBlbGVtLmlucHV0bWFzayYmKDAsX2lucHV0SGFuZGxpbmcuYXBwbHlJbnB1dFZhbHVlKShlbGVtLHZhbHVlKSxyZXN1bHR9LGlucHV0bWFza3BhdGNoOiEwfX19ZnVuY3Rpb24gZ2V0dGVyKCl7cmV0dXJuIHRoaXMuaW5wdXRtYXNrP3RoaXMuaW5wdXRtYXNrLm9wdHMuYXV0b1VubWFzaz90aGlzLmlucHV0bWFzay51bm1hc2tlZHZhbHVlKCk6LTEhPT1fcG9zaXRpb25pbmcuZ2V0TGFzdFZhbGlkUG9zaXRpb24uY2FsbChpbnB1dG1hc2spfHwhMCE9PW9wdHMubnVsbGFibGU/KHRoaXMuaW5wdXRtYXNrLnNoYWRvd1Jvb3R8fGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpPT09dGhpcyYmb3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cz8oaW5wdXRtYXNrLmlzUlRMP19pbnB1dEhhbmRsaW5nLmNsZWFyT3B0aW9uYWxUYWlsLmNhbGwoaW5wdXRtYXNrLF9wb3NpdGlvbmluZy5nZXRCdWZmZXIuY2FsbChpbnB1dG1hc2spLnNsaWNlKCkpLnJldmVyc2UoKTpfaW5wdXRIYW5kbGluZy5jbGVhck9wdGlvbmFsVGFpbC5jYWxsKGlucHV0bWFzayxfcG9zaXRpb25pbmcuZ2V0QnVmZmVyLmNhbGwoaW5wdXRtYXNrKS5zbGljZSgpKSkuam9pbihcIlwiKTp2YWx1ZUdldC5jYWxsKHRoaXMpOlwiXCI6dmFsdWVHZXQuY2FsbCh0aGlzKX1mdW5jdGlvbiBzZXR0ZXIodmFsdWUpe3ZhbHVlU2V0LmNhbGwodGhpcyx2YWx1ZSksdGhpcy5pbnB1dG1hc2smJigwLF9pbnB1dEhhbmRsaW5nLmFwcGx5SW5wdXRWYWx1ZSkodGhpcyx2YWx1ZSl9ZnVuY3Rpb24gaW5zdGFsbE5hdGl2ZVZhbHVlU2V0RmFsbGJhY2sobnB0KXtfZXZlbnRydWxlci5FdmVudFJ1bGVyLm9uKG5wdCxcIm1vdXNlZW50ZXJcIixmdW5jdGlvbigpe3ZhciBpbnB1dD10aGlzLHZhbHVlPXRoaXMuaW5wdXRtYXNrLl92YWx1ZUdldCghMCk7dmFsdWUhPT0oaW5wdXRtYXNrLmlzUlRMP19wb3NpdGlvbmluZy5nZXRCdWZmZXIuY2FsbChpbnB1dG1hc2spLnJldmVyc2UoKTpfcG9zaXRpb25pbmcuZ2V0QnVmZmVyLmNhbGwoaW5wdXRtYXNrKSkuam9pbihcIlwiKSYmKDAsX2lucHV0SGFuZGxpbmcuYXBwbHlJbnB1dFZhbHVlKSh0aGlzLHZhbHVlKX0pfWlmKCFucHQuaW5wdXRtYXNrLl9fdmFsdWVHZXQpe2lmKCEwIT09b3B0cy5ub1ZhbHVlUGF0Y2hpbmcpe2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ipe3ZhciB2YWx1ZVByb3BlcnR5PU9iamVjdC5nZXRQcm90b3R5cGVPZj9PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5nZXRQcm90b3R5cGVPZihucHQpLFwidmFsdWVcIik6dm9pZCAwO3ZhbHVlUHJvcGVydHkmJnZhbHVlUHJvcGVydHkuZ2V0JiZ2YWx1ZVByb3BlcnR5LnNldD8odmFsdWVHZXQ9dmFsdWVQcm9wZXJ0eS5nZXQsdmFsdWVTZXQ9dmFsdWVQcm9wZXJ0eS5zZXQsT2JqZWN0LmRlZmluZVByb3BlcnR5KG5wdCxcInZhbHVlXCIse2dldDpnZXR0ZXIsc2V0OnNldHRlcixjb25maWd1cmFibGU6ITB9KSk6XCJpbnB1dFwiIT09bnB0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSYmKHZhbHVlR2V0PWZ1bmN0aW9uIHZhbHVlR2V0KCl7cmV0dXJuIHRoaXMudGV4dENvbnRlbnR9LHZhbHVlU2V0PWZ1bmN0aW9uIHZhbHVlU2V0KHZhbHVlKXt0aGlzLnRleHRDb250ZW50PXZhbHVlfSxPYmplY3QuZGVmaW5lUHJvcGVydHkobnB0LFwidmFsdWVcIix7Z2V0OmdldHRlcixzZXQ6c2V0dGVyLGNvbmZpZ3VyYWJsZTohMH0pKX1lbHNlIGRvY3VtZW50Ll9fbG9va3VwR2V0dGVyX18mJm5wdC5fX2xvb2t1cEdldHRlcl9fKFwidmFsdWVcIikmJih2YWx1ZUdldD1ucHQuX19sb29rdXBHZXR0ZXJfXyhcInZhbHVlXCIpLHZhbHVlU2V0PW5wdC5fX2xvb2t1cFNldHRlcl9fKFwidmFsdWVcIiksbnB0Ll9fZGVmaW5lR2V0dGVyX18oXCJ2YWx1ZVwiLGdldHRlciksbnB0Ll9fZGVmaW5lU2V0dGVyX18oXCJ2YWx1ZVwiLHNldHRlcikpO25wdC5pbnB1dG1hc2suX192YWx1ZUdldD12YWx1ZUdldCxucHQuaW5wdXRtYXNrLl9fdmFsdWVTZXQ9dmFsdWVTZXR9bnB0LmlucHV0bWFzay5fdmFsdWVHZXQ9ZnVuY3Rpb24ob3ZlcnJ1bGVSVEwpe3JldHVybiBpbnB1dG1hc2suaXNSVEwmJiEwIT09b3ZlcnJ1bGVSVEw/dmFsdWVHZXQuY2FsbCh0aGlzLmVsKS5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKTp2YWx1ZUdldC5jYWxsKHRoaXMuZWwpfSxucHQuaW5wdXRtYXNrLl92YWx1ZVNldD1mdW5jdGlvbih2YWx1ZSxvdmVycnVsZVJUTCl7dmFsdWVTZXQuY2FsbCh0aGlzLmVsLG51bGw9PXZhbHVlP1wiXCI6ITAhPT1vdmVycnVsZVJUTCYmaW5wdXRtYXNrLmlzUlRMP3ZhbHVlLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpOnZhbHVlKX0sdm9pZCAwPT09dmFsdWVHZXQmJih2YWx1ZUdldD1mdW5jdGlvbiB2YWx1ZUdldCgpe3JldHVybiB0aGlzLnZhbHVlfSx2YWx1ZVNldD1mdW5jdGlvbiB2YWx1ZVNldCh2YWx1ZSl7dGhpcy52YWx1ZT12YWx1ZX0scGF0Y2hWYWxob29rKG5wdC50eXBlKSxpbnN0YWxsTmF0aXZlVmFsdWVTZXRGYWxsYmFjayhucHQpKX19XCJ0ZXh0YXJlYVwiIT09aW5wdXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpJiZvcHRzLmlnbm9yYWJsZXMucHVzaChfa2V5Y29kZS5kZWZhdWx0LkVOVEVSKTt2YXIgZWxlbWVudFR5cGU9aW5wdXQuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSxpc1N1cHBvcnRlZD1cImlucHV0XCI9PT1pbnB1dC50YWdOYW1lLnRvTG93ZXJDYXNlKCkmJm9wdHMuc3VwcG9ydHNJbnB1dFR5cGUuaW5jbHVkZXMoZWxlbWVudFR5cGUpfHxpbnB1dC5pc0NvbnRlbnRFZGl0YWJsZXx8XCJ0ZXh0YXJlYVwiPT09aW5wdXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO2lmKCFpc1N1cHBvcnRlZClpZihcImlucHV0XCI9PT1pbnB1dC50YWdOYW1lLnRvTG93ZXJDYXNlKCkpe3ZhciBlbD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7ZWwuc2V0QXR0cmlidXRlKFwidHlwZVwiLGVsZW1lbnRUeXBlKSxpc1N1cHBvcnRlZD1cInRleHRcIj09PWVsLnR5cGUsZWw9bnVsbH1lbHNlIGlzU3VwcG9ydGVkPVwicGFydGlhbFwiO3JldHVybiExIT09aXNTdXBwb3J0ZWQ/cGF0Y2hWYWx1ZVByb3BlcnR5KGlucHV0KTppbnB1dC5pbnB1dG1hc2s9dm9pZCAwLGlzU3VwcG9ydGVkfV9ldmVudHJ1bGVyLkV2ZW50UnVsZXIub2ZmKGVsKTt2YXIgaXNTdXBwb3J0ZWQ9aXNFbGVtZW50VHlwZVN1cHBvcnRlZChlbCxvcHRzKTtpZighMSE9PWlzU3VwcG9ydGVkKXtpbnB1dG1hc2sub3JpZ2luYWxQbGFjZWhvbGRlcj1lbC5wbGFjZWhvbGRlcixpbnB1dG1hc2subWF4TGVuZ3RoPXZvaWQgMCE9PWVsP2VsLm1heExlbmd0aDp2b2lkIDAsLTE9PT1pbnB1dG1hc2subWF4TGVuZ3RoJiYoaW5wdXRtYXNrLm1heExlbmd0aD12b2lkIDApLFwiaW5wdXRNb2RlXCJpbiBlbCYmbnVsbD09PWVsLmdldEF0dHJpYnV0ZShcImlucHV0bW9kZVwiKSYmKGVsLmlucHV0TW9kZT1vcHRzLmlucHV0bW9kZSxlbC5zZXRBdHRyaWJ1dGUoXCJpbnB1dG1vZGVcIixvcHRzLmlucHV0bW9kZSkpLCEwPT09aXNTdXBwb3J0ZWQmJihvcHRzLnNob3dNYXNrT25Gb2N1cz1vcHRzLnNob3dNYXNrT25Gb2N1cyYmLTE9PT1bXCJjYy1udW1iZXJcIixcImNjLWV4cFwiXS5pbmRleE9mKGVsLmF1dG9jb21wbGV0ZSksX2Vudmlyb25tZW50LmlwaG9uZSYmKG9wdHMuaW5zZXJ0TW9kZVZpc3VhbD0hMSksX2V2ZW50cnVsZXIuRXZlbnRSdWxlci5vbihlbCxcInN1Ym1pdFwiLF9ldmVudGhhbmRsZXJzLkV2ZW50SGFuZGxlcnMuc3VibWl0RXZlbnQpLF9ldmVudHJ1bGVyLkV2ZW50UnVsZXIub24oZWwsXCJyZXNldFwiLF9ldmVudGhhbmRsZXJzLkV2ZW50SGFuZGxlcnMucmVzZXRFdmVudCksX2V2ZW50cnVsZXIuRXZlbnRSdWxlci5vbihlbCxcImJsdXJcIixfZXZlbnRoYW5kbGVycy5FdmVudEhhbmRsZXJzLmJsdXJFdmVudCksX2V2ZW50cnVsZXIuRXZlbnRSdWxlci5vbihlbCxcImZvY3VzXCIsX2V2ZW50aGFuZGxlcnMuRXZlbnRIYW5kbGVycy5mb2N1c0V2ZW50KSxfZXZlbnRydWxlci5FdmVudFJ1bGVyLm9uKGVsLFwiaW52YWxpZFwiLF9ldmVudGhhbmRsZXJzLkV2ZW50SGFuZGxlcnMuaW52YWxpZEV2ZW50KSxfZXZlbnRydWxlci5FdmVudFJ1bGVyLm9uKGVsLFwiY2xpY2tcIixfZXZlbnRoYW5kbGVycy5FdmVudEhhbmRsZXJzLmNsaWNrRXZlbnQpLF9ldmVudHJ1bGVyLkV2ZW50UnVsZXIub24oZWwsXCJtb3VzZWxlYXZlXCIsX2V2ZW50aGFuZGxlcnMuRXZlbnRIYW5kbGVycy5tb3VzZWxlYXZlRXZlbnQpLF9ldmVudHJ1bGVyLkV2ZW50UnVsZXIub24oZWwsXCJtb3VzZWVudGVyXCIsX2V2ZW50aGFuZGxlcnMuRXZlbnRIYW5kbGVycy5tb3VzZWVudGVyRXZlbnQpLF9ldmVudHJ1bGVyLkV2ZW50UnVsZXIub24oZWwsXCJwYXN0ZVwiLF9ldmVudGhhbmRsZXJzLkV2ZW50SGFuZGxlcnMucGFzdGVFdmVudCksX2V2ZW50cnVsZXIuRXZlbnRSdWxlci5vbihlbCxcImN1dFwiLF9ldmVudGhhbmRsZXJzLkV2ZW50SGFuZGxlcnMuY3V0RXZlbnQpLF9ldmVudHJ1bGVyLkV2ZW50UnVsZXIub24oZWwsXCJjb21wbGV0ZVwiLG9wdHMub25jb21wbGV0ZSksX2V2ZW50cnVsZXIuRXZlbnRSdWxlci5vbihlbCxcImluY29tcGxldGVcIixvcHRzLm9uaW5jb21wbGV0ZSksX2V2ZW50cnVsZXIuRXZlbnRSdWxlci5vbihlbCxcImNsZWFyZWRcIixvcHRzLm9uY2xlYXJlZCksITAhPT1vcHRzLmlucHV0RXZlbnRPbmx5JiYoX2V2ZW50cnVsZXIuRXZlbnRSdWxlci5vbihlbCxcImtleWRvd25cIixfZXZlbnRoYW5kbGVycy5FdmVudEhhbmRsZXJzLmtleWRvd25FdmVudCksX2V2ZW50cnVsZXIuRXZlbnRSdWxlci5vbihlbCxcImtleXByZXNzXCIsX2V2ZW50aGFuZGxlcnMuRXZlbnRIYW5kbGVycy5rZXlwcmVzc0V2ZW50KSxfZXZlbnRydWxlci5FdmVudFJ1bGVyLm9uKGVsLFwia2V5dXBcIixfZXZlbnRoYW5kbGVycy5FdmVudEhhbmRsZXJzLmtleXVwRXZlbnQpKSwoX2Vudmlyb25tZW50Lm1vYmlsZXx8b3B0cy5pbnB1dEV2ZW50T25seSkmJmVsLnJlbW92ZUF0dHJpYnV0ZShcIm1heExlbmd0aFwiKSxfZXZlbnRydWxlci5FdmVudFJ1bGVyLm9uKGVsLFwiaW5wdXRcIixfZXZlbnRoYW5kbGVycy5FdmVudEhhbmRsZXJzLmlucHV0RmFsbEJhY2tFdmVudCksX2V2ZW50cnVsZXIuRXZlbnRSdWxlci5vbihlbCxcImNvbXBvc2l0aW9uZW5kXCIsX2V2ZW50aGFuZGxlcnMuRXZlbnRIYW5kbGVycy5jb21wb3NpdGlvbmVuZEV2ZW50KSksX2V2ZW50cnVsZXIuRXZlbnRSdWxlci5vbihlbCxcInNldHZhbHVlXCIsX2V2ZW50aGFuZGxlcnMuRXZlbnRIYW5kbGVycy5zZXRWYWx1ZUV2ZW50KSxpbnB1dG1hc2sudW5kb1ZhbHVlPV9wb3NpdGlvbmluZy5nZXRCdWZmZXJUZW1wbGF0ZS5jYWxsKGlucHV0bWFzaykuam9pbihcIlwiKTt2YXIgYWN0aXZlRWxlbWVudD0oZWwuaW5wdXRtYXNrLnNoYWRvd1Jvb3R8fGRvY3VtZW50KS5hY3RpdmVFbGVtZW50O2lmKFwiXCIhPT1lbC5pbnB1dG1hc2suX3ZhbHVlR2V0KCEwKXx8ITE9PT1vcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzfHxhY3RpdmVFbGVtZW50PT09ZWwpeygwLF9pbnB1dEhhbmRsaW5nLmFwcGx5SW5wdXRWYWx1ZSkoZWwsZWwuaW5wdXRtYXNrLl92YWx1ZUdldCghMCksb3B0cyk7dmFyIGJ1ZmZlcj1fcG9zaXRpb25pbmcuZ2V0QnVmZmVyLmNhbGwoaW5wdXRtYXNrKS5zbGljZSgpOyExPT09X3ZhbGlkYXRpb24uaXNDb21wbGV0ZS5jYWxsKGlucHV0bWFzayxidWZmZXIpJiZvcHRzLmNsZWFySW5jb21wbGV0ZSYmX3Bvc2l0aW9uaW5nLnJlc2V0TWFza1NldC5jYWxsKGlucHV0bWFzayksb3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyYmYWN0aXZlRWxlbWVudCE9PWVsJiYoLTE9PT1fcG9zaXRpb25pbmcuZ2V0TGFzdFZhbGlkUG9zaXRpb24uY2FsbChpbnB1dG1hc2spP2J1ZmZlcj1bXTpfaW5wdXRIYW5kbGluZy5jbGVhck9wdGlvbmFsVGFpbC5jYWxsKGlucHV0bWFzayxidWZmZXIpKSwoITE9PT1vcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzfHxvcHRzLnNob3dNYXNrT25Gb2N1cyYmYWN0aXZlRWxlbWVudD09PWVsfHxcIlwiIT09ZWwuaW5wdXRtYXNrLl92YWx1ZUdldCghMCkpJiYoMCxfaW5wdXRIYW5kbGluZy53cml0ZUJ1ZmZlcikoZWwsYnVmZmVyKSxhY3RpdmVFbGVtZW50PT09ZWwmJl9wb3NpdGlvbmluZy5jYXJldC5jYWxsKGlucHV0bWFzayxlbCxfcG9zaXRpb25pbmcuc2Vla05leHQuY2FsbChpbnB1dG1hc2ssX3Bvc2l0aW9uaW5nLmdldExhc3RWYWxpZFBvc2l0aW9uLmNhbGwoaW5wdXRtYXNrKSkpfX19fSxmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxleHBvcnRzLkV2ZW50UnVsZXI9dm9pZCAwO3ZhciBfaW5wdXRtYXNrPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygyKSksX2tleWNvZGU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKSxfcG9zaXRpb25pbmc9X193ZWJwYWNrX3JlcXVpcmVfXygxKSxfaW5wdXRIYW5kbGluZz1fX3dlYnBhY2tfcmVxdWlyZV9fKDUpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e2RlZmF1bHQ6b2JqfX12YXIgRXZlbnRSdWxlcj17b246ZnVuY3Rpb24gb24oaW5wdXQsZXZlbnROYW1lLGV2ZW50SGFuZGxlcil7dmFyICQ9aW5wdXQuaW5wdXRtYXNrLmRlcGVuZGVuY3lMaWIsZXY9ZnVuY3Rpb24gZXYoZSl7ZS5vcmlnaW5hbEV2ZW50JiYoZT1lLm9yaWdpbmFsRXZlbnR8fGUsYXJndW1lbnRzWzBdPWUpO3ZhciB0aGF0PXRoaXMsYXJncyxpbnB1dG1hc2s9dGhhdC5pbnB1dG1hc2ssb3B0cz1pbnB1dG1hc2s/aW5wdXRtYXNrLm9wdHM6dm9pZCAwO2lmKHZvaWQgMD09PWlucHV0bWFzayYmXCJGT1JNXCIhPT10aGlzLm5vZGVOYW1lKXt2YXIgaW1PcHRzPSQuZGF0YSh0aGF0LFwiX2lucHV0bWFza19vcHRzXCIpOyQodGhhdCkub2ZmKCksaW1PcHRzJiZuZXcgX2lucHV0bWFzay5kZWZhdWx0KGltT3B0cykubWFzayh0aGF0KX1lbHNle2lmKFtcInN1Ym1pdFwiLFwicmVzZXRcIixcInNldHZhbHVlXCJdLmluY2x1ZGVzKGUudHlwZSl8fFwiRk9STVwiPT09dGhpcy5ub2RlTmFtZXx8ISh0aGF0LmRpc2FibGVkfHx0aGF0LnJlYWRPbmx5JiYhKFwia2V5ZG93blwiPT09ZS50eXBlJiZlLmN0cmxLZXkmJjY3PT09ZS5rZXlDb2RlfHwhMT09PW9wdHMudGFiVGhyb3VnaCYmZS5rZXlDb2RlPT09X2tleWNvZGUuZGVmYXVsdC5UQUIpKSl7c3dpdGNoKGUudHlwZSl7Y2FzZVwiaW5wdXRcIjppZighMD09PWlucHV0bWFzay5za2lwSW5wdXRFdmVudHx8ZS5pbnB1dFR5cGUmJlwiaW5zZXJ0Q29tcG9zaXRpb25UZXh0XCI9PT1lLmlucHV0VHlwZSlyZXR1cm4gaW5wdXRtYXNrLnNraXBJbnB1dEV2ZW50PSExLGUucHJldmVudERlZmF1bHQoKTticmVhaztjYXNlXCJrZXlkb3duXCI6aW5wdXRtYXNrLnNraXBLZXlQcmVzc0V2ZW50PSExLGlucHV0bWFzay5za2lwSW5wdXRFdmVudD1pbnB1dG1hc2suaXNDb21wb3Npbmc9ZS5rZXlDb2RlPT09X2tleWNvZGUuZGVmYXVsdC5LRVlfMjI5O2JyZWFrO2Nhc2VcImtleXVwXCI6Y2FzZVwiY29tcG9zaXRpb25lbmRcIjppbnB1dG1hc2suaXNDb21wb3NpbmcmJihpbnB1dG1hc2suc2tpcElucHV0RXZlbnQ9ITEpO2JyZWFrO2Nhc2VcImtleXByZXNzXCI6aWYoITA9PT1pbnB1dG1hc2suc2tpcEtleVByZXNzRXZlbnQpcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtpbnB1dG1hc2suc2tpcEtleVByZXNzRXZlbnQ9ITA7YnJlYWs7Y2FzZVwiY2xpY2tcIjpjYXNlXCJmb2N1c1wiOnJldHVybiBpbnB1dG1hc2sudmFsaWRhdGlvbkV2ZW50PyhpbnB1dG1hc2sudmFsaWRhdGlvbkV2ZW50PSExLGlucHV0LmJsdXIoKSwoMCxfaW5wdXRIYW5kbGluZy5IYW5kbGVOYXRpdmVQbGFjZWhvbGRlcikoaW5wdXQsKGlucHV0bWFzay5pc1JUTD9fcG9zaXRpb25pbmcuZ2V0QnVmZmVyVGVtcGxhdGUuY2FsbChpbnB1dG1hc2spLnNsaWNlKCkucmV2ZXJzZSgpOl9wb3NpdGlvbmluZy5nZXRCdWZmZXJUZW1wbGF0ZS5jYWxsKGlucHV0bWFzaykpLmpvaW4oXCJcIikpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtpbnB1dC5mb2N1cygpfSwzZTMpKTooYXJncz1hcmd1bWVudHMsc2V0VGltZW91dChmdW5jdGlvbigpe2lucHV0LmlucHV0bWFzayYmZXZlbnRIYW5kbGVyLmFwcGx5KHRoYXQsYXJncyl9LDApKSwhMX12YXIgcmV0dXJuVmFsPWV2ZW50SGFuZGxlci5hcHBseSh0aGF0LGFyZ3VtZW50cyk7cmV0dXJuITE9PT1yZXR1cm5WYWwmJihlLnByZXZlbnREZWZhdWx0KCksZS5zdG9wUHJvcGFnYXRpb24oKSkscmV0dXJuVmFsfWUucHJldmVudERlZmF1bHQoKX19O2lucHV0LmlucHV0bWFzay5ldmVudHNbZXZlbnROYW1lXT1pbnB1dC5pbnB1dG1hc2suZXZlbnRzW2V2ZW50TmFtZV18fFtdLGlucHV0LmlucHV0bWFzay5ldmVudHNbZXZlbnROYW1lXS5wdXNoKGV2KSxbXCJzdWJtaXRcIixcInJlc2V0XCJdLmluY2x1ZGVzKGV2ZW50TmFtZSk/bnVsbCE9PWlucHV0LmZvcm0mJiQoaW5wdXQuZm9ybSkub24oZXZlbnROYW1lLGV2LmJpbmQoaW5wdXQpKTokKGlucHV0KS5vbihldmVudE5hbWUsZXYpfSxvZmY6ZnVuY3Rpb24gb2ZmKGlucHV0LGV2ZW50KXtpZihpbnB1dC5pbnB1dG1hc2smJmlucHV0LmlucHV0bWFzay5ldmVudHMpe3ZhciAkPWlucHV0LmlucHV0bWFzay5kZXBlbmRlbmN5TGliLGV2ZW50cz1pbnB1dC5pbnB1dG1hc2suZXZlbnRzO2Zvcih2YXIgZXZlbnROYW1lIGluIGV2ZW50JiYoZXZlbnRzPVtdLGV2ZW50c1tldmVudF09aW5wdXQuaW5wdXRtYXNrLmV2ZW50c1tldmVudF0pLGV2ZW50cyl7Zm9yKHZhciBldkFycj1ldmVudHNbZXZlbnROYW1lXTswPGV2QXJyLmxlbmd0aDspe3ZhciBldj1ldkFyci5wb3AoKTtbXCJzdWJtaXRcIixcInJlc2V0XCJdLmluY2x1ZGVzKGV2ZW50TmFtZSk/bnVsbCE9PWlucHV0LmZvcm0mJiQoaW5wdXQuZm9ybSkub2ZmKGV2ZW50TmFtZSxldik6JChpbnB1dCkub2ZmKGV2ZW50TmFtZSxldil9ZGVsZXRlIGlucHV0LmlucHV0bWFzay5ldmVudHNbZXZlbnROYW1lXX19fX07ZXhwb3J0cy5FdmVudFJ1bGVyPUV2ZW50UnVsZXJ9LGZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIF90eXBlb2Yob2JqKXtyZXR1cm4gX3R5cGVvZj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24gX3R5cGVvZihvYmope3JldHVybiB0eXBlb2Ygb2JqfTpmdW5jdGlvbiBfdHlwZW9mKG9iail7cmV0dXJuIG9iaiYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZvYmouY29uc3RydWN0b3I9PT1TeW1ib2wmJm9iaiE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2Ygb2JqfSxfdHlwZW9mKG9iail9ZnVuY3Rpb24gZXh0ZW5kKCl7dmFyIG9wdGlvbnMsbmFtZSxzcmMsY29weSxjb3B5SXNBcnJheSxjbG9uZSx0YXJnZXQ9YXJndW1lbnRzWzBdfHx7fSxpPTEsbGVuZ3RoPWFyZ3VtZW50cy5sZW5ndGgsZGVlcD0hMTtmb3IoXCJib29sZWFuXCI9PXR5cGVvZiB0YXJnZXQmJihkZWVwPXRhcmdldCx0YXJnZXQ9YXJndW1lbnRzW2ldfHx7fSxpKyspLFwib2JqZWN0XCIhPT1fdHlwZW9mKHRhcmdldCkmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHRhcmdldCYmKHRhcmdldD17fSk7aTxsZW5ndGg7aSsrKWlmKG51bGwhPShvcHRpb25zPWFyZ3VtZW50c1tpXSkpZm9yKG5hbWUgaW4gb3B0aW9ucylzcmM9dGFyZ2V0W25hbWVdLGNvcHk9b3B0aW9uc1tuYW1lXSx0YXJnZXQhPT1jb3B5JiYoZGVlcCYmY29weSYmKFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoY29weSl8fChjb3B5SXNBcnJheT1BcnJheS5pc0FycmF5KGNvcHkpKSk/KGNsb25lPWNvcHlJc0FycmF5Pyhjb3B5SXNBcnJheT0hMSxzcmMmJkFycmF5LmlzQXJyYXkoc3JjKT9zcmM6W10pOnNyYyYmXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzcmMpP3NyYzp7fSx0YXJnZXRbbmFtZV09ZXh0ZW5kKGRlZXAsY2xvbmUsY29weSkpOnZvaWQgMCE9PWNvcHkmJih0YXJnZXRbbmFtZV09Y29weSkpO3JldHVybiB0YXJnZXR9T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZXhwb3J0cy5kZWZhdWx0PWV4dGVuZH0sZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0O3ZhciBlc2NhcGVSZWdleFJlZ2V4PW5ldyBSZWdFeHAoXCIoXFxcXFwiK1tcIi9cIixcIi5cIixcIipcIixcIitcIixcIj9cIixcInxcIixcIihcIixcIilcIixcIltcIixcIl1cIixcIntcIixcIn1cIixcIlxcXFxcIixcIiRcIixcIl5cIl0uam9pbihcInxcXFxcXCIpK1wiKVwiLFwiZ2ltXCIpO2Z1bmN0aW9uIF9kZWZhdWx0KHN0cil7cmV0dXJuIHN0ci5yZXBsYWNlKGVzY2FwZVJlZ2V4UmVnZXgsXCJcXFxcJDFcIil9fSxmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwLF9fd2VicGFja19yZXF1aXJlX18oMTUpLF9fd2VicGFja19yZXF1aXJlX18oMjMpLF9fd2VicGFja19yZXF1aXJlX18oMjQpLF9fd2VicGFja19yZXF1aXJlX18oMjUpO3ZhciBfaW5wdXRtYXNrMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMikpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e2RlZmF1bHQ6b2JqfX12YXIgX2RlZmF1bHQ9X2lucHV0bWFzazIuZGVmYXVsdDtleHBvcnRzLmRlZmF1bHQ9X2RlZmF1bHR9LGZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe1widXNlIHN0cmljdFwiO3ZhciBfaW5wdXRtYXNrPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygyKSk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7ZGVmYXVsdDpvYmp9fV9pbnB1dG1hc2suZGVmYXVsdC5leHRlbmREZWZpbml0aW9ucyh7QTp7dmFsaWRhdG9yOlwiW0EtWmEtelxcdTA0MTAtXFx1MDQ0ZlxcdTA0MDFcXHUwNDUxXFx4YzAtXFx4ZmZcXHhiNV1cIixjYXNpbmc6XCJ1cHBlclwifSxcIiZcIjp7dmFsaWRhdG9yOlwiWzAtOUEtWmEtelxcdTA0MTAtXFx1MDQ0ZlxcdTA0MDFcXHUwNDUxXFx4YzAtXFx4ZmZcXHhiNV1cIixjYXNpbmc6XCJ1cHBlclwifSxcIiNcIjp7dmFsaWRhdG9yOlwiWzAtOUEtRmEtZl1cIixjYXNpbmc6XCJ1cHBlclwifX0pO3ZhciBpcFZhbGlkYXRvclJlZ2V4PW5ldyBSZWdFeHAoXCIyNVswLTVdfDJbMC00XVswLTldfFswMV1bMC05XVswLTldXCIpO2Z1bmN0aW9uIGlwVmFsaWRhdG9yKGNocnMsbWFza3NldCxwb3Msc3RyaWN0LG9wdHMpe3JldHVybiBjaHJzPS0xPHBvcy0xJiZcIi5cIiE9PW1hc2tzZXQuYnVmZmVyW3Bvcy0xXT8oY2hycz1tYXNrc2V0LmJ1ZmZlcltwb3MtMV0rY2hycywtMTxwb3MtMiYmXCIuXCIhPT1tYXNrc2V0LmJ1ZmZlcltwb3MtMl0/bWFza3NldC5idWZmZXJbcG9zLTJdK2NocnM6XCIwXCIrY2hycyk6XCIwMFwiK2NocnMsaXBWYWxpZGF0b3JSZWdleC50ZXN0KGNocnMpfV9pbnB1dG1hc2suZGVmYXVsdC5leHRlbmRBbGlhc2VzKHtjc3N1bml0OntyZWdleDpcIlsrLV0/WzAtOV0rXFxcXC4/KFswLTldKyk/KHB4fGVtfHJlbXxleHwlfGlufGNtfG1tfHB0fHBjKVwifSx1cmw6e3JlZ2V4OlwiKGh0dHBzP3xmdHApOi8vLipcIixhdXRvVW5tYXNrOiExLGtlZXBTdGF0aWM6ITEsdGFiVGhyb3VnaDohMH0saXA6e21hc2s6XCJpW2lbaV1dLmpbaltqXV0ua1trW2tdXS5sW2xbbF1dXCIsZGVmaW5pdGlvbnM6e2k6e3ZhbGlkYXRvcjppcFZhbGlkYXRvcn0sajp7dmFsaWRhdG9yOmlwVmFsaWRhdG9yfSxrOnt2YWxpZGF0b3I6aXBWYWxpZGF0b3J9LGw6e3ZhbGlkYXRvcjppcFZhbGlkYXRvcn19LG9uVW5NYXNrOmZ1bmN0aW9uIG9uVW5NYXNrKG1hc2tlZFZhbHVlLHVubWFza2VkVmFsdWUsb3B0cyl7cmV0dXJuIG1hc2tlZFZhbHVlfSxpbnB1dG1vZGU6XCJudW1lcmljXCJ9LGVtYWlsOnttYXNrOlwiKnsxLDY0fVsuKnsxLDY0fV1bLip7MSw2NH1dWy4qezEsNjN9XUAtezEsNjN9Li17MSw2M31bLi17MSw2M31dWy4tezEsNjN9XVwiLGdyZWVkeTohMSxjYXNpbmc6XCJsb3dlclwiLG9uQmVmb3JlUGFzdGU6ZnVuY3Rpb24gb25CZWZvcmVQYXN0ZShwYXN0ZWRWYWx1ZSxvcHRzKXtyZXR1cm4gcGFzdGVkVmFsdWU9cGFzdGVkVmFsdWUudG9Mb3dlckNhc2UoKSxwYXN0ZWRWYWx1ZS5yZXBsYWNlKFwibWFpbHRvOlwiLFwiXCIpfSxkZWZpbml0aW9uczp7XCIqXCI6e3ZhbGlkYXRvcjpcIlswLTlcXHVmZjExLVxcdWZmMTlBLVphLXpcXHUwNDEwLVxcdTA0NGZcXHUwNDAxXFx1MDQ1MVxceGMwLVxceGZmXFx4YjUhIyQlJicqKy89P15fYHt8fX4tXVwifSxcIi1cIjp7dmFsaWRhdG9yOlwiWzAtOUEtWmEtei1dXCJ9fSxvblVuTWFzazpmdW5jdGlvbiBvblVuTWFzayhtYXNrZWRWYWx1ZSx1bm1hc2tlZFZhbHVlLG9wdHMpe3JldHVybiBtYXNrZWRWYWx1ZX0saW5wdXRtb2RlOlwiZW1haWxcIn0sbWFjOnttYXNrOlwiIyM6IyM6IyM6IyM6IyM6IyNcIn0sdmluOnttYXNrOlwiVnsxM305ezR9XCIsZGVmaW5pdGlvbnM6e1Y6e3ZhbGlkYXRvcjpcIltBLUhKLU5QUi1aYS1oai1ucHItelxcXFxkXVwiLGNhc2luZzpcInVwcGVyXCJ9fSxjbGVhckluY29tcGxldGU6ITAsYXV0b1VubWFzazohMH0sc3NuOnttYXNrOlwiOTk5LTk5LTk5OTlcIixwb3N0VmFsaWRhdGlvbjpmdW5jdGlvbiBwb3N0VmFsaWRhdGlvbihidWZmZXIscG9zLGMsY3VycmVudFJlc3VsdCxvcHRzLG1hc2tzZXQsc3RyaWN0KXtyZXR1cm4vXig/ITIxOS0wOS05OTk5fDA3OC0wNS0xMTIwKSg/ITY2NnwwMDB8OS57Mn0pLnszfS0oPyEwMCkuezJ9LSg/ITB7NH0pLns0fSQvLnRlc3QoYnVmZmVyLmpvaW4oXCJcIikpfX19KX0sZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gX3R5cGVvZihvYmope3JldHVybiBfdHlwZW9mPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbiBfdHlwZW9mKG9iail7cmV0dXJuIHR5cGVvZiBvYmp9OmZ1bmN0aW9uIF90eXBlb2Yob2JqKXtyZXR1cm4gb2JqJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJm9iai5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmb2JqIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBvYmp9LF90eXBlb2Yob2JqKX1cImZ1bmN0aW9uXCIhPXR5cGVvZiBPYmplY3QuZ2V0UHJvdG90eXBlT2YmJihPYmplY3QuZ2V0UHJvdG90eXBlT2Y9XCJvYmplY3RcIj09PV90eXBlb2YoXCJ0ZXN0XCIuX19wcm90b19fKT9mdW5jdGlvbihvYmplY3Qpe3JldHVybiBvYmplY3QuX19wcm90b19ffTpmdW5jdGlvbihvYmplY3Qpe3JldHVybiBvYmplY3QuY29uc3RydWN0b3IucHJvdG90eXBlfSl9LGZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe1widXNlIHN0cmljdFwiO0FycmF5LnByb3RvdHlwZS5pbmNsdWRlc3x8T2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSxcImluY2x1ZGVzXCIse3ZhbHVlOmZ1bmN0aW9uIHZhbHVlKHNlYXJjaEVsZW1lbnQsZnJvbUluZGV4KXtpZihudWxsPT10aGlzKXRocm93IG5ldyBUeXBlRXJyb3IoJ1widGhpc1wiIGlzIG51bGwgb3Igbm90IGRlZmluZWQnKTt2YXIgbz1PYmplY3QodGhpcyksbGVuPW8ubGVuZ3RoPj4+MDtpZigwPT1sZW4pcmV0dXJuITE7Zm9yKHZhciBuPTB8ZnJvbUluZGV4LGs9TWF0aC5tYXgoMDw9bj9uOmxlbi1NYXRoLmFicyhuKSwwKTtrPGxlbjspe2lmKG9ba109PT1zZWFyY2hFbGVtZW50KXJldHVybiEwO2srK31yZXR1cm4hMX19KX0sZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gX2RlZmF1bHQob3duZXIsa2V5LHZhbHVlKXtpZih2b2lkIDA9PT12YWx1ZSlyZXR1cm4gb3duZXIuX19kYXRhP293bmVyLl9fZGF0YVtrZXldOm51bGw7b3duZXIuX19kYXRhPW93bmVyLl9fZGF0YXx8e30sb3duZXIuX19kYXRhW2tleV09dmFsdWV9T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0fSxmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxleHBvcnRzLm9uPW9uLGV4cG9ydHMub2ZmPW9mZixleHBvcnRzLnRyaWdnZXI9dHJpZ2dlcixleHBvcnRzLkV2ZW50PXZvaWQgMDt2YXIgX2V4dGVuZD1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMTIpKSxfd2luZG93PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg2KSksX2lucHV0bWFzaz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oOSkpLEV2ZW50O2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e2RlZmF1bHQ6b2JqfX1mdW5jdGlvbiBpc1ZhbGlkRWxlbWVudChlbGVtKXtyZXR1cm4gZWxlbSBpbnN0YW5jZW9mIEVsZW1lbnR9ZnVuY3Rpb24gb24oZXZlbnRzLGhhbmRsZXIpe2Z1bmN0aW9uIGFkZEV2ZW50KGV2LG5hbWVzcGFjZSl7ZWxlbS5hZGRFdmVudExpc3RlbmVyP2VsZW0uYWRkRXZlbnRMaXN0ZW5lcihldixoYW5kbGVyLCExKTplbGVtLmF0dGFjaEV2ZW50JiZlbGVtLmF0dGFjaEV2ZW50KFwib25cIitldixoYW5kbGVyKSxldmVudFJlZ2lzdHJ5W2V2XT1ldmVudFJlZ2lzdHJ5W2V2XXx8e30sZXZlbnRSZWdpc3RyeVtldl1bbmFtZXNwYWNlXT1ldmVudFJlZ2lzdHJ5W2V2XVtuYW1lc3BhY2VdfHxbXSxldmVudFJlZ2lzdHJ5W2V2XVtuYW1lc3BhY2VdLnB1c2goaGFuZGxlcil9aWYoaXNWYWxpZEVsZW1lbnQodGhpc1swXSkpZm9yKHZhciBldmVudFJlZ2lzdHJ5PXRoaXNbMF0uZXZlbnRSZWdpc3RyeSxlbGVtPXRoaXNbMF0sX2V2ZW50cz1ldmVudHMuc3BsaXQoXCIgXCIpLGVuZHg9MDtlbmR4PF9ldmVudHMubGVuZ3RoO2VuZHgrKyl7dmFyIG5zRXZlbnQ9X2V2ZW50c1tlbmR4XS5zcGxpdChcIi5cIiksZXY9bnNFdmVudFswXSxuYW1lc3BhY2U9bnNFdmVudFsxXXx8XCJnbG9iYWxcIjthZGRFdmVudChldixuYW1lc3BhY2UpfXJldHVybiB0aGlzfWZ1bmN0aW9uIG9mZihldmVudHMsaGFuZGxlcil7dmFyIGV2ZW50UmVnaXN0cnksZWxlbTtmdW5jdGlvbiByZW1vdmVFdmVudChldixuYW1lc3BhY2UsaGFuZGxlcil7aWYoZXYgaW4gZXZlbnRSZWdpc3RyeT09ITApaWYoZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyP2VsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihldixoYW5kbGVyLCExKTplbGVtLmRldGFjaEV2ZW50JiZlbGVtLmRldGFjaEV2ZW50KFwib25cIitldixoYW5kbGVyKSxcImdsb2JhbFwiPT09bmFtZXNwYWNlKWZvcih2YXIgbm1zcCBpbiBldmVudFJlZ2lzdHJ5W2V2XSlldmVudFJlZ2lzdHJ5W2V2XVtubXNwXS5zcGxpY2UoZXZlbnRSZWdpc3RyeVtldl1bbm1zcF0uaW5kZXhPZihoYW5kbGVyKSwxKTtlbHNlIGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0uc3BsaWNlKGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0uaW5kZXhPZihoYW5kbGVyKSwxKX1mdW5jdGlvbiByZXNvbHZlTmFtZXNwYWNlKGV2LG5hbWVzcGFjZSl7dmFyIGV2dHM9W10saG5keCxobmRMO2lmKDA8ZXYubGVuZ3RoKWlmKHZvaWQgMD09PWhhbmRsZXIpZm9yKGhuZHg9MCxobmRMPWV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0ubGVuZ3RoO2huZHg8aG5kTDtobmR4KyspZXZ0cy5wdXNoKHtldjpldixuYW1lc3BhY2U6bmFtZXNwYWNlJiYwPG5hbWVzcGFjZS5sZW5ndGg/bmFtZXNwYWNlOlwiZ2xvYmFsXCIsaGFuZGxlcjpldmVudFJlZ2lzdHJ5W2V2XVtuYW1lc3BhY2VdW2huZHhdfSk7ZWxzZSBldnRzLnB1c2goe2V2OmV2LG5hbWVzcGFjZTpuYW1lc3BhY2UmJjA8bmFtZXNwYWNlLmxlbmd0aD9uYW1lc3BhY2U6XCJnbG9iYWxcIixoYW5kbGVyOmhhbmRsZXJ9KTtlbHNlIGlmKDA8bmFtZXNwYWNlLmxlbmd0aClmb3IodmFyIGV2TmR4IGluIGV2ZW50UmVnaXN0cnkpZm9yKHZhciBubXNwIGluIGV2ZW50UmVnaXN0cnlbZXZOZHhdKWlmKG5tc3A9PT1uYW1lc3BhY2UpaWYodm9pZCAwPT09aGFuZGxlcilmb3IoaG5keD0wLGhuZEw9ZXZlbnRSZWdpc3RyeVtldk5keF1bbm1zcF0ubGVuZ3RoO2huZHg8aG5kTDtobmR4KyspZXZ0cy5wdXNoKHtldjpldk5keCxuYW1lc3BhY2U6bm1zcCxoYW5kbGVyOmV2ZW50UmVnaXN0cnlbZXZOZHhdW25tc3BdW2huZHhdfSk7ZWxzZSBldnRzLnB1c2goe2V2OmV2TmR4LG5hbWVzcGFjZTpubXNwLGhhbmRsZXI6aGFuZGxlcn0pO3JldHVybiBldnRzfWlmKGlzVmFsaWRFbGVtZW50KHRoaXNbMF0pKXtldmVudFJlZ2lzdHJ5PXRoaXNbMF0uZXZlbnRSZWdpc3RyeSxlbGVtPXRoaXNbMF07Zm9yKHZhciBfZXZlbnRzPWV2ZW50cy5zcGxpdChcIiBcIiksZW5keD0wO2VuZHg8X2V2ZW50cy5sZW5ndGg7ZW5keCsrKWZvcih2YXIgbnNFdmVudD1fZXZlbnRzW2VuZHhdLnNwbGl0KFwiLlwiKSxvZmZFdmVudHM9cmVzb2x2ZU5hbWVzcGFjZShuc0V2ZW50WzBdLG5zRXZlbnRbMV0pLGk9MCxvZmZFdmVudHNMPW9mZkV2ZW50cy5sZW5ndGg7aTxvZmZFdmVudHNMO2krKylyZW1vdmVFdmVudChvZmZFdmVudHNbaV0uZXYsb2ZmRXZlbnRzW2ldLm5hbWVzcGFjZSxvZmZFdmVudHNbaV0uaGFuZGxlcil9cmV0dXJuIHRoaXN9ZnVuY3Rpb24gdHJpZ2dlcihldmVudHMpe2lmKGlzVmFsaWRFbGVtZW50KHRoaXNbMF0pKWZvcih2YXIgZXZlbnRSZWdpc3RyeT10aGlzWzBdLmV2ZW50UmVnaXN0cnksZWxlbT10aGlzWzBdLF9ldmVudHM9XCJzdHJpbmdcIj09dHlwZW9mIGV2ZW50cz9ldmVudHMuc3BsaXQoXCIgXCIpOltldmVudHMudHlwZV0sZW5keD0wO2VuZHg8X2V2ZW50cy5sZW5ndGg7ZW5keCsrKXt2YXIgbnNFdmVudD1fZXZlbnRzW2VuZHhdLnNwbGl0KFwiLlwiKSxldj1uc0V2ZW50WzBdLG5hbWVzcGFjZT1uc0V2ZW50WzFdfHxcImdsb2JhbFwiO2lmKHZvaWQgMCE9PWRvY3VtZW50JiZcImdsb2JhbFwiPT09bmFtZXNwYWNlKXt2YXIgZXZudCxpLHBhcmFtcz17YnViYmxlczohMCxjYW5jZWxhYmxlOiEwLGRldGFpbDphcmd1bWVudHNbMV19O2lmKGRvY3VtZW50LmNyZWF0ZUV2ZW50KXt0cnl7ZXZudD1uZXcgQ3VzdG9tRXZlbnQoZXYscGFyYW1zKX1jYXRjaChlKXtldm50PWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiQ3VzdG9tRXZlbnRcIiksZXZudC5pbml0Q3VzdG9tRXZlbnQoZXYscGFyYW1zLmJ1YmJsZXMscGFyYW1zLmNhbmNlbGFibGUscGFyYW1zLmRldGFpbCl9ZXZlbnRzLnR5cGUmJigwLF9leHRlbmQuZGVmYXVsdCkoZXZudCxldmVudHMpLGVsZW0uZGlzcGF0Y2hFdmVudChldm50KX1lbHNlIGV2bnQ9ZG9jdW1lbnQuY3JlYXRlRXZlbnRPYmplY3QoKSxldm50LmV2ZW50VHlwZT1ldixldm50LmRldGFpbD1hcmd1bWVudHNbMV0sZXZlbnRzLnR5cGUmJigwLF9leHRlbmQuZGVmYXVsdCkoZXZudCxldmVudHMpLGVsZW0uZmlyZUV2ZW50KFwib25cIitldm50LmV2ZW50VHlwZSxldm50KX1lbHNlIGlmKHZvaWQgMCE9PWV2ZW50UmVnaXN0cnlbZXZdKWlmKGFyZ3VtZW50c1swXT1hcmd1bWVudHNbMF0udHlwZT9hcmd1bWVudHNbMF06X2lucHV0bWFzay5kZWZhdWx0LkV2ZW50KGFyZ3VtZW50c1swXSksYXJndW1lbnRzWzBdLmRldGFpbD1hcmd1bWVudHMuc2xpY2UoMSksXCJnbG9iYWxcIj09PW5hbWVzcGFjZSlmb3IodmFyIG5tc3AgaW4gZXZlbnRSZWdpc3RyeVtldl0pZm9yKGk9MDtpPGV2ZW50UmVnaXN0cnlbZXZdW25tc3BdLmxlbmd0aDtpKyspZXZlbnRSZWdpc3RyeVtldl1bbm1zcF1baV0uYXBwbHkoZWxlbSxhcmd1bWVudHMpO2Vsc2UgZm9yKGk9MDtpPGV2ZW50UmVnaXN0cnlbZXZdW25hbWVzcGFjZV0ubGVuZ3RoO2krKylldmVudFJlZ2lzdHJ5W2V2XVtuYW1lc3BhY2VdW2ldLmFwcGx5KGVsZW0sYXJndW1lbnRzKX1yZXR1cm4gdGhpc31leHBvcnRzLkV2ZW50PUV2ZW50LFwiZnVuY3Rpb25cIj09dHlwZW9mIF93aW5kb3cuZGVmYXVsdC5DdXN0b21FdmVudD9leHBvcnRzLkV2ZW50PUV2ZW50PV93aW5kb3cuZGVmYXVsdC5DdXN0b21FdmVudDooZXhwb3J0cy5FdmVudD1FdmVudD1mdW5jdGlvbiBFdmVudChldmVudCxwYXJhbXMpe3BhcmFtcz1wYXJhbXN8fHtidWJibGVzOiExLGNhbmNlbGFibGU6ITEsZGV0YWlsOnZvaWQgMH07dmFyIGV2dD1kb2N1bWVudC5jcmVhdGVFdmVudChcIkN1c3RvbUV2ZW50XCIpO3JldHVybiBldnQuaW5pdEN1c3RvbUV2ZW50KGV2ZW50LHBhcmFtcy5idWJibGVzLHBhcmFtcy5jYW5jZWxhYmxlLHBhcmFtcy5kZXRhaWwpLGV2dH0sRXZlbnQucHJvdG90eXBlPV93aW5kb3cuZGVmYXVsdC5FdmVudC5wcm90b3R5cGUpfSxmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxleHBvcnRzLmdlbmVyYXRlTWFza1NldD1nZW5lcmF0ZU1hc2tTZXQsZXhwb3J0cy5hbmFseXNlTWFzaz1hbmFseXNlTWFzazt2YXIgX2lucHV0bWFzaz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oOSkpO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e2RlZmF1bHQ6b2JqfX1mdW5jdGlvbiBnZW5lcmF0ZU1hc2tTZXQob3B0cyxub2NhY2hlKXt2YXIgbXM7ZnVuY3Rpb24gZ2VuZXJhdGVNYXNrKG1hc2ssbWV0YWRhdGEsb3B0cyl7dmFyIHJlZ2V4TWFzaz0hMSxtYXNrc2V0RGVmaW5pdGlvbixtYXNrZGVmS2V5O2lmKG51bGwhPT1tYXNrJiZcIlwiIT09bWFza3x8KHJlZ2V4TWFzaz1udWxsIT09b3B0cy5yZWdleCxtYXNrPXJlZ2V4TWFzaz8obWFzaz1vcHRzLnJlZ2V4LG1hc2sucmVwbGFjZSgvXihcXF4pKC4qKShcXCQpJC8sXCIkMlwiKSk6KHJlZ2V4TWFzaz0hMCxcIi4qXCIpKSwxPT09bWFzay5sZW5ndGgmJiExPT09b3B0cy5ncmVlZHkmJjAhPT1vcHRzLnJlcGVhdCYmKG9wdHMucGxhY2Vob2xkZXI9XCJcIiksMDxvcHRzLnJlcGVhdHx8XCIqXCI9PT1vcHRzLnJlcGVhdHx8XCIrXCI9PT1vcHRzLnJlcGVhdCl7dmFyIHJlcGVhdFN0YXJ0PVwiKlwiPT09b3B0cy5yZXBlYXQ/MDpcIitcIj09PW9wdHMucmVwZWF0PzE6b3B0cy5yZXBlYXQ7bWFzaz1vcHRzLmdyb3VwbWFya2VyWzBdK21hc2srb3B0cy5ncm91cG1hcmtlclsxXStvcHRzLnF1YW50aWZpZXJtYXJrZXJbMF0rcmVwZWF0U3RhcnQrXCIsXCIrb3B0cy5yZXBlYXQrb3B0cy5xdWFudGlmaWVybWFya2VyWzFdfXJldHVybiBtYXNrZGVmS2V5PXJlZ2V4TWFzaz9cInJlZ2V4X1wiK29wdHMucmVnZXg6b3B0cy5udW1lcmljSW5wdXQ/bWFzay5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKTptYXNrLCExIT09b3B0cy5rZWVwU3RhdGljJiYobWFza2RlZktleT1cImtzX1wiK21hc2tkZWZLZXkpLHZvaWQgMD09PUlucHV0bWFzay5wcm90b3R5cGUubWFza3NDYWNoZVttYXNrZGVmS2V5XXx8ITA9PT1ub2NhY2hlPyhtYXNrc2V0RGVmaW5pdGlvbj17bWFzazptYXNrLG1hc2tUb2tlbjpJbnB1dG1hc2sucHJvdG90eXBlLmFuYWx5c2VNYXNrKG1hc2sscmVnZXhNYXNrLG9wdHMpLHZhbGlkUG9zaXRpb25zOnt9LF9idWZmZXI6dm9pZCAwLGJ1ZmZlcjp2b2lkIDAsdGVzdHM6e30sZXhjbHVkZXM6e30sbWV0YWRhdGE6bWV0YWRhdGEsbWFza0xlbmd0aDp2b2lkIDAsaml0T2Zmc2V0Ont9fSwhMCE9PW5vY2FjaGUmJihJbnB1dG1hc2sucHJvdG90eXBlLm1hc2tzQ2FjaGVbbWFza2RlZktleV09bWFza3NldERlZmluaXRpb24sbWFza3NldERlZmluaXRpb249X2lucHV0bWFzay5kZWZhdWx0LmV4dGVuZCghMCx7fSxJbnB1dG1hc2sucHJvdG90eXBlLm1hc2tzQ2FjaGVbbWFza2RlZktleV0pKSk6bWFza3NldERlZmluaXRpb249X2lucHV0bWFzay5kZWZhdWx0LmV4dGVuZCghMCx7fSxJbnB1dG1hc2sucHJvdG90eXBlLm1hc2tzQ2FjaGVbbWFza2RlZktleV0pLG1hc2tzZXREZWZpbml0aW9ufWlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIG9wdHMubWFzayYmKG9wdHMubWFzaz1vcHRzLm1hc2sob3B0cykpLEFycmF5LmlzQXJyYXkob3B0cy5tYXNrKSl7aWYoMTxvcHRzLm1hc2subGVuZ3RoKXtudWxsPT09b3B0cy5rZWVwU3RhdGljJiYob3B0cy5rZWVwU3RhdGljPSEwKTt2YXIgYWx0TWFzaz1vcHRzLmdyb3VwbWFya2VyWzBdO3JldHVybihvcHRzLmlzUlRMP29wdHMubWFzay5yZXZlcnNlKCk6b3B0cy5tYXNrKS5mb3JFYWNoKGZ1bmN0aW9uKG1zayl7MTxhbHRNYXNrLmxlbmd0aCYmKGFsdE1hc2srPW9wdHMuZ3JvdXBtYXJrZXJbMV0rb3B0cy5hbHRlcm5hdG9ybWFya2VyK29wdHMuZ3JvdXBtYXJrZXJbMF0pLHZvaWQgMCE9PW1zay5tYXNrJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBtc2subWFzaz9hbHRNYXNrKz1tc2subWFzazphbHRNYXNrKz1tc2t9KSxhbHRNYXNrKz1vcHRzLmdyb3VwbWFya2VyWzFdLGdlbmVyYXRlTWFzayhhbHRNYXNrLG9wdHMubWFzayxvcHRzKX1vcHRzLm1hc2s9b3B0cy5tYXNrLnBvcCgpfXJldHVybiBudWxsPT09b3B0cy5rZWVwU3RhdGljJiYob3B0cy5rZWVwU3RhdGljPSExKSxtcz1vcHRzLm1hc2smJnZvaWQgMCE9PW9wdHMubWFzay5tYXNrJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBvcHRzLm1hc2subWFzaz9nZW5lcmF0ZU1hc2sob3B0cy5tYXNrLm1hc2ssb3B0cy5tYXNrLG9wdHMpOmdlbmVyYXRlTWFzayhvcHRzLm1hc2ssb3B0cy5tYXNrLG9wdHMpLG1zfWZ1bmN0aW9uIGFuYWx5c2VNYXNrKG1hc2sscmVnZXhNYXNrLG9wdHMpe3ZhciB0b2tlbml6ZXI9Lyg/Ols/KitdfFxce1swLTkrKl0rKD86LFswLTkrKl0qKT8oPzpcXHxbMC05KypdKik/XFx9KXxbXi4/KiteJHtbXSgpfFxcXFxdK3wuL2cscmVnZXhUb2tlbml6ZXI9L1xcW1xcXj9dPyg/OlteXFxcXFxcXV0rfFxcXFxbXFxTXFxzXT8pKl0/fFxcXFwoPzowKD86WzAtM11bMC03XXswLDJ9fFs0LTddWzAtN10/KT98WzEtOV1bMC05XSp8eFswLTlBLUZhLWZdezJ9fHVbMC05QS1GYS1mXXs0fXxjW0EtWmEtel18W1xcU1xcc10/KXxcXCgoPzpcXD9bOj0hXT8pP3woPzpbPyorXXxcXHtbMC05XSsoPzosWzAtOV0qKT9cXH0pXFw/P3xbXi4/KiteJHtbKCl8XFxcXF0rfC4vZyxlc2NhcGVkPSExLGN1cnJlbnRUb2tlbj1uZXcgTWFza1Rva2VuLG1hdGNoLG0sb3BlbmVuaW5ncz1bXSxtYXNrVG9rZW5zPVtdLG9wZW5pbmdUb2tlbixjdXJyZW50T3BlbmluZ1Rva2VuLGFsdGVybmF0b3IsbGFzdE1hdGNoLGNsb3NlUmVnZXhHcm91cD0hMTtmdW5jdGlvbiBNYXNrVG9rZW4oaXNHcm91cCxpc09wdGlvbmFsLGlzUXVhbnRpZmllcixpc0FsdGVybmF0b3Ipe3RoaXMubWF0Y2hlcz1bXSx0aGlzLm9wZW5Hcm91cD1pc0dyb3VwfHwhMSx0aGlzLmFsdGVybmF0b3JHcm91cD0hMSx0aGlzLmlzR3JvdXA9aXNHcm91cHx8ITEsdGhpcy5pc09wdGlvbmFsPWlzT3B0aW9uYWx8fCExLHRoaXMuaXNRdWFudGlmaWVyPWlzUXVhbnRpZmllcnx8ITEsdGhpcy5pc0FsdGVybmF0b3I9aXNBbHRlcm5hdG9yfHwhMSx0aGlzLnF1YW50aWZpZXI9e21pbjoxLG1heDoxfX1mdW5jdGlvbiBpbnNlcnRUZXN0RGVmaW5pdGlvbihtdG9rZW4sZWxlbWVudCxwb3NpdGlvbil7cG9zaXRpb249dm9pZCAwIT09cG9zaXRpb24/cG9zaXRpb246bXRva2VuLm1hdGNoZXMubGVuZ3RoO3ZhciBwcmV2TWF0Y2g9bXRva2VuLm1hdGNoZXNbcG9zaXRpb24tMV07aWYocmVnZXhNYXNrKTA9PT1lbGVtZW50LmluZGV4T2YoXCJbXCIpfHxlc2NhcGVkJiYvXFxcXGR8XFxcXHN8XFxcXHddL2kudGVzdChlbGVtZW50KXx8XCIuXCI9PT1lbGVtZW50P210b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLDAse2ZuOm5ldyBSZWdFeHAoZWxlbWVudCxvcHRzLmNhc2luZz9cImlcIjpcIlwiKSxzdGF0aWM6ITEsb3B0aW9uYWxpdHk6ITEsbmV3QmxvY2tNYXJrZXI6dm9pZCAwPT09cHJldk1hdGNoP1wibWFzdGVyXCI6cHJldk1hdGNoLmRlZiE9PWVsZW1lbnQsY2FzaW5nOm51bGwsZGVmOmVsZW1lbnQscGxhY2Vob2xkZXI6dm9pZCAwLG5hdGl2ZURlZjplbGVtZW50fSk6KGVzY2FwZWQmJihlbGVtZW50PWVsZW1lbnRbZWxlbWVudC5sZW5ndGgtMV0pLGVsZW1lbnQuc3BsaXQoXCJcIikuZm9yRWFjaChmdW5jdGlvbihsbW50LG5keCl7cHJldk1hdGNoPW10b2tlbi5tYXRjaGVzW3Bvc2l0aW9uLTFdLG10b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLDAse2ZuOi9bYS16XS9pLnRlc3Qob3B0cy5zdGF0aWNEZWZpbml0aW9uU3ltYm9sfHxsbW50KT9uZXcgUmVnRXhwKFwiW1wiKyhvcHRzLnN0YXRpY0RlZmluaXRpb25TeW1ib2x8fGxtbnQpK1wiXVwiLG9wdHMuY2FzaW5nP1wiaVwiOlwiXCIpOm51bGwsc3RhdGljOiEwLG9wdGlvbmFsaXR5OiExLG5ld0Jsb2NrTWFya2VyOnZvaWQgMD09PXByZXZNYXRjaD9cIm1hc3RlclwiOnByZXZNYXRjaC5kZWYhPT1sbW50JiYhMCE9PXByZXZNYXRjaC5zdGF0aWMsY2FzaW5nOm51bGwsZGVmOm9wdHMuc3RhdGljRGVmaW5pdGlvblN5bWJvbHx8bG1udCxwbGFjZWhvbGRlcjp2b2lkIDAhPT1vcHRzLnN0YXRpY0RlZmluaXRpb25TeW1ib2w/bG1udDp2b2lkIDAsbmF0aXZlRGVmOihlc2NhcGVkP1wiJ1wiOlwiXCIpK2xtbnR9KX0pKSxlc2NhcGVkPSExO2Vsc2V7dmFyIG1hc2tkZWY9b3B0cy5kZWZpbml0aW9ucyYmb3B0cy5kZWZpbml0aW9uc1tlbGVtZW50XXx8b3B0cy51c2VQcm90b3R5cGVEZWZpbml0aW9ucyYmSW5wdXRtYXNrLnByb3RvdHlwZS5kZWZpbml0aW9uc1tlbGVtZW50XTttYXNrZGVmJiYhZXNjYXBlZD9tdG9rZW4ubWF0Y2hlcy5zcGxpY2UocG9zaXRpb24rKywwLHtmbjptYXNrZGVmLnZhbGlkYXRvcj9cInN0cmluZ1wiPT10eXBlb2YgbWFza2RlZi52YWxpZGF0b3I/bmV3IFJlZ0V4cChtYXNrZGVmLnZhbGlkYXRvcixvcHRzLmNhc2luZz9cImlcIjpcIlwiKTpuZXcgZnVuY3Rpb24oKXt0aGlzLnRlc3Q9bWFza2RlZi52YWxpZGF0b3J9Om5ldyBSZWdFeHAoXCIuXCIpLHN0YXRpYzptYXNrZGVmLnN0YXRpY3x8ITEsb3B0aW9uYWxpdHk6ITEsbmV3QmxvY2tNYXJrZXI6dm9pZCAwPT09cHJldk1hdGNoP1wibWFzdGVyXCI6cHJldk1hdGNoLmRlZiE9PShtYXNrZGVmLmRlZmluaXRpb25TeW1ib2x8fGVsZW1lbnQpLGNhc2luZzptYXNrZGVmLmNhc2luZyxkZWY6bWFza2RlZi5kZWZpbml0aW9uU3ltYm9sfHxlbGVtZW50LHBsYWNlaG9sZGVyOm1hc2tkZWYucGxhY2Vob2xkZXIsbmF0aXZlRGVmOmVsZW1lbnQsZ2VuZXJhdGVkOm1hc2tkZWYuZ2VuZXJhdGVkfSk6KG10b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLDAse2ZuOi9bYS16XS9pLnRlc3Qob3B0cy5zdGF0aWNEZWZpbml0aW9uU3ltYm9sfHxlbGVtZW50KT9uZXcgUmVnRXhwKFwiW1wiKyhvcHRzLnN0YXRpY0RlZmluaXRpb25TeW1ib2x8fGVsZW1lbnQpK1wiXVwiLG9wdHMuY2FzaW5nP1wiaVwiOlwiXCIpOm51bGwsc3RhdGljOiEwLG9wdGlvbmFsaXR5OiExLG5ld0Jsb2NrTWFya2VyOnZvaWQgMD09PXByZXZNYXRjaD9cIm1hc3RlclwiOnByZXZNYXRjaC5kZWYhPT1lbGVtZW50JiYhMCE9PXByZXZNYXRjaC5zdGF0aWMsY2FzaW5nOm51bGwsZGVmOm9wdHMuc3RhdGljRGVmaW5pdGlvblN5bWJvbHx8ZWxlbWVudCxwbGFjZWhvbGRlcjp2b2lkIDAhPT1vcHRzLnN0YXRpY0RlZmluaXRpb25TeW1ib2w/ZWxlbWVudDp2b2lkIDAsbmF0aXZlRGVmOihlc2NhcGVkP1wiJ1wiOlwiXCIpK2VsZW1lbnR9KSxlc2NhcGVkPSExKX19ZnVuY3Rpb24gdmVyaWZ5R3JvdXBNYXJrZXIobWFza1Rva2VuKXttYXNrVG9rZW4mJm1hc2tUb2tlbi5tYXRjaGVzJiZtYXNrVG9rZW4ubWF0Y2hlcy5mb3JFYWNoKGZ1bmN0aW9uKHRva2VuLG5keCl7dmFyIG5leHRUb2tlbj1tYXNrVG9rZW4ubWF0Y2hlc1tuZHgrMV07KHZvaWQgMD09PW5leHRUb2tlbnx8dm9pZCAwPT09bmV4dFRva2VuLm1hdGNoZXN8fCExPT09bmV4dFRva2VuLmlzUXVhbnRpZmllcikmJnRva2VuJiZ0b2tlbi5pc0dyb3VwJiYodG9rZW4uaXNHcm91cD0hMSxyZWdleE1hc2t8fChpbnNlcnRUZXN0RGVmaW5pdGlvbih0b2tlbixvcHRzLmdyb3VwbWFya2VyWzBdLDApLCEwIT09dG9rZW4ub3Blbkdyb3VwJiZpbnNlcnRUZXN0RGVmaW5pdGlvbih0b2tlbixvcHRzLmdyb3VwbWFya2VyWzFdKSkpLHZlcmlmeUdyb3VwTWFya2VyKHRva2VuKX0pfWZ1bmN0aW9uIGRlZmF1bHRDYXNlKCl7aWYoMDxvcGVuZW5pbmdzLmxlbmd0aCl7aWYoY3VycmVudE9wZW5pbmdUb2tlbj1vcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoLTFdLGluc2VydFRlc3REZWZpbml0aW9uKGN1cnJlbnRPcGVuaW5nVG9rZW4sbSksY3VycmVudE9wZW5pbmdUb2tlbi5pc0FsdGVybmF0b3Ipe2FsdGVybmF0b3I9b3BlbmVuaW5ncy5wb3AoKTtmb3IodmFyIG1uZHg9MDttbmR4PGFsdGVybmF0b3IubWF0Y2hlcy5sZW5ndGg7bW5keCsrKWFsdGVybmF0b3IubWF0Y2hlc1ttbmR4XS5pc0dyb3VwJiYoYWx0ZXJuYXRvci5tYXRjaGVzW21uZHhdLmlzR3JvdXA9ITEpOzA8b3BlbmVuaW5ncy5sZW5ndGg/KGN1cnJlbnRPcGVuaW5nVG9rZW49b3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aC0xXSxjdXJyZW50T3BlbmluZ1Rva2VuLm1hdGNoZXMucHVzaChhbHRlcm5hdG9yKSk6Y3VycmVudFRva2VuLm1hdGNoZXMucHVzaChhbHRlcm5hdG9yKX19ZWxzZSBpbnNlcnRUZXN0RGVmaW5pdGlvbihjdXJyZW50VG9rZW4sbSl9ZnVuY3Rpb24gcmV2ZXJzZVRva2VucyhtYXNrVG9rZW4pe2Z1bmN0aW9uIHJldmVyc2VTdGF0aWMoc3Qpe3JldHVybiBzdD09PW9wdHMub3B0aW9uYWxtYXJrZXJbMF0/c3Q9b3B0cy5vcHRpb25hbG1hcmtlclsxXTpzdD09PW9wdHMub3B0aW9uYWxtYXJrZXJbMV0/c3Q9b3B0cy5vcHRpb25hbG1hcmtlclswXTpzdD09PW9wdHMuZ3JvdXBtYXJrZXJbMF0/c3Q9b3B0cy5ncm91cG1hcmtlclsxXTpzdD09PW9wdHMuZ3JvdXBtYXJrZXJbMV0mJihzdD1vcHRzLmdyb3VwbWFya2VyWzBdKSxzdH1mb3IodmFyIG1hdGNoIGluIG1hc2tUb2tlbi5tYXRjaGVzPW1hc2tUb2tlbi5tYXRjaGVzLnJldmVyc2UoKSxtYXNrVG9rZW4ubWF0Y2hlcylpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWFza1Rva2VuLm1hdGNoZXMsbWF0Y2gpKXt2YXIgaW50TWF0Y2g9cGFyc2VJbnQobWF0Y2gpO2lmKG1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXS5pc1F1YW50aWZpZXImJm1hc2tUb2tlbi5tYXRjaGVzW2ludE1hdGNoKzFdJiZtYXNrVG9rZW4ubWF0Y2hlc1tpbnRNYXRjaCsxXS5pc0dyb3VwKXt2YXIgcXQ9bWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdO21hc2tUb2tlbi5tYXRjaGVzLnNwbGljZShtYXRjaCwxKSxtYXNrVG9rZW4ubWF0Y2hlcy5zcGxpY2UoaW50TWF0Y2grMSwwLHF0KX12b2lkIDAhPT1tYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF0ubWF0Y2hlcz9tYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF09cmV2ZXJzZVRva2VucyhtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF0pOm1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXT1yZXZlcnNlU3RhdGljKG1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXSl9cmV0dXJuIG1hc2tUb2tlbn1mdW5jdGlvbiBncm91cGlmeShtYXRjaGVzKXt2YXIgZ3JvdXBUb2tlbj1uZXcgTWFza1Rva2VuKCEwKTtyZXR1cm4gZ3JvdXBUb2tlbi5vcGVuR3JvdXA9ITEsZ3JvdXBUb2tlbi5tYXRjaGVzPW1hdGNoZXMsZ3JvdXBUb2tlbn1mdW5jdGlvbiBjbG9zZUdyb3VwKCl7aWYob3BlbmluZ1Rva2VuPW9wZW5lbmluZ3MucG9wKCksb3BlbmluZ1Rva2VuLm9wZW5Hcm91cD0hMSx2b2lkIDAhPT1vcGVuaW5nVG9rZW4paWYoMDxvcGVuZW5pbmdzLmxlbmd0aCl7aWYoY3VycmVudE9wZW5pbmdUb2tlbj1vcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoLTFdLGN1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlcy5wdXNoKG9wZW5pbmdUb2tlbiksY3VycmVudE9wZW5pbmdUb2tlbi5pc0FsdGVybmF0b3Ipe2FsdGVybmF0b3I9b3BlbmVuaW5ncy5wb3AoKTtmb3IodmFyIG1uZHg9MDttbmR4PGFsdGVybmF0b3IubWF0Y2hlcy5sZW5ndGg7bW5keCsrKWFsdGVybmF0b3IubWF0Y2hlc1ttbmR4XS5pc0dyb3VwPSExLGFsdGVybmF0b3IubWF0Y2hlc1ttbmR4XS5hbHRlcm5hdG9yR3JvdXA9ITE7MDxvcGVuZW5pbmdzLmxlbmd0aD8oY3VycmVudE9wZW5pbmdUb2tlbj1vcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoLTFdLGN1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlcy5wdXNoKGFsdGVybmF0b3IpKTpjdXJyZW50VG9rZW4ubWF0Y2hlcy5wdXNoKGFsdGVybmF0b3IpfX1lbHNlIGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2gob3BlbmluZ1Rva2VuKTtlbHNlIGRlZmF1bHRDYXNlKCl9ZnVuY3Rpb24gZ3JvdXBRdWFudGlmaWVyKG1hdGNoZXMpe3ZhciBsYXN0TWF0Y2g9bWF0Y2hlcy5wb3AoKTtyZXR1cm4gbGFzdE1hdGNoLmlzUXVhbnRpZmllciYmKGxhc3RNYXRjaD1ncm91cGlmeShbbWF0Y2hlcy5wb3AoKSxsYXN0TWF0Y2hdKSksbGFzdE1hdGNofWZvcihyZWdleE1hc2smJihvcHRzLm9wdGlvbmFsbWFya2VyWzBdPXZvaWQgMCxvcHRzLm9wdGlvbmFsbWFya2VyWzFdPXZvaWQgMCk7bWF0Y2g9cmVnZXhNYXNrP3JlZ2V4VG9rZW5pemVyLmV4ZWMobWFzayk6dG9rZW5pemVyLmV4ZWMobWFzayk7KXtpZihtPW1hdGNoWzBdLHJlZ2V4TWFzaylzd2l0Y2gobS5jaGFyQXQoMCkpe2Nhc2VcIj9cIjptPVwiezAsMX1cIjticmVhaztjYXNlXCIrXCI6Y2FzZVwiKlwiOm09XCJ7XCIrbStcIn1cIjticmVhaztjYXNlXCJ8XCI6aWYoMD09PW9wZW5lbmluZ3MubGVuZ3RoKXt2YXIgYWx0UmVnZXhHcm91cD1ncm91cGlmeShjdXJyZW50VG9rZW4ubWF0Y2hlcyk7YWx0UmVnZXhHcm91cC5vcGVuR3JvdXA9ITAsb3BlbmVuaW5ncy5wdXNoKGFsdFJlZ2V4R3JvdXApLGN1cnJlbnRUb2tlbi5tYXRjaGVzPVtdLGNsb3NlUmVnZXhHcm91cD0hMH1icmVha31pZihlc2NhcGVkKWRlZmF1bHRDYXNlKCk7ZWxzZSBzd2l0Y2gobS5jaGFyQXQoMCkpe2Nhc2VcIiRcIjpjYXNlXCJeXCI6cmVnZXhNYXNrfHxkZWZhdWx0Q2FzZSgpO2JyZWFrO2Nhc2VcIig/PVwiOmJyZWFrO2Nhc2VcIig/IVwiOmJyZWFrO2Nhc2VcIig/PD1cIjpicmVhaztjYXNlXCIoPzwhXCI6YnJlYWs7Y2FzZSBvcHRzLmVzY2FwZUNoYXI6ZXNjYXBlZD0hMCxyZWdleE1hc2smJmRlZmF1bHRDYXNlKCk7YnJlYWs7Y2FzZSBvcHRzLm9wdGlvbmFsbWFya2VyWzFdOmNhc2Ugb3B0cy5ncm91cG1hcmtlclsxXTpjbG9zZUdyb3VwKCk7YnJlYWs7Y2FzZSBvcHRzLm9wdGlvbmFsbWFya2VyWzBdOm9wZW5lbmluZ3MucHVzaChuZXcgTWFza1Rva2VuKCExLCEwKSk7YnJlYWs7Y2FzZSBvcHRzLmdyb3VwbWFya2VyWzBdOm9wZW5lbmluZ3MucHVzaChuZXcgTWFza1Rva2VuKCEwKSk7YnJlYWs7Y2FzZSBvcHRzLnF1YW50aWZpZXJtYXJrZXJbMF06dmFyIHF1YW50aWZpZXI9bmV3IE1hc2tUb2tlbighMSwhMSwhMCk7bT1tLnJlcGxhY2UoL1t7fV0vZyxcIlwiKTt2YXIgbXFqPW0uc3BsaXQoXCJ8XCIpLG1xPW1xalswXS5zcGxpdChcIixcIiksbXEwPWlzTmFOKG1xWzBdKT9tcVswXTpwYXJzZUludChtcVswXSksbXExPTE9PT1tcS5sZW5ndGg/bXEwOmlzTmFOKG1xWzFdKT9tcVsxXTpwYXJzZUludChtcVsxXSk7XCIqXCIhPT1tcTAmJlwiK1wiIT09bXEwfHwobXEwPVwiKlwiPT09bXExPzA6MSkscXVhbnRpZmllci5xdWFudGlmaWVyPXttaW46bXEwLG1heDptcTEsaml0Om1xalsxXX07dmFyIG1hdGNoZXM9MDxvcGVuZW5pbmdzLmxlbmd0aD9vcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoLTFdLm1hdGNoZXM6Y3VycmVudFRva2VuLm1hdGNoZXM7aWYobWF0Y2g9bWF0Y2hlcy5wb3AoKSxtYXRjaC5pc0FsdGVybmF0b3Ipe21hdGNoZXMucHVzaChtYXRjaCksbWF0Y2hlcz1tYXRjaC5tYXRjaGVzO3ZhciBncm91cFRva2VuPW5ldyBNYXNrVG9rZW4oITApLHRtcE1hdGNoPW1hdGNoZXMucG9wKCk7bWF0Y2hlcy5wdXNoKGdyb3VwVG9rZW4pLG1hdGNoZXM9Z3JvdXBUb2tlbi5tYXRjaGVzLG1hdGNoPXRtcE1hdGNofW1hdGNoLmlzR3JvdXB8fChtYXRjaD1ncm91cGlmeShbbWF0Y2hdKSksbWF0Y2hlcy5wdXNoKG1hdGNoKSxtYXRjaGVzLnB1c2gocXVhbnRpZmllcik7YnJlYWs7Y2FzZSBvcHRzLmFsdGVybmF0b3JtYXJrZXI6aWYoMDxvcGVuZW5pbmdzLmxlbmd0aCl7Y3VycmVudE9wZW5pbmdUb2tlbj1vcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoLTFdO3ZhciBzdWJUb2tlbj1jdXJyZW50T3BlbmluZ1Rva2VuLm1hdGNoZXNbY3VycmVudE9wZW5pbmdUb2tlbi5tYXRjaGVzLmxlbmd0aC0xXTtsYXN0TWF0Y2g9Y3VycmVudE9wZW5pbmdUb2tlbi5vcGVuR3JvdXAmJih2b2lkIDA9PT1zdWJUb2tlbi5tYXRjaGVzfHwhMT09PXN1YlRva2VuLmlzR3JvdXAmJiExPT09c3ViVG9rZW4uaXNBbHRlcm5hdG9yKT9vcGVuZW5pbmdzLnBvcCgpOmdyb3VwUXVhbnRpZmllcihjdXJyZW50T3BlbmluZ1Rva2VuLm1hdGNoZXMpfWVsc2UgbGFzdE1hdGNoPWdyb3VwUXVhbnRpZmllcihjdXJyZW50VG9rZW4ubWF0Y2hlcyk7aWYobGFzdE1hdGNoLmlzQWx0ZXJuYXRvcilvcGVuZW5pbmdzLnB1c2gobGFzdE1hdGNoKTtlbHNlIGlmKGxhc3RNYXRjaC5hbHRlcm5hdG9yR3JvdXA/KGFsdGVybmF0b3I9b3BlbmVuaW5ncy5wb3AoKSxsYXN0TWF0Y2guYWx0ZXJuYXRvckdyb3VwPSExKTphbHRlcm5hdG9yPW5ldyBNYXNrVG9rZW4oITEsITEsITEsITApLGFsdGVybmF0b3IubWF0Y2hlcy5wdXNoKGxhc3RNYXRjaCksb3BlbmVuaW5ncy5wdXNoKGFsdGVybmF0b3IpLGxhc3RNYXRjaC5vcGVuR3JvdXApe2xhc3RNYXRjaC5vcGVuR3JvdXA9ITE7dmFyIGFsdGVybmF0b3JHcm91cD1uZXcgTWFza1Rva2VuKCEwKTthbHRlcm5hdG9yR3JvdXAuYWx0ZXJuYXRvckdyb3VwPSEwLG9wZW5lbmluZ3MucHVzaChhbHRlcm5hdG9yR3JvdXApfWJyZWFrO2RlZmF1bHQ6ZGVmYXVsdENhc2UoKX19Zm9yKGNsb3NlUmVnZXhHcm91cCYmY2xvc2VHcm91cCgpOzA8b3BlbmVuaW5ncy5sZW5ndGg7KW9wZW5pbmdUb2tlbj1vcGVuZW5pbmdzLnBvcCgpLGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2gob3BlbmluZ1Rva2VuKTtyZXR1cm4gMDxjdXJyZW50VG9rZW4ubWF0Y2hlcy5sZW5ndGgmJih2ZXJpZnlHcm91cE1hcmtlcihjdXJyZW50VG9rZW4pLG1hc2tUb2tlbnMucHVzaChjdXJyZW50VG9rZW4pKSwob3B0cy5udW1lcmljSW5wdXR8fG9wdHMuaXNSVEwpJiZyZXZlcnNlVG9rZW5zKG1hc2tUb2tlbnNbMF0pLG1hc2tUb2tlbnN9fSxmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfZGVmYXVsdD17OTp7dmFsaWRhdG9yOlwiWzAtOVxcdWZmMTAtXFx1ZmYxOV1cIixkZWZpbml0aW9uU3ltYm9sOlwiKlwifSxhOnt2YWxpZGF0b3I6XCJbQS1aYS16XFx1MDQxMC1cXHUwNDRmXFx1MDQwMVxcdTA0NTFcXHhjMC1cXHhmZlxceGI1XVwiLGRlZmluaXRpb25TeW1ib2w6XCIqXCJ9LFwiKlwiOnt2YWxpZGF0b3I6XCJbMC05XFx1ZmYxMC1cXHVmZjE5QS1aYS16XFx1MDQxMC1cXHUwNDRmXFx1MDQwMVxcdTA0NTFcXHhjMC1cXHhmZlxceGI1XVwifX07ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0fSxmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfZGVmYXVsdD17X21heFRlc3RQb3M6NTAwLHBsYWNlaG9sZGVyOlwiX1wiLG9wdGlvbmFsbWFya2VyOltcIltcIixcIl1cIl0scXVhbnRpZmllcm1hcmtlcjpbXCJ7XCIsXCJ9XCJdLGdyb3VwbWFya2VyOltcIihcIixcIilcIl0sYWx0ZXJuYXRvcm1hcmtlcjpcInxcIixlc2NhcGVDaGFyOlwiXFxcXFwiLG1hc2s6bnVsbCxyZWdleDpudWxsLG9uY29tcGxldGU6ZnVuY3Rpb24gb25jb21wbGV0ZSgpe30sb25pbmNvbXBsZXRlOmZ1bmN0aW9uIG9uaW5jb21wbGV0ZSgpe30sb25jbGVhcmVkOmZ1bmN0aW9uIG9uY2xlYXJlZCgpe30scmVwZWF0OjAsZ3JlZWR5OiExLGF1dG9Vbm1hc2s6ITEscmVtb3ZlTWFza09uU3VibWl0OiExLGNsZWFyTWFza09uTG9zdEZvY3VzOiEwLGluc2VydE1vZGU6ITAsaW5zZXJ0TW9kZVZpc3VhbDohMCxjbGVhckluY29tcGxldGU6ITEsYWxpYXM6bnVsbCxvbktleURvd246ZnVuY3Rpb24gb25LZXlEb3duKCl7fSxvbkJlZm9yZU1hc2s6bnVsbCxvbkJlZm9yZVBhc3RlOmZ1bmN0aW9uIG9uQmVmb3JlUGFzdGUocGFzdGVkVmFsdWUsb3B0cyl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2Ygb3B0cy5vbkJlZm9yZU1hc2s/b3B0cy5vbkJlZm9yZU1hc2suY2FsbCh0aGlzLHBhc3RlZFZhbHVlLG9wdHMpOnBhc3RlZFZhbHVlfSxvbkJlZm9yZVdyaXRlOm51bGwsb25Vbk1hc2s6bnVsbCxzaG93TWFza09uRm9jdXM6ITAsc2hvd01hc2tPbkhvdmVyOiEwLG9uS2V5VmFsaWRhdGlvbjpmdW5jdGlvbiBvbktleVZhbGlkYXRpb24oKXt9LHNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXI6XCIgXCIsbnVtZXJpY0lucHV0OiExLHJpZ2h0QWxpZ246ITEsdW5kb09uRXNjYXBlOiEwLHJhZGl4UG9pbnQ6XCJcIixfcmFkaXhEYW5jZTohMSxncm91cFNlcGFyYXRvcjpcIlwiLGtlZXBTdGF0aWM6bnVsbCxwb3NpdGlvbkNhcmV0T25UYWI6ITAsdGFiVGhyb3VnaDohMSxzdXBwb3J0c0lucHV0VHlwZTpbXCJ0ZXh0XCIsXCJ0ZWxcIixcInVybFwiLFwicGFzc3dvcmRcIixcInNlYXJjaFwiXSxpZ25vcmFibGVzOls4LDksMTksMjcsMzMsMzQsMzUsMzYsMzcsMzgsMzksNDAsNDUsNDYsOTMsMTEyLDExMywxMTQsMTE1LDExNiwxMTcsMTE4LDExOSwxMjAsMTIxLDEyMiwxMjMsMCwyMjldLGlzQ29tcGxldGU6bnVsbCxwcmVWYWxpZGF0aW9uOm51bGwscG9zdFZhbGlkYXRpb246bnVsbCxzdGF0aWNEZWZpbml0aW9uU3ltYm9sOnZvaWQgMCxqaXRNYXNraW5nOiExLG51bGxhYmxlOiEwLGlucHV0RXZlbnRPbmx5OiExLG5vVmFsdWVQYXRjaGluZzohMSxwb3NpdGlvbkNhcmV0T25DbGljazpcImx2cFwiLGNhc2luZzpudWxsLGlucHV0bW9kZTpcInRleHRcIixpbXBvcnREYXRhQXR0cmlidXRlczohMCxzaGlmdFBvc2l0aW9uczohMCx1c2VQcm90b3R5cGVEZWZpbml0aW9uczohMH07ZXhwb3J0cy5kZWZhdWx0PV9kZWZhdWx0fSxmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtcInVzZSBzdHJpY3RcIjt2YXIgX2lucHV0bWFzaz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMikpLF9rZXljb2RlPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygwKSksX2VzY2FwZVJlZ2V4PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygxMykpLF9wb3NpdGlvbmluZz1fX3dlYnBhY2tfcmVxdWlyZV9fKDEpO2Z1bmN0aW9uIF90eXBlb2Yob2JqKXtyZXR1cm4gX3R5cGVvZj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24gX3R5cGVvZihvYmope3JldHVybiB0eXBlb2Ygb2JqfTpmdW5jdGlvbiBfdHlwZW9mKG9iail7cmV0dXJuIG9iaiYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZvYmouY29uc3RydWN0b3I9PT1TeW1ib2wmJm9iaiE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2Ygb2JqfSxfdHlwZW9mKG9iail9ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7ZGVmYXVsdDpvYmp9fXZhciAkPV9pbnB1dG1hc2suZGVmYXVsdC5kZXBlbmRlbmN5TGliLGN1cnJlbnRZZWFyPShuZXcgRGF0ZSkuZ2V0RnVsbFllYXIoKSxmb3JtYXRDb2RlPXtkOltcIlsxLTldfFsxMl1bMC05XXwzWzAxXVwiLERhdGUucHJvdG90eXBlLnNldERhdGUsXCJkYXlcIixEYXRlLnByb3RvdHlwZS5nZXREYXRlXSxkZDpbXCIwWzEtOV18WzEyXVswLTldfDNbMDFdXCIsRGF0ZS5wcm90b3R5cGUuc2V0RGF0ZSxcImRheVwiLGZ1bmN0aW9uKCl7cmV0dXJuIHBhZChEYXRlLnByb3RvdHlwZS5nZXREYXRlLmNhbGwodGhpcyksMil9XSxkZGQ6W1wiXCJdLGRkZGQ6W1wiXCJdLG06W1wiWzEtOV18MVswMTJdXCIsRGF0ZS5wcm90b3R5cGUuc2V0TW9udGgsXCJtb250aFwiLGZ1bmN0aW9uKCl7cmV0dXJuIERhdGUucHJvdG90eXBlLmdldE1vbnRoLmNhbGwodGhpcykrMX1dLG1tOltcIjBbMS05XXwxWzAxMl1cIixEYXRlLnByb3RvdHlwZS5zZXRNb250aCxcIm1vbnRoXCIsZnVuY3Rpb24oKXtyZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldE1vbnRoLmNhbGwodGhpcykrMSwyKX1dLG1tbTpbXCJcIl0sbW1tbTpbXCJcIl0seXk6W1wiWzAtOV17Mn1cIixEYXRlLnByb3RvdHlwZS5zZXRGdWxsWWVhcixcInllYXJcIixmdW5jdGlvbigpe3JldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0RnVsbFllYXIuY2FsbCh0aGlzKSwyKX1dLHl5eXk6W1wiWzAtOV17NH1cIixEYXRlLnByb3RvdHlwZS5zZXRGdWxsWWVhcixcInllYXJcIixmdW5jdGlvbigpe3JldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0RnVsbFllYXIuY2FsbCh0aGlzKSw0KX1dLGg6W1wiWzEtOV18MVswLTJdXCIsRGF0ZS5wcm90b3R5cGUuc2V0SG91cnMsXCJob3Vyc1wiLERhdGUucHJvdG90eXBlLmdldEhvdXJzXSxoaDpbXCIwWzEtOV18MVswLTJdXCIsRGF0ZS5wcm90b3R5cGUuc2V0SG91cnMsXCJob3Vyc1wiLGZ1bmN0aW9uKCl7cmV0dXJuIHBhZChEYXRlLnByb3RvdHlwZS5nZXRIb3Vycy5jYWxsKHRoaXMpLDIpfV0saHg6W2Z1bmN0aW9uKHgpe3JldHVyblwiWzAtOV17XCIuY29uY2F0KHgsXCJ9XCIpfSxEYXRlLnByb3RvdHlwZS5zZXRIb3VycyxcImhvdXJzXCIsZnVuY3Rpb24oeCl7cmV0dXJuIERhdGUucHJvdG90eXBlLmdldEhvdXJzfV0sSDpbXCIxP1swLTldfDJbMC0zXVwiLERhdGUucHJvdG90eXBlLnNldEhvdXJzLFwiaG91cnNcIixEYXRlLnByb3RvdHlwZS5nZXRIb3Vyc10sSEg6W1wiMFswLTldfDFbMC05XXwyWzAtM11cIixEYXRlLnByb3RvdHlwZS5zZXRIb3VycyxcImhvdXJzXCIsZnVuY3Rpb24oKXtyZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldEhvdXJzLmNhbGwodGhpcyksMil9XSxIeDpbZnVuY3Rpb24oeCl7cmV0dXJuXCJbMC05XXtcIi5jb25jYXQoeCxcIn1cIil9LERhdGUucHJvdG90eXBlLnNldEhvdXJzLFwiaG91cnNcIixmdW5jdGlvbih4KXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldEhvdXJzLmNhbGwodGhpcykseCl9fV0sTTpbXCJbMS01XT9bMC05XVwiLERhdGUucHJvdG90eXBlLnNldE1pbnV0ZXMsXCJtaW51dGVzXCIsRGF0ZS5wcm90b3R5cGUuZ2V0TWludXRlc10sTU06W1wiMFswLTldfDFbMC05XXwyWzAtOV18M1swLTldfDRbMC05XXw1WzAtOV1cIixEYXRlLnByb3RvdHlwZS5zZXRNaW51dGVzLFwibWludXRlc1wiLGZ1bmN0aW9uKCl7cmV0dXJuIHBhZChEYXRlLnByb3RvdHlwZS5nZXRNaW51dGVzLmNhbGwodGhpcyksMil9XSxzOltcIlsxLTVdP1swLTldXCIsRGF0ZS5wcm90b3R5cGUuc2V0U2Vjb25kcyxcInNlY29uZHNcIixEYXRlLnByb3RvdHlwZS5nZXRTZWNvbmRzXSxzczpbXCIwWzAtOV18MVswLTldfDJbMC05XXwzWzAtOV18NFswLTldfDVbMC05XVwiLERhdGUucHJvdG90eXBlLnNldFNlY29uZHMsXCJzZWNvbmRzXCIsZnVuY3Rpb24oKXtyZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldFNlY29uZHMuY2FsbCh0aGlzKSwyKX1dLGw6W1wiWzAtOV17M31cIixEYXRlLnByb3RvdHlwZS5zZXRNaWxsaXNlY29uZHMsXCJtaWxsaXNlY29uZHNcIixmdW5jdGlvbigpe3JldHVybiBwYWQoRGF0ZS5wcm90b3R5cGUuZ2V0TWlsbGlzZWNvbmRzLmNhbGwodGhpcyksMyl9XSxMOltcIlswLTldezJ9XCIsRGF0ZS5wcm90b3R5cGUuc2V0TWlsbGlzZWNvbmRzLFwibWlsbGlzZWNvbmRzXCIsZnVuY3Rpb24oKXtyZXR1cm4gcGFkKERhdGUucHJvdG90eXBlLmdldE1pbGxpc2Vjb25kcy5jYWxsKHRoaXMpLDIpfV0sdDpbXCJbYXBdXCJdLHR0OltcIlthcF1tXCJdLFQ6W1wiW0FQXVwiXSxUVDpbXCJbQVBdTVwiXSxaOltcIlwiXSxvOltcIlwiXSxTOltcIlwiXX0sZm9ybWF0QWxpYXM9e2lzb0RhdGU6XCJ5eXl5LW1tLWRkXCIsaXNvVGltZTpcIkhIOk1NOnNzXCIsaXNvRGF0ZVRpbWU6XCJ5eXl5LW1tLWRkJ1QnSEg6TU06c3NcIixpc29VdGNEYXRlVGltZTpcIlVUQzp5eXl5LW1tLWRkJ1QnSEg6TU06c3MnWidcIn07ZnVuY3Rpb24gZm9ybWF0Y29kZShtYXRjaCl7dmFyIGR5bk1hdGNoZXM9bmV3IFJlZ0V4cChcIlxcXFxkKyRcIikuZXhlYyhtYXRjaFswXSk7aWYoZHluTWF0Y2hlcyYmdm9pZCAwIT09ZHluTWF0Y2hlc1swXSl7dmFyIGZjb2RlPWZvcm1hdENvZGVbbWF0Y2hbMF1bMF0rXCJ4XCJdLnNsaWNlKFwiXCIpO3JldHVybiBmY29kZVswXT1mY29kZVswXShkeW5NYXRjaGVzWzBdKSxmY29kZVszXT1mY29kZVszXShkeW5NYXRjaGVzWzBdKSxmY29kZX1pZihmb3JtYXRDb2RlW21hdGNoWzBdXSlyZXR1cm4gZm9ybWF0Q29kZVttYXRjaFswXV19ZnVuY3Rpb24gZ2V0VG9rZW5pemVyKG9wdHMpe2lmKCFvcHRzLnRva2VuaXplcil7dmFyIHRva2Vucz1bXSxkeW50b2tlbnM9W107Zm9yKHZhciBuZHggaW4gZm9ybWF0Q29kZSlpZigvXFwuKngkLy50ZXN0KG5keCkpe3ZhciBkeW5Ub2tlbj1uZHhbMF0rXCJcXFxcZCtcIjstMT09PWR5bnRva2Vucy5pbmRleE9mKGR5blRva2VuKSYmZHludG9rZW5zLnB1c2goZHluVG9rZW4pfWVsc2UtMT09PXRva2Vucy5pbmRleE9mKG5keFswXSkmJnRva2Vucy5wdXNoKG5keFswXSk7b3B0cy50b2tlbml6ZXI9XCIoXCIrKDA8ZHludG9rZW5zLmxlbmd0aD9keW50b2tlbnMuam9pbihcInxcIikrXCJ8XCI6XCJcIikrdG9rZW5zLmpvaW4oXCIrfFwiKStcIikrP3wuXCIsb3B0cy50b2tlbml6ZXI9bmV3IFJlZ0V4cChvcHRzLnRva2VuaXplcixcImdcIil9cmV0dXJuIG9wdHMudG9rZW5pemVyfWZ1bmN0aW9uIHByZWZpbGxZZWFyKGRhdGVQYXJ0cyxjdXJyZW50UmVzdWx0LG9wdHMpe2lmKGRhdGVQYXJ0cy55ZWFyIT09ZGF0ZVBhcnRzLnJhd3llYXIpe3ZhciBjcnJudHllYXI9Y3VycmVudFllYXIudG9TdHJpbmcoKSxlbnRlcmVkUGFydD1kYXRlUGFydHMucmF3eWVhci5yZXBsYWNlKC9bXjAtOV0vZyxcIlwiKSxjdXJyZW50WWVhclBhcnQ9Y3JybnR5ZWFyLnNsaWNlKDAsZW50ZXJlZFBhcnQubGVuZ3RoKSxjdXJyZW50WWVhck5leHRQYXJ0PWNycm50eWVhci5zbGljZShlbnRlcmVkUGFydC5sZW5ndGgpO2lmKDI9PT1lbnRlcmVkUGFydC5sZW5ndGgmJmVudGVyZWRQYXJ0PT09Y3VycmVudFllYXJQYXJ0KXt2YXIgZW50cnlDdXJyZW50WWVhcj1uZXcgRGF0ZShjdXJyZW50WWVhcixkYXRlUGFydHMubW9udGgtMSxkYXRlUGFydHMuZGF5KTtkYXRlUGFydHMuZGF5PT1lbnRyeUN1cnJlbnRZZWFyLmdldERhdGUoKSYmKCFvcHRzLm1heHx8b3B0cy5tYXguZGF0ZS5nZXRUaW1lKCk+PWVudHJ5Q3VycmVudFllYXIuZ2V0VGltZSgpKSYmKGRhdGVQYXJ0cy5kYXRlLnNldEZ1bGxZZWFyKGN1cnJlbnRZZWFyKSxkYXRlUGFydHMueWVhcj1jcnJudHllYXIsY3VycmVudFJlc3VsdC5pbnNlcnQ9W3twb3M6Y3VycmVudFJlc3VsdC5wb3MrMSxjOmN1cnJlbnRZZWFyTmV4dFBhcnRbMF19LHtwb3M6Y3VycmVudFJlc3VsdC5wb3MrMixjOmN1cnJlbnRZZWFyTmV4dFBhcnRbMV19XSl9fXJldHVybiBjdXJyZW50UmVzdWx0fWZ1bmN0aW9uIGlzVmFsaWREYXRlKGRhdGVQYXJ0cyxjdXJyZW50UmVzdWx0LG9wdHMpe2lmKHZvaWQgMD09PWRhdGVQYXJ0cy5yYXdkYXl8fCFpc0Zpbml0ZShkYXRlUGFydHMucmF3ZGF5KSYmbmV3IERhdGUoZGF0ZVBhcnRzLmRhdGUuZ2V0RnVsbFllYXIoKSxpc0Zpbml0ZShkYXRlUGFydHMucmF3bW9udGgpP2RhdGVQYXJ0cy5tb250aDpkYXRlUGFydHMuZGF0ZS5nZXRNb250aCgpKzEsMCkuZ2V0RGF0ZSgpPj1kYXRlUGFydHMuZGF5fHxcIjI5XCI9PWRhdGVQYXJ0cy5kYXkmJiFpc0Zpbml0ZShkYXRlUGFydHMucmF3eWVhcil8fG5ldyBEYXRlKGRhdGVQYXJ0cy5kYXRlLmdldEZ1bGxZZWFyKCksaXNGaW5pdGUoZGF0ZVBhcnRzLnJhd21vbnRoKT9kYXRlUGFydHMubW9udGg6ZGF0ZVBhcnRzLmRhdGUuZ2V0TW9udGgoKSsxLDApLmdldERhdGUoKT49ZGF0ZVBhcnRzLmRheSlyZXR1cm4gY3VycmVudFJlc3VsdDtpZihcIjI5XCI9PWRhdGVQYXJ0cy5kYXkpe3ZhciB0b2tlbk1hdGNoPWdldFRva2VuTWF0Y2goY3VycmVudFJlc3VsdC5wb3Msb3B0cyk7aWYoXCJ5eXl5XCI9PT10b2tlbk1hdGNoLnRhcmdldE1hdGNoWzBdJiZjdXJyZW50UmVzdWx0LnBvcy10b2tlbk1hdGNoLnRhcmdldE1hdGNoSW5kZXg9PTIpcmV0dXJuIGN1cnJlbnRSZXN1bHQucmVtb3ZlPWN1cnJlbnRSZXN1bHQucG9zKzEsY3VycmVudFJlc3VsdH1lbHNlIGlmKFwiMDJcIj09ZGF0ZVBhcnRzLm1vbnRoJiZcIjMwXCI9PWRhdGVQYXJ0cy5kYXkpcmV0dXJuIGRhdGVQYXJ0cy5kYXk9XCIwM1wiLGRhdGVQYXJ0cy5kYXRlLnNldERhdGUoMyksZGF0ZVBhcnRzLmRhdGUuc2V0TW9udGgoMSksY3VycmVudFJlc3VsdC5pbnNlcnQ9W3twb3M6Y3VycmVudFJlc3VsdC5wb3MsYzpcIjBcIn0se3BvczpjdXJyZW50UmVzdWx0LnBvcysxLGM6Y3VycmVudFJlc3VsdC5jfV0sY3VycmVudFJlc3VsdC5jYXJldD1fcG9zaXRpb25pbmcuc2Vla05leHQuY2FsbCh0aGlzLGN1cnJlbnRSZXN1bHQucG9zKzEpLGN1cnJlbnRSZXN1bHQ7cmV0dXJuITF9ZnVuY3Rpb24gaXNEYXRlSW5SYW5nZShkYXRlUGFydHMscmVzdWx0LG9wdHMsbWFza3NldCxmcm9tQ2hlY2t2YWwpe2lmKCFyZXN1bHQpcmV0dXJuIHJlc3VsdDtpZihvcHRzLm1pbil7aWYoZGF0ZVBhcnRzLnJhd3llYXIpe3ZhciByYXdZZWFyPWRhdGVQYXJ0cy5yYXd5ZWFyLnJlcGxhY2UoL1teMC05XS9nLFwiXCIpLG1pblllYXI9b3B0cy5taW4ueWVhci5zdWJzdHIoMCxyYXdZZWFyLmxlbmd0aCksbWF4WWVhcjtpZihyYXdZZWFyPG1pblllYXIpe3ZhciB0b2tlbk1hdGNoPWdldFRva2VuTWF0Y2gocmVzdWx0LnBvcyxvcHRzKTtpZihyYXdZZWFyPWRhdGVQYXJ0cy5yYXd5ZWFyLnN1YnN0cigwLHJlc3VsdC5wb3MtdG9rZW5NYXRjaC50YXJnZXRNYXRjaEluZGV4KzEpLnJlcGxhY2UoL1teMC05XS9nLFwiMFwiKSxtaW5ZZWFyPW9wdHMubWluLnllYXIuc3Vic3RyKDAscmF3WWVhci5sZW5ndGgpLG1pblllYXI8PXJhd1llYXIpcmV0dXJuIHJlc3VsdC5yZW1vdmU9dG9rZW5NYXRjaC50YXJnZXRNYXRjaEluZGV4K3Jhd1llYXIubGVuZ3RoLHJlc3VsdDtpZihyYXdZZWFyPVwieXl5eVwiPT09dG9rZW5NYXRjaC50YXJnZXRNYXRjaFswXT9kYXRlUGFydHMucmF3eWVhci5zdWJzdHIoMSwxKTpkYXRlUGFydHMucmF3eWVhci5zdWJzdHIoMCwxKSxtaW5ZZWFyPW9wdHMubWluLnllYXIuc3Vic3RyKDIsMSksbWF4WWVhcj1vcHRzLm1heD9vcHRzLm1heC55ZWFyLnN1YnN0cigyLDEpOnJhd1llYXIsMT09PXJhd1llYXIubGVuZ3RoJiZtaW5ZZWFyPD1yYXdZZWFyJiZyYXdZZWFyPD1tYXhZZWFyJiYhMCE9PWZyb21DaGVja3ZhbClyZXR1cm5cInl5eXlcIj09PXRva2VuTWF0Y2gudGFyZ2V0TWF0Y2hbMF0/KHJlc3VsdC5pbnNlcnQ9W3twb3M6cmVzdWx0LnBvcysxLGM6cmF3WWVhcixzdHJpY3Q6ITB9XSxyZXN1bHQuY2FyZXQ9cmVzdWx0LnBvcysyLG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcmVzdWx0LnBvc10uaW5wdXQ9b3B0cy5taW4ueWVhclsxXSk6KHJlc3VsdC5pbnNlcnQ9W3twb3M6cmVzdWx0LnBvcysxLGM6b3B0cy5taW4ueWVhclsxXSxzdHJpY3Q6ITB9LHtwb3M6cmVzdWx0LnBvcysyLGM6cmF3WWVhcixzdHJpY3Q6ITB9XSxyZXN1bHQuY2FyZXQ9cmVzdWx0LnBvcyszLG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcmVzdWx0LnBvc10uaW5wdXQ9b3B0cy5taW4ueWVhclswXSkscmVzdWx0O3Jlc3VsdD0hMX19cmVzdWx0JiZkYXRlUGFydHMueWVhciYmZGF0ZVBhcnRzLnllYXI9PT1kYXRlUGFydHMucmF3eWVhciYmb3B0cy5taW4uZGF0ZS5nZXRUaW1lKCk9PW9wdHMubWluLmRhdGUuZ2V0VGltZSgpJiYocmVzdWx0PW9wdHMubWluLmRhdGUuZ2V0VGltZSgpPD1kYXRlUGFydHMuZGF0ZS5nZXRUaW1lKCkpfXJldHVybiByZXN1bHQmJm9wdHMubWF4JiZvcHRzLm1heC5kYXRlLmdldFRpbWUoKT09b3B0cy5tYXguZGF0ZS5nZXRUaW1lKCkmJihyZXN1bHQ9b3B0cy5tYXguZGF0ZS5nZXRUaW1lKCk+PWRhdGVQYXJ0cy5kYXRlLmdldFRpbWUoKSkscmVzdWx0fWZ1bmN0aW9uIHBhcnNlKGZvcm1hdCxkYXRlT2JqVmFsdWUsb3B0cyxyYXcpe3ZhciBtYXNrPVwiXCIsbWF0Y2gsZmNvZGU7Zm9yKGdldFRva2VuaXplcihvcHRzKS5sYXN0SW5kZXg9MDttYXRjaD1nZXRUb2tlbml6ZXIob3B0cykuZXhlYyhmb3JtYXQpOylpZih2b2lkIDA9PT1kYXRlT2JqVmFsdWUpaWYoZmNvZGU9Zm9ybWF0Y29kZShtYXRjaCkpbWFzays9XCIoXCIrZmNvZGVbMF0rXCIpXCI7ZWxzZSBzd2l0Y2gobWF0Y2hbMF0pe2Nhc2VcIltcIjptYXNrKz1cIihcIjticmVhaztjYXNlXCJdXCI6bWFzays9XCIpP1wiO2JyZWFrO2RlZmF1bHQ6bWFzays9KDAsX2VzY2FwZVJlZ2V4LmRlZmF1bHQpKG1hdGNoWzBdKX1lbHNlIGlmKGZjb2RlPWZvcm1hdGNvZGUobWF0Y2gpKWlmKCEwIT09cmF3JiZmY29kZVszXSl7dmFyIGdldEZuPWZjb2RlWzNdO21hc2srPWdldEZuLmNhbGwoZGF0ZU9ialZhbHVlLmRhdGUpfWVsc2UgZmNvZGVbMl0/bWFzays9ZGF0ZU9ialZhbHVlW1wicmF3XCIrZmNvZGVbMl1dOm1hc2srPW1hdGNoWzBdO2Vsc2UgbWFzays9bWF0Y2hbMF07cmV0dXJuIG1hc2t9ZnVuY3Rpb24gcGFkKHZhbCxsZW4pe2Zvcih2YWw9U3RyaW5nKHZhbCksbGVuPWxlbnx8Mjt2YWwubGVuZ3RoPGxlbjspdmFsPVwiMFwiK3ZhbDtyZXR1cm4gdmFsfWZ1bmN0aW9uIGFuYWx5c2VNYXNrKG1hc2tTdHJpbmcsZm9ybWF0LG9wdHMpe3ZhciBkYXRlT2JqPXtkYXRlOm5ldyBEYXRlKDEsMCwxKX0sdGFyZ2V0UHJvcCxtYXNrPW1hc2tTdHJpbmcsbWF0Y2gsZGF0ZU9wZXJhdGlvbjtmdW5jdGlvbiBzZXRWYWx1ZShkYXRlT2JqLHZhbHVlLG9wdHMpe2lmKGRhdGVPYmpbdGFyZ2V0UHJvcF09dmFsdWUucmVwbGFjZSgvW14wLTldL2csXCIwXCIpLGRhdGVPYmpbXCJyYXdcIit0YXJnZXRQcm9wXT12YWx1ZSx2b2lkIDAhPT1kYXRlT3BlcmF0aW9uKXt2YXIgZGF0YXZhbHVlPWRhdGVPYmpbdGFyZ2V0UHJvcF07XCJkYXlcIj09PXRhcmdldFByb3AmJjA9PT1wYXJzZUludChkYXRhdmFsdWUpJiYoZGF0YXZhbHVlPTEpLFwibW9udGhcIj09PXRhcmdldFByb3AmJihkYXRhdmFsdWU9cGFyc2VJbnQoZGF0YXZhbHVlKSwwPGRhdGF2YWx1ZSkmJihkYXRhdmFsdWUtPTEpLGRhdGVPcGVyYXRpb24uY2FsbChkYXRlT2JqLmRhdGUsZGF0YXZhbHVlKX19aWYoXCJzdHJpbmdcIj09dHlwZW9mIG1hc2spe2ZvcihnZXRUb2tlbml6ZXIob3B0cykubGFzdEluZGV4PTA7bWF0Y2g9Z2V0VG9rZW5pemVyKG9wdHMpLmV4ZWMoZm9ybWF0KTspe3ZhciBkeW5NYXRjaGVzPW5ldyBSZWdFeHAoXCJcXFxcZCskXCIpLmV4ZWMobWF0Y2hbMF0pLGZjb2RlPWR5bk1hdGNoZXM/bWF0Y2hbMF1bMF0rXCJ4XCI6bWF0Y2hbMF0sdmFsdWU9dm9pZCAwO2lmKGR5bk1hdGNoZXMpe3ZhciBsYXN0SW5kZXg9Z2V0VG9rZW5pemVyKG9wdHMpLmxhc3RJbmRleCx0b2thbk1hdGNoPWdldFRva2VuTWF0Y2gobWF0Y2guaW5kZXgsb3B0cyk7Z2V0VG9rZW5pemVyKG9wdHMpLmxhc3RJbmRleD1sYXN0SW5kZXgsdmFsdWU9bWFzay5zbGljZSgwLG1hc2suaW5kZXhPZih0b2thbk1hdGNoLm5leHRNYXRjaFswXSkpfWVsc2UgdmFsdWU9bWFzay5zbGljZSgwLGZjb2RlLmxlbmd0aCk7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGZvcm1hdENvZGUsZmNvZGUpJiYodGFyZ2V0UHJvcD1mb3JtYXRDb2RlW2Zjb2RlXVsyXSxkYXRlT3BlcmF0aW9uPWZvcm1hdENvZGVbZmNvZGVdWzFdLHNldFZhbHVlKGRhdGVPYmosdmFsdWUsb3B0cykpLG1hc2s9bWFzay5zbGljZSh2YWx1ZS5sZW5ndGgpfXJldHVybiBkYXRlT2JqfWlmKG1hc2smJlwib2JqZWN0XCI9PT1fdHlwZW9mKG1hc2spJiZPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWFzayxcImRhdGVcIikpcmV0dXJuIG1hc2t9ZnVuY3Rpb24gaW1wb3J0RGF0ZShkYXRlT2JqLG9wdHMpe3JldHVybiBwYXJzZShvcHRzLmlucHV0Rm9ybWF0LHtkYXRlOmRhdGVPYmp9LG9wdHMpfWZ1bmN0aW9uIGdldFRva2VuTWF0Y2gocG9zLG9wdHMpe3ZhciBjYWxjUG9zPTAsdGFyZ2V0TWF0Y2gsbWF0Y2gsbWF0Y2hMZW5ndGg9MDtmb3IoZ2V0VG9rZW5pemVyKG9wdHMpLmxhc3RJbmRleD0wO21hdGNoPWdldFRva2VuaXplcihvcHRzKS5leGVjKG9wdHMuaW5wdXRGb3JtYXQpOyl7dmFyIGR5bk1hdGNoZXM9bmV3IFJlZ0V4cChcIlxcXFxkKyRcIikuZXhlYyhtYXRjaFswXSk7aWYobWF0Y2hMZW5ndGg9ZHluTWF0Y2hlcz9wYXJzZUludChkeW5NYXRjaGVzWzBdKTptYXRjaFswXS5sZW5ndGgsY2FsY1Bvcys9bWF0Y2hMZW5ndGgscG9zPD1jYWxjUG9zKXt0YXJnZXRNYXRjaD1tYXRjaCxtYXRjaD1nZXRUb2tlbml6ZXIob3B0cykuZXhlYyhvcHRzLmlucHV0Rm9ybWF0KTticmVha319cmV0dXJue3RhcmdldE1hdGNoSW5kZXg6Y2FsY1Bvcy1tYXRjaExlbmd0aCxuZXh0TWF0Y2g6bWF0Y2gsdGFyZ2V0TWF0Y2g6dGFyZ2V0TWF0Y2h9fV9pbnB1dG1hc2suZGVmYXVsdC5leHRlbmRBbGlhc2VzKHtkYXRldGltZTp7bWFzazpmdW5jdGlvbiBtYXNrKG9wdHMpe3JldHVybiBvcHRzLm51bWVyaWNJbnB1dD0hMSxmb3JtYXRDb2RlLlM9b3B0cy5pMThuLm9yZGluYWxTdWZmaXguam9pbihcInxcIiksb3B0cy5pbnB1dEZvcm1hdD1mb3JtYXRBbGlhc1tvcHRzLmlucHV0Rm9ybWF0XXx8b3B0cy5pbnB1dEZvcm1hdCxvcHRzLmRpc3BsYXlGb3JtYXQ9Zm9ybWF0QWxpYXNbb3B0cy5kaXNwbGF5Rm9ybWF0XXx8b3B0cy5kaXNwbGF5Rm9ybWF0fHxvcHRzLmlucHV0Rm9ybWF0LG9wdHMub3V0cHV0Rm9ybWF0PWZvcm1hdEFsaWFzW29wdHMub3V0cHV0Rm9ybWF0XXx8b3B0cy5vdXRwdXRGb3JtYXR8fG9wdHMuaW5wdXRGb3JtYXQsb3B0cy5wbGFjZWhvbGRlcj1cIlwiIT09b3B0cy5wbGFjZWhvbGRlcj9vcHRzLnBsYWNlaG9sZGVyOm9wdHMuaW5wdXRGb3JtYXQucmVwbGFjZSgvW1tcXF1dLyxcIlwiKSxvcHRzLnJlZ2V4PXBhcnNlKG9wdHMuaW5wdXRGb3JtYXQsdm9pZCAwLG9wdHMpLG9wdHMubWluPWFuYWx5c2VNYXNrKG9wdHMubWluLG9wdHMuaW5wdXRGb3JtYXQsb3B0cyksb3B0cy5tYXg9YW5hbHlzZU1hc2sob3B0cy5tYXgsb3B0cy5pbnB1dEZvcm1hdCxvcHRzKSxudWxsfSxwbGFjZWhvbGRlcjpcIlwiLGlucHV0Rm9ybWF0OlwiaXNvRGF0ZVRpbWVcIixkaXNwbGF5Rm9ybWF0OnZvaWQgMCxvdXRwdXRGb3JtYXQ6dm9pZCAwLG1pbjpudWxsLG1heDpudWxsLHNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXI6XCJcIixpMThuOntkYXlOYW1lczpbXCJNb25cIixcIlR1ZVwiLFwiV2VkXCIsXCJUaHVcIixcIkZyaVwiLFwiU2F0XCIsXCJTdW5cIixcIk1vbmRheVwiLFwiVHVlc2RheVwiLFwiV2VkbmVzZGF5XCIsXCJUaHVyc2RheVwiLFwiRnJpZGF5XCIsXCJTYXR1cmRheVwiLFwiU3VuZGF5XCJdLG1vbnRoTmFtZXM6W1wiSmFuXCIsXCJGZWJcIixcIk1hclwiLFwiQXByXCIsXCJNYXlcIixcIkp1blwiLFwiSnVsXCIsXCJBdWdcIixcIlNlcFwiLFwiT2N0XCIsXCJOb3ZcIixcIkRlY1wiLFwiSmFudWFyeVwiLFwiRmVicnVhcnlcIixcIk1hcmNoXCIsXCJBcHJpbFwiLFwiTWF5XCIsXCJKdW5lXCIsXCJKdWx5XCIsXCJBdWd1c3RcIixcIlNlcHRlbWJlclwiLFwiT2N0b2JlclwiLFwiTm92ZW1iZXJcIixcIkRlY2VtYmVyXCJdLG9yZGluYWxTdWZmaXg6W1wic3RcIixcIm5kXCIsXCJyZFwiLFwidGhcIl19LHByZVZhbGlkYXRpb246ZnVuY3Rpb24gcHJlVmFsaWRhdGlvbihidWZmZXIscG9zLGMsaXNTZWxlY3Rpb24sb3B0cyxtYXNrc2V0LGNhcmV0UG9zLHN0cmljdCl7aWYoc3RyaWN0KXJldHVybiEwO2lmKGlzTmFOKGMpJiZidWZmZXJbcG9zXSE9PWMpe3ZhciB0b2tlbk1hdGNoPWdldFRva2VuTWF0Y2gocG9zLG9wdHMpO2lmKHRva2VuTWF0Y2gubmV4dE1hdGNoJiZ0b2tlbk1hdGNoLm5leHRNYXRjaFswXT09PWMmJjE8dG9rZW5NYXRjaC50YXJnZXRNYXRjaFswXS5sZW5ndGgpe3ZhciB2YWxpZGF0b3I9Zm9ybWF0Q29kZVt0b2tlbk1hdGNoLnRhcmdldE1hdGNoWzBdXVswXTtpZihuZXcgUmVnRXhwKHZhbGlkYXRvcikudGVzdChcIjBcIitidWZmZXJbcG9zLTFdKSlyZXR1cm4gYnVmZmVyW3Bvc109YnVmZmVyW3Bvcy0xXSxidWZmZXJbcG9zLTFdPVwiMFwiLHtmdXp6eTohMCxidWZmZXI6YnVmZmVyLHJlZnJlc2hGcm9tQnVmZmVyOntzdGFydDpwb3MtMSxlbmQ6cG9zKzF9LHBvczpwb3MrMX19fXJldHVybiEwfSxwb3N0VmFsaWRhdGlvbjpmdW5jdGlvbiBwb3N0VmFsaWRhdGlvbihidWZmZXIscG9zLGMsY3VycmVudFJlc3VsdCxvcHRzLG1hc2tzZXQsc3RyaWN0LGZyb21DaGVja3ZhbCl7dmFyIGlucHV0bWFzaz10aGlzLHRva2VuTWF0Y2gsdmFsaWRhdG9yO2lmKHN0cmljdClyZXR1cm4hMDtpZighMT09PWN1cnJlbnRSZXN1bHQpcmV0dXJuIHRva2VuTWF0Y2g9Z2V0VG9rZW5NYXRjaChwb3MrMSxvcHRzKSx0b2tlbk1hdGNoLnRhcmdldE1hdGNoJiZ0b2tlbk1hdGNoLnRhcmdldE1hdGNoSW5kZXg9PT1wb3MmJjE8dG9rZW5NYXRjaC50YXJnZXRNYXRjaFswXS5sZW5ndGgmJnZvaWQgMCE9PWZvcm1hdENvZGVbdG9rZW5NYXRjaC50YXJnZXRNYXRjaFswXV0mJih2YWxpZGF0b3I9Zm9ybWF0Q29kZVt0b2tlbk1hdGNoLnRhcmdldE1hdGNoWzBdXVswXSxuZXcgUmVnRXhwKHZhbGlkYXRvcikudGVzdChcIjBcIitjKSk/e2luc2VydDpbe3Bvczpwb3MsYzpcIjBcIn0se3Bvczpwb3MrMSxjOmN9XSxwb3M6cG9zKzF9OmN1cnJlbnRSZXN1bHQ7aWYoY3VycmVudFJlc3VsdC5mdXp6eSYmKGJ1ZmZlcj1jdXJyZW50UmVzdWx0LmJ1ZmZlcixwb3M9Y3VycmVudFJlc3VsdC5wb3MpLHRva2VuTWF0Y2g9Z2V0VG9rZW5NYXRjaChwb3Msb3B0cyksdG9rZW5NYXRjaC50YXJnZXRNYXRjaCYmdG9rZW5NYXRjaC50YXJnZXRNYXRjaFswXSYmdm9pZCAwIT09Zm9ybWF0Q29kZVt0b2tlbk1hdGNoLnRhcmdldE1hdGNoWzBdXSl7dmFsaWRhdG9yPWZvcm1hdENvZGVbdG9rZW5NYXRjaC50YXJnZXRNYXRjaFswXV1bMF07dmFyIHBhcnQ9YnVmZmVyLnNsaWNlKHRva2VuTWF0Y2gudGFyZ2V0TWF0Y2hJbmRleCx0b2tlbk1hdGNoLnRhcmdldE1hdGNoSW5kZXgrdG9rZW5NYXRjaC50YXJnZXRNYXRjaFswXS5sZW5ndGgpOyExPT09bmV3IFJlZ0V4cCh2YWxpZGF0b3IpLnRlc3QocGFydC5qb2luKFwiXCIpKSYmMj09PXRva2VuTWF0Y2gudGFyZ2V0TWF0Y2hbMF0ubGVuZ3RoJiZtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Rva2VuTWF0Y2gudGFyZ2V0TWF0Y2hJbmRleF0mJm1hc2tzZXQudmFsaWRQb3NpdGlvbnNbdG9rZW5NYXRjaC50YXJnZXRNYXRjaEluZGV4KzFdJiYobWFza3NldC52YWxpZFBvc2l0aW9uc1t0b2tlbk1hdGNoLnRhcmdldE1hdGNoSW5kZXgrMV0uaW5wdXQ9XCIwXCIpfXZhciByZXN1bHQ9Y3VycmVudFJlc3VsdCxkYXRlUGFydHM9YW5hbHlzZU1hc2soYnVmZmVyLmpvaW4oXCJcIiksb3B0cy5pbnB1dEZvcm1hdCxvcHRzKTtyZXR1cm4gcmVzdWx0JiZkYXRlUGFydHMuZGF0ZS5nZXRUaW1lKCk9PWRhdGVQYXJ0cy5kYXRlLmdldFRpbWUoKSYmKHJlc3VsdD1wcmVmaWxsWWVhcihkYXRlUGFydHMscmVzdWx0LG9wdHMpLHJlc3VsdD1pc1ZhbGlkRGF0ZS5jYWxsKHRoaXMsZGF0ZVBhcnRzLHJlc3VsdCxvcHRzKSxyZXN1bHQ9aXNEYXRlSW5SYW5nZShkYXRlUGFydHMscmVzdWx0LG9wdHMsbWFza3NldCxmcm9tQ2hlY2t2YWwpKSxwb3MmJnJlc3VsdCYmY3VycmVudFJlc3VsdC5wb3MhPT1wb3M/e2J1ZmZlcjpwYXJzZShvcHRzLmlucHV0Rm9ybWF0LGRhdGVQYXJ0cyxvcHRzKS5zcGxpdChcIlwiKSxyZWZyZXNoRnJvbUJ1ZmZlcjp7c3RhcnQ6cG9zLGVuZDpjdXJyZW50UmVzdWx0LnBvc319OnJlc3VsdH0sb25LZXlEb3duOmZ1bmN0aW9uIG9uS2V5RG93bihlLGJ1ZmZlcixjYXJldFBvcyxvcHRzKXt2YXIgaW5wdXQ9dGhpcztlLmN0cmxLZXkmJmUua2V5Q29kZT09PV9rZXljb2RlLmRlZmF1bHQuUklHSFQmJih0aGlzLmlucHV0bWFzay5fdmFsdWVTZXQoaW1wb3J0RGF0ZShuZXcgRGF0ZSxvcHRzKSksJCh0aGlzKS50cmlnZ2VyKFwic2V0dmFsdWVcIikpfSxvblVuTWFzazpmdW5jdGlvbiBvblVuTWFzayhtYXNrZWRWYWx1ZSx1bm1hc2tlZFZhbHVlLG9wdHMpe3JldHVybiB1bm1hc2tlZFZhbHVlP3BhcnNlKG9wdHMub3V0cHV0Rm9ybWF0LGFuYWx5c2VNYXNrKG1hc2tlZFZhbHVlLG9wdHMuaW5wdXRGb3JtYXQsb3B0cyksb3B0cywhMCk6dW5tYXNrZWRWYWx1ZX0sY2FzaW5nOmZ1bmN0aW9uIGNhc2luZyhlbGVtLHRlc3QscG9zLHZhbGlkUG9zaXRpb25zKXtyZXR1cm4gMD09dGVzdC5uYXRpdmVEZWYuaW5kZXhPZihcIlthcF1cIik/ZWxlbS50b0xvd2VyQ2FzZSgpOjA9PXRlc3QubmF0aXZlRGVmLmluZGV4T2YoXCJbQVBdXCIpP2VsZW0udG9VcHBlckNhc2UoKTplbGVtfSxvbkJlZm9yZU1hc2s6ZnVuY3Rpb24gb25CZWZvcmVNYXNrKGluaXRpYWxWYWx1ZSxvcHRzKXtyZXR1cm5cIltvYmplY3QgRGF0ZV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbml0aWFsVmFsdWUpJiYoaW5pdGlhbFZhbHVlPWltcG9ydERhdGUoaW5pdGlhbFZhbHVlLG9wdHMpKSxpbml0aWFsVmFsdWV9LGluc2VydE1vZGU6ITEsc2hpZnRQb3NpdGlvbnM6ITEsa2VlcFN0YXRpYzohMSxpbnB1dG1vZGU6XCJudW1lcmljXCJ9fSl9LGZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe1widXNlIHN0cmljdFwiO3ZhciBfaW5wdXRtYXNrPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygyKSksX2tleWNvZGU9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDApKSxfZXNjYXBlUmVnZXg9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKSk7ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmope3JldHVybiBvYmomJm9iai5fX2VzTW9kdWxlP29iajp7ZGVmYXVsdDpvYmp9fXZhciAkPV9pbnB1dG1hc2suZGVmYXVsdC5kZXBlbmRlbmN5TGliO2Z1bmN0aW9uIGF1dG9Fc2NhcGUodHh0LG9wdHMpe2Zvcih2YXIgZXNjYXBlZFR4dD1cIlwiLGk9MDtpPHR4dC5sZW5ndGg7aSsrKV9pbnB1dG1hc2suZGVmYXVsdC5wcm90b3R5cGUuZGVmaW5pdGlvbnNbdHh0LmNoYXJBdChpKV18fG9wdHMuZGVmaW5pdGlvbnNbdHh0LmNoYXJBdChpKV18fG9wdHMub3B0aW9uYWxtYXJrZXJbMF09PT10eHQuY2hhckF0KGkpfHxvcHRzLm9wdGlvbmFsbWFya2VyWzFdPT09dHh0LmNoYXJBdChpKXx8b3B0cy5xdWFudGlmaWVybWFya2VyWzBdPT09dHh0LmNoYXJBdChpKXx8b3B0cy5xdWFudGlmaWVybWFya2VyWzFdPT09dHh0LmNoYXJBdChpKXx8b3B0cy5ncm91cG1hcmtlclswXT09PXR4dC5jaGFyQXQoaSl8fG9wdHMuZ3JvdXBtYXJrZXJbMV09PT10eHQuY2hhckF0KGkpfHxvcHRzLmFsdGVybmF0b3JtYXJrZXI9PT10eHQuY2hhckF0KGkpP2VzY2FwZWRUeHQrPVwiXFxcXFwiK3R4dC5jaGFyQXQoaSk6ZXNjYXBlZFR4dCs9dHh0LmNoYXJBdChpKTtyZXR1cm4gZXNjYXBlZFR4dH1mdW5jdGlvbiBhbGlnbkRpZ2l0cyhidWZmZXIsZGlnaXRzLG9wdHMsZm9yY2Upe2lmKDA8YnVmZmVyLmxlbmd0aCYmMDxkaWdpdHMmJighb3B0cy5kaWdpdHNPcHRpb25hbHx8Zm9yY2UpKXt2YXIgcmFkaXhQb3NpdGlvbj1idWZmZXIuaW5kZXhPZihvcHRzLnJhZGl4UG9pbnQpLG5lZ2F0aW9uQmFjaz0hMTtvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2s9PT1idWZmZXJbYnVmZmVyLmxlbmd0aC0xXSYmKG5lZ2F0aW9uQmFjaz0hMCxidWZmZXIubGVuZ3RoLS0pLC0xPT09cmFkaXhQb3NpdGlvbiYmKGJ1ZmZlci5wdXNoKG9wdHMucmFkaXhQb2ludCkscmFkaXhQb3NpdGlvbj1idWZmZXIubGVuZ3RoLTEpO2Zvcih2YXIgaT0xO2k8PWRpZ2l0cztpKyspaXNGaW5pdGUoYnVmZmVyW3JhZGl4UG9zaXRpb24raV0pfHwoYnVmZmVyW3JhZGl4UG9zaXRpb24raV09XCIwXCIpfXJldHVybiBuZWdhdGlvbkJhY2smJmJ1ZmZlci5wdXNoKG9wdHMubmVnYXRpb25TeW1ib2wuYmFjayksYnVmZmVyfWZ1bmN0aW9uIGZpbmRWYWxpZGF0b3Ioc3ltYm9sLG1hc2tzZXQpe3ZhciBwb3NOZHg9MDtpZihcIitcIj09PXN5bWJvbCl7Zm9yKHBvc05keCBpbiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zKTtwb3NOZHg9cGFyc2VJbnQocG9zTmR4KX1mb3IodmFyIHRzdE5keCBpbiBtYXNrc2V0LnRlc3RzKWlmKHRzdE5keD1wYXJzZUludCh0c3ROZHgpLHBvc05keDw9dHN0TmR4KWZvcih2YXIgbmR4PTAsbmR4bD1tYXNrc2V0LnRlc3RzW3RzdE5keF0ubGVuZ3RoO25keDxuZHhsO25keCsrKWlmKCh2b2lkIDA9PT1tYXNrc2V0LnZhbGlkUG9zaXRpb25zW3RzdE5keF18fFwiLVwiPT09c3ltYm9sKSYmbWFza3NldC50ZXN0c1t0c3ROZHhdW25keF0ubWF0Y2guZGVmPT09c3ltYm9sKXJldHVybiB0c3ROZHgrKHZvaWQgMCE9PW1hc2tzZXQudmFsaWRQb3NpdGlvbnNbdHN0TmR4XSYmXCItXCIhPT1zeW1ib2w/MTowKTtyZXR1cm4gcG9zTmR4fWZ1bmN0aW9uIGZpbmRWYWxpZChzeW1ib2wsbWFza3NldCl7dmFyIHJldD0tMTtmb3IodmFyIG5keCBpbiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zKXt2YXIgdHN0PW1hc2tzZXQudmFsaWRQb3NpdGlvbnNbbmR4XTtpZih0c3QmJnRzdC5tYXRjaC5kZWY9PT1zeW1ib2wpe3JldD1wYXJzZUludChuZHgpO2JyZWFrfX1yZXR1cm4gcmV0fWZ1bmN0aW9uIHBhcnNlTWluTWF4T3B0aW9ucyhvcHRzKXt2b2lkIDA9PT1vcHRzLnBhcnNlTWluTWF4T3B0aW9ucyYmKG51bGwhPT1vcHRzLm1pbiYmKG9wdHMubWluPW9wdHMubWluLnRvU3RyaW5nKCkucmVwbGFjZShuZXcgUmVnRXhwKCgwLF9lc2NhcGVSZWdleC5kZWZhdWx0KShvcHRzLmdyb3VwU2VwYXJhdG9yKSxcImdcIiksXCJcIiksXCIsXCI9PT1vcHRzLnJhZGl4UG9pbnQmJihvcHRzLm1pbj1vcHRzLm1pbi5yZXBsYWNlKG9wdHMucmFkaXhQb2ludCxcIi5cIikpLG9wdHMubWluPWlzRmluaXRlKG9wdHMubWluKT9wYXJzZUZsb2F0KG9wdHMubWluKTpOYU4saXNOYU4ob3B0cy5taW4pJiYob3B0cy5taW49TnVtYmVyLk1JTl9WQUxVRSkpLG51bGwhPT1vcHRzLm1heCYmKG9wdHMubWF4PW9wdHMubWF4LnRvU3RyaW5nKCkucmVwbGFjZShuZXcgUmVnRXhwKCgwLF9lc2NhcGVSZWdleC5kZWZhdWx0KShvcHRzLmdyb3VwU2VwYXJhdG9yKSxcImdcIiksXCJcIiksXCIsXCI9PT1vcHRzLnJhZGl4UG9pbnQmJihvcHRzLm1heD1vcHRzLm1heC5yZXBsYWNlKG9wdHMucmFkaXhQb2ludCxcIi5cIikpLG9wdHMubWF4PWlzRmluaXRlKG9wdHMubWF4KT9wYXJzZUZsb2F0KG9wdHMubWF4KTpOYU4saXNOYU4ob3B0cy5tYXgpJiYob3B0cy5tYXg9TnVtYmVyLk1BWF9WQUxVRSkpLG9wdHMucGFyc2VNaW5NYXhPcHRpb25zPVwiZG9uZVwiKX1mdW5jdGlvbiBnZW5NYXNrKG9wdHMpe29wdHMucmVwZWF0PTAsb3B0cy5ncm91cFNlcGFyYXRvcj09PW9wdHMucmFkaXhQb2ludCYmb3B0cy5kaWdpdHMmJlwiMFwiIT09b3B0cy5kaWdpdHMmJihcIi5cIj09PW9wdHMucmFkaXhQb2ludD9vcHRzLmdyb3VwU2VwYXJhdG9yPVwiLFwiOlwiLFwiPT09b3B0cy5yYWRpeFBvaW50P29wdHMuZ3JvdXBTZXBhcmF0b3I9XCIuXCI6b3B0cy5ncm91cFNlcGFyYXRvcj1cIlwiKSxcIiBcIj09PW9wdHMuZ3JvdXBTZXBhcmF0b3ImJihvcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXI9dm9pZCAwKSwxPG9wdHMucGxhY2Vob2xkZXIubGVuZ3RoJiYob3B0cy5wbGFjZWhvbGRlcj1vcHRzLnBsYWNlaG9sZGVyLmNoYXJBdCgwKSksXCJyYWRpeEZvY3VzXCI9PT1vcHRzLnBvc2l0aW9uQ2FyZXRPbkNsaWNrJiZcIlwiPT09b3B0cy5wbGFjZWhvbGRlciYmKG9wdHMucG9zaXRpb25DYXJldE9uQ2xpY2s9XCJsdnBcIik7dmFyIGRlY2ltYWxEZWY9XCIwXCIscmFkaXhQb2ludERlZj1vcHRzLnJhZGl4UG9pbnQ7ITA9PT1vcHRzLm51bWVyaWNJbnB1dCYmdm9pZCAwPT09b3B0cy5fX2ZpbmFuY2VJbnB1dD8oZGVjaW1hbERlZj1cIjFcIixvcHRzLnBvc2l0aW9uQ2FyZXRPbkNsaWNrPVwicmFkaXhGb2N1c1wiPT09b3B0cy5wb3NpdGlvbkNhcmV0T25DbGljaz9cImx2cFwiOm9wdHMucG9zaXRpb25DYXJldE9uQ2xpY2ssb3B0cy5kaWdpdHNPcHRpb25hbD0hMSxpc05hTihvcHRzLmRpZ2l0cykmJihvcHRzLmRpZ2l0cz0yKSxvcHRzLl9yYWRpeERhbmNlPSExLHJhZGl4UG9pbnREZWY9XCIsXCI9PT1vcHRzLnJhZGl4UG9pbnQ/XCI/XCI6XCIhXCIsXCJcIiE9PW9wdHMucmFkaXhQb2ludCYmdm9pZCAwPT09b3B0cy5kZWZpbml0aW9uc1tyYWRpeFBvaW50RGVmXSYmKG9wdHMuZGVmaW5pdGlvbnNbcmFkaXhQb2ludERlZl09e30sb3B0cy5kZWZpbml0aW9uc1tyYWRpeFBvaW50RGVmXS52YWxpZGF0b3I9XCJbXCIrb3B0cy5yYWRpeFBvaW50K1wiXVwiLG9wdHMuZGVmaW5pdGlvbnNbcmFkaXhQb2ludERlZl0ucGxhY2Vob2xkZXI9b3B0cy5yYWRpeFBvaW50LG9wdHMuZGVmaW5pdGlvbnNbcmFkaXhQb2ludERlZl0uc3RhdGljPSEwLG9wdHMuZGVmaW5pdGlvbnNbcmFkaXhQb2ludERlZl0uZ2VuZXJhdGVkPSEwKSk6KG9wdHMuX19maW5hbmNlSW5wdXQ9ITEsb3B0cy5udW1lcmljSW5wdXQ9ITApO3ZhciBtYXNrPVwiWytdXCIsYWx0TWFzaztpZihtYXNrKz1hdXRvRXNjYXBlKG9wdHMucHJlZml4LG9wdHMpLFwiXCIhPT1vcHRzLmdyb3VwU2VwYXJhdG9yPyh2b2lkIDA9PT1vcHRzLmRlZmluaXRpb25zW29wdHMuZ3JvdXBTZXBhcmF0b3JdJiYob3B0cy5kZWZpbml0aW9uc1tvcHRzLmdyb3VwU2VwYXJhdG9yXT17fSxvcHRzLmRlZmluaXRpb25zW29wdHMuZ3JvdXBTZXBhcmF0b3JdLnZhbGlkYXRvcj1cIltcIitvcHRzLmdyb3VwU2VwYXJhdG9yK1wiXVwiLG9wdHMuZGVmaW5pdGlvbnNbb3B0cy5ncm91cFNlcGFyYXRvcl0ucGxhY2Vob2xkZXI9b3B0cy5ncm91cFNlcGFyYXRvcixvcHRzLmRlZmluaXRpb25zW29wdHMuZ3JvdXBTZXBhcmF0b3JdLnN0YXRpYz0hMCxvcHRzLmRlZmluaXRpb25zW29wdHMuZ3JvdXBTZXBhcmF0b3JdLmdlbmVyYXRlZD0hMCksbWFzays9b3B0cy5fbWFzayhvcHRzKSk6bWFzays9XCI5eyt9XCIsdm9pZCAwIT09b3B0cy5kaWdpdHMmJjAhPT1vcHRzLmRpZ2l0cyl7dmFyIGRxPW9wdHMuZGlnaXRzLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpO2lzRmluaXRlKGRxWzBdKSYmZHFbMV0mJmlzRmluaXRlKGRxWzFdKT9tYXNrKz1yYWRpeFBvaW50RGVmK2RlY2ltYWxEZWYrXCJ7XCIrb3B0cy5kaWdpdHMrXCJ9XCI6KGlzTmFOKG9wdHMuZGlnaXRzKXx8MDxwYXJzZUludChvcHRzLmRpZ2l0cykpJiYob3B0cy5kaWdpdHNPcHRpb25hbD8oYWx0TWFzaz1tYXNrK3JhZGl4UG9pbnREZWYrZGVjaW1hbERlZitcInswLFwiK29wdHMuZGlnaXRzK1wifVwiLG9wdHMua2VlcFN0YXRpYz0hMCk6bWFzays9cmFkaXhQb2ludERlZitkZWNpbWFsRGVmK1wie1wiK29wdHMuZGlnaXRzK1wifVwiKX1yZXR1cm4gbWFzays9YXV0b0VzY2FwZShvcHRzLnN1ZmZpeCxvcHRzKSxtYXNrKz1cIlstXVwiLGFsdE1hc2smJihtYXNrPVthbHRNYXNrK2F1dG9Fc2NhcGUob3B0cy5zdWZmaXgsb3B0cykrXCJbLV1cIixtYXNrXSksb3B0cy5ncmVlZHk9ITEscGFyc2VNaW5NYXhPcHRpb25zKG9wdHMpLG1hc2t9ZnVuY3Rpb24gaGFubmRsZVJhZGl4RGFuY2UocG9zLGMscmFkaXhQb3MsbWFza3NldCxvcHRzKXtyZXR1cm4gb3B0cy5fcmFkaXhEYW5jZSYmb3B0cy5udW1lcmljSW5wdXQmJmMhPT1vcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2smJnBvczw9cmFkaXhQb3MmJigwPHJhZGl4UG9zfHxjPT1vcHRzLnJhZGl4UG9pbnQpJiYodm9pZCAwPT09bWFza3NldC52YWxpZFBvc2l0aW9uc1twb3MtMV18fG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zLTFdLmlucHV0IT09b3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrKSYmKHBvcy09MSkscG9zfWZ1bmN0aW9uIGRlY2ltYWxWYWxpZGF0b3IoY2hycyxtYXNrc2V0LHBvcyxzdHJpY3Qsb3B0cyl7dmFyIHJhZGl4UG9zPW1hc2tzZXQuYnVmZmVyP21hc2tzZXQuYnVmZmVyLmluZGV4T2Yob3B0cy5yYWRpeFBvaW50KTotMSxyZXN1bHQ9LTEhPT1yYWRpeFBvcyYmbmV3IFJlZ0V4cChcIlswLTlcXHVmZjExLVxcdWZmMTldXCIpLnRlc3QoY2hycyk7cmV0dXJuIG9wdHMuX3JhZGl4RGFuY2UmJnJlc3VsdCYmbnVsbD09bWFza3NldC52YWxpZFBvc2l0aW9uc1tyYWRpeFBvc10/e2luc2VydDp7cG9zOnJhZGl4UG9zPT09cG9zP3JhZGl4UG9zKzE6cmFkaXhQb3MsYzpvcHRzLnJhZGl4UG9pbnR9LHBvczpwb3N9OnJlc3VsdH1mdW5jdGlvbiBjaGVja0ZvckxlYWRpbmdaZXJvZXMoYnVmZmVyLG9wdHMpe3ZhciBudW1iZXJNYXRjaGVzPW5ldyBSZWdFeHAoXCIoXlwiKyhcIlwiIT09b3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udD8oMCxfZXNjYXBlUmVnZXguZGVmYXVsdCkob3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCkrXCI/XCI6XCJcIikrKDAsX2VzY2FwZVJlZ2V4LmRlZmF1bHQpKG9wdHMucHJlZml4KStcIikoLiopKFwiKygwLF9lc2NhcGVSZWdleC5kZWZhdWx0KShvcHRzLnN1ZmZpeCkrKFwiXCIhPW9wdHMubmVnYXRpb25TeW1ib2wuYmFjaz8oMCxfZXNjYXBlUmVnZXguZGVmYXVsdCkob3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrKStcIj9cIjpcIlwiKStcIiQpXCIpLmV4ZWMoYnVmZmVyLnNsaWNlKCkucmV2ZXJzZSgpLmpvaW4oXCJcIikpLG51bWJlcj1udW1iZXJNYXRjaGVzP251bWJlck1hdGNoZXNbMl06XCJcIixsZWFkaW5nemVyb2VzPSExO3JldHVybiBudW1iZXImJihudW1iZXI9bnVtYmVyLnNwbGl0KG9wdHMucmFkaXhQb2ludC5jaGFyQXQoMCkpWzBdLGxlYWRpbmd6ZXJvZXM9bmV3IFJlZ0V4cChcIl5bMFwiK29wdHMuZ3JvdXBTZXBhcmF0b3IrXCJdKlwiKS5leGVjKG51bWJlcikpLCEoIWxlYWRpbmd6ZXJvZXN8fCEoMTxsZWFkaW5nemVyb2VzWzBdLmxlbmd0aHx8MDxsZWFkaW5nemVyb2VzWzBdLmxlbmd0aCYmbGVhZGluZ3plcm9lc1swXS5sZW5ndGg8bnVtYmVyLmxlbmd0aCkpJiZsZWFkaW5nemVyb2VzfV9pbnB1dG1hc2suZGVmYXVsdC5leHRlbmRBbGlhc2VzKHtudW1lcmljOnttYXNrOmdlbk1hc2ssX21hc2s6ZnVuY3Rpb24gX21hc2sob3B0cyl7cmV0dXJuXCIoXCIrb3B0cy5ncm91cFNlcGFyYXRvcitcIjk5OSl7K3wxfVwifSxkaWdpdHM6XCIqXCIsZGlnaXRzT3B0aW9uYWw6ITAsZW5mb3JjZURpZ2l0c09uQmx1cjohMSxyYWRpeFBvaW50OlwiLlwiLHBvc2l0aW9uQ2FyZXRPbkNsaWNrOlwicmFkaXhGb2N1c1wiLF9yYWRpeERhbmNlOiEwLGdyb3VwU2VwYXJhdG9yOlwiXCIsYWxsb3dNaW51czohMCxuZWdhdGlvblN5bWJvbDp7ZnJvbnQ6XCItXCIsYmFjazpcIlwifSxwcmVmaXg6XCJcIixzdWZmaXg6XCJcIixtaW46bnVsbCxtYXg6bnVsbCxTZXRNYXhPbk92ZXJmbG93OiExLHN0ZXA6MSxpbnB1dFR5cGU6XCJ0ZXh0XCIsdW5tYXNrQXNOdW1iZXI6ITEscm91bmRpbmdGTjpNYXRoLnJvdW5kLGlucHV0bW9kZTpcIm51bWVyaWNcIixzaG9ydGN1dHM6e2s6XCIwMDBcIixtOlwiMDAwMDAwXCJ9LHBsYWNlaG9sZGVyOlwiMFwiLGdyZWVkeTohMSxyaWdodEFsaWduOiEwLGluc2VydE1vZGU6ITAsYXV0b1VubWFzazohMSxza2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyOlwiXCIsZGVmaW5pdGlvbnM6ezA6e3ZhbGlkYXRvcjpkZWNpbWFsVmFsaWRhdG9yfSwxOnt2YWxpZGF0b3I6ZGVjaW1hbFZhbGlkYXRvcixkZWZpbml0aW9uU3ltYm9sOlwiOVwifSxcIitcIjp7dmFsaWRhdG9yOmZ1bmN0aW9uIHZhbGlkYXRvcihjaHJzLG1hc2tzZXQscG9zLHN0cmljdCxvcHRzKXtyZXR1cm4gb3B0cy5hbGxvd01pbnVzJiYoXCItXCI9PT1jaHJzfHxjaHJzPT09b3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCl9fSxcIi1cIjp7dmFsaWRhdG9yOmZ1bmN0aW9uIHZhbGlkYXRvcihjaHJzLG1hc2tzZXQscG9zLHN0cmljdCxvcHRzKXtyZXR1cm4gb3B0cy5hbGxvd01pbnVzJiZjaHJzPT09b3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrfX19LHByZVZhbGlkYXRpb246ZnVuY3Rpb24gcHJlVmFsaWRhdGlvbihidWZmZXIscG9zLGMsaXNTZWxlY3Rpb24sb3B0cyxtYXNrc2V0LGNhcmV0UG9zLHN0cmljdCl7aWYoITEhPT1vcHRzLl9fZmluYW5jZUlucHV0JiZjPT09b3B0cy5yYWRpeFBvaW50KXJldHVybiExO3ZhciBwYXR0ZXJuO2lmKHBhdHRlcm49b3B0cy5zaG9ydGN1dHMmJm9wdHMuc2hvcnRjdXRzW2NdKXtpZigxPHBhdHRlcm4ubGVuZ3RoKWZvcih2YXIgaW5zZXJ0cz1bXSxpPTA7aTxwYXR0ZXJuLmxlbmd0aDtpKyspaW5zZXJ0cy5wdXNoKHtwb3M6cG9zK2ksYzpwYXR0ZXJuW2ldLHN0cmljdDohMX0pO3JldHVybntpbnNlcnQ6aW5zZXJ0c319dmFyIHJhZGl4UG9zPWJ1ZmZlci5pbmRleE9mKG9wdHMucmFkaXhQb2ludCksaW5pdFBvcz1wb3M7aWYocG9zPWhhbm5kbGVSYWRpeERhbmNlKHBvcyxjLHJhZGl4UG9zLG1hc2tzZXQsb3B0cyksXCItXCI9PT1jfHxjPT09b3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCl7aWYoITAhPT1vcHRzLmFsbG93TWludXMpcmV0dXJuITE7dmFyIGlzTmVnYXRpdmU9ITEsZnJvbnQ9ZmluZFZhbGlkKFwiK1wiLG1hc2tzZXQpLGJhY2s9ZmluZFZhbGlkKFwiLVwiLG1hc2tzZXQpO3JldHVybi0xIT09ZnJvbnQmJihpc05lZ2F0aXZlPVtmcm9udCxiYWNrXSksITEhPT1pc05lZ2F0aXZlP3tyZW1vdmU6aXNOZWdhdGl2ZSxjYXJldDppbml0UG9zLW9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQubGVuZ3RofTp7aW5zZXJ0Olt7cG9zOmZpbmRWYWxpZGF0b3IoXCIrXCIsbWFza3NldCksYzpvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250LGZyb21Jc1ZhbGlkOiEwfSx7cG9zOmZpbmRWYWxpZGF0b3IoXCItXCIsbWFza3NldCksYzpvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2ssZnJvbUlzVmFsaWQ6dm9pZCAwfV0sY2FyZXQ6aW5pdFBvcytvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2subGVuZ3RofX1pZihjPT09b3B0cy5ncm91cFNlcGFyYXRvcilyZXR1cm57Y2FyZXQ6aW5pdFBvc307aWYoc3RyaWN0KXJldHVybiEwO2lmKC0xIT09cmFkaXhQb3MmJiEwPT09b3B0cy5fcmFkaXhEYW5jZSYmITE9PT1pc1NlbGVjdGlvbiYmYz09PW9wdHMucmFkaXhQb2ludCYmdm9pZCAwIT09b3B0cy5kaWdpdHMmJihpc05hTihvcHRzLmRpZ2l0cyl8fDA8cGFyc2VJbnQob3B0cy5kaWdpdHMpKSYmcmFkaXhQb3MhPT1wb3MpcmV0dXJue2NhcmV0Om9wdHMuX3JhZGl4RGFuY2UmJnBvcz09PXJhZGl4UG9zLTE/cmFkaXhQb3MrMTpyYWRpeFBvc307aWYoITE9PT1vcHRzLl9fZmluYW5jZUlucHV0KWlmKGlzU2VsZWN0aW9uKXtpZihvcHRzLmRpZ2l0c09wdGlvbmFsKXJldHVybntyZXdyaXRlUG9zaXRpb246Y2FyZXRQb3MuZW5kfTtpZighb3B0cy5kaWdpdHNPcHRpb25hbCl7aWYoY2FyZXRQb3MuYmVnaW4+cmFkaXhQb3MmJmNhcmV0UG9zLmVuZDw9cmFkaXhQb3MpcmV0dXJuIGM9PT1vcHRzLnJhZGl4UG9pbnQ/e2luc2VydDp7cG9zOnJhZGl4UG9zKzEsYzpcIjBcIixmcm9tSXNWYWxpZDohMH0scmV3cml0ZVBvc2l0aW9uOnJhZGl4UG9zfTp7cmV3cml0ZVBvc2l0aW9uOnJhZGl4UG9zKzF9O2lmKGNhcmV0UG9zLmJlZ2luPHJhZGl4UG9zKXJldHVybntyZXdyaXRlUG9zaXRpb246Y2FyZXRQb3MuYmVnaW4tMX19fWVsc2UgaWYoIW9wdHMuc2hvd01hc2tPbkhvdmVyJiYhb3B0cy5zaG93TWFza09uRm9jdXMmJiFvcHRzLmRpZ2l0c09wdGlvbmFsJiYwPG9wdHMuZGlnaXRzJiZcIlwiPT09dGhpcy5fX3ZhbHVlR2V0LmNhbGwodGhpcykpcmV0dXJue3Jld3JpdGVQb3NpdGlvbjpyYWRpeFBvc307cmV0dXJue3Jld3JpdGVQb3NpdGlvbjpwb3N9fSxwb3N0VmFsaWRhdGlvbjpmdW5jdGlvbiBwb3N0VmFsaWRhdGlvbihidWZmZXIscG9zLGMsY3VycmVudFJlc3VsdCxvcHRzLG1hc2tzZXQsc3RyaWN0KXtpZighMT09PWN1cnJlbnRSZXN1bHQpcmV0dXJuIGN1cnJlbnRSZXN1bHQ7aWYoc3RyaWN0KXJldHVybiEwO2lmKG51bGwhPT1vcHRzLm1pbnx8bnVsbCE9PW9wdHMubWF4KXt2YXIgdW5tYXNrZWQ9b3B0cy5vblVuTWFzayhidWZmZXIuc2xpY2UoKS5yZXZlcnNlKCkuam9pbihcIlwiKSx2b2lkIDAsJC5leHRlbmQoe30sb3B0cyx7dW5tYXNrQXNOdW1iZXI6ITB9KSk7aWYobnVsbCE9PW9wdHMubWluJiZ1bm1hc2tlZDxvcHRzLm1pbiYmKHVubWFza2VkLnRvU3RyaW5nKCkubGVuZ3RoPm9wdHMubWluLnRvU3RyaW5nKCkubGVuZ3RofHx1bm1hc2tlZDwwKSlyZXR1cm4hMTtpZihudWxsIT09b3B0cy5tYXgmJnVubWFza2VkPm9wdHMubWF4KXJldHVybiEhb3B0cy5TZXRNYXhPbk92ZXJmbG93JiZ7cmVmcmVzaEZyb21CdWZmZXI6ITAsYnVmZmVyOmFsaWduRGlnaXRzKG9wdHMubWF4LnRvU3RyaW5nKCkucmVwbGFjZShcIi5cIixvcHRzLnJhZGl4UG9pbnQpLnNwbGl0KFwiXCIpLG9wdHMuZGlnaXRzLG9wdHMpLnJldmVyc2UoKX19cmV0dXJuIGN1cnJlbnRSZXN1bHR9LG9uVW5NYXNrOmZ1bmN0aW9uIG9uVW5NYXNrKG1hc2tlZFZhbHVlLHVubWFza2VkVmFsdWUsb3B0cyl7aWYoXCJcIj09PXVubWFza2VkVmFsdWUmJiEwPT09b3B0cy5udWxsYWJsZSlyZXR1cm4gdW5tYXNrZWRWYWx1ZTt2YXIgcHJvY2Vzc1ZhbHVlPW1hc2tlZFZhbHVlLnJlcGxhY2Uob3B0cy5wcmVmaXgsXCJcIik7cmV0dXJuIHByb2Nlc3NWYWx1ZT1wcm9jZXNzVmFsdWUucmVwbGFjZShvcHRzLnN1ZmZpeCxcIlwiKSxwcm9jZXNzVmFsdWU9cHJvY2Vzc1ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cCgoMCxfZXNjYXBlUmVnZXguZGVmYXVsdCkob3B0cy5ncm91cFNlcGFyYXRvciksXCJnXCIpLFwiXCIpLFwiXCIhPT1vcHRzLnBsYWNlaG9sZGVyLmNoYXJBdCgwKSYmKHByb2Nlc3NWYWx1ZT1wcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KDApLFwiZ1wiKSxcIjBcIikpLG9wdHMudW5tYXNrQXNOdW1iZXI/KFwiXCIhPT1vcHRzLnJhZGl4UG9pbnQmJi0xIT09cHJvY2Vzc1ZhbHVlLmluZGV4T2Yob3B0cy5yYWRpeFBvaW50KSYmKHByb2Nlc3NWYWx1ZT1wcm9jZXNzVmFsdWUucmVwbGFjZShfZXNjYXBlUmVnZXguZGVmYXVsdC5jYWxsKHRoaXMsb3B0cy5yYWRpeFBvaW50KSxcIi5cIikpLHByb2Nlc3NWYWx1ZT1wcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKFwiXlwiKygwLF9lc2NhcGVSZWdleC5kZWZhdWx0KShvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KSksXCItXCIpLHByb2Nlc3NWYWx1ZT1wcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKCgwLF9lc2NhcGVSZWdleC5kZWZhdWx0KShvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2spK1wiJFwiKSxcIlwiKSxOdW1iZXIocHJvY2Vzc1ZhbHVlKSk6cHJvY2Vzc1ZhbHVlfSxpc0NvbXBsZXRlOmZ1bmN0aW9uIGlzQ29tcGxldGUoYnVmZmVyLG9wdHMpe3ZhciBtYXNrZWRWYWx1ZT0ob3B0cy5udW1lcmljSW5wdXQ/YnVmZmVyLnNsaWNlKCkucmV2ZXJzZSgpOmJ1ZmZlcikuam9pbihcIlwiKTtyZXR1cm4gbWFza2VkVmFsdWU9bWFza2VkVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKFwiXlwiKygwLF9lc2NhcGVSZWdleC5kZWZhdWx0KShvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KSksXCItXCIpLG1hc2tlZFZhbHVlPW1hc2tlZFZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cCgoMCxfZXNjYXBlUmVnZXguZGVmYXVsdCkob3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrKStcIiRcIiksXCJcIiksbWFza2VkVmFsdWU9bWFza2VkVmFsdWUucmVwbGFjZShvcHRzLnByZWZpeCxcIlwiKSxtYXNrZWRWYWx1ZT1tYXNrZWRWYWx1ZS5yZXBsYWNlKG9wdHMuc3VmZml4LFwiXCIpLG1hc2tlZFZhbHVlPW1hc2tlZFZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cCgoMCxfZXNjYXBlUmVnZXguZGVmYXVsdCkob3B0cy5ncm91cFNlcGFyYXRvcikrXCIoWzAtOV17M30pXCIsXCJnXCIpLFwiJDFcIiksXCIsXCI9PT1vcHRzLnJhZGl4UG9pbnQmJihtYXNrZWRWYWx1ZT1tYXNrZWRWYWx1ZS5yZXBsYWNlKCgwLF9lc2NhcGVSZWdleC5kZWZhdWx0KShvcHRzLnJhZGl4UG9pbnQpLFwiLlwiKSksaXNGaW5pdGUobWFza2VkVmFsdWUpfSxvbkJlZm9yZU1hc2s6ZnVuY3Rpb24gb25CZWZvcmVNYXNrKGluaXRpYWxWYWx1ZSxvcHRzKXt2YXIgcmFkaXhQb2ludD1vcHRzLnJhZGl4UG9pbnR8fFwiLFwiO2lzRmluaXRlKG9wdHMuZGlnaXRzKSYmKG9wdHMuZGlnaXRzPXBhcnNlSW50KG9wdHMuZGlnaXRzKSksXCJudW1iZXJcIiE9dHlwZW9mIGluaXRpYWxWYWx1ZSYmXCJudW1iZXJcIiE9PW9wdHMuaW5wdXRUeXBlfHxcIlwiPT09cmFkaXhQb2ludHx8KGluaXRpYWxWYWx1ZT1pbml0aWFsVmFsdWUudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLHJhZGl4UG9pbnQpKTt2YXIgaXNOYWd0aXZlPVwiLVwiPT09aW5pdGlhbFZhbHVlLmNoYXJBdCgwKXx8aW5pdGlhbFZhbHVlLmNoYXJBdCgwKT09PW9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQsdmFsdWVQYXJ0cz1pbml0aWFsVmFsdWUuc3BsaXQocmFkaXhQb2ludCksaW50ZWdlclBhcnQ9dmFsdWVQYXJ0c1swXS5yZXBsYWNlKC9bXlxcLTAtOV0vZyxcIlwiKSxkZWNpbWFsUGFydD0xPHZhbHVlUGFydHMubGVuZ3RoP3ZhbHVlUGFydHNbMV0ucmVwbGFjZSgvW14wLTldL2csXCJcIik6XCJcIixmb3JjZURpZ2l0cz0xPHZhbHVlUGFydHMubGVuZ3RoO2luaXRpYWxWYWx1ZT1pbnRlZ2VyUGFydCsoXCJcIiE9PWRlY2ltYWxQYXJ0P3JhZGl4UG9pbnQrZGVjaW1hbFBhcnQ6ZGVjaW1hbFBhcnQpO3ZhciBkaWdpdHM9MDtpZihcIlwiIT09cmFkaXhQb2ludCYmKGRpZ2l0cz1vcHRzLmRpZ2l0c09wdGlvbmFsP29wdHMuZGlnaXRzPGRlY2ltYWxQYXJ0Lmxlbmd0aD9vcHRzLmRpZ2l0czpkZWNpbWFsUGFydC5sZW5ndGg6b3B0cy5kaWdpdHMsXCJcIiE9PWRlY2ltYWxQYXJ0fHwhb3B0cy5kaWdpdHNPcHRpb25hbCkpe3ZhciBkaWdpdHNGYWN0b3I9TWF0aC5wb3coMTAsZGlnaXRzfHwxKTtpbml0aWFsVmFsdWU9aW5pdGlhbFZhbHVlLnJlcGxhY2UoKDAsX2VzY2FwZVJlZ2V4LmRlZmF1bHQpKHJhZGl4UG9pbnQpLFwiLlwiKSxpc05hTihwYXJzZUZsb2F0KGluaXRpYWxWYWx1ZSkpfHwoaW5pdGlhbFZhbHVlPShvcHRzLnJvdW5kaW5nRk4ocGFyc2VGbG9hdChpbml0aWFsVmFsdWUpKmRpZ2l0c0ZhY3RvcikvZGlnaXRzRmFjdG9yKS50b0ZpeGVkKGRpZ2l0cykpLGluaXRpYWxWYWx1ZT1pbml0aWFsVmFsdWUudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLHJhZGl4UG9pbnQpfWlmKDA9PT1vcHRzLmRpZ2l0cyYmLTEhPT1pbml0aWFsVmFsdWUuaW5kZXhPZihyYWRpeFBvaW50KSYmKGluaXRpYWxWYWx1ZT1pbml0aWFsVmFsdWUuc3Vic3RyaW5nKDAsaW5pdGlhbFZhbHVlLmluZGV4T2YocmFkaXhQb2ludCkpKSxudWxsIT09b3B0cy5taW58fG51bGwhPT1vcHRzLm1heCl7dmFyIG51bWJlclZhbHVlPWluaXRpYWxWYWx1ZS50b1N0cmluZygpLnJlcGxhY2UocmFkaXhQb2ludCxcIi5cIik7bnVsbCE9PW9wdHMubWluJiZudW1iZXJWYWx1ZTxvcHRzLm1pbj9pbml0aWFsVmFsdWU9b3B0cy5taW4udG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLHJhZGl4UG9pbnQpOm51bGwhPT1vcHRzLm1heCYmbnVtYmVyVmFsdWU+b3B0cy5tYXgmJihpbml0aWFsVmFsdWU9b3B0cy5tYXgudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLHJhZGl4UG9pbnQpKX1yZXR1cm4gaXNOYWd0aXZlJiZcIi1cIiE9PWluaXRpYWxWYWx1ZS5jaGFyQXQoMCkmJihpbml0aWFsVmFsdWU9XCItXCIraW5pdGlhbFZhbHVlKSxhbGlnbkRpZ2l0cyhpbml0aWFsVmFsdWUudG9TdHJpbmcoKS5zcGxpdChcIlwiKSxkaWdpdHMsb3B0cyxmb3JjZURpZ2l0cykuam9pbihcIlwiKX0sb25CZWZvcmVXcml0ZTpmdW5jdGlvbiBvbkJlZm9yZVdyaXRlKGUsYnVmZmVyLGNhcmV0UG9zLG9wdHMpe2Z1bmN0aW9uIHN0cmlwQnVmZmVyKGJ1ZmZlcixzdHJpcFJhZGl4KXtpZighMSE9PW9wdHMuX19maW5hbmNlSW5wdXR8fHN0cmlwUmFkaXgpe3ZhciBwb3NpdGlvbj1idWZmZXIuaW5kZXhPZihvcHRzLnJhZGl4UG9pbnQpOy0xIT09cG9zaXRpb24mJmJ1ZmZlci5zcGxpY2UocG9zaXRpb24sMSl9aWYoXCJcIiE9PW9wdHMuZ3JvdXBTZXBhcmF0b3IpZm9yKDstMSE9PShwb3NpdGlvbj1idWZmZXIuaW5kZXhPZihvcHRzLmdyb3VwU2VwYXJhdG9yKSk7KWJ1ZmZlci5zcGxpY2UocG9zaXRpb24sMSk7cmV0dXJuIGJ1ZmZlcn12YXIgcmVzdWx0LGxlYWRpbmd6ZXJvZXM9Y2hlY2tGb3JMZWFkaW5nWmVyb2VzKGJ1ZmZlcixvcHRzKTtpZihsZWFkaW5nemVyb2VzKWZvcih2YXIgY2FyZXROZHg9YnVmZmVyLmpvaW4oXCJcIikubGFzdEluZGV4T2YobGVhZGluZ3plcm9lc1swXS5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKSktKGxlYWRpbmd6ZXJvZXNbMF09PWxlYWRpbmd6ZXJvZXMuaW5wdXQ/MDoxKSxvZmZzZXQ9bGVhZGluZ3plcm9lc1swXT09bGVhZGluZ3plcm9lcy5pbnB1dD8xOjAsaT1sZWFkaW5nemVyb2VzWzBdLmxlbmd0aC1vZmZzZXQ7MDxpO2ktLSlkZWxldGUgdGhpcy5tYXNrc2V0LnZhbGlkUG9zaXRpb25zW2NhcmV0TmR4K2ldLGRlbGV0ZSBidWZmZXJbY2FyZXROZHgraV07aWYoZSlzd2l0Y2goZS50eXBlKXtjYXNlXCJibHVyXCI6Y2FzZVwiY2hlY2t2YWxcIjppZihudWxsIT09b3B0cy5taW4pe3ZhciB1bm1hc2tlZD1vcHRzLm9uVW5NYXNrKGJ1ZmZlci5zbGljZSgpLnJldmVyc2UoKS5qb2luKFwiXCIpLHZvaWQgMCwkLmV4dGVuZCh7fSxvcHRzLHt1bm1hc2tBc051bWJlcjohMH0pKTtpZihudWxsIT09b3B0cy5taW4mJnVubWFza2VkPG9wdHMubWluKXJldHVybntyZWZyZXNoRnJvbUJ1ZmZlcjohMCxidWZmZXI6YWxpZ25EaWdpdHMob3B0cy5taW4udG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLG9wdHMucmFkaXhQb2ludCkuc3BsaXQoXCJcIiksb3B0cy5kaWdpdHMsb3B0cykucmV2ZXJzZSgpfX1pZihidWZmZXJbYnVmZmVyLmxlbmd0aC0xXT09PW9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpe3ZhciBubWJyTXRjaHM9bmV3IFJlZ0V4cChcIiheXCIrKFwiXCIhPW9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQ/KDAsX2VzY2FwZVJlZ2V4LmRlZmF1bHQpKG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpK1wiP1wiOlwiXCIpKygwLF9lc2NhcGVSZWdleC5kZWZhdWx0KShvcHRzLnByZWZpeCkrXCIpKC4qKShcIisoMCxfZXNjYXBlUmVnZXguZGVmYXVsdCkob3B0cy5zdWZmaXgpKyhcIlwiIT1vcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2s/KDAsX2VzY2FwZVJlZ2V4LmRlZmF1bHQpKG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykrXCI/XCI6XCJcIikrXCIkKVwiKS5leGVjKHN0cmlwQnVmZmVyKGJ1ZmZlci5zbGljZSgpLCEwKS5yZXZlcnNlKCkuam9pbihcIlwiKSksbnVtYmVyPW5tYnJNdGNocz9ubWJyTXRjaHNbMl06XCJcIjswPT1udW1iZXImJihyZXN1bHQ9e3JlZnJlc2hGcm9tQnVmZmVyOiEwLGJ1ZmZlcjpbMF19KX1lbHNlXCJcIiE9PW9wdHMucmFkaXhQb2ludCYmYnVmZmVyWzBdPT09b3B0cy5yYWRpeFBvaW50JiYocmVzdWx0JiZyZXN1bHQuYnVmZmVyP3Jlc3VsdC5idWZmZXIuc2hpZnQoKTooYnVmZmVyLnNoaWZ0KCkscmVzdWx0PXtyZWZyZXNoRnJvbUJ1ZmZlcjohMCxidWZmZXI6c3RyaXBCdWZmZXIoYnVmZmVyKX0pKTtpZihvcHRzLmVuZm9yY2VEaWdpdHNPbkJsdXIpe3Jlc3VsdD1yZXN1bHR8fHt9O3ZhciBiZmZyPXJlc3VsdCYmcmVzdWx0LmJ1ZmZlcnx8YnVmZmVyLnNsaWNlKCkucmV2ZXJzZSgpO3Jlc3VsdC5yZWZyZXNoRnJvbUJ1ZmZlcj0hMCxyZXN1bHQuYnVmZmVyPWFsaWduRGlnaXRzKGJmZnIsb3B0cy5kaWdpdHMsb3B0cywhMCkucmV2ZXJzZSgpfX1yZXR1cm4gcmVzdWx0fSxvbktleURvd246ZnVuY3Rpb24gb25LZXlEb3duKGUsYnVmZmVyLGNhcmV0UG9zLG9wdHMpe3ZhciAkaW5wdXQ9JCh0aGlzKSxiZmZyO2lmKGUuY3RybEtleSlzd2l0Y2goZS5rZXlDb2RlKXtjYXNlIF9rZXljb2RlLmRlZmF1bHQuVVA6cmV0dXJuIHRoaXMuaW5wdXRtYXNrLl9fdmFsdWVTZXQuY2FsbCh0aGlzLHBhcnNlRmxvYXQodGhpcy5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpKStwYXJzZUludChvcHRzLnN0ZXApKSwkaW5wdXQudHJpZ2dlcihcInNldHZhbHVlXCIpLCExO2Nhc2UgX2tleWNvZGUuZGVmYXVsdC5ET1dOOnJldHVybiB0aGlzLmlucHV0bWFzay5fX3ZhbHVlU2V0LmNhbGwodGhpcyxwYXJzZUZsb2F0KHRoaXMuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKSktcGFyc2VJbnQob3B0cy5zdGVwKSksJGlucHV0LnRyaWdnZXIoXCJzZXR2YWx1ZVwiKSwhMX1pZighZS5zaGlmdEtleSYmKGUua2V5Q29kZT09PV9rZXljb2RlLmRlZmF1bHQuREVMRVRFfHxlLmtleUNvZGU9PT1fa2V5Y29kZS5kZWZhdWx0LkJBQ0tTUEFDRXx8ZS5rZXlDb2RlPT09X2tleWNvZGUuZGVmYXVsdC5CQUNLU1BBQ0VfU0FGQVJJKSYmY2FyZXRQb3MuYmVnaW4hPT1idWZmZXIubGVuZ3RoKXtpZihidWZmZXJbZS5rZXlDb2RlPT09X2tleWNvZGUuZGVmYXVsdC5ERUxFVEU/Y2FyZXRQb3MuYmVnaW4tMTpjYXJldFBvcy5lbmRdPT09b3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udClyZXR1cm4gYmZmcj1idWZmZXIuc2xpY2UoKS5yZXZlcnNlKCksXCJcIiE9PW9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQmJmJmZnIuc2hpZnQoKSxcIlwiIT09b3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrJiZiZmZyLnBvcCgpLCRpbnB1dC50cmlnZ2VyKFwic2V0dmFsdWVcIixbYmZmci5qb2luKFwiXCIpLGNhcmV0UG9zLmJlZ2luXSksITE7aWYoITA9PT1vcHRzLl9yYWRpeERhbmNlKXt2YXIgcmFkaXhQb3M9YnVmZmVyLmluZGV4T2Yob3B0cy5yYWRpeFBvaW50KTtpZihvcHRzLmRpZ2l0c09wdGlvbmFsKXtpZigwPT09cmFkaXhQb3MpcmV0dXJuIGJmZnI9YnVmZmVyLnNsaWNlKCkucmV2ZXJzZSgpLGJmZnIucG9wKCksJGlucHV0LnRyaWdnZXIoXCJzZXR2YWx1ZVwiLFtiZmZyLmpvaW4oXCJcIiksY2FyZXRQb3MuYmVnaW4+PWJmZnIubGVuZ3RoP2JmZnIubGVuZ3RoOmNhcmV0UG9zLmJlZ2luXSksITF9ZWxzZSBpZigtMSE9PXJhZGl4UG9zJiYoY2FyZXRQb3MuYmVnaW48cmFkaXhQb3N8fGNhcmV0UG9zLmVuZDxyYWRpeFBvc3x8ZS5rZXlDb2RlPT09X2tleWNvZGUuZGVmYXVsdC5ERUxFVEUmJmNhcmV0UG9zLmJlZ2luPT09cmFkaXhQb3MpKXJldHVybiBjYXJldFBvcy5iZWdpbiE9PWNhcmV0UG9zLmVuZHx8ZS5rZXlDb2RlIT09X2tleWNvZGUuZGVmYXVsdC5CQUNLU1BBQ0UmJmUua2V5Q29kZSE9PV9rZXljb2RlLmRlZmF1bHQuQkFDS1NQQUNFX1NBRkFSSXx8Y2FyZXRQb3MuYmVnaW4rKyxiZmZyPWJ1ZmZlci5zbGljZSgpLnJldmVyc2UoKSxiZmZyLnNwbGljZShiZmZyLmxlbmd0aC1jYXJldFBvcy5iZWdpbixjYXJldFBvcy5iZWdpbi1jYXJldFBvcy5lbmQrMSksYmZmcj1hbGlnbkRpZ2l0cyhiZmZyLG9wdHMuZGlnaXRzLG9wdHMpLmpvaW4oXCJcIiksJGlucHV0LnRyaWdnZXIoXCJzZXR2YWx1ZVwiLFtiZmZyLGNhcmV0UG9zLmJlZ2luPj1iZmZyLmxlbmd0aD9yYWRpeFBvcysxOmNhcmV0UG9zLmJlZ2luXSksITF9fX19LGN1cnJlbmN5OntwcmVmaXg6XCJcIixncm91cFNlcGFyYXRvcjpcIixcIixhbGlhczpcIm51bWVyaWNcIixkaWdpdHM6MixkaWdpdHNPcHRpb25hbDohMX0sZGVjaW1hbDp7YWxpYXM6XCJudW1lcmljXCJ9LGludGVnZXI6e2FsaWFzOlwibnVtZXJpY1wiLGRpZ2l0czowfSxwZXJjZW50YWdlOnthbGlhczpcIm51bWVyaWNcIixtaW46MCxtYXg6MTAwLHN1ZmZpeDpcIiAlXCIsZGlnaXRzOjAsYWxsb3dNaW51czohMX0saW5kaWFubnM6e2FsaWFzOlwibnVtZXJpY1wiLF9tYXNrOmZ1bmN0aW9uIF9tYXNrKG9wdHMpe3JldHVyblwiKFwiK29wdHMuZ3JvdXBTZXBhcmF0b3IrXCI5OSl7KnwxfShcIitvcHRzLmdyb3VwU2VwYXJhdG9yK1wiOTk5KXsxfDF9XCJ9LGdyb3VwU2VwYXJhdG9yOlwiLFwiLHJhZGl4UG9pbnQ6XCIuXCIscGxhY2Vob2xkZXI6XCIwXCIsZGlnaXRzOjIsZGlnaXRzT3B0aW9uYWw6ITF9fSl9LGZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe1widXNlIHN0cmljdFwiO3ZhciBfd2luZG93PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXyg2KSksX2lucHV0bWFzaz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oMikpO2Z1bmN0aW9uIF90eXBlb2Yob2JqKXtyZXR1cm4gX3R5cGVvZj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24gX3R5cGVvZihvYmope3JldHVybiB0eXBlb2Ygb2JqfTpmdW5jdGlvbiBfdHlwZW9mKG9iail7cmV0dXJuIG9iaiYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZvYmouY29uc3RydWN0b3I9PT1TeW1ib2wmJm9iaiE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2Ygb2JqfSxfdHlwZW9mKG9iail9ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLENvbnN0cnVjdG9yKXtpZighKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLHN1cGVyQ2xhc3Mpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHN1cGVyQ2xhc3MmJm51bGwhPT1zdXBlckNsYXNzKXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtzdWJDbGFzcy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzJiZzdXBlckNsYXNzLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnN1YkNsYXNzLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH19KSxzdXBlckNsYXNzJiZfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3Msc3VwZXJDbGFzcyl9ZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpe3ZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0PV9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTtyZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKXt2YXIgU3VwZXI9X2dldFByb3RvdHlwZU9mKERlcml2ZWQpLHJlc3VsdDtpZihoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KXt2YXIgTmV3VGFyZ2V0PV9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjtyZXN1bHQ9UmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsYXJndW1lbnRzLE5ld1RhcmdldCl9ZWxzZSByZXN1bHQ9U3VwZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLHJlc3VsdCl9fWZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsY2FsbCl7cmV0dXJuIWNhbGx8fFwib2JqZWN0XCIhPT1fdHlwZW9mKGNhbGwpJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBjYWxsP19hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik6Y2FsbH1mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpe2lmKHZvaWQgMD09PXNlbGYpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiBzZWxmfWZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3Mpe3ZhciBfY2FjaGU9XCJmdW5jdGlvblwiPT10eXBlb2YgTWFwP25ldyBNYXA6dm9pZCAwO3JldHVybiBfd3JhcE5hdGl2ZVN1cGVyPWZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3Mpe2lmKG51bGw9PT1DbGFzc3x8IV9pc05hdGl2ZUZ1bmN0aW9uKENsYXNzKSlyZXR1cm4gQ2xhc3M7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgQ2xhc3MpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBfY2FjaGUpe2lmKF9jYWNoZS5oYXMoQ2xhc3MpKXJldHVybiBfY2FjaGUuZ2V0KENsYXNzKTtfY2FjaGUuc2V0KENsYXNzLFdyYXBwZXIpfWZ1bmN0aW9uIFdyYXBwZXIoKXtyZXR1cm4gX2NvbnN0cnVjdChDbGFzcyxhcmd1bWVudHMsX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yKX1yZXR1cm4gV3JhcHBlci5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShDbGFzcy5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpXcmFwcGVyLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLF9zZXRQcm90b3R5cGVPZihXcmFwcGVyLENsYXNzKX0sX3dyYXBOYXRpdmVTdXBlcihDbGFzcyl9ZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsYXJncyxDbGFzcyl7cmV0dXJuIF9jb25zdHJ1Y3Q9X2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpP1JlZmxlY3QuY29uc3RydWN0OmZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LGFyZ3MsQ2xhc3Mpe3ZhciBhPVtudWxsXTthLnB1c2guYXBwbHkoYSxhcmdzKTt2YXIgQ29uc3RydWN0b3I9RnVuY3Rpb24uYmluZC5hcHBseShQYXJlbnQsYSksaW5zdGFuY2U9bmV3IENvbnN0cnVjdG9yO3JldHVybiBDbGFzcyYmX3NldFByb3RvdHlwZU9mKGluc3RhbmNlLENsYXNzLnByb3RvdHlwZSksaW5zdGFuY2V9LF9jb25zdHJ1Y3QuYXBwbHkobnVsbCxhcmd1bWVudHMpfWZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsW10sZnVuY3Rpb24oKXt9KSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fWZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKGZuKXtyZXR1cm4tMSE9PUZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwoZm4pLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpfWZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLHApe3JldHVybiBfc2V0UHJvdG90eXBlT2Y9T2JqZWN0LnNldFByb3RvdHlwZU9mfHxmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobyxwKXtyZXR1cm4gby5fX3Byb3RvX189cCxvfSxfc2V0UHJvdG90eXBlT2YobyxwKX1mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobyl7cmV0dXJuIF9nZXRQcm90b3R5cGVPZj1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mOmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKXtyZXR1cm4gby5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihvKX0sX2dldFByb3RvdHlwZU9mKG8pfWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKXtyZXR1cm4gb2JqJiZvYmouX19lc01vZHVsZT9vYmo6e2RlZmF1bHQ6b2JqfX12YXIgZG9jdW1lbnQ9X3dpbmRvdy5kZWZhdWx0LmRvY3VtZW50O2lmKGRvY3VtZW50JiZkb2N1bWVudC5oZWFkJiZkb2N1bWVudC5oZWFkLmF0dGFjaFNoYWRvdyYmX3dpbmRvdy5kZWZhdWx0LmN1c3RvbUVsZW1lbnRzJiZ2b2lkIDA9PT1fd2luZG93LmRlZmF1bHQuY3VzdG9tRWxlbWVudHMuZ2V0KFwiaW5wdXQtbWFza1wiKSl7dmFyIElucHV0bWFza0VsZW1lbnQ9ZnVuY3Rpb24oX0hUTUxFbGVtZW50KXtfaW5oZXJpdHMoSW5wdXRtYXNrRWxlbWVudCxfSFRNTEVsZW1lbnQpO3ZhciBfc3VwZXI9X2NyZWF0ZVN1cGVyKElucHV0bWFza0VsZW1lbnQpO2Z1bmN0aW9uIElucHV0bWFza0VsZW1lbnQoKXt2YXIgX3RoaXM7X2NsYXNzQ2FsbENoZWNrKHRoaXMsSW5wdXRtYXNrRWxlbWVudCksX3RoaXM9X3N1cGVyLmNhbGwodGhpcyk7dmFyIGF0dHJpYnV0ZU5hbWVzPV90aGlzLmdldEF0dHJpYnV0ZU5hbWVzKCksc2hhZG93PV90aGlzLmF0dGFjaFNoYWRvdyh7bW9kZTpcImNsb3NlZFwifSksaW5wdXQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO2Zvcih2YXIgYXR0ciBpbiBpbnB1dC50eXBlPVwidGV4dFwiLHNoYWRvdy5hcHBlbmRDaGlsZChpbnB1dCksYXR0cmlidXRlTmFtZXMpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGF0dHJpYnV0ZU5hbWVzLGF0dHIpJiZpbnB1dC5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZXNbYXR0cl0sX3RoaXMuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWVzW2F0dHJdKSk7dmFyIGltPW5ldyBfaW5wdXRtYXNrLmRlZmF1bHQ7cmV0dXJuIGltLmRhdGFBdHRyaWJ1dGU9XCJcIixpbS5tYXNrKGlucHV0KSxpbnB1dC5pbnB1dG1hc2suc2hhZG93Um9vdD1zaGFkb3csX3RoaXN9cmV0dXJuIElucHV0bWFza0VsZW1lbnR9KF93cmFwTmF0aXZlU3VwZXIoSFRNTEVsZW1lbnQpKTtfd2luZG93LmRlZmF1bHQuY3VzdG9tRWxlbWVudHMuZGVmaW5lKFwiaW5wdXQtbWFza1wiLElucHV0bWFza0VsZW1lbnQpfX1dLGluc3RhbGxlZE1vZHVsZXM9e30sX193ZWJwYWNrX3JlcXVpcmVfXy5tPW1vZHVsZXMsX193ZWJwYWNrX3JlcXVpcmVfXy5jPWluc3RhbGxlZE1vZHVsZXMsX193ZWJwYWNrX3JlcXVpcmVfXy5kPWZ1bmN0aW9uKGV4cG9ydHMsbmFtZSxnZXR0ZXIpe19fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLG5hbWUpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxuYW1lLHtlbnVtZXJhYmxlOiEwLGdldDpnZXR0ZXJ9KX0sX193ZWJwYWNrX3JlcXVpcmVfXy5yPWZ1bmN0aW9uKGV4cG9ydHMpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LF9fd2VicGFja19yZXF1aXJlX18udD1mdW5jdGlvbih2YWx1ZSxtb2RlKXtpZigxJm1vZGUmJih2YWx1ZT1fX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKSksOCZtb2RlKXJldHVybiB2YWx1ZTtpZig0Jm1vZGUmJlwib2JqZWN0XCI9PXR5cGVvZiB2YWx1ZSYmdmFsdWUmJnZhbHVlLl9fZXNNb2R1bGUpcmV0dXJuIHZhbHVlO3ZhciBucz1PYmplY3QuY3JlYXRlKG51bGwpO2lmKF9fd2VicGFja19yZXF1aXJlX18ucihucyksT2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOnZhbHVlfSksMiZtb2RlJiZcInN0cmluZ1wiIT10eXBlb2YgdmFsdWUpZm9yKHZhciBrZXkgaW4gdmFsdWUpX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLGtleSxmdW5jdGlvbihrZXkpe3JldHVybiB2YWx1ZVtrZXldfS5iaW5kKG51bGwsa2V5KSk7cmV0dXJuIG5zfSxfX3dlYnBhY2tfcmVxdWlyZV9fLm49ZnVuY3Rpb24obW9kdWxlKXt2YXIgZ2V0dGVyPW1vZHVsZSYmbW9kdWxlLl9fZXNNb2R1bGU/ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpe3JldHVybiBtb2R1bGUuZGVmYXVsdH06ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpe3JldHVybiBtb2R1bGV9O3JldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLFwiYVwiLGdldHRlciksZ2V0dGVyfSxfX3dlYnBhY2tfcmVxdWlyZV9fLm89ZnVuY3Rpb24ob2JqZWN0LHByb3BlcnR5KXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCxwcm9wZXJ0eSl9LF9fd2VicGFja19yZXF1aXJlX18ucD1cIlwiLF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zPTE0KTtmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKXtpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0czt2YXIgbW9kdWxlPWluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdPXtpOm1vZHVsZUlkLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsbW9kdWxlLG1vZHVsZS5leHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pLG1vZHVsZS5sPSEwLG1vZHVsZS5leHBvcnRzfXZhciBtb2R1bGVzLGluc3RhbGxlZE1vZHVsZXN9KTsiLCJcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkoZSx0LGkpe3JldHVybiB0IGluIGU/T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7dmFsdWU6aSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOmVbdF09aSxlfXZhciBfdHlwZW9mPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIGV9OyFmdW5jdGlvbigpe2Zvcih2YXIgZT1bXCJEb2N1bWVudFR5cGVcIixcIkVsZW1lbnRcIixcIkNoYXJhY3RlckRhdGFcIl0sdD1mdW5jdGlvbigpe251bGwhPXRoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMpfSxpPTA7aTxlLmxlbmd0aDtpKyspe3ZhciByPWVbaV07d2luZG93W3JdJiYhd2luZG93W3JdLnByb3RvdHlwZS5yZW1vdmUmJih3aW5kb3dbcl0ucHJvdG90eXBlLnJlbW92ZT10KX19KCksZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCgpe31mdW5jdGlvbiBpKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKCl7ZS5hcHBseSh0LGFyZ3VtZW50cyl9fWZ1bmN0aW9uIHIoZSl7aWYoXCJvYmplY3RcIiE9PV90eXBlb2YodGhpcykpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByb21pc2VzIG11c3QgYmUgY29uc3RydWN0ZWQgdmlhIG5ld1wiKTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoXCJub3QgYSBmdW5jdGlvblwiKTt0aGlzLl9zdGF0ZT0wLHRoaXMuX2hhbmRsZWQ9ITEsdGhpcy5fdmFsdWU9dm9pZCAwLHRoaXMuX2RlZmVycmVkcz1bXSx1KGUsdGhpcyl9ZnVuY3Rpb24gbihlLHQpe2Zvcig7Mz09PWUuX3N0YXRlOyllPWUuX3ZhbHVlO3JldHVybiAwPT09ZS5fc3RhdGU/dm9pZCBlLl9kZWZlcnJlZHMucHVzaCh0KTooZS5faGFuZGxlZD0hMCx2b2lkIHIuX2ltbWVkaWF0ZUZuKGZ1bmN0aW9uKCl7dmFyIGk9MT09PWUuX3N0YXRlP3Qub25GdWxmaWxsZWQ6dC5vblJlamVjdGVkO2lmKG51bGw9PT1pKXJldHVybiB2b2lkKDE9PT1lLl9zdGF0ZT9vOnMpKHQucHJvbWlzZSxlLl92YWx1ZSk7dmFyIHI7dHJ5e3I9aShlLl92YWx1ZSl9Y2F0Y2gobil7cmV0dXJuIHZvaWQgcyh0LnByb21pc2Usbil9byh0LnByb21pc2Uscil9KSl9ZnVuY3Rpb24gbyhlLHQpe3RyeXtpZih0PT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQSBwcm9taXNlIGNhbm5vdCBiZSByZXNvbHZlZCB3aXRoIGl0c2VsZi5cIik7aWYodCYmKFwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIHQ/XCJ1bmRlZmluZWRcIjpfdHlwZW9mKHQpKXx8XCJmdW5jdGlvblwiPT10eXBlb2YgdCkpe3ZhciBuPXQudGhlbjtpZih0IGluc3RhbmNlb2YgcilyZXR1cm4gZS5fc3RhdGU9MyxlLl92YWx1ZT10LHZvaWQgYShlKTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBuKXJldHVybiB2b2lkIHUoaShuLHQpLGUpfWUuX3N0YXRlPTEsZS5fdmFsdWU9dCxhKGUpfWNhdGNoKG8pe3MoZSxvKX19ZnVuY3Rpb24gcyhlLHQpe2UuX3N0YXRlPTIsZS5fdmFsdWU9dCxhKGUpfWZ1bmN0aW9uIGEoZSl7Mj09PWUuX3N0YXRlJiYwPT09ZS5fZGVmZXJyZWRzLmxlbmd0aCYmci5faW1tZWRpYXRlRm4oZnVuY3Rpb24oKXtlLl9oYW5kbGVkfHxyLl91bmhhbmRsZWRSZWplY3Rpb25GbihlLl92YWx1ZSl9KTtmb3IodmFyIHQ9MCxpPWUuX2RlZmVycmVkcy5sZW5ndGg7dDxpO3QrKyluKGUsZS5fZGVmZXJyZWRzW3RdKTtlLl9kZWZlcnJlZHM9bnVsbH1mdW5jdGlvbiBsKGUsdCxpKXt0aGlzLm9uRnVsZmlsbGVkPVwiZnVuY3Rpb25cIj09dHlwZW9mIGU/ZTpudWxsLHRoaXMub25SZWplY3RlZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0P3Q6bnVsbCx0aGlzLnByb21pc2U9aX1mdW5jdGlvbiB1KGUsdCl7dmFyIGk9ITE7dHJ5e2UoZnVuY3Rpb24oZSl7aXx8KGk9ITAsbyh0LGUpKX0sZnVuY3Rpb24oZSl7aXx8KGk9ITAscyh0LGUpKX0pfWNhdGNoKHIpe2lmKGkpcmV0dXJuO2k9ITAscyh0LHIpfX12YXIgZD1zZXRUaW1lb3V0O3IucHJvdG90eXBlW1wiY2F0Y2hcIl09ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMudGhlbihudWxsLGUpfSxyLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGUsaSl7dmFyIHI9bmV3IHRoaXMuY29uc3RydWN0b3IodCk7cmV0dXJuIG4odGhpcyxuZXcgbChlLGkscikpLHJ9LHIuYWxsPWZ1bmN0aW9uKGUpe3ZhciB0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUpO3JldHVybiBuZXcgcihmdW5jdGlvbihlLGkpe2Z1bmN0aW9uIHIobyxzKXt0cnl7aWYocyYmKFwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIHM/XCJ1bmRlZmluZWRcIjpfdHlwZW9mKHMpKXx8XCJmdW5jdGlvblwiPT10eXBlb2Ygcykpe3ZhciBhPXMudGhlbjtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBhKXJldHVybiB2b2lkIGEuY2FsbChzLGZ1bmN0aW9uKGUpe3IobyxlKX0saSl9dFtvXT1zLDA9PT0tLW4mJmUodCl9Y2F0Y2gobCl7aShsKX19aWYoMD09PXQubGVuZ3RoKXJldHVybiBlKFtdKTtmb3IodmFyIG49dC5sZW5ndGgsbz0wO288dC5sZW5ndGg7bysrKXIobyx0W29dKX0pfSxyLnJlc29sdmU9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIGU/XCJ1bmRlZmluZWRcIjpfdHlwZW9mKGUpKSYmZS5jb25zdHJ1Y3Rvcj09PXI/ZTpuZXcgcihmdW5jdGlvbih0KXt0KGUpfSl9LHIucmVqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgcihmdW5jdGlvbih0LGkpe2koZSl9KX0sci5yYWNlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgcihmdW5jdGlvbih0LGkpe2Zvcih2YXIgcj0wLG49ZS5sZW5ndGg7cjxuO3IrKyllW3JdLnRoZW4odCxpKX0pfSxyLl9pbW1lZGlhdGVGbj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBzZXRJbW1lZGlhdGUmJmZ1bmN0aW9uKGUpe3NldEltbWVkaWF0ZShlKX18fGZ1bmN0aW9uKGUpe2QoZSwwKX0sci5fdW5oYW5kbGVkUmVqZWN0aW9uRm49ZnVuY3Rpb24oZSl7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGNvbnNvbGUmJmNvbnNvbGUmJmNvbnNvbGUud2FybihcIlBvc3NpYmxlIFVuaGFuZGxlZCBQcm9taXNlIFJlamVjdGlvbjpcIixlKX0sci5fc2V0SW1tZWRpYXRlRm49ZnVuY3Rpb24oZSl7ci5faW1tZWRpYXRlRm49ZX0sci5fc2V0VW5oYW5kbGVkUmVqZWN0aW9uRm49ZnVuY3Rpb24oZSl7ci5fdW5oYW5kbGVkUmVqZWN0aW9uRm49ZX0sXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9cjplLlByb21pc2V8fChlLlByb21pc2U9cil9KHdpbmRvdyksZnVuY3Rpb24oZSl7ZS5Qcm9taXNlfHwoZS5Qcm9taXNlPVByb21pc2UpO3ZhciB0PVwicmVxdWlyZWRcIixpPVwiZW1haWxcIixyPVwibWluTGVuZ3RoXCIsbj1cIm1heExlbmd0aFwiLG89XCJwYXNzd29yZFwiLHM9XCJ6aXBcIixhPVwicGhvbmVcIixsPVwicmVtb3RlXCIsdT1cInN0cmVuZ3RoXCIsZD1cImZ1bmN0aW9uXCIsYz1mdW5jdGlvbihlLHQpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBlO3ZhciBpPVwicG9zdFwiPT09dC50b0xvd2VyQ2FzZSgpP1wiXCI6XCI/XCI7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSk/aStlLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5uYW1lK1wiPVwiK2UudmFsdWV9KS5qb2luKFwiJlwiKTppK09iamVjdC5rZXlzKGUpLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdCtcIj1cIitlW3RdfSkuam9pbihcIiZcIil9LGg9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS51cmwsaT1lLm1ldGhvZCxyPWUuZGF0YSxuPWUuZGVidWcsbz1lLmNhbGxiYWNrLHM9ZS5lcnJvcjtpZihuKXJldHVybiB2b2lkIG8oXCJ0ZXN0XCIpO3ZhciBhPWUuYXN5bmMhPT0hMSxsPW5ldyBYTUxIdHRwUmVxdWVzdCx1PWMocixcImdldFwiKSxkPW51bGw7XCJwb3N0XCI9PT1pLnRvTG93ZXJDYXNlKCkmJihkPWMocixcInBvc3RcIiksdT1cIlwiKSxsLm9wZW4oaSx0K3UsYSksbC5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiksbC5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXs0PT09dGhpcy5yZWFkeVN0YXRlJiYoMjAwPT09dGhpcy5zdGF0dXM/byh0aGlzLnJlc3BvbnNlVGV4dCk6cyYmcyh0aGlzLnJlc3BvbnNlVGV4dCkpfSxsLnNlbmQoZCl9LGY9ZnVuY3Rpb24oZSx0KXt0aGlzLm9wdGlvbnM9dHx8e30sdGhpcy5ydWxlcz10aGlzLm9wdGlvbnMucnVsZXN8fHt9LHRoaXMubWVzc2FnZXM9dGhpcy5vcHRpb25zLm1lc3NhZ2VzfHx2b2lkIDAsdGhpcy5jb2xvcldyb25nPXRoaXMub3B0aW9ucy5jb2xvcldyb25nfHxcIiNCODExMTFcIix0aGlzLnJlc3VsdD17fSx0aGlzLmVsZW1lbnRzPVtdLHRoaXMudG9vbHRpcD10aGlzLm9wdGlvbnMudG9vbHRpcHx8e30sdGhpcy50b29sdGlwRmFkZU91dFRpbWU9dGhpcy50b29sdGlwLmZhZGVPdXRUaW1lfHw1ZTMsdGhpcy50b29sdGlwRmFkZU91dENsYXNzPXRoaXMudG9vbHRpcC5mYWRlT3V0Q2xhc3N8fFwianVzdC12YWxpZGF0ZS10b29sdGlwLWhpZGVcIix0aGlzLnRvb2x0aXBTZWxlY3RvcldyYXA9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLnRvb2x0aXAuc2VsZWN0b3JXcmFwKS5sZW5ndGg/ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLnRvb2x0aXAuc2VsZWN0b3JXcmFwKTpkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmp1c3QtdmFsaWRhdGUtdG9vbHRpcC1jb250YWluZXJcIiksdGhpcy5iaW5kSGFuZGxlcktleXVwPXRoaXMuaGFuZGxlcktleXVwLmJpbmQodGhpcyksdGhpcy5zdWJtaXRIYW5kbGVyPXRoaXMub3B0aW9ucy5zdWJtaXRIYW5kbGVyfHx2b2lkIDAsdGhpcy5pbnZhbGlkRm9ybUNhbGxiYWNrPXRoaXMub3B0aW9ucy5pbnZhbGlkRm9ybUNhbGxiYWNrfHx2b2lkIDAsdGhpcy5wcm9taXNlc1JlbW90ZT1bXSx0aGlzLmlzVmFsaWRhdGlvblN1Y2Nlc3M9ITEsdGhpcy5mb2N1c1dyb25nRmllbGQ9dGhpcy5vcHRpb25zLmZvY3VzV3JvbmdGaWVsZHx8ITEsdGhpcy5SRUdFWFA9e2VtYWlsOi9eKChbXjw+KClcXFtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVxcW1xcXVxcXFwuLDs6XFxzQFwiXSspKil8KFwiLitcIikpQCgoXFxbWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfV0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvLHppcDovXlxcZHs1fSgtXFxkezR9KT8kLyxwaG9uZTovXihbMC05XSggfC0pPyk/KFxcKD9bMC05XXszfVxcKT98WzAtOV17M30pKCB8LSk/KFswLTldezN9KCB8LSk/WzAtOV17NH18W2EtekEtWjAtOV17N30pJC8scGFzc3dvcmQ6L1teXFx3XFxkXSooKFswLTldKy4qW0EtWmEtel0rLiopfFtBLVphLXpdKy4qKFswLTldKy4qKSkvLHN0cmVuZ3RoUGFzczovXig/PS4qW2Etel0pKD89LipbQS1aXSkoPz0uKlxcZClbYS16QS1aXFxkXS99LHRoaXMuREVGQVVMVF9SRU1PVEVfRVJST1I9XCJFcnJvclwiLHRoaXMuc3RhdGU9e3Rvb2x0aXBzVGltZXI6bnVsbH0sdGhpcy5zZXRGb3JtKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZSkpfTtmLnByb3RvdHlwZT17ZGVmYXVsdFJ1bGVzOntlbWFpbDp7cmVxdWlyZWQ6ITAsZW1haWw6ITB9LG5hbWU6e3JlcXVpcmVkOiEwLG1pbkxlbmd0aDozLG1heExlbmd0aDoxNX0sdGV4dDp7cmVxdWlyZWQ6ITAsbWF4TGVuZ3RoOjMwMCxtaW5MZW5ndGg6NX0scGFzc3dvcmQ6e3JlcXVpcmVkOiEwLHBhc3N3b3JkOiEwLG1pbkxlbmd0aDo0LG1heExlbmd0aDo4fSx6aXA6e3JlcXVpcmVkOiEwLHppcDohMH0scGhvbmU6e3Bob25lOiEwfX0sZGVmYXVsdE1lc3NhZ2VzOntyZXF1aXJlZDpcIlRoZSBmaWVsZCBpcyByZXF1aXJlZFwiLGVtYWlsOlwiUGxlYXNlLCB0eXBlIGEgdmFsaWQgZW1haWxcIixtYXhMZW5ndGg6XCJUaGUgZmllbGQgbXVzdCBjb250YWluIGEgbWF4aW11bSBvZiA6dmFsdWUgY2hhcmFjdGVyc1wiLG1pbkxlbmd0aDpcIlRoZSBmaWVsZCBtdXN0IGNvbnRhaW4gYSBtaW5pbXVtIG9mIDp2YWx1ZSBjaGFyYWN0ZXJzXCIscGFzc3dvcmQ6XCJQYXNzd29yZCBpcyBub3QgdmFsaWRcIixyZW1vdGU6XCJFbWFpbCBhbHJlYWR5IGV4aXN0c1wiLHN0cmVuZ3RoOlwiUGFzc3dvcmQgbXVzdCBjb250ZW50cyBhdCBsZWFzdCBvbmUgdXBwZXJjYXNlIGxldHRlciwgb25lIGxvd2VyY2FzZSBsZXR0ZXIgYW5kIG9uZSBudW1iZXJcIixcImZ1bmN0aW9uXCI6XCJGdW5jdGlvbiByZXR1cm5lZCBmYWxzZVwifSxoYW5kbGVyS2V5dXA6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS50YXJnZXQsaT17bmFtZTp0LmdldEF0dHJpYnV0ZShcImRhdGEtdmFsaWRhdGUtZmllbGRcIiksdmFsdWU6dC52YWx1ZX07ZGVsZXRlIHRoaXMucmVzdWx0W2kubmFtZV0sdGhpcy52YWxpZGF0ZUl0ZW0oe25hbWU6aS5uYW1lLHZhbHVlOmkudmFsdWUsZ3JvdXA6W10saXNLZXl1cENoYW5nZTohMH0pLHRoaXMucmVuZGVyRXJyb3JzKCl9LHNldHRlckV2ZW50TGlzdGVuZXI6ZnVuY3Rpb24oZSx0LGkscil7c3dpdGNoKFwia2V5dXBcIj09PXQmJihpPXRoaXMuYmluZEhhbmRsZXJLZXl1cCkscil7Y2FzZVwiYWRkXCI6ZS5hZGRFdmVudExpc3RlbmVyKHQsaSk7YnJlYWs7Y2FzZVwicmVtb3ZlXCI6ZS5yZW1vdmVFdmVudExpc3RlbmVyKHQsaSl9fSxnZXRFbGVtZW50c1JlYWxWYWx1ZTpmdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLiRmb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqXCIpLHQ9dm9pZCAwLGk9e30scj0wLG49ZS5sZW5ndGg7cjxuOysrcilpZih0PWVbcl0uZ2V0QXR0cmlidXRlKFwibmFtZVwiKSl7aWYoXCJjaGVja2JveFwiPT09ZVtyXS50eXBlKXtpW3RdPWVbcl0uY2hlY2tlZDtjb250aW51ZX1pW3RdPWVbcl0udmFsdWV9cmV0dXJuIGl9LHZhbGlkYXRpb25GYWlsZWQ6ZnVuY3Rpb24oKXt0aGlzLmludmFsaWRGb3JtQ2FsbGJhY2smJnRoaXMuaW52YWxpZEZvcm1DYWxsYmFjayh0aGlzLnJlc3VsdCk7dmFyIGU9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5qcy12YWxpZGF0ZS1lcnJvci1maWVsZFwiKTt0aGlzLmZvY3VzV3JvbmdGaWVsZCYmZSYmZS5mb2N1cyYmZS5mb2N1cygpfSx2YWxpZGF0aW9uU3VjY2VzczpmdW5jdGlvbigpe2lmKDA9PT1PYmplY3Qua2V5cyh0aGlzLnJlc3VsdCkubGVuZ3RoKXtpZih0aGlzLmlzVmFsaWRhdGlvblN1Y2Nlc3M9ITEsdGhpcy5zdWJtaXRIYW5kbGVyKXt2YXIgZT10aGlzLmdldEVsZW1lbnRzUmVhbFZhbHVlKCk7cmV0dXJuIHZvaWQgdGhpcy5zdWJtaXRIYW5kbGVyKHRoaXMuJGZvcm0sZSxoKX10aGlzLiRmb3JtLnN1Ym1pdCgpfX0sc2V0Rm9ybTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3RoaXMuJGZvcm09ZSx0aGlzLiRmb3JtLnNldEF0dHJpYnV0ZShcIm5vdmFsaWRhdGVcIixcIm5vdmFsaWRhdGVcIiksdGhpcy4kZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsZnVuY3Rpb24oZSl7cmV0dXJuIGUucHJldmVudERlZmF1bHQoKSx0LnJlc3VsdD1bXSx0LmdldEVsZW1lbnRzKCksdC5wcm9taXNlc1JlbW90ZS5sZW5ndGg/dm9pZCBQcm9taXNlLmFsbCh0LnByb21pc2VzUmVtb3RlKS50aGVuKGZ1bmN0aW9uKCl7dC5wcm9taXNlc1JlbW90ZT1bXSx0LmlzVmFsaWRhdGlvblN1Y2Nlc3M/dC52YWxpZGF0aW9uU3VjY2VzcygpOnQudmFsaWRhdGlvbkZhaWxlZCgpfSk6dm9pZCh0LmlzVmFsaWRhdGlvblN1Y2Nlc3M/dC52YWxpZGF0aW9uU3VjY2VzcygpOnQudmFsaWRhdGlvbkZhaWxlZCgpKX0pfSxpc0VtYWlsOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLlJFR0VYUC5lbWFpbC50ZXN0KGUpfSxpc1ppcDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5SRUdFWFAuemlwLnRlc3QoZSl9LGlzUGhvbmU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuUkVHRVhQLnBob25lLnRlc3QoZSl9LGlzUGFzc3dvcmQ6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuUkVHRVhQLnBhc3N3b3JkLnRlc3QoZSl9LGlzRW1wdHk6ZnVuY3Rpb24oZSl7dmFyIHQ9ZTtyZXR1cm4gZS50cmltJiYodD1lLnRyaW0oKSksIXR9LGNoZWNrTGVuZ3RoTWF4OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUubGVuZ3RoPD10fSxjaGVja0xlbmd0aE1pbjpmdW5jdGlvbihlLHQpe3JldHVybiBlLmxlbmd0aD49dH0sY2hlY2tTdHJlbmd0aFBhc3M6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuUkVHRVhQLnN0cmVuZ3RoUGFzcy50ZXN0KGUpfSxnZXRFbGVtZW50czpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLiRmb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS12YWxpZGF0ZS1maWVsZF1cIik7dGhpcy5lbGVtZW50cz1bXTtmb3IodmFyIGk9ZnVuY3Rpb24oaSxyKXt2YXIgbj10W2ldLG89bi5nZXRBdHRyaWJ1dGUoXCJkYXRhLXZhbGlkYXRlLWZpZWxkXCIpLHM9bi52YWx1ZSxhPSExLGw9W107aWYoXCJjaGVja2JveFwiPT09bi50eXBlJiYocz1uLmNoZWNrZWR8fFwiXCIsbi5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsZnVuY3Rpb24odCl7dmFyIGk9dC50YXJnZXQscj17bmFtZTppLmdldEF0dHJpYnV0ZShcImRhdGEtdmFsaWRhdGUtZmllbGRcIiksdmFsdWU6aS5jaGVja2VkfTtkZWxldGUgZS5yZXN1bHRbci5uYW1lXSxlLnZhbGlkYXRlSXRlbSh7bmFtZTpyLm5hbWUsdmFsdWU6ci52YWx1ZSxncm91cDpbXX0pLGUucmVuZGVyRXJyb3JzKCl9KSksXCJyYWRpb1wiPT09bi50eXBlKXt2YXIgdT1lLmVsZW1lbnRzLmZpbHRlcihmdW5jdGlvbihlKXtpZihlLm5hbWU9PT1vKXJldHVybiBlfSlbMF07dT8odS5ncm91cC5wdXNoKG4uY2hlY2tlZCksYT0hMCk6bC5wdXNoKG4uY2hlY2tlZCksbi5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsZnVuY3Rpb24odCl7dmFyIGk9dC50YXJnZXQscj17bmFtZTppLmdldEF0dHJpYnV0ZShcImRhdGEtdmFsaWRhdGUtZmllbGRcIiksdmFsdWU6aS5jaGVja2VkfTtkZWxldGUgZS5yZXN1bHRbci5uYW1lXSxlLnZhbGlkYXRlSXRlbSh7bmFtZTpyLm5hbWUsdmFsdWU6ci52YWx1ZSxncm91cDpbXX0pLGUucmVuZGVyRXJyb3JzKCl9KX1lLnNldHRlckV2ZW50TGlzdGVuZXIobixcImtleXVwXCIsZS5oYW5kbGVyS2V5dXAsXCJhZGRcIiksYXx8ZS5lbGVtZW50cy5wdXNoKHtuYW1lOm8sdmFsdWU6cyxncm91cDpsfSl9LHI9MCxuPXQubGVuZ3RoO3I8bjsrK3IpaShyLG4pO3RoaXMudmFsaWRhdGVFbGVtZW50cygpfSx2YWxpZGF0ZVJlcXVpcmVkOmZ1bmN0aW9uKGUpe3JldHVybiF0aGlzLmlzRW1wdHkoZSl9LHZhbGlkYXRlRW1haWw6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuaXNFbWFpbChlKX0sdmFsaWRhdGVQaG9uZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5pc1Bob25lKGUpfSx2YWxpZGF0ZU1pbkxlbmd0aDpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLmNoZWNrTGVuZ3RoTWluKGUsdCl9LHZhbGlkYXRlTWF4TGVuZ3RoOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMuY2hlY2tMZW5ndGhNYXgoZSx0KX0sdmFsaWRhdGVTdHJlbmd0aFBhc3M6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuY2hlY2tTdHJlbmd0aFBhc3MoZSl9LHZhbGlkYXRlUGFzc3dvcmQ6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuaXNQYXNzd29yZChlKX0sdmFsaWRhdGVaaXA6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuaXNaaXAoZSl9LHZhbGlkYXRlUmVtb3RlOmZ1bmN0aW9uKGUpe3ZhciB0PWUudmFsdWUsaT1lLm5hbWUscj1lLnVybCxuPWUuc3VjY2Vzc0Fuc3dlcixvPWUuc2VuZFBhcmFtLHM9ZS5tZXRob2Q7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGUpe2goe3VybDpyLG1ldGhvZDpzLGRhdGE6X2RlZmluZVByb3BlcnR5KHt9LG8sdCksYXN5bmM6ITAsY2FsbGJhY2s6ZnVuY3Rpb24odCl7dC50b0xvd2VyQ2FzZSgpPT09bi50b0xvd2VyQ2FzZSgpJiZlKFwib2tcIiksZSh7dHlwZTpcImluY29ycmVjdFwiLG5hbWU6aX0pfSxlcnJvcjpmdW5jdGlvbigpe2Uoe3R5cGU6XCJlcnJvclwiLG5hbWU6aX0pfX0pfSl9LGdlbmVyYXRlTWVzc2FnZTpmdW5jdGlvbihlLHQsaSl7dmFyIHI9dGhpcy5tZXNzYWdlc3x8dGhpcy5kZWZhdWx0TWVzc2FnZXMsbj1yW3RdJiZyW3RdW2VdfHx0aGlzLm1lc3NhZ2VzJiZcInN0cmluZ1wiPT10eXBlb2YgdGhpcy5tZXNzYWdlc1t0XSYmclt0XXx8dGhpcy5kZWZhdWx0TWVzc2FnZXNbZV18fHRoaXMuREVGQVVMVF9SRU1PVEVfRVJST1I7aSYmKG49bi5yZXBsYWNlKFwiOnZhbHVlXCIsaS50b1N0cmluZygpKSksdGhpcy5yZXN1bHRbdF09e21lc3NhZ2U6bn19LHZhbGlkYXRlRWxlbWVudHM6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3JldHVybiB0aGlzLmxvY2tGb3JtKCksdGhpcy5lbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKHQpe2UudmFsaWRhdGVJdGVtKHtuYW1lOnQubmFtZSx2YWx1ZTp0LnZhbHVlLGdyb3VwOnQuZ3JvdXB9KX0pLHRoaXMucHJvbWlzZXNSZW1vdGUubGVuZ3RoP3ZvaWQgUHJvbWlzZS5hbGwodGhpcy5wcm9taXNlc1JlbW90ZSkudGhlbihmdW5jdGlvbih0KXt0LmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuXCJva1wiPT09dD92b2lkIGUucmVuZGVyRXJyb3JzKCk6KFwiZXJyb3JcIj09PXQudHlwZSYmYWxlcnQoXCJTZXJ2ZXIgZXJyb3Igb2NjdXJlZC4gUGxlYXNlIHRyeSBsYXRlci5cIiksZS5nZW5lcmF0ZU1lc3NhZ2UobCx0Lm5hbWUpLHZvaWQgZS5yZW5kZXJFcnJvcnMoKSl9KX0pOnZvaWQgdGhpcy5yZW5kZXJFcnJvcnMoKX0sdmFsaWRhdGVJdGVtOmZ1bmN0aW9uKGUpe3ZhciBjPXRoaXMsaD1lLm5hbWUsZj1lLmdyb3VwLG09ZS52YWx1ZSx2PWUuaXNLZXl1cENoYW5nZSxwPXRoaXMucnVsZXNbaF18fHRoaXMuZGVmYXVsdFJ1bGVzW2hdfHwhMTtpZihwKWZvcih2YXIgZyBpbiBwKXt2YXIgeT1wW2ddO2lmKGchPT10JiZnIT09ZCYmXCJcIj09bSlyZXR1cm47c3dpdGNoKGcpe2Nhc2UgZDppZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB5KWJyZWFrO2lmKHkoaCxtKSlicmVhaztyZXR1cm4gdm9pZCB0aGlzLmdlbmVyYXRlTWVzc2FnZShkLGgseSk7Y2FzZSB0OmlmKCF5KWJyZWFrO2lmKGYubGVuZ3RoKXt2YXIgYj0hMTtpZihmLmZvckVhY2goZnVuY3Rpb24oZSl7Yy52YWxpZGF0ZVJlcXVpcmVkKGUpJiYoYj0hMCl9KSxiKWJyZWFrfWVsc2UgaWYodGhpcy52YWxpZGF0ZVJlcXVpcmVkKG0pKWJyZWFrO3JldHVybiB2b2lkIHRoaXMuZ2VuZXJhdGVNZXNzYWdlKHQsaCk7Y2FzZSBpOmlmKCF5KWJyZWFrO2lmKHRoaXMudmFsaWRhdGVFbWFpbChtKSlicmVhaztyZXR1cm4gdm9pZCB0aGlzLmdlbmVyYXRlTWVzc2FnZShpLGgpO2Nhc2UgcjppZigheSlicmVhaztpZih0aGlzLnZhbGlkYXRlTWluTGVuZ3RoKG0seSkpYnJlYWs7cmV0dXJuIHZvaWQgdGhpcy5nZW5lcmF0ZU1lc3NhZ2UocixoLHkpO2Nhc2UgbjppZigheSlicmVhaztpZih0aGlzLnZhbGlkYXRlTWF4TGVuZ3RoKG0seSkpYnJlYWs7cmV0dXJuIHZvaWQgdGhpcy5nZW5lcmF0ZU1lc3NhZ2UobixoLHkpO2Nhc2UgYTppZigheSlicmVhaztpZih0aGlzLnZhbGlkYXRlUGhvbmUobSkpYnJlYWs7cmV0dXJuIHZvaWQgdGhpcy5nZW5lcmF0ZU1lc3NhZ2UoYSxoKTtjYXNlIG86aWYoIXkpYnJlYWs7aWYodGhpcy52YWxpZGF0ZVBhc3N3b3JkKG0pKWJyZWFrO3JldHVybiB2b2lkIHRoaXMuZ2VuZXJhdGVNZXNzYWdlKG8saCk7Y2FzZSB1OmlmKCF5fHxcIm9iamVjdFwiIT09KFwidW5kZWZpbmVkXCI9PXR5cGVvZiB5P1widW5kZWZpbmVkXCI6X3R5cGVvZih5KSkpYnJlYWs7aWYoeVtcImRlZmF1bHRcIl0mJnRoaXMudmFsaWRhdGVTdHJlbmd0aFBhc3MobSkpYnJlYWs7aWYoeS5jdXN0b20pe3ZhciBFPXZvaWQgMDt0cnl7RT1uZXcgUmVnRXhwKHkuY3VzdG9tKX1jYXRjaCh3KXtFPXRoaXMuUkVHRVhQLnN0cmVuZ3RoUGFzcyxjb25zb2xlLmVycm9yKFwiQ3VzdG9tIHJlZ2V4cCBmb3Igc3RyZW5ndGggcnVsZSBpcyBub3QgdmFsaWQuIERlZmF1bHQgcmVnZXhwIHdhcyB1c2VkLlwiKX1pZihFLnRlc3QobSkpYnJlYWt9cmV0dXJuIHZvaWQgdGhpcy5nZW5lcmF0ZU1lc3NhZ2UodSxoKTtjYXNlIHM6aWYoIXkpYnJlYWs7aWYodGhpcy52YWxpZGF0ZVppcChtKSlicmVhaztyZXR1cm4gdm9pZCB0aGlzLmdlbmVyYXRlTWVzc2FnZShzLGgpO2Nhc2UgbDppZih2KWJyZWFrO2lmKCF5KWJyZWFrO3ZhciBrPXkudXJsLF89eS5zdWNjZXNzQW5zd2VyLFA9eS5tZXRob2QsUj15LnNlbmRQYXJhbSxTPXRoaXMuJGZvcm0ucXVlcnlTZWxlY3RvcignaW5wdXRbZGF0YS12YWxpZGF0ZS1maWVsZD1cIicraCsnXCJdJyk7cmV0dXJuIHRoaXMuc2V0dGVyRXZlbnRMaXN0ZW5lcihTLFwia2V5dXBcIix0aGlzLmhhbmRsZXJLZXl1cCxcInJlbW92ZVwiKSx2b2lkIHRoaXMucHJvbWlzZXNSZW1vdGUucHVzaCh0aGlzLnZhbGlkYXRlUmVtb3RlKHtuYW1lOmgsdmFsdWU6bSx1cmw6ayxtZXRob2Q6UCxzZW5kUGFyYW06UixzdWNjZXNzQW5zd2VyOl99KSl9fX0sY2xlYXJFcnJvcnM6ZnVuY3Rpb24oKXtmb3IodmFyIGU9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5qcy12YWxpZGF0ZS1lcnJvci1sYWJlbFwiKSx0PTAsaT1lLmxlbmd0aDt0PGk7Kyt0KWVbdF0ucmVtb3ZlKCk7ZT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmpzLXZhbGlkYXRlLWVycm9yLWZpZWxkXCIpO2Zvcih2YXIgcj0wLG49ZS5sZW5ndGg7cjxuOysrcillW3JdLmNsYXNzTGlzdC5yZW1vdmUoXCJqcy12YWxpZGF0ZS1lcnJvci1maWVsZFwiKSxlW3JdLnN0eWxlLmJvcmRlcj1cIlwiLGVbcl0uc3R5bGUuY29sb3I9XCJcIn0scmVuZGVyRXJyb3JzOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZih0aGlzLmNsZWFyRXJyb3JzKCksdGhpcy51bmxvY2tGb3JtKCksdGhpcy5pc1ZhbGlkYXRpb25TdWNjZXNzPSExLDA9PT1PYmplY3Qua2V5cyh0aGlzLnJlc3VsdCkubGVuZ3RoKXJldHVybiB2b2lkKHRoaXMuaXNWYWxpZGF0aW9uU3VjY2Vzcz0hMCk7Zm9yKHZhciB0IGluIHRoaXMucmVzdWx0KXt2YXIgaT10aGlzLnJlc3VsdFt0XS5tZXNzYWdlLHI9dGhpcy4kZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS12YWxpZGF0ZS1maWVsZD1cIicrdCsnXCJdJyksbj1yW3IubGVuZ3RoLTFdLG89ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtpZihvLmlubmVySFRNTD1pLG8uY2xhc3NOYW1lPVwianMtdmFsaWRhdGUtZXJyb3ItbGFiZWxcIixvLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsXCJjb2xvcjogXCIrdGhpcy5jb2xvcldyb25nKSxuLnN0eWxlLmJvcmRlcj1cIjFweCBzb2xpZCBcIit0aGlzLmNvbG9yV3Jvbmcsbi5zdHlsZS5jb2xvcj1cIlwiK3RoaXMuY29sb3JXcm9uZyxuLmNsYXNzTGlzdC5hZGQoXCJqcy12YWxpZGF0ZS1lcnJvci1maWVsZFwiKSxcImNoZWNrYm94XCI9PT1uLnR5cGV8fFwicmFkaW9cIj09PW4udHlwZSl7dmFyIHM9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbGFiZWxbZm9yPVwiJytuLmdldEF0dHJpYnV0ZShcImlkXCIpKydcIl0nKTtcImxhYmVsXCI9PT1uLnBhcmVudE5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpP24ucGFyZW50Tm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShvLG51bGwpOnM/cy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShvLHMubmV4dFNpYmxpbmcpOm4ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobyxuLm5leHRTaWJsaW5nKX1lbHNlIG4ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobyxuLm5leHRTaWJsaW5nKX10aGlzLnRvb2x0aXBTZWxlY3RvcldyYXAubGVuZ3RoJiYodGhpcy5zdGF0ZS50b29sdGlwc1RpbWVyPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtlLmhpZGVUb29sdGlwcygpfSx0aGlzLnRvb2x0aXBGYWRlT3V0VGltZSkpfSxoaWRlVG9vbHRpcHM6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5qcy12YWxpZGF0ZS1lcnJvci1sYWJlbFwiKTt0LmZvckVhY2goZnVuY3Rpb24odCl7dC5jbGFzc0xpc3QuYWRkKGUudG9vbHRpcEZhZGVPdXRDbGFzcyl9KSx0aGlzLnN0YXRlLnRvb2x0aXBzVGltZXI9bnVsbH0sbG9ja0Zvcm06ZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcy4kZm9ybS5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXQsIHRleHRhcmVhLCBidXR0b24sIHNlbGVjdFwiKSx0PTAsaT1lLmxlbmd0aDt0PGk7Kyt0KWVbdF0uc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIixcImRpc2FibGVkXCIpLGVbdF0uc3R5bGUucG9pbnRlckV2ZW50cz1cIm5vbmVcIixlW3RdLnN0eWxlLndlYml0RmlsdGVyPVwiZ3JheXNjYWxlKDEwMCUpXCIsZVt0XS5zdHlsZS5maWx0ZXI9XCJncmF5c2NhbGUoMTAwJSlcIn0sdW5sb2NrRm9ybTpmdW5jdGlvbigpe2Zvcih2YXIgZT10aGlzLiRmb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dCwgdGV4dGFyZWEsIGJ1dHRvbiwgc2VsZWN0XCIpLHQ9MCxpPWUubGVuZ3RoO3Q8aTsrK3QpZVt0XS5yZW1vdmVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSxlW3RdLnN0eWxlLnBvaW50ZXJFdmVudHM9XCJcIixlW3RdLnN0eWxlLndlYml0RmlsdGVyPVwiXCIsZVt0XS5zdHlsZS5maWx0ZXI9XCJcIn19LGUuSnVzdFZhbGlkYXRlPWZ9KHdpbmRvdyk7IiwiIWZ1bmN0aW9uKHQsZSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/ZShleHBvcnRzKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImV4cG9ydHNcIl0sZSk6ZSgodD1cInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOnR8fHNlbGYpLm5vVWlTbGlkZXI9e30pfSh0aGlzLGZ1bmN0aW9uKG90KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKHQpe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LnRvfWZ1bmN0aW9uIHN0KHQpe3QucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZCh0KX1mdW5jdGlvbiBhdCh0KXtyZXR1cm4gbnVsbCE9dH1mdW5jdGlvbiBsdCh0KXt0LnByZXZlbnREZWZhdWx0KCl9ZnVuY3Rpb24gaSh0KXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgdCYmIWlzTmFOKHQpJiZpc0Zpbml0ZSh0KX1mdW5jdGlvbiB1dCh0LGUscil7MDxyJiYoZnQodCxlKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZHQodCxlKX0scikpfWZ1bmN0aW9uIGN0KHQpe3JldHVybiBNYXRoLm1heChNYXRoLm1pbih0LDEwMCksMCl9ZnVuY3Rpb24gcHQodCl7cmV0dXJuIEFycmF5LmlzQXJyYXkodCk/dDpbdF19ZnVuY3Rpb24gZSh0KXt0PSh0PVN0cmluZyh0KSkuc3BsaXQoXCIuXCIpO3JldHVybiAxPHQubGVuZ3RoP3RbMV0ubGVuZ3RoOjB9ZnVuY3Rpb24gZnQodCxlKXt0LmNsYXNzTGlzdCYmIS9cXHMvLnRlc3QoZSk/dC5jbGFzc0xpc3QuYWRkKGUpOnQuY2xhc3NOYW1lKz1cIiBcIitlfWZ1bmN0aW9uIGR0KHQsZSl7dC5jbGFzc0xpc3QmJiEvXFxzLy50ZXN0KGUpP3QuY2xhc3NMaXN0LnJlbW92ZShlKTp0LmNsYXNzTmFtZT10LmNsYXNzTmFtZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoXnxcXFxcYilcIitlLnNwbGl0KFwiIFwiKS5qb2luKFwifFwiKStcIihcXFxcYnwkKVwiLFwiZ2lcIiksXCIgXCIpfWZ1bmN0aW9uIGh0KHQpe3ZhciBlPXZvaWQgMCE9PXdpbmRvdy5wYWdlWE9mZnNldCxyPVwiQ1NTMUNvbXBhdFwiPT09KHQuY29tcGF0TW9kZXx8XCJcIik7cmV0dXJue3g6ZT93aW5kb3cucGFnZVhPZmZzZXQ6KHI/dC5kb2N1bWVudEVsZW1lbnQ6dC5ib2R5KS5zY3JvbGxMZWZ0LHk6ZT93aW5kb3cucGFnZVlPZmZzZXQ6KHI/dC5kb2N1bWVudEVsZW1lbnQ6dC5ib2R5KS5zY3JvbGxUb3B9fWZ1bmN0aW9uIHModCxlKXtyZXR1cm4gMTAwLyhlLXQpfWZ1bmN0aW9uIGEodCxlLHIpe3JldHVybiAxMDAqZS8odFtyKzFdLXRbcl0pfWZ1bmN0aW9uIGwodCxlKXtmb3IodmFyIHI9MTt0Pj1lW3JdOylyKz0xO3JldHVybiByfWZ1bmN0aW9uIHIodCxlLHIpe2lmKHI+PXQuc2xpY2UoLTEpWzBdKXJldHVybiAxMDA7dmFyIG49bChyLHQpLGk9dFtuLTFdLG89dFtuXSx0PWVbbi0xXSxuPWVbbl07cmV0dXJuIHQrKHI9cixhKG89W2ksb10sb1swXTwwP3IrTWF0aC5hYnMob1swXSk6ci1vWzBdLDApL3ModCxuKSl9ZnVuY3Rpb24gbyh0LGUscixuKXtpZigxMDA9PT1uKXJldHVybiBuO3ZhciBpPWwobix0KSxvPXRbaS0xXSxzPXRbaV07cmV0dXJuIHI/KHMtbykvMjxuLW8/czpvOmVbaS0xXT90W2ktMV0rKHQ9bi10W2ktMV0saT1lW2ktMV0sTWF0aC5yb3VuZCh0L2kpKmkpOm59b3QuUGlwc01vZGU9dm9pZCAwLChIPW90LlBpcHNNb2RlfHwob3QuUGlwc01vZGU9e30pKS5SYW5nZT1cInJhbmdlXCIsSC5TdGVwcz1cInN0ZXBzXCIsSC5Qb3NpdGlvbnM9XCJwb3NpdGlvbnNcIixILkNvdW50PVwiY291bnRcIixILlZhbHVlcz1cInZhbHVlc1wiLG90LlBpcHNUeXBlPXZvaWQgMCwoSD1vdC5QaXBzVHlwZXx8KG90LlBpcHNUeXBlPXt9KSlbSC5Ob25lPS0xXT1cIk5vbmVcIixIW0guTm9WYWx1ZT0wXT1cIk5vVmFsdWVcIixIW0guTGFyZ2VWYWx1ZT0xXT1cIkxhcmdlVmFsdWVcIixIW0guU21hbGxWYWx1ZT0yXT1cIlNtYWxsVmFsdWVcIjt2YXIgdT0odC5wcm90b3R5cGUuZ2V0RGlzdGFuY2U9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPVtdLHI9MDtyPHRoaXMueE51bVN0ZXBzLmxlbmd0aC0xO3IrKyllW3JdPWEodGhpcy54VmFsLHQscik7cmV0dXJuIGV9LHQucHJvdG90eXBlLmdldEFic29sdXRlRGlzdGFuY2U9ZnVuY3Rpb24odCxlLHIpe3ZhciBuPTA7aWYodDx0aGlzLnhQY3RbdGhpcy54UGN0Lmxlbmd0aC0xXSlmb3IoO3Q+dGhpcy54UGN0W24rMV07KW4rKztlbHNlIHQ9PT10aGlzLnhQY3RbdGhpcy54UGN0Lmxlbmd0aC0xXSYmKG49dGhpcy54UGN0Lmxlbmd0aC0yKTtyfHx0IT09dGhpcy54UGN0W24rMV18fG4rKztmb3IodmFyIGksbz0xLHM9KGU9bnVsbD09PWU/W106ZSlbbl0sYT0wLGw9MCx1PTAsYz1yPyh0LXRoaXMueFBjdFtuXSkvKHRoaXMueFBjdFtuKzFdLXRoaXMueFBjdFtuXSk6KHRoaXMueFBjdFtuKzFdLXQpLyh0aGlzLnhQY3RbbisxXS10aGlzLnhQY3Rbbl0pOzA8czspaT10aGlzLnhQY3RbbisxK3VdLXRoaXMueFBjdFtuK3VdLDEwMDxlW24rdV0qbysxMDAtMTAwKmM/KGE9aSpjLG89KHMtMTAwKmMpL2Vbbit1XSxjPTEpOihhPWVbbit1XSppLzEwMCpvLG89MCkscj8obC09YSwxPD10aGlzLnhQY3QubGVuZ3RoK3UmJnUtLSk6KGwrPWEsMTw9dGhpcy54UGN0Lmxlbmd0aC11JiZ1KyspLHM9ZVtuK3VdKm87cmV0dXJuIHQrbH0sdC5wcm90b3R5cGUudG9TdGVwcGluZz1mdW5jdGlvbih0KXtyZXR1cm4gdD1yKHRoaXMueFZhbCx0aGlzLnhQY3QsdCl9LHQucHJvdG90eXBlLmZyb21TdGVwcGluZz1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24odCxlLHIpe2lmKDEwMDw9cilyZXR1cm4gdC5zbGljZSgtMSlbMF07dmFyIG49bChyLGUpLGk9dFtuLTFdLG89dFtuXSx0PWVbbi0xXSxuPWVbbl07cmV0dXJuKHItdCkqcyh0LG4pKigobz1baSxvXSlbMV0tb1swXSkvMTAwK29bMF19KHRoaXMueFZhbCx0aGlzLnhQY3QsdCl9LHQucHJvdG90eXBlLmdldFN0ZXA9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9byh0aGlzLnhQY3QsdGhpcy54U3RlcHMsdGhpcy5zbmFwLHQpfSx0LnByb3RvdHlwZS5nZXREZWZhdWx0U3RlcD1mdW5jdGlvbih0LGUscil7dmFyIG49bCh0LHRoaXMueFBjdCk7cmV0dXJuKDEwMD09PXR8fGUmJnQ9PT10aGlzLnhQY3Rbbi0xXSkmJihuPU1hdGgubWF4KG4tMSwxKSksKHRoaXMueFZhbFtuXS10aGlzLnhWYWxbbi0xXSkvcn0sdC5wcm90b3R5cGUuZ2V0TmVhcmJ5U3RlcHM9ZnVuY3Rpb24odCl7dD1sKHQsdGhpcy54UGN0KTtyZXR1cm57c3RlcEJlZm9yZTp7c3RhcnRWYWx1ZTp0aGlzLnhWYWxbdC0yXSxzdGVwOnRoaXMueE51bVN0ZXBzW3QtMl0saGlnaGVzdFN0ZXA6dGhpcy54SGlnaGVzdENvbXBsZXRlU3RlcFt0LTJdfSx0aGlzU3RlcDp7c3RhcnRWYWx1ZTp0aGlzLnhWYWxbdC0xXSxzdGVwOnRoaXMueE51bVN0ZXBzW3QtMV0saGlnaGVzdFN0ZXA6dGhpcy54SGlnaGVzdENvbXBsZXRlU3RlcFt0LTFdfSxzdGVwQWZ0ZXI6e3N0YXJ0VmFsdWU6dGhpcy54VmFsW3RdLHN0ZXA6dGhpcy54TnVtU3RlcHNbdF0saGlnaGVzdFN0ZXA6dGhpcy54SGlnaGVzdENvbXBsZXRlU3RlcFt0XX19fSx0LnByb3RvdHlwZS5jb3VudFN0ZXBEZWNpbWFscz1mdW5jdGlvbigpe3ZhciB0PXRoaXMueE51bVN0ZXBzLm1hcChlKTtyZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCx0KX0sdC5wcm90b3R5cGUuaGFzTm9TaXplPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMueFZhbFswXT09PXRoaXMueFZhbFt0aGlzLnhWYWwubGVuZ3RoLTFdfSx0LnByb3RvdHlwZS5jb252ZXJ0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmdldFN0ZXAodGhpcy50b1N0ZXBwaW5nKHQpKX0sdC5wcm90b3R5cGUuaGFuZGxlRW50cnlQb2ludD1mdW5jdGlvbih0LGUpe3Q9XCJtaW5cIj09PXQ/MDpcIm1heFwiPT09dD8xMDA6cGFyc2VGbG9hdCh0KTtpZighaSh0KXx8IWkoZVswXSkpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ3JhbmdlJyB2YWx1ZSBpc24ndCBudW1lcmljLlwiKTt0aGlzLnhQY3QucHVzaCh0KSx0aGlzLnhWYWwucHVzaChlWzBdKTtlPU51bWJlcihlWzFdKTt0P3RoaXMueFN0ZXBzLnB1c2goIWlzTmFOKGUpJiZlKTppc05hTihlKXx8KHRoaXMueFN0ZXBzWzBdPWUpLHRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXAucHVzaCgwKX0sdC5wcm90b3R5cGUuaGFuZGxlU3RlcFBvaW50PWZ1bmN0aW9uKHQsZSl7ZSYmKHRoaXMueFZhbFt0XSE9PXRoaXMueFZhbFt0KzFdPyh0aGlzLnhTdGVwc1t0XT1hKFt0aGlzLnhWYWxbdF0sdGhpcy54VmFsW3QrMV1dLGUsMCkvcyh0aGlzLnhQY3RbdF0sdGhpcy54UGN0W3QrMV0pLGU9KHRoaXMueFZhbFt0KzFdLXRoaXMueFZhbFt0XSkvdGhpcy54TnVtU3RlcHNbdF0sZT1NYXRoLmNlaWwoTnVtYmVyKGUudG9GaXhlZCgzKSktMSksZT10aGlzLnhWYWxbdF0rdGhpcy54TnVtU3RlcHNbdF0qZSx0aGlzLnhIaWdoZXN0Q29tcGxldGVTdGVwW3RdPWUpOnRoaXMueFN0ZXBzW3RdPXRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXBbdF09dGhpcy54VmFsW3RdKX0sdCk7ZnVuY3Rpb24gdChlLHQscil7dmFyIG47dGhpcy54UGN0PVtdLHRoaXMueFZhbD1bXSx0aGlzLnhTdGVwcz1bXSx0aGlzLnhOdW1TdGVwcz1bXSx0aGlzLnhIaWdoZXN0Q29tcGxldGVTdGVwPVtdLHRoaXMueFN0ZXBzPVtyfHwhMV0sdGhpcy54TnVtU3RlcHM9WyExXSx0aGlzLnNuYXA9dDt2YXIgaT1bXTtmb3IoT2JqZWN0LmtleXMoZSkuZm9yRWFjaChmdW5jdGlvbih0KXtpLnB1c2goW3B0KGVbdF0pLHRdKX0pLGkuc29ydChmdW5jdGlvbih0LGUpe3JldHVybiB0WzBdWzBdLWVbMF1bMF19KSxuPTA7bjxpLmxlbmd0aDtuKyspdGhpcy5oYW5kbGVFbnRyeVBvaW50KGlbbl1bMV0saVtuXVswXSk7Zm9yKHRoaXMueE51bVN0ZXBzPXRoaXMueFN0ZXBzLnNsaWNlKDApLG49MDtuPHRoaXMueE51bVN0ZXBzLmxlbmd0aDtuKyspdGhpcy5oYW5kbGVTdGVwUG9pbnQobix0aGlzLnhOdW1TdGVwc1tuXSl9dmFyIGM9e3RvOmZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10P1wiXCI6dC50b0ZpeGVkKDIpfSxmcm9tOk51bWJlcn0scD17dGFyZ2V0OlwidGFyZ2V0XCIsYmFzZTpcImJhc2VcIixvcmlnaW46XCJvcmlnaW5cIixoYW5kbGU6XCJoYW5kbGVcIixoYW5kbGVMb3dlcjpcImhhbmRsZS1sb3dlclwiLGhhbmRsZVVwcGVyOlwiaGFuZGxlLXVwcGVyXCIsdG91Y2hBcmVhOlwidG91Y2gtYXJlYVwiLGhvcml6b250YWw6XCJob3Jpem9udGFsXCIsdmVydGljYWw6XCJ2ZXJ0aWNhbFwiLGJhY2tncm91bmQ6XCJiYWNrZ3JvdW5kXCIsY29ubmVjdDpcImNvbm5lY3RcIixjb25uZWN0czpcImNvbm5lY3RzXCIsbHRyOlwibHRyXCIscnRsOlwicnRsXCIsdGV4dERpcmVjdGlvbkx0cjpcInR4dC1kaXItbHRyXCIsdGV4dERpcmVjdGlvblJ0bDpcInR4dC1kaXItcnRsXCIsZHJhZ2dhYmxlOlwiZHJhZ2dhYmxlXCIsZHJhZzpcInN0YXRlLWRyYWdcIix0YXA6XCJzdGF0ZS10YXBcIixhY3RpdmU6XCJhY3RpdmVcIix0b29sdGlwOlwidG9vbHRpcFwiLHBpcHM6XCJwaXBzXCIscGlwc0hvcml6b250YWw6XCJwaXBzLWhvcml6b250YWxcIixwaXBzVmVydGljYWw6XCJwaXBzLXZlcnRpY2FsXCIsbWFya2VyOlwibWFya2VyXCIsbWFya2VySG9yaXpvbnRhbDpcIm1hcmtlci1ob3Jpem9udGFsXCIsbWFya2VyVmVydGljYWw6XCJtYXJrZXItdmVydGljYWxcIixtYXJrZXJOb3JtYWw6XCJtYXJrZXItbm9ybWFsXCIsbWFya2VyTGFyZ2U6XCJtYXJrZXItbGFyZ2VcIixtYXJrZXJTdWI6XCJtYXJrZXItc3ViXCIsdmFsdWU6XCJ2YWx1ZVwiLHZhbHVlSG9yaXpvbnRhbDpcInZhbHVlLWhvcml6b250YWxcIix2YWx1ZVZlcnRpY2FsOlwidmFsdWUtdmVydGljYWxcIix2YWx1ZU5vcm1hbDpcInZhbHVlLW5vcm1hbFwiLHZhbHVlTGFyZ2U6XCJ2YWx1ZS1sYXJnZVwiLHZhbHVlU3ViOlwidmFsdWUtc3ViXCJ9LG10PXt0b29sdGlwczpcIi5fX3Rvb2x0aXBzXCIsYXJpYTpcIi5fX2FyaWFcIn07ZnVuY3Rpb24gZih0LGUpe2lmKCFpKGUpKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdzdGVwJyBpcyBub3QgbnVtZXJpYy5cIik7dC5zaW5nbGVTdGVwPWV9ZnVuY3Rpb24gZCh0LGUpe2lmKCFpKGUpKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdrZXlib2FyZFBhZ2VNdWx0aXBsaWVyJyBpcyBub3QgbnVtZXJpYy5cIik7dC5rZXlib2FyZFBhZ2VNdWx0aXBsaWVyPWV9ZnVuY3Rpb24gaCh0LGUpe2lmKCFpKGUpKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdrZXlib2FyZE11bHRpcGxpZXInIGlzIG5vdCBudW1lcmljLlwiKTt0LmtleWJvYXJkTXVsdGlwbGllcj1lfWZ1bmN0aW9uIG0odCxlKXtpZighaShlKSl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAna2V5Ym9hcmREZWZhdWx0U3RlcCcgaXMgbm90IG51bWVyaWMuXCIpO3Qua2V5Ym9hcmREZWZhdWx0U3RlcD1lfWZ1bmN0aW9uIGcodCxlKXtpZihcIm9iamVjdFwiIT10eXBlb2YgZXx8QXJyYXkuaXNBcnJheShlKSl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAncmFuZ2UnIGlzIG5vdCBhbiBvYmplY3QuXCIpO2lmKHZvaWQgMD09PWUubWlufHx2b2lkIDA9PT1lLm1heCl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiBNaXNzaW5nICdtaW4nIG9yICdtYXgnIGluICdyYW5nZScuXCIpO3Quc3BlY3RydW09bmV3IHUoZSx0LnNuYXB8fCExLHQuc2luZ2xlU3RlcCl9ZnVuY3Rpb24gdih0LGUpe2lmKGU9cHQoZSksIUFycmF5LmlzQXJyYXkoZSl8fCFlLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAnc3RhcnQnIG9wdGlvbiBpcyBpbmNvcnJlY3QuXCIpO3QuaGFuZGxlcz1lLmxlbmd0aCx0LnN0YXJ0PWV9ZnVuY3Rpb24gYih0LGUpe2lmKFwiYm9vbGVhblwiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAnc25hcCcgb3B0aW9uIG11c3QgYmUgYSBib29sZWFuLlwiKTt0LnNuYXA9ZX1mdW5jdGlvbiBTKHQsZSl7aWYoXCJib29sZWFuXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdhbmltYXRlJyBvcHRpb24gbXVzdCBiZSBhIGJvb2xlYW4uXCIpO3QuYW5pbWF0ZT1lfWZ1bmN0aW9uIHgodCxlKXtpZihcIm51bWJlclwiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAnYW5pbWF0aW9uRHVyYXRpb24nIG9wdGlvbiBtdXN0IGJlIGEgbnVtYmVyLlwiKTt0LmFuaW1hdGlvbkR1cmF0aW9uPWV9ZnVuY3Rpb24geSh0LGUpe3ZhciByLG49WyExXTtpZihcImxvd2VyXCI9PT1lP2U9WyEwLCExXTpcInVwcGVyXCI9PT1lJiYoZT1bITEsITBdKSwhMD09PWV8fCExPT09ZSl7Zm9yKHI9MTtyPHQuaGFuZGxlcztyKyspbi5wdXNoKGUpO24ucHVzaCghMSl9ZWxzZXtpZighQXJyYXkuaXNBcnJheShlKXx8IWUubGVuZ3RofHxlLmxlbmd0aCE9PXQuaGFuZGxlcysxKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdjb25uZWN0JyBvcHRpb24gZG9lc24ndCBtYXRjaCBoYW5kbGUgY291bnQuXCIpO249ZX10LmNvbm5lY3Q9bn1mdW5jdGlvbiB3KHQsZSl7c3dpdGNoKGUpe2Nhc2VcImhvcml6b250YWxcIjp0Lm9ydD0wO2JyZWFrO2Nhc2VcInZlcnRpY2FsXCI6dC5vcnQ9MTticmVhaztkZWZhdWx0OnRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdvcmllbnRhdGlvbicgb3B0aW9uIGlzIGludmFsaWQuXCIpfX1mdW5jdGlvbiBFKHQsZSl7aWYoIWkoZSkpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ21hcmdpbicgb3B0aW9uIG11c3QgYmUgbnVtZXJpYy5cIik7MCE9PWUmJih0Lm1hcmdpbj10LnNwZWN0cnVtLmdldERpc3RhbmNlKGUpKX1mdW5jdGlvbiBQKHQsZSl7aWYoIWkoZSkpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ2xpbWl0JyBvcHRpb24gbXVzdCBiZSBudW1lcmljLlwiKTtpZih0LmxpbWl0PXQuc3BlY3RydW0uZ2V0RGlzdGFuY2UoZSksIXQubGltaXR8fHQuaGFuZGxlczwyKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdsaW1pdCcgb3B0aW9uIGlzIG9ubHkgc3VwcG9ydGVkIG9uIGxpbmVhciBzbGlkZXJzIHdpdGggMiBvciBtb3JlIGhhbmRsZXMuXCIpfWZ1bmN0aW9uIEModCxlKXt2YXIgcjtpZighaShlKSYmIUFycmF5LmlzQXJyYXkoZSkpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ3BhZGRpbmcnIG9wdGlvbiBtdXN0IGJlIG51bWVyaWMgb3IgYXJyYXkgb2YgZXhhY3RseSAyIG51bWJlcnMuXCIpO2lmKEFycmF5LmlzQXJyYXkoZSkmJjIhPT1lLmxlbmd0aCYmIWkoZVswXSkmJiFpKGVbMV0pKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdwYWRkaW5nJyBvcHRpb24gbXVzdCBiZSBudW1lcmljIG9yIGFycmF5IG9mIGV4YWN0bHkgMiBudW1iZXJzLlwiKTtpZigwIT09ZSl7Zm9yKEFycmF5LmlzQXJyYXkoZSl8fChlPVtlLGVdKSx0LnBhZGRpbmc9W3Quc3BlY3RydW0uZ2V0RGlzdGFuY2UoZVswXSksdC5zcGVjdHJ1bS5nZXREaXN0YW5jZShlWzFdKV0scj0wO3I8dC5zcGVjdHJ1bS54TnVtU3RlcHMubGVuZ3RoLTE7cisrKWlmKHQucGFkZGluZ1swXVtyXTwwfHx0LnBhZGRpbmdbMV1bcl08MCl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAncGFkZGluZycgb3B0aW9uIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXIocykuXCIpO3ZhciBuPWVbMF0rZVsxXSxlPXQuc3BlY3RydW0ueFZhbFswXTtpZigxPG4vKHQuc3BlY3RydW0ueFZhbFt0LnNwZWN0cnVtLnhWYWwubGVuZ3RoLTFdLWUpKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdwYWRkaW5nJyBvcHRpb24gbXVzdCBub3QgZXhjZWVkIDEwMCUgb2YgdGhlIHJhbmdlLlwiKX19ZnVuY3Rpb24gTih0LGUpe3N3aXRjaChlKXtjYXNlXCJsdHJcIjp0LmRpcj0wO2JyZWFrO2Nhc2VcInJ0bFwiOnQuZGlyPTE7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAnZGlyZWN0aW9uJyBvcHRpb24gd2FzIG5vdCByZWNvZ25pemVkLlwiKX19ZnVuY3Rpb24gVih0LGUpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdiZWhhdmlvdXInIG11c3QgYmUgYSBzdHJpbmcgY29udGFpbmluZyBvcHRpb25zLlwiKTt2YXIgcj0wPD1lLmluZGV4T2YoXCJ0YXBcIiksbj0wPD1lLmluZGV4T2YoXCJkcmFnXCIpLGk9MDw9ZS5pbmRleE9mKFwiZml4ZWRcIiksbz0wPD1lLmluZGV4T2YoXCJzbmFwXCIpLHM9MDw9ZS5pbmRleE9mKFwiaG92ZXJcIiksYT0wPD1lLmluZGV4T2YoXCJ1bmNvbnN0cmFpbmVkXCIpLGw9MDw9ZS5pbmRleE9mKFwiZHJhZy1hbGxcIiksZT0wPD1lLmluZGV4T2YoXCJzbW9vdGgtc3RlcHNcIik7aWYoaSl7aWYoMiE9PXQuaGFuZGxlcyl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAnZml4ZWQnIGJlaGF2aW91ciBtdXN0IGJlIHVzZWQgd2l0aCAyIGhhbmRsZXNcIik7RSh0LHQuc3RhcnRbMV0tdC5zdGFydFswXSl9aWYoYSYmKHQubWFyZ2lufHx0LmxpbWl0KSl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAndW5jb25zdHJhaW5lZCcgYmVoYXZpb3VyIGNhbm5vdCBiZSB1c2VkIHdpdGggbWFyZ2luIG9yIGxpbWl0XCIpO3QuZXZlbnRzPXt0YXA6cnx8byxkcmFnOm4sZHJhZ0FsbDpsLHNtb290aFN0ZXBzOmUsZml4ZWQ6aSxzbmFwOm8saG92ZXI6cyx1bmNvbnN0cmFpbmVkOmF9fWZ1bmN0aW9uIEEodCxlKXtpZighMSE9PWUpaWYoITA9PT1lfHxuKGUpKXt0LnRvb2x0aXBzPVtdO2Zvcih2YXIgcj0wO3I8dC5oYW5kbGVzO3IrKyl0LnRvb2x0aXBzLnB1c2goZSl9ZWxzZXtpZigoZT1wdChlKSkubGVuZ3RoIT09dC5oYW5kbGVzKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6IG11c3QgcGFzcyBhIGZvcm1hdHRlciBmb3IgYWxsIGhhbmRsZXMuXCIpO2UuZm9yRWFjaChmdW5jdGlvbih0KXtpZihcImJvb2xlYW5cIiE9dHlwZW9mIHQmJiFuKHQpKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICd0b29sdGlwcycgbXVzdCBiZSBwYXNzZWQgYSBmb3JtYXR0ZXIgb3IgJ2ZhbHNlJy5cIil9KSx0LnRvb2x0aXBzPWV9fWZ1bmN0aW9uIGsodCxlKXtpZihlLmxlbmd0aCE9PXQuaGFuZGxlcyl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiBtdXN0IHBhc3MgYSBhdHRyaWJ1dGVzIGZvciBhbGwgaGFuZGxlcy5cIik7dC5oYW5kbGVBdHRyaWJ1dGVzPWV9ZnVuY3Rpb24gTSh0LGUpe2lmKCFuKGUpKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdhcmlhRm9ybWF0JyByZXF1aXJlcyAndG8nIG1ldGhvZC5cIik7dC5hcmlhRm9ybWF0PWV9ZnVuY3Rpb24gVSh0LGUpe2lmKCFuKHI9ZSl8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIHIuZnJvbSl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAnZm9ybWF0JyByZXF1aXJlcyAndG8nIGFuZCAnZnJvbScgbWV0aG9kcy5cIik7dmFyIHI7dC5mb3JtYXQ9ZX1mdW5jdGlvbiBEKHQsZSl7aWYoXCJib29sZWFuXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdrZXlib2FyZFN1cHBvcnQnIG9wdGlvbiBtdXN0IGJlIGEgYm9vbGVhbi5cIik7dC5rZXlib2FyZFN1cHBvcnQ9ZX1mdW5jdGlvbiBPKHQsZSl7dC5kb2N1bWVudEVsZW1lbnQ9ZX1mdW5jdGlvbiBMKHQsZSl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUmJiExIT09ZSl0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAnY3NzUHJlZml4JyBtdXN0IGJlIGEgc3RyaW5nIG9yIGBmYWxzZWAuXCIpO3QuY3NzUHJlZml4PWV9ZnVuY3Rpb24gVChlLHIpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiByKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdjc3NDbGFzc2VzJyBtdXN0IGJlIGFuIG9iamVjdC5cIik7XCJzdHJpbmdcIj09dHlwZW9mIGUuY3NzUHJlZml4PyhlLmNzc0NsYXNzZXM9e30sT2JqZWN0LmtleXMocikuZm9yRWFjaChmdW5jdGlvbih0KXtlLmNzc0NsYXNzZXNbdF09ZS5jc3NQcmVmaXgrclt0XX0pKTplLmNzc0NsYXNzZXM9cn1mdW5jdGlvbiBndChlKXt2YXIgcj17bWFyZ2luOm51bGwsbGltaXQ6bnVsbCxwYWRkaW5nOm51bGwsYW5pbWF0ZTohMCxhbmltYXRpb25EdXJhdGlvbjozMDAsYXJpYUZvcm1hdDpjLGZvcm1hdDpjfSxuPXtzdGVwOntyOiExLHQ6Zn0sa2V5Ym9hcmRQYWdlTXVsdGlwbGllcjp7cjohMSx0OmR9LGtleWJvYXJkTXVsdGlwbGllcjp7cjohMSx0Omh9LGtleWJvYXJkRGVmYXVsdFN0ZXA6e3I6ITEsdDptfSxzdGFydDp7cjohMCx0OnZ9LGNvbm5lY3Q6e3I6ITAsdDp5fSxkaXJlY3Rpb246e3I6ITAsdDpOfSxzbmFwOntyOiExLHQ6Yn0sYW5pbWF0ZTp7cjohMSx0OlN9LGFuaW1hdGlvbkR1cmF0aW9uOntyOiExLHQ6eH0scmFuZ2U6e3I6ITAsdDpnfSxvcmllbnRhdGlvbjp7cjohMSx0Ond9LG1hcmdpbjp7cjohMSx0OkV9LGxpbWl0OntyOiExLHQ6UH0scGFkZGluZzp7cjohMSx0OkN9LGJlaGF2aW91cjp7cjohMCx0OlZ9LGFyaWFGb3JtYXQ6e3I6ITEsdDpNfSxmb3JtYXQ6e3I6ITEsdDpVfSx0b29sdGlwczp7cjohMSx0OkF9LGtleWJvYXJkU3VwcG9ydDp7cjohMCx0OkR9LGRvY3VtZW50RWxlbWVudDp7cjohMSx0Ok99LGNzc1ByZWZpeDp7cjohMCx0Okx9LGNzc0NsYXNzZXM6e3I6ITAsdDpUfSxoYW5kbGVBdHRyaWJ1dGVzOntyOiExLHQ6a319LGk9e2Nvbm5lY3Q6ITEsZGlyZWN0aW9uOlwibHRyXCIsYmVoYXZpb3VyOlwidGFwXCIsb3JpZW50YXRpb246XCJob3Jpem9udGFsXCIsa2V5Ym9hcmRTdXBwb3J0OiEwLGNzc1ByZWZpeDpcIm5vVWktXCIsY3NzQ2xhc3NlczpwLGtleWJvYXJkUGFnZU11bHRpcGxpZXI6NSxrZXlib2FyZE11bHRpcGxpZXI6MSxrZXlib2FyZERlZmF1bHRTdGVwOjEwfTtlLmZvcm1hdCYmIWUuYXJpYUZvcm1hdCYmKGUuYXJpYUZvcm1hdD1lLmZvcm1hdCksT2JqZWN0LmtleXMobikuZm9yRWFjaChmdW5jdGlvbih0KXtpZihhdChlW3RdKXx8dm9pZCAwIT09aVt0XSluW3RdLnQociwoYXQoZVt0XSk/ZTppKVt0XSk7ZWxzZSBpZihuW3RdLnIpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ1wiK3QrXCInIGlzIHJlcXVpcmVkLlwiKX0pLHIucGlwcz1lLnBpcHM7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxvPXZvaWQgMCE9PXQuc3R5bGUubXNUcmFuc2Zvcm0sdD12b2lkIDAhPT10LnN0eWxlLnRyYW5zZm9ybTtyLnRyYW5zZm9ybVJ1bGU9dD9cInRyYW5zZm9ybVwiOm8/XCJtc1RyYW5zZm9ybVwiOlwid2Via2l0VHJhbnNmb3JtXCI7cmV0dXJuIHIuc3R5bGU9W1tcImxlZnRcIixcInRvcFwiXSxbXCJyaWdodFwiLFwiYm90dG9tXCJdXVtyLmRpcl1bci5vcnRdLHJ9ZnVuY3Rpb24gaih0LGYsbyl7dmFyIGksbCxhLG4scyx1LGM9d2luZG93Lm5hdmlnYXRvci5wb2ludGVyRW5hYmxlZD97c3RhcnQ6XCJwb2ludGVyZG93blwiLG1vdmU6XCJwb2ludGVybW92ZVwiLGVuZDpcInBvaW50ZXJ1cFwifTp3aW5kb3cubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQ/e3N0YXJ0OlwiTVNQb2ludGVyRG93blwiLG1vdmU6XCJNU1BvaW50ZXJNb3ZlXCIsZW5kOlwiTVNQb2ludGVyVXBcIn06e3N0YXJ0OlwibW91c2Vkb3duIHRvdWNoc3RhcnRcIixtb3ZlOlwibW91c2Vtb3ZlIHRvdWNobW92ZVwiLGVuZDpcIm1vdXNldXAgdG91Y2hlbmRcIn0scD13aW5kb3cuQ1NTJiZDU1Muc3VwcG9ydHMmJkNTUy5zdXBwb3J0cyhcInRvdWNoLWFjdGlvblwiLFwibm9uZVwiKSYmZnVuY3Rpb24oKXt2YXIgdD0hMTt0cnl7dmFyIGU9T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXt0PSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLG51bGwsZSl9Y2F0Y2godCl7fXJldHVybiB0fSgpLGQ9dCxTPWYuc3BlY3RydW0saD1bXSxtPVtdLGc9W10sdj0wLGI9e30seD10Lm93bmVyRG9jdW1lbnQseT1mLmRvY3VtZW50RWxlbWVudHx8eC5kb2N1bWVudEVsZW1lbnQsdz14LmJvZHksRT1cInJ0bFwiPT09eC5kaXJ8fDE9PT1mLm9ydD8wOjEwMDtmdW5jdGlvbiBQKHQsZSl7dmFyIHI9eC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3JldHVybiBlJiZmdChyLGUpLHQuYXBwZW5kQ2hpbGQocikscn1mdW5jdGlvbiBDKHQsZSl7dmFyIHIsdD1QKHQsZi5jc3NDbGFzc2VzLm9yaWdpbiksbj1QKHQsZi5jc3NDbGFzc2VzLmhhbmRsZSk7cmV0dXJuIFAobixmLmNzc0NsYXNzZXMudG91Y2hBcmVhKSxuLnNldEF0dHJpYnV0ZShcImRhdGEtaGFuZGxlXCIsU3RyaW5nKGUpKSxmLmtleWJvYXJkU3VwcG9ydCYmKG4uc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIixcIjBcIiksbi5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbih0LGUpe2lmKFYoKXx8QShlKSlyZXR1cm4hMTt2YXIgcj1bXCJMZWZ0XCIsXCJSaWdodFwiXSxuPVtcIkRvd25cIixcIlVwXCJdLGk9W1wiUGFnZURvd25cIixcIlBhZ2VVcFwiXSxvPVtcIkhvbWVcIixcIkVuZFwiXTtmLmRpciYmIWYub3J0P3IucmV2ZXJzZSgpOmYub3J0JiYhZi5kaXImJihuLnJldmVyc2UoKSxpLnJldmVyc2UoKSk7dmFyIHM9dC5rZXkucmVwbGFjZShcIkFycm93XCIsXCJcIiksYT1zPT09aVswXSxsPXM9PT1pWzFdLGk9cz09PW5bMF18fHM9PT1yWzBdfHxhLG49cz09PW5bMV18fHM9PT1yWzFdfHxsLHI9cz09PW9bMF0sbz1zPT09b1sxXTtpZighKGl8fG58fHJ8fG8pKXJldHVybiEwO2lmKHQucHJldmVudERlZmF1bHQoKSxufHxpKXt2YXIgdT1pPzA6MSx1PW50KGUpW3VdO2lmKG51bGw9PT11KXJldHVybiExOyExPT09dSYmKHU9Uy5nZXREZWZhdWx0U3RlcChtW2VdLGksZi5rZXlib2FyZERlZmF1bHRTdGVwKSksdSo9bHx8YT9mLmtleWJvYXJkUGFnZU11bHRpcGxpZXI6Zi5rZXlib2FyZE11bHRpcGxpZXIsdT1NYXRoLm1heCh1LDFlLTcpLHUqPWk/LTE6MSx1PWhbZV0rdX1lbHNlIHU9bz9mLnNwZWN0cnVtLnhWYWxbZi5zcGVjdHJ1bS54VmFsLmxlbmd0aC0xXTpmLnNwZWN0cnVtLnhWYWxbMF07cmV0dXJuIFEoZSxTLnRvU3RlcHBpbmcodSksITAsITApLEkoXCJzbGlkZVwiLGUpLEkoXCJ1cGRhdGVcIixlKSxJKFwiY2hhbmdlXCIsZSksSShcInNldFwiLGUpLCExfSh0LGUpfSkpLHZvaWQgMCE9PWYuaGFuZGxlQXR0cmlidXRlcyYmKHI9Zi5oYW5kbGVBdHRyaWJ1dGVzW2VdLE9iamVjdC5rZXlzKHIpLmZvckVhY2goZnVuY3Rpb24odCl7bi5zZXRBdHRyaWJ1dGUodCxyW3RdKX0pKSxuLnNldEF0dHJpYnV0ZShcInJvbGVcIixcInNsaWRlclwiKSxuLnNldEF0dHJpYnV0ZShcImFyaWEtb3JpZW50YXRpb25cIixmLm9ydD9cInZlcnRpY2FsXCI6XCJob3Jpem9udGFsXCIpLDA9PT1lP2Z0KG4sZi5jc3NDbGFzc2VzLmhhbmRsZUxvd2VyKTplPT09Zi5oYW5kbGVzLTEmJmZ0KG4sZi5jc3NDbGFzc2VzLmhhbmRsZVVwcGVyKSx0LmhhbmRsZT1uLHR9ZnVuY3Rpb24gTih0LGUpe3JldHVybiEhZSYmUCh0LGYuY3NzQ2xhc3Nlcy5jb25uZWN0KX1mdW5jdGlvbiBlKHQsZSl7cmV0dXJuISghZi50b29sdGlwc3x8IWYudG9vbHRpcHNbZV0pJiZQKHQuZmlyc3RDaGlsZCxmLmNzc0NsYXNzZXMudG9vbHRpcCl9ZnVuY3Rpb24gVigpe3JldHVybiBkLmhhc0F0dHJpYnV0ZShcImRpc2FibGVkXCIpfWZ1bmN0aW9uIEEodCl7cmV0dXJuIGxbdF0uaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIil9ZnVuY3Rpb24gaygpe3MmJihZKFwidXBkYXRlXCIrbXQudG9vbHRpcHMpLHMuZm9yRWFjaChmdW5jdGlvbih0KXt0JiZzdCh0KX0pLHM9bnVsbCl9ZnVuY3Rpb24gTSgpe2soKSxzPWwubWFwKGUpLFgoXCJ1cGRhdGVcIittdC50b29sdGlwcyxmdW5jdGlvbih0LGUscil7cyYmZi50b29sdGlwcyYmITEhPT1zW2VdJiYodD10W2VdLCEwIT09Zi50b29sdGlwc1tlXSYmKHQ9Zi50b29sdGlwc1tlXS50byhyW2VdKSksc1tlXS5pbm5lckhUTUw9dCl9KX1mdW5jdGlvbiBVKHQsZSl7cmV0dXJuIHQubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBTLmZyb21TdGVwcGluZyhlP1MuZ2V0U3RlcCh0KTp0KX0pfWZ1bmN0aW9uIEQoZCl7dmFyIGg9ZnVuY3Rpb24odCl7aWYodC5tb2RlPT09b3QuUGlwc01vZGUuUmFuZ2V8fHQubW9kZT09PW90LlBpcHNNb2RlLlN0ZXBzKXJldHVybiBTLnhWYWw7aWYodC5tb2RlIT09b3QuUGlwc01vZGUuQ291bnQpcmV0dXJuIHQubW9kZT09PW90LlBpcHNNb2RlLlBvc2l0aW9ucz9VKHQudmFsdWVzLHQuc3RlcHBlZCk6dC5tb2RlPT09b3QuUGlwc01vZGUuVmFsdWVzP3Quc3RlcHBlZD90LnZhbHVlcy5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIFMuZnJvbVN0ZXBwaW5nKFMuZ2V0U3RlcChTLnRvU3RlcHBpbmcodCkpKX0pOnQudmFsdWVzOltdO2lmKHQudmFsdWVzPDIpdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ3ZhbHVlcycgKD49IDIpIHJlcXVpcmVkIGZvciBtb2RlICdjb3VudCcuXCIpO2Zvcih2YXIgZT10LnZhbHVlcy0xLHI9MTAwL2Usbj1bXTtlLS07KW5bZV09ZSpyO3JldHVybiBuLnB1c2goMTAwKSxVKG4sdC5zdGVwcGVkKX0oZCksbT17fSx0PVMueFZhbFswXSxlPVMueFZhbFtTLnhWYWwubGVuZ3RoLTFdLGc9ITEsdj0hMSxiPTA7cmV0dXJuKGg9aC5zbGljZSgpLnNvcnQoZnVuY3Rpb24odCxlKXtyZXR1cm4gdC1lfSkuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiF0aGlzW3RdJiYodGhpc1t0XT0hMCl9LHt9KSlbMF0hPT10JiYoaC51bnNoaWZ0KHQpLGc9ITApLGhbaC5sZW5ndGgtMV0hPT1lJiYoaC5wdXNoKGUpLHY9ITApLGguZm9yRWFjaChmdW5jdGlvbih0LGUpe3ZhciByLG4saSxvLHMsYSxsLHUsdD10LGM9aFtlKzFdLHA9ZC5tb2RlPT09b3QuUGlwc01vZGUuU3RlcHMsZj0oZj1wP1MueE51bVN0ZXBzW2VdOmYpfHxjLXQ7Zm9yKHZvaWQgMD09PWMmJihjPXQpLGY9TWF0aC5tYXgoZiwxZS03KSxyPXQ7cjw9YztyPU51bWJlcigocitmKS50b0ZpeGVkKDcpKSl7Zm9yKGE9KG89KGk9Uy50b1N0ZXBwaW5nKHIpKS1iKS8oZC5kZW5zaXR5fHwxKSx1PW8vKGw9TWF0aC5yb3VuZChhKSksbj0xO248PWw7bis9MSltWyhzPWIrbip1KS50b0ZpeGVkKDUpXT1bUy5mcm9tU3RlcHBpbmcocyksMF07YT0tMTxoLmluZGV4T2Yocik/b3QuUGlwc1R5cGUuTGFyZ2VWYWx1ZTpwP290LlBpcHNUeXBlLlNtYWxsVmFsdWU6b3QuUGlwc1R5cGUuTm9WYWx1ZSwhZSYmZyYmciE9PWMmJihhPTApLHI9PT1jJiZ2fHwobVtpLnRvRml4ZWQoNSldPVtyLGFdKSxiPWl9fSksbX1mdW5jdGlvbiBPKGksbyxzKXt2YXIgdCxhPXguY3JlYXRlRWxlbWVudChcImRpdlwiKSxuPSgodD17fSlbb3QuUGlwc1R5cGUuTm9uZV09XCJcIix0W290LlBpcHNUeXBlLk5vVmFsdWVdPWYuY3NzQ2xhc3Nlcy52YWx1ZU5vcm1hbCx0W290LlBpcHNUeXBlLkxhcmdlVmFsdWVdPWYuY3NzQ2xhc3Nlcy52YWx1ZUxhcmdlLHRbb3QuUGlwc1R5cGUuU21hbGxWYWx1ZV09Zi5jc3NDbGFzc2VzLnZhbHVlU3ViLHQpLGw9KCh0PXt9KVtvdC5QaXBzVHlwZS5Ob25lXT1cIlwiLHRbb3QuUGlwc1R5cGUuTm9WYWx1ZV09Zi5jc3NDbGFzc2VzLm1hcmtlck5vcm1hbCx0W290LlBpcHNUeXBlLkxhcmdlVmFsdWVdPWYuY3NzQ2xhc3Nlcy5tYXJrZXJMYXJnZSx0W290LlBpcHNUeXBlLlNtYWxsVmFsdWVdPWYuY3NzQ2xhc3Nlcy5tYXJrZXJTdWIsdCksdT1bZi5jc3NDbGFzc2VzLnZhbHVlSG9yaXpvbnRhbCxmLmNzc0NsYXNzZXMudmFsdWVWZXJ0aWNhbF0sYz1bZi5jc3NDbGFzc2VzLm1hcmtlckhvcml6b250YWwsZi5jc3NDbGFzc2VzLm1hcmtlclZlcnRpY2FsXTtmdW5jdGlvbiBwKHQsZSl7dmFyIHI9ZT09PWYuY3NzQ2xhc3Nlcy52YWx1ZTtyZXR1cm4gZStcIiBcIisocj91OmMpW2Yub3J0XStcIiBcIisocj9uOmwpW3RdfXJldHVybiBmdChhLGYuY3NzQ2xhc3Nlcy5waXBzKSxmdChhLDA9PT1mLm9ydD9mLmNzc0NsYXNzZXMucGlwc0hvcml6b250YWw6Zi5jc3NDbGFzc2VzLnBpcHNWZXJ0aWNhbCksT2JqZWN0LmtleXMoaSkuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZSxyLG47cj1pW2U9dF1bMF0sbj1pW3RdWzFdLChuPW8/byhyLG4pOm4pIT09b3QuUGlwc1R5cGUuTm9uZSYmKCh0PVAoYSwhMSkpLmNsYXNzTmFtZT1wKG4sZi5jc3NDbGFzc2VzLm1hcmtlciksdC5zdHlsZVtmLnN0eWxlXT1lK1wiJVwiLG4+b3QuUGlwc1R5cGUuTm9WYWx1ZSYmKCh0PVAoYSwhMSkpLmNsYXNzTmFtZT1wKG4sZi5jc3NDbGFzc2VzLnZhbHVlKSx0LnNldEF0dHJpYnV0ZShcImRhdGEtdmFsdWVcIixTdHJpbmcocikpLHQuc3R5bGVbZi5zdHlsZV09ZStcIiVcIix0LmlubmVySFRNTD1TdHJpbmcocy50byhyKSkpKX0pLGF9ZnVuY3Rpb24gTCgpe24mJihzdChuKSxuPW51bGwpfWZ1bmN0aW9uIFQodCl7TCgpO3ZhciBlPUQodCkscj10LmZpbHRlcix0PXQuZm9ybWF0fHx7dG86ZnVuY3Rpb24odCl7cmV0dXJuIFN0cmluZyhNYXRoLnJvdW5kKHQpKX19O3JldHVybiBuPWQuYXBwZW5kQ2hpbGQoTyhlLHIsdCkpfWZ1bmN0aW9uIGooKXt2YXIgdD1pLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGU9XCJvZmZzZXRcIitbXCJXaWR0aFwiLFwiSGVpZ2h0XCJdW2Yub3J0XTtyZXR1cm4gMD09PWYub3J0P3Qud2lkdGh8fGlbZV06dC5oZWlnaHR8fGlbZV19ZnVuY3Rpb24geihuLGksbyxzKXtmdW5jdGlvbiBlKHQpe3ZhciBlLHI9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPTA9PT1lLnR5cGUuaW5kZXhPZihcInRvdWNoXCIpLGk9MD09PWUudHlwZS5pbmRleE9mKFwibW91c2VcIiksbz0wPT09ZS50eXBlLmluZGV4T2YoXCJwb2ludGVyXCIpLHM9MCxhPTA7MD09PWUudHlwZS5pbmRleE9mKFwiTVNQb2ludGVyXCIpJiYobz0hMCk7aWYoXCJtb3VzZWRvd25cIj09PWUudHlwZSYmIWUuYnV0dG9ucyYmIWUudG91Y2hlcylyZXR1cm4hMTtpZihuKXt2YXIgbD1mdW5jdGlvbih0KXt0PXQudGFyZ2V0O3JldHVybiB0PT09cnx8ci5jb250YWlucyh0KXx8ZS5jb21wb3NlZCYmZS5jb21wb3NlZFBhdGgoKS5zaGlmdCgpPT09cn07aWYoXCJ0b3VjaHN0YXJ0XCI9PT1lLnR5cGUpe249QXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGUudG91Y2hlcyxsKTtpZigxPG4ubGVuZ3RoKXJldHVybiExO3M9blswXS5wYWdlWCxhPW5bMF0ucGFnZVl9ZWxzZXtsPUFycmF5LnByb3RvdHlwZS5maW5kLmNhbGwoZS5jaGFuZ2VkVG91Y2hlcyxsKTtpZighbClyZXR1cm4hMTtzPWwucGFnZVgsYT1sLnBhZ2VZfX10PXR8fGh0KHgpLChpfHxvKSYmKHM9ZS5jbGllbnRYK3QueCxhPWUuY2xpZW50WSt0LnkpO3JldHVybiBlLnBhZ2VPZmZzZXQ9dCxlLnBvaW50cz1bcyxhXSxlLmN1cnNvcj1pfHxvLGV9KHQscy5wYWdlT2Zmc2V0LHMudGFyZ2V0fHxpKTtyZXR1cm4hIXImJighKFYoKSYmIXMuZG9Ob3RSZWplY3QpJiYoZT1kLHQ9Zi5jc3NDbGFzc2VzLnRhcCwhKChlLmNsYXNzTGlzdD9lLmNsYXNzTGlzdC5jb250YWlucyh0KTpuZXcgUmVnRXhwKFwiXFxcXGJcIit0K1wiXFxcXGJcIikudGVzdChlLmNsYXNzTmFtZSkpJiYhcy5kb05vdFJlamVjdCkmJighKG49PT1jLnN0YXJ0JiZ2b2lkIDAhPT1yLmJ1dHRvbnMmJjE8ci5idXR0b25zKSYmKCghcy5ob3Zlcnx8IXIuYnV0dG9ucykmJihwfHxyLnByZXZlbnREZWZhdWx0KCksci5jYWxjUG9pbnQ9ci5wb2ludHNbZi5vcnRdLHZvaWQgbyhyLHMpKSkpKSl9dmFyIHI9W107cmV0dXJuIG4uc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24odCl7aS5hZGRFdmVudExpc3RlbmVyKHQsZSwhIXAmJntwYXNzaXZlOiEwfSksci5wdXNoKFt0LGVdKX0pLHJ9ZnVuY3Rpb24gSCh0KXt2YXIgZSxyLG49Y3Qobj0xMDAqKHQtKG49aSxlPWYub3J0LHI9bi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxuPSh0PW4ub3duZXJEb2N1bWVudCkuZG9jdW1lbnRFbGVtZW50LHQ9aHQodCksL3dlYmtpdC4qQ2hyb21lLipNb2JpbGUvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpJiYodC54PTApLGU/ci50b3ArdC55LW4uY2xpZW50VG9wOnIubGVmdCt0Lngtbi5jbGllbnRMZWZ0KSkvaigpKTtyZXR1cm4gZi5kaXI/MTAwLW46bn1mdW5jdGlvbiBGKHQsZSl7XCJtb3VzZW91dFwiPT09dC50eXBlJiZcIkhUTUxcIj09PXQudGFyZ2V0Lm5vZGVOYW1lJiZudWxsPT09dC5yZWxhdGVkVGFyZ2V0JiZfKHQsZSl9ZnVuY3Rpb24gUih0LGUpe2lmKC0xPT09bmF2aWdhdG9yLmFwcFZlcnNpb24uaW5kZXhPZihcIk1TSUUgOVwiKSYmMD09PXQuYnV0dG9ucyYmMCE9PWUuYnV0dG9uc1Byb3BlcnR5KXJldHVybiBfKHQsZSk7dD0oZi5kaXI/LTE6MSkqKHQuY2FsY1BvaW50LWUuc3RhcnRDYWxjUG9pbnQpO0coMDx0LDEwMCp0L2UuYmFzZVNpemUsZS5sb2NhdGlvbnMsZS5oYW5kbGVOdW1iZXJzLGUuY29ubmVjdCl9ZnVuY3Rpb24gXyh0LGUpe2UuaGFuZGxlJiYoZHQoZS5oYW5kbGUsZi5jc3NDbGFzc2VzLmFjdGl2ZSksLS12KSxlLmxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3kucmVtb3ZlRXZlbnRMaXN0ZW5lcih0WzBdLHRbMV0pfSksMD09PXYmJihkdChkLGYuY3NzQ2xhc3Nlcy5kcmFnKSxLKCksdC5jdXJzb3ImJih3LnN0eWxlLmN1cnNvcj1cIlwiLHcucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNlbGVjdHN0YXJ0XCIsbHQpKSksZi5ldmVudHMuc21vb3RoU3RlcHMmJihlLmhhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbih0KXtRKHQsbVt0XSwhMCwhMCwhMSwhMSl9KSxlLmhhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbih0KXtJKFwidXBkYXRlXCIsdCl9KSksZS5oYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24odCl7SShcImNoYW5nZVwiLHQpLEkoXCJzZXRcIix0KSxJKFwiZW5kXCIsdCl9KX1mdW5jdGlvbiBCKHQsZSl7dmFyIHIsbixpLG87ZS5oYW5kbGVOdW1iZXJzLnNvbWUoQSl8fCgxPT09ZS5oYW5kbGVOdW1iZXJzLmxlbmd0aCYmKG89bFtlLmhhbmRsZU51bWJlcnNbMF1dLmNoaWxkcmVuWzBdLHYrPTEsZnQobyxmLmNzc0NsYXNzZXMuYWN0aXZlKSksdC5zdG9wUHJvcGFnYXRpb24oKSxuPXooYy5tb3ZlLHksUix7dGFyZ2V0OnQudGFyZ2V0LGhhbmRsZTpvLGNvbm5lY3Q6ZS5jb25uZWN0LGxpc3RlbmVyczpyPVtdLHN0YXJ0Q2FsY1BvaW50OnQuY2FsY1BvaW50LGJhc2VTaXplOmooKSxwYWdlT2Zmc2V0OnQucGFnZU9mZnNldCxoYW5kbGVOdW1iZXJzOmUuaGFuZGxlTnVtYmVycyxidXR0b25zUHJvcGVydHk6dC5idXR0b25zLGxvY2F0aW9uczptLnNsaWNlKCl9KSxpPXooYy5lbmQseSxfLHt0YXJnZXQ6dC50YXJnZXQsaGFuZGxlOm8sbGlzdGVuZXJzOnIsZG9Ob3RSZWplY3Q6ITAsaGFuZGxlTnVtYmVyczplLmhhbmRsZU51bWJlcnN9KSxvPXooXCJtb3VzZW91dFwiLHksRix7dGFyZ2V0OnQudGFyZ2V0LGhhbmRsZTpvLGxpc3RlbmVyczpyLGRvTm90UmVqZWN0OiEwLGhhbmRsZU51bWJlcnM6ZS5oYW5kbGVOdW1iZXJzfSksci5wdXNoLmFwcGx5KHIsbi5jb25jYXQoaSxvKSksdC5jdXJzb3ImJih3LnN0eWxlLmN1cnNvcj1nZXRDb21wdXRlZFN0eWxlKHQudGFyZ2V0KS5jdXJzb3IsMTxsLmxlbmd0aCYmZnQoZCxmLmNzc0NsYXNzZXMuZHJhZyksdy5hZGRFdmVudExpc3RlbmVyKFwic2VsZWN0c3RhcnRcIixsdCwhMSkpLGUuaGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKHQpe0koXCJzdGFydFwiLHQpfSkpfWZ1bmN0aW9uIHIodCl7dC5zdG9wUHJvcGFnYXRpb24oKTt2YXIgaSxvLHMsZT1IKHQuY2FsY1BvaW50KSxyPShpPWUscz0hKG89MTAwKSxsLmZvckVhY2goZnVuY3Rpb24odCxlKXt2YXIgcixuO0EoZSl8fChyPW1bZV0sKChuPU1hdGguYWJzKHItaSkpPG98fG48PW8mJnI8aXx8MTAwPT09biYmMTAwPT09bykmJihzPWUsbz1uKSl9KSxzKTshMSE9PXImJihmLmV2ZW50cy5zbmFwfHx1dChkLGYuY3NzQ2xhc3Nlcy50YXAsZi5hbmltYXRpb25EdXJhdGlvbiksUShyLGUsITAsITApLEsoKSxJKFwic2xpZGVcIixyLCEwKSxJKFwidXBkYXRlXCIsciwhMCksZi5ldmVudHMuc25hcD9CKHQse2hhbmRsZU51bWJlcnM6W3JdfSk6KEkoXCJjaGFuZ2VcIixyLCEwKSxJKFwic2V0XCIsciwhMCkpKX1mdW5jdGlvbiBxKHQpe3ZhciB0PUgodC5jYWxjUG9pbnQpLHQ9Uy5nZXRTdGVwKHQpLGU9Uy5mcm9tU3RlcHBpbmcodCk7T2JqZWN0LmtleXMoYikuZm9yRWFjaChmdW5jdGlvbih0KXtcImhvdmVyXCI9PT10LnNwbGl0KFwiLlwiKVswXSYmYlt0XS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QuY2FsbChpdCxlKX0pfSl9ZnVuY3Rpb24gWCh0LGUpe2JbdF09Ylt0XXx8W10sYlt0XS5wdXNoKGUpLFwidXBkYXRlXCI9PT10LnNwbGl0KFwiLlwiKVswXSYmbC5mb3JFYWNoKGZ1bmN0aW9uKHQsZSl7SShcInVwZGF0ZVwiLGUpfSl9ZnVuY3Rpb24gWSh0KXt2YXIgbj10JiZ0LnNwbGl0KFwiLlwiKVswXSxpPW4/dC5zdWJzdHJpbmcobi5sZW5ndGgpOnQ7T2JqZWN0LmtleXMoYikuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT10LnNwbGl0KFwiLlwiKVswXSxyPXQuc3Vic3RyaW5nKGUubGVuZ3RoKTtuJiZuIT09ZXx8aSYmaSE9PXJ8fCgoZT1yKSE9PW10LmFyaWEmJmUhPT1tdC50b29sdGlwc3x8aT09PXIpJiZkZWxldGUgYlt0XX0pfWZ1bmN0aW9uIEkocixuLGkpe09iamVjdC5rZXlzKGIpLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGU9dC5zcGxpdChcIi5cIilbMF07cj09PWUmJmJbdF0uZm9yRWFjaChmdW5jdGlvbih0KXt0LmNhbGwoaXQsaC5tYXAoZi5mb3JtYXQudG8pLG4saC5zbGljZSgpLGl8fCExLG0uc2xpY2UoKSxpdCl9KX0pfWZ1bmN0aW9uIFcodCxlLHIsbixpLG8scyl7dmFyIGE7cmV0dXJuIDE8bC5sZW5ndGgmJiFmLmV2ZW50cy51bmNvbnN0cmFpbmVkJiYobiYmMDxlJiYoYT1TLmdldEFic29sdXRlRGlzdGFuY2UodFtlLTFdLGYubWFyZ2luLCExKSxyPU1hdGgubWF4KHIsYSkpLGkmJmU8bC5sZW5ndGgtMSYmKGE9Uy5nZXRBYnNvbHV0ZURpc3RhbmNlKHRbZSsxXSxmLm1hcmdpbiwhMCkscj1NYXRoLm1pbihyLGEpKSksMTxsLmxlbmd0aCYmZi5saW1pdCYmKG4mJjA8ZSYmKGE9Uy5nZXRBYnNvbHV0ZURpc3RhbmNlKHRbZS0xXSxmLmxpbWl0LCExKSxyPU1hdGgubWluKHIsYSkpLGkmJmU8bC5sZW5ndGgtMSYmKGE9Uy5nZXRBYnNvbHV0ZURpc3RhbmNlKHRbZSsxXSxmLmxpbWl0LCEwKSxyPU1hdGgubWF4KHIsYSkpKSxmLnBhZGRpbmcmJigwPT09ZSYmKGE9Uy5nZXRBYnNvbHV0ZURpc3RhbmNlKDAsZi5wYWRkaW5nWzBdLCExKSxyPU1hdGgubWF4KHIsYSkpLGU9PT1sLmxlbmd0aC0xJiYoYT1TLmdldEFic29sdXRlRGlzdGFuY2UoMTAwLGYucGFkZGluZ1sxXSwhMCkscj1NYXRoLm1pbihyLGEpKSksISgocj1jdChyPSFzP1MuZ2V0U3RlcChyKTpyKSk9PT10W2VdJiYhbykmJnJ9ZnVuY3Rpb24gJCh0LGUpe3ZhciByPWYub3J0O3JldHVybihyP2U6dCkrXCIsIFwiKyhyP3Q6ZSl9ZnVuY3Rpb24gRyh0LHIsbixlLGkpe3ZhciBvPW4uc2xpY2UoKSxzPWVbMF0sYT1mLmV2ZW50cy5zbW9vdGhTdGVwcyxsPVshdCx0XSx1PVt0LCF0XTtlPWUuc2xpY2UoKSx0JiZlLnJldmVyc2UoKSwxPGUubGVuZ3RoP2UuZm9yRWFjaChmdW5jdGlvbih0LGUpe2U9VyhvLHQsb1t0XStyLGxbZV0sdVtlXSwhMSxhKTshMT09PWU/cj0wOihyPWUtb1t0XSxvW3RdPWUpfSk6bD11PVshMF07dmFyIGM9ITE7ZS5mb3JFYWNoKGZ1bmN0aW9uKHQsZSl7Yz1RKHQsblt0XStyLGxbZV0sdVtlXSwhMSxhKXx8Y30pLGMmJihlLmZvckVhY2goZnVuY3Rpb24odCl7SShcInVwZGF0ZVwiLHQpLEkoXCJzbGlkZVwiLHQpfSksbnVsbCE9aSYmSShcImRyYWdcIixzKSl9ZnVuY3Rpb24gSih0LGUpe3JldHVybiBmLmRpcj8xMDAtdC1lOnR9ZnVuY3Rpb24gSygpe2cuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT01MDxtW3RdPy0xOjEsZT0zKyhsLmxlbmd0aCtlKnQpO2xbdF0uc3R5bGUuekluZGV4PVN0cmluZyhlKX0pfWZ1bmN0aW9uIFEodCxlLHIsbixpLG8pe3JldHVybiExIT09KGU9aT9lOlcobSx0LGUscixuLCExLG8pKSYmKGU9ZSxtW3Q9dF09ZSxoW3RdPVMuZnJvbVN0ZXBwaW5nKGUpLGU9XCJ0cmFuc2xhdGUoXCIrJChKKGUsMCktRStcIiVcIixcIjBcIikrXCIpXCIsbFt0XS5zdHlsZVtmLnRyYW5zZm9ybVJ1bGVdPWUsWih0KSxaKHQrMSksITApfWZ1bmN0aW9uIFoodCl7dmFyIGUscjthW3RdJiYocj0xMDAsZT1cInRyYW5zbGF0ZShcIiskKEooZT0oZT0wKSE9PXQ/bVt0LTFdOmUscj0ocj10IT09YS5sZW5ndGgtMT9tW3RdOnIpLWUpK1wiJVwiLFwiMFwiKStcIilcIixyPVwic2NhbGUoXCIrJChyLzEwMCxcIjFcIikrXCIpXCIsYVt0XS5zdHlsZVtmLnRyYW5zZm9ybVJ1bGVdPWUrXCIgXCIrcil9ZnVuY3Rpb24gdHQodCxlKXtyZXR1cm4gbnVsbD09PXR8fCExPT09dHx8dm9pZCAwPT09dD9tW2VdOihcIm51bWJlclwiPT10eXBlb2YgdCYmKHQ9U3RyaW5nKHQpKSwhMT09PSh0PSExIT09KHQ9Zi5mb3JtYXQuZnJvbSh0KSk/Uy50b1N0ZXBwaW5nKHQpOnQpfHxpc05hTih0KT9tW2VdOnQpfWZ1bmN0aW9uIGV0KHQsZSxyKXt2YXIgbj1wdCh0KSx0PXZvaWQgMD09PW1bMF07ZT12b2lkIDA9PT1lfHxlLGYuYW5pbWF0ZSYmIXQmJnV0KGQsZi5jc3NDbGFzc2VzLnRhcCxmLmFuaW1hdGlvbkR1cmF0aW9uKSxnLmZvckVhY2goZnVuY3Rpb24odCl7USh0LHR0KG5bdF0sdCksITAsITEscil9KTt2YXIgaSxvPTE9PT1nLmxlbmd0aD8wOjE7Zm9yKHQmJlMuaGFzTm9TaXplKCkmJihyPSEwLG1bMF09MCwxPGcubGVuZ3RoJiYoaT0xMDAvKGcubGVuZ3RoLTEpLGcuZm9yRWFjaChmdW5jdGlvbih0KXttW3RdPXQqaX0pKSk7bzxnLmxlbmd0aDsrK28pZy5mb3JFYWNoKGZ1bmN0aW9uKHQpe1EodCxtW3RdLCEwLCEwLHIpfSk7SygpLGcuZm9yRWFjaChmdW5jdGlvbih0KXtJKFwidXBkYXRlXCIsdCksbnVsbCE9PW5bdF0mJmUmJkkoXCJzZXRcIix0KX0pfWZ1bmN0aW9uIHJ0KHQpe2lmKHQ9dm9pZCAwPT09dD8hMTp0KXJldHVybiAxPT09aC5sZW5ndGg/aFswXTpoLnNsaWNlKDApO3Q9aC5tYXAoZi5mb3JtYXQudG8pO3JldHVybiAxPT09dC5sZW5ndGg/dFswXTp0fWZ1bmN0aW9uIG50KHQpe3ZhciBlPW1bdF0scj1TLmdldE5lYXJieVN0ZXBzKGUpLG49aFt0XSxpPXIudGhpc1N0ZXAuc3RlcCx0PW51bGw7aWYoZi5zbmFwKXJldHVybltuLXIuc3RlcEJlZm9yZS5zdGFydFZhbHVlfHxudWxsLHIuc3RlcEFmdGVyLnN0YXJ0VmFsdWUtbnx8bnVsbF07ITEhPT1pJiZuK2k+ci5zdGVwQWZ0ZXIuc3RhcnRWYWx1ZSYmKGk9ci5zdGVwQWZ0ZXIuc3RhcnRWYWx1ZS1uKSx0PW4+ci50aGlzU3RlcC5zdGFydFZhbHVlP3IudGhpc1N0ZXAuc3RlcDohMSE9PXIuc3RlcEJlZm9yZS5zdGVwJiZuLXIuc3RlcEJlZm9yZS5oaWdoZXN0U3RlcCwxMDA9PT1lP2k9bnVsbDowPT09ZSYmKHQ9bnVsbCk7ZT1TLmNvdW50U3RlcERlY2ltYWxzKCk7cmV0dXJuIG51bGwhPT1pJiYhMSE9PWkmJihpPU51bWJlcihpLnRvRml4ZWQoZSkpKSxbdD1udWxsIT09dCYmITEhPT10P051bWJlcih0LnRvRml4ZWQoZSkpOnQsaV19ZnQodD1kLGYuY3NzQ2xhc3Nlcy50YXJnZXQpLDA9PT1mLmRpcj9mdCh0LGYuY3NzQ2xhc3Nlcy5sdHIpOmZ0KHQsZi5jc3NDbGFzc2VzLnJ0bCksMD09PWYub3J0P2Z0KHQsZi5jc3NDbGFzc2VzLmhvcml6b250YWwpOmZ0KHQsZi5jc3NDbGFzc2VzLnZlcnRpY2FsKSxmdCh0LFwicnRsXCI9PT1nZXRDb21wdXRlZFN0eWxlKHQpLmRpcmVjdGlvbj9mLmNzc0NsYXNzZXMudGV4dERpcmVjdGlvblJ0bDpmLmNzc0NsYXNzZXMudGV4dERpcmVjdGlvbkx0ciksaT1QKHQsZi5jc3NDbGFzc2VzLmJhc2UpLGZ1bmN0aW9uKHQsZSl7dmFyIHI9UChlLGYuY3NzQ2xhc3Nlcy5jb25uZWN0cyk7bD1bXSwoYT1bXSkucHVzaChOKHIsdFswXSkpO2Zvcih2YXIgbj0wO248Zi5oYW5kbGVzO24rKylsLnB1c2goQyhlLG4pKSxnW25dPW4sYS5wdXNoKE4ocix0W24rMV0pKX0oZi5jb25uZWN0LGkpLCh1PWYuZXZlbnRzKS5maXhlZHx8bC5mb3JFYWNoKGZ1bmN0aW9uKHQsZSl7eihjLnN0YXJ0LHQuY2hpbGRyZW5bMF0sQix7aGFuZGxlTnVtYmVyczpbZV19KX0pLHUudGFwJiZ6KGMuc3RhcnQsaSxyLHt9KSx1LmhvdmVyJiZ6KGMubW92ZSxpLHEse2hvdmVyOiEwfSksdS5kcmFnJiZhLmZvckVhY2goZnVuY3Rpb24oZSx0KXt2YXIgcixuLGksbyxzOyExIT09ZSYmMCE9PXQmJnQhPT1hLmxlbmd0aC0xJiYocj1sW3QtMV0sbj1sW3RdLGk9W2VdLG89W3Isbl0scz1bdC0xLHRdLGZ0KGUsZi5jc3NDbGFzc2VzLmRyYWdnYWJsZSksdS5maXhlZCYmKGkucHVzaChyLmNoaWxkcmVuWzBdKSxpLnB1c2gobi5jaGlsZHJlblswXSkpLHUuZHJhZ0FsbCYmKG89bCxzPWcpLGkuZm9yRWFjaChmdW5jdGlvbih0KXt6KGMuc3RhcnQsdCxCLHtoYW5kbGVzOm8saGFuZGxlTnVtYmVyczpzLGNvbm5lY3Q6ZX0pfSkpfSksZXQoZi5zdGFydCksZi5waXBzJiZUKGYucGlwcyksZi50b29sdGlwcyYmTSgpLFkoXCJ1cGRhdGVcIittdC5hcmlhKSxYKFwidXBkYXRlXCIrbXQuYXJpYSxmdW5jdGlvbih0LGUsbyxyLHMpe2cuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT1sW3RdLHI9VyhtLHQsMCwhMCwhMCwhMCksbj1XKG0sdCwxMDAsITAsITAsITApLGk9c1t0XSx0PVN0cmluZyhmLmFyaWFGb3JtYXQudG8ob1t0XSkpLHI9Uy5mcm9tU3RlcHBpbmcocikudG9GaXhlZCgxKSxuPVMuZnJvbVN0ZXBwaW5nKG4pLnRvRml4ZWQoMSksaT1TLmZyb21TdGVwcGluZyhpKS50b0ZpeGVkKDEpO2UuY2hpbGRyZW5bMF0uc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZW1pblwiLHIpLGUuY2hpbGRyZW5bMF0uc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZW1heFwiLG4pLGUuY2hpbGRyZW5bMF0uc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZW5vd1wiLGkpLGUuY2hpbGRyZW5bMF0uc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZXRleHRcIix0KX0pfSk7dmFyIGl0PXtkZXN0cm95OmZ1bmN0aW9uKCl7Zm9yKFkobXQuYXJpYSksWShtdC50b29sdGlwcyksT2JqZWN0LmtleXMoZi5jc3NDbGFzc2VzKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2R0KGQsZi5jc3NDbGFzc2VzW3RdKX0pO2QuZmlyc3RDaGlsZDspZC5yZW1vdmVDaGlsZChkLmZpcnN0Q2hpbGQpO2RlbGV0ZSBkLm5vVWlTbGlkZXJ9LHN0ZXBzOmZ1bmN0aW9uKCl7cmV0dXJuIGcubWFwKG50KX0sb246WCxvZmY6WSxnZXQ6cnQsc2V0OmV0LHNldEhhbmRsZTpmdW5jdGlvbih0LGUscixuKXtpZighKDA8PSh0PU51bWJlcih0KSkmJnQ8Zy5sZW5ndGgpKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6IGludmFsaWQgaGFuZGxlIG51bWJlciwgZ290OiBcIit0KTtRKHQsdHQoZSx0KSwhMCwhMCxuKSxJKFwidXBkYXRlXCIsdCksciYmSShcInNldFwiLHQpfSxyZXNldDpmdW5jdGlvbih0KXtldChmLnN0YXJ0LHQpfSxkaXNhYmxlOmZ1bmN0aW9uKHQpe251bGwhPXQ/KGxbdF0uc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIixcIlwiKSxsW3RdLmhhbmRsZS5yZW1vdmVBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiKSk6KGQuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIixcIlwiKSxsLmZvckVhY2goZnVuY3Rpb24odCl7dC5oYW5kbGUucmVtb3ZlQXR0cmlidXRlKFwidGFiaW5kZXhcIil9KSl9LGVuYWJsZTpmdW5jdGlvbih0KXtudWxsIT10PyhsW3RdLnJlbW92ZUF0dHJpYnV0ZShcImRpc2FibGVkXCIpLGxbdF0uaGFuZGxlLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsXCIwXCIpKTooZC5yZW1vdmVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSxsLmZvckVhY2goZnVuY3Rpb24odCl7dC5yZW1vdmVBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSx0LmhhbmRsZS5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLFwiMFwiKX0pKX0sX19tb3ZlSGFuZGxlczpmdW5jdGlvbih0LGUscil7Ryh0LGUsbSxyKX0sb3B0aW9uczpvLHVwZGF0ZU9wdGlvbnM6ZnVuY3Rpb24oZSx0KXt2YXIgcj1ydCgpLG49W1wibWFyZ2luXCIsXCJsaW1pdFwiLFwicGFkZGluZ1wiLFwicmFuZ2VcIixcImFuaW1hdGVcIixcInNuYXBcIixcInN0ZXBcIixcImZvcm1hdFwiLFwicGlwc1wiLFwidG9vbHRpcHNcIl07bi5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZvaWQgMCE9PWVbdF0mJihvW3RdPWVbdF0pfSk7dmFyIGk9Z3Qobyk7bi5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZvaWQgMCE9PWVbdF0mJihmW3RdPWlbdF0pfSksUz1pLnNwZWN0cnVtLGYubWFyZ2luPWkubWFyZ2luLGYubGltaXQ9aS5saW1pdCxmLnBhZGRpbmc9aS5wYWRkaW5nLGYucGlwcz9UKGYucGlwcyk6TCgpLChmLnRvb2x0aXBzP006aykoKSxtPVtdLGV0KGF0KGUuc3RhcnQpP2Uuc3RhcnQ6cix0KX0sdGFyZ2V0OmQscmVtb3ZlUGlwczpMLHJlbW92ZVRvb2x0aXBzOmssZ2V0UG9zaXRpb25zOmZ1bmN0aW9uKCl7cmV0dXJuIG0uc2xpY2UoKX0sZ2V0VG9vbHRpcHM6ZnVuY3Rpb24oKXtyZXR1cm4gc30sZ2V0T3JpZ2luczpmdW5jdGlvbigpe3JldHVybiBsfSxwaXBzOlR9O3JldHVybiBpdH1mdW5jdGlvbiB6KHQsZSl7aWYoIXR8fCF0Lm5vZGVOYW1lKXRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6IGNyZWF0ZSByZXF1aXJlcyBhIHNpbmdsZSBlbGVtZW50LCBnb3Q6IFwiK3QpO2lmKHQubm9VaVNsaWRlcil0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiBTbGlkZXIgd2FzIGFscmVhZHkgaW5pdGlhbGl6ZWQuXCIpO2U9aih0LGd0KGUpLGUpO3JldHVybiB0Lm5vVWlTbGlkZXI9ZX12YXIgSD17X19zcGVjdHJ1bTp1LGNzc0NsYXNzZXM6cCxjcmVhdGU6en07b3QuY3JlYXRlPXosb3QuY3NzQ2xhc3Nlcz1wLG90LmRlZmF1bHQ9SCxPYmplY3QuZGVmaW5lUHJvcGVydHkob3QsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9KTsiLCJleHBvcnQgY29uc3QgZm9ybWF0TW9uZXkgPSAobW9uZXkpID0+IHtcbiAgcmV0dXJuIG5ldyBJbnRsLk51bWJlckZvcm1hdChcInJ1LVJVXCIpLmZvcm1hdChtb25leSk7XG59O1xuIl19
